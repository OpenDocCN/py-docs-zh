- en: ORM Internals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORM 内部
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/internals.html](https://docs.sqlalchemy.org/en/20/orm/internals.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/internals.html](https://docs.sqlalchemy.org/en/20/orm/internals.html)
- en: Key ORM constructs, not otherwise covered in other sections, are listed here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的 ORM 构造，其他部分未涵盖，列在此处。
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AttributeEventToken](#sqlalchemy.orm.AttributeEventToken) | A token propagated
    throughout the course of a chain of attribute events. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [AttributeEventToken](#sqlalchemy.orm.AttributeEventToken) | 在属性事件链中传播的标记。
    |'
- en: '| [AttributeState](#sqlalchemy.orm.AttributeState) | Provide an inspection
    interface corresponding to a particular attribute on a particular mapped object.
    |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [AttributeState](#sqlalchemy.orm.AttributeState) | 提供相应于特定映射对象上的特定属性的检查接口。
    |'
- en: '| [CascadeOptions](#sqlalchemy.orm.CascadeOptions) | Keeps track of the options
    sent to [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [CascadeOptions](#sqlalchemy.orm.CascadeOptions) | 跟踪发送给 [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") 的选项。 |'
- en: '| [ClassManager](#sqlalchemy.orm.ClassManager) | Tracks state information at
    the class level. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [ClassManager](#sqlalchemy.orm.ClassManager) | 在类级别跟踪状态信息。 |'
- en: '| [ColumnProperty](#sqlalchemy.orm.ColumnProperty) | Describes an object attribute
    that corresponds to a table column or other column expression. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnProperty](#sqlalchemy.orm.ColumnProperty) | 描述与表列或其他列表达式对应的对象属性。 |'
- en: '| [Composite](#sqlalchemy.orm.Composite) | Declarative-compatible front-end
    for the [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")
    class. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [Composite](#sqlalchemy.orm.Composite) | 用于[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")类的与声明兼容的前端。 |'
- en: '| [CompositeProperty](#sqlalchemy.orm.CompositeProperty) | Defines a “composite”
    mapped attribute, representing a collection of columns as one attribute. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [CompositeProperty](#sqlalchemy.orm.CompositeProperty) | 定义“复合”映射属性，将一组列表示为一个属性。
    |'
- en: '| [IdentityMap](#sqlalchemy.orm.IdentityMap) |  |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [IdentityMap](#sqlalchemy.orm.IdentityMap) |  |'
- en: '| [InspectionAttr](#sqlalchemy.orm.InspectionAttr) | A base class applied to
    all ORM objects and attributes that are related to things that can be returned
    by the [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    function. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [InspectionAttr](#sqlalchemy.orm.InspectionAttr) | 应用于所有 ORM 对象和属性的基类，这些对象和属性与可以由[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数返回的内容有关。 |'
- en: '| [InspectionAttrExtensionType](#sqlalchemy.orm.InspectionAttrExtensionType)
    | Symbols indicating the type of extension that a [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") is part of. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [InspectionAttrExtensionType](#sqlalchemy.orm.InspectionAttrExtensionType)
    | 指示 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    所属的扩展类型的符号。 |'
- en: '| [InspectionAttrInfo](#sqlalchemy.orm.InspectionAttrInfo) | Adds the `.info`
    attribute to [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [InspectionAttrInfo](#sqlalchemy.orm.InspectionAttrInfo) | 向 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") 添加 `.info` 属性。 |'
- en: '| [InstanceState](#sqlalchemy.orm.InstanceState) | tracks state information
    at the instance level. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [InstanceState](#sqlalchemy.orm.InstanceState) | 在实例级别跟踪状态信息。 |'
- en: '| [InstrumentedAttribute](#sqlalchemy.orm.InstrumentedAttribute) | Base class
    for [descriptor](../glossary.html#term-descriptor) objects that intercept attribute
    events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    is accessible via the `QueryableAttribute.property` attribute. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [InstrumentedAttribute](#sqlalchemy.orm.InstrumentedAttribute) | 用于代表[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象的描述符对象的基类，以代表[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。实际的 [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 可通过 `QueryableAttribute.property` 属性访问。 |'
- en: '| [LoaderCallableStatus](#sqlalchemy.orm.LoaderCallableStatus) | An enumeration.
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [LoaderCallableStatus](#sqlalchemy.orm.LoaderCallableStatus) | 枚举类型。 |'
- en: '| [Mapped](#sqlalchemy.orm.Mapped) | Represent an ORM mapped attribute on a
    mapped class. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [Mapped](#sqlalchemy.orm.Mapped) | 在映射类上表示 ORM 映射属性。 |'
- en: '| [MappedColumn](#sqlalchemy.orm.MappedColumn) | Maps a single [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") on a class. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [MappedColumn](#sqlalchemy.orm.MappedColumn) | 将单个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")映射到类上。 |'
- en: '| [MappedSQLExpression](#sqlalchemy.orm.MappedSQLExpression) | Declarative
    front-end for the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    class. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [MappedSQLExpression](#sqlalchemy.orm.MappedSQLExpression) | [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") 类的声明性前端。 |'
- en: '| [MapperProperty](#sqlalchemy.orm.MapperProperty) | Represent a particular
    class attribute mapped by [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper").
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [MapperProperty](#sqlalchemy.orm.MapperProperty) | 由 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 映射的特定类属性的表示。 |'
- en: '| [merge_frozen_result](#sqlalchemy.orm.merge_frozen_result)(session, statement,
    frozen_result[, load]) | Merge a [`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") back into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), returning a new [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with [persistent](../glossary.html#term-persistent)
    objects. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [merge_frozen_result](#sqlalchemy.orm.merge_frozen_result)(session, statement,
    frozen_result[, load]) | 将 [`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") 合并回 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，返回一个带有 [persistent](../glossary.html#term-persistent)
    对象的新 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象。 |'
- en: '| [merge_result](#sqlalchemy.orm.merge_result)(query, iterator[, load]) | Merge
    a result into the given [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [merge_result](#sqlalchemy.orm.merge_result)(query, iterator[, load]) | 将结果合并到给定
    [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象的会话中。
    |'
- en: '| [NotExtension](#sqlalchemy.orm.NotExtension) | An enumeration. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [NotExtension](#sqlalchemy.orm.NotExtension) | 一个枚举。 |'
- en: '| [PropComparator](#sqlalchemy.orm.PropComparator) | Defines SQL operations
    for ORM mapped attributes. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [PropComparator](#sqlalchemy.orm.PropComparator) | 为 ORM 映射属性定义 SQL 操作。 |'
- en: '| [QueryableAttribute](#sqlalchemy.orm.QueryableAttribute) | Base class for
    [descriptor](../glossary.html#term-descriptor) objects that intercept attribute
    events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    is accessible via the `QueryableAttribute.property` attribute. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [QueryableAttribute](#sqlalchemy.orm.QueryableAttribute) | [descriptor](../glossary.html#term-descriptor)
    对象的基类，代表 [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    对象的属性事件。可通过 `QueryableAttribute.property` 属性访问实际的 [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。 |'
- en: '| [QueryContext](#sqlalchemy.orm.QueryContext) |  |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [QueryContext](#sqlalchemy.orm.QueryContext) |  |'
- en: '| [Relationship](#sqlalchemy.orm.Relationship) | Describes an object property
    that holds a single item or list of items that correspond to a related database
    table. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [Relationship](#sqlalchemy.orm.Relationship) | 描述一个对象属性，该属性保存与相关数据库表对应的单个项目或项目列表。
    |'
- en: '| [RelationshipDirection](#sqlalchemy.orm.RelationshipDirection) | enumeration
    which indicates the ‘direction’ of a [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"). |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [RelationshipDirection](#sqlalchemy.orm.RelationshipDirection) | 枚举，指示 [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") 的‘方向’。 |'
- en: '| [RelationshipProperty](#sqlalchemy.orm.RelationshipProperty) | Describes
    an object property that holds a single item or list of items that correspond to
    a related database table. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [RelationshipProperty](#sqlalchemy.orm.RelationshipProperty) | 描述一个对象属性，该属性保存与相关数据库表对应的单个项目或项目列表。
    |'
- en: '| [SQLORMExpression](#sqlalchemy.orm.SQLORMExpression) | A type that may be
    used to indicate any ORM-level attribute or object that acts in place of one,
    in the context of SQL expression construction. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [SQLORMExpression](#sqlalchemy.orm.SQLORMExpression) | 一个可用于指示任何 ORM 级别属性或对象的类型，以在
    SQL 表达式构造的上下文中代替之。 |'
- en: '| [Synonym](#sqlalchemy.orm.Synonym) | Declarative front-end for the [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") class. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [Synonym](#sqlalchemy.orm.Synonym) | [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") 类的声明性前端。 |'
- en: '| [SynonymProperty](#sqlalchemy.orm.SynonymProperty) | Denote an attribute
    name as a synonym to a mapped property, in that the attribute will mirror the
    value and expression behavior of another attribute. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [SynonymProperty](#sqlalchemy.orm.SynonymProperty) | 将属性名称表示为另一个属性的同义词，即该属性将镜像另一个属性的值和表达行为。
    |'
- en: '| [UOWTransaction](#sqlalchemy.orm.UOWTransaction) |  |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [UOWTransaction](#sqlalchemy.orm.UOWTransaction) |  |'
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Provide an inspection interface corresponding to a particular attribute on a
    particular mapped object.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定映射对象上的特定属性提供相应的检查接口。
- en: 'The [`AttributeState`](#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    object is accessed via the [`InstanceState.attrs`](#sqlalchemy.orm.InstanceState.attrs
    "sqlalchemy.orm.InstanceState.attrs") collection of a particular [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState"):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState`](#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")对象通过特定[`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")的[`InstanceState.attrs`](#sqlalchemy.orm.InstanceState.attrs
    "sqlalchemy.orm.InstanceState.attrs")集合访问：'
- en: '**Members**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[history](#sqlalchemy.orm.AttributeState.history), [load_history()](#sqlalchemy.orm.AttributeState.load_history),
    [loaded_value](#sqlalchemy.orm.AttributeState.loaded_value), [value](#sqlalchemy.orm.AttributeState.value)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[history](#sqlalchemy.orm.AttributeState.history), [load_history()](#sqlalchemy.orm.AttributeState.load_history),
    [loaded_value](#sqlalchemy.orm.AttributeState.loaded_value), [value](#sqlalchemy.orm.AttributeState.value)'
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Return the current **pre-flush** change history for this attribute, via the
    [`History`](session_api.html#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    interface.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此属性的当前**预刷新**更改历史记录，通过[`History`](session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History")接口。
- en: This method will **not** emit loader callables if the value of the attribute
    is unloaded.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性的值未加载，则此方法**不会**发出加载器可调用。
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The attribute history system tracks changes on a **per flush basis**. Each time
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is flushed, the history of each attribute is reset to empty. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by default autoflushes each time a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is invoked. For options on how to control this, see [Flushing](session_basics.html#session-flushing).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 属性历史系统会**每次刷新**基础上跟踪更改。每次刷新[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，每个属性的历史记录都会被重置为空。[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")默认情况下会在每次调用[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时自动刷新。有关如何控制此行为的选项，请参见[刷新](session_basics.html#session-flushing)。
- en: See also
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeState.load_history()`](#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.load_history()`](#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - 如果值未在本地存在，则使用加载器可调用检索历史。'
- en: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - underlying function'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - 底层函数'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Return the current **pre-flush** change history for this attribute, via the
    [`History`](session_api.html#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    interface.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此属性的当前**预刷新**更改历史记录，通过[`History`](session_api.html#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History")接口。
- en: This method **will** emit loader callables if the value of the attribute is
    unloaded.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性的值未加载，则此方法**会**发出加载器可调用。
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The attribute history system tracks changes on a **per flush basis**. Each time
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is flushed, the history of each attribute is reset to empty. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by default autoflushes each time a [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is invoked. For options on how to control this, see [Flushing](session_basics.html#session-flushing).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 属性历史系统会**每次刷新**基础上跟踪更改。每次刷新[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，每个属性的历史记录都会被重置为空。[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")默认情况下会在每次调用[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时自动刷新。有关如何控制此行为的选项，请参见[刷新](session_basics.html#session-flushing)。
- en: See also
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeState.history`](#sqlalchemy.orm.AttributeState.history "sqlalchemy.orm.AttributeState.history")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.history`](#sqlalchemy.orm.AttributeState.history "sqlalchemy.orm.AttributeState.history")'
- en: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - underlying function'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`get_history()`](session_api.html#sqlalchemy.orm.attributes.get_history "sqlalchemy.orm.attributes.get_history")
    - 底层函数'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The current value of this attribute as loaded from the database.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库加载的当前属性值。
- en: If the value has not been loaded, or is otherwise not present in the object’s
    dictionary, returns NO_VALUE.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值尚未加载，或者在对象的字典中不存在，则返回 NO_VALUE。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Return the value of this attribute.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此属性的值。
- en: This operation is equivalent to accessing the object’s attribute directly or
    via `getattr()`, and will fire off any pending loader callables if needed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作相当于直接访问对象的属性或通过 `getattr()` 访问，并在需要时触发任何挂起的加载器可调用。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Keeps track of the options sent to [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪发送到 [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") 的选项。
- en: '**Class signature**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.CascadeOptions`](#sqlalchemy.orm.CascadeOptions "sqlalchemy.orm.CascadeOptions")
    (`builtins.frozenset`, `typing.Generic`)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.CascadeOptions`](#sqlalchemy.orm.CascadeOptions "sqlalchemy.orm.CascadeOptions")
    (`builtins.frozenset`, `typing.Generic`)
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tracks state information at the class level.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在类级别跟踪状态信息。
- en: '**Members**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[deferred_scalar_loader](#sqlalchemy.orm.ClassManager.deferred_scalar_loader),
    [expired_attribute_loader](#sqlalchemy.orm.ClassManager.expired_attribute_loader),
    [has_parent()](#sqlalchemy.orm.ClassManager.has_parent), [manage()](#sqlalchemy.orm.ClassManager.manage),
    [state_getter()](#sqlalchemy.orm.ClassManager.state_getter), [unregister()](#sqlalchemy.orm.ClassManager.unregister)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[deferred_scalar_loader](#sqlalchemy.orm.ClassManager.deferred_scalar_loader),
    [expired_attribute_loader](#sqlalchemy.orm.ClassManager.expired_attribute_loader),
    [has_parent()](#sqlalchemy.orm.ClassManager.has_parent), [manage()](#sqlalchemy.orm.ClassManager.manage),
    [state_getter()](#sqlalchemy.orm.ClassManager.state_getter), [unregister()](#sqlalchemy.orm.ClassManager.unregister)'
- en: '**Class signature**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.ClassManager`](#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")
    (`sqlalchemy.util.langhelpers.HasMemoized`, `builtins.dict`, `typing.Generic`,
    `sqlalchemy.event.registry.EventTarget`)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.ClassManager`](#sqlalchemy.orm.ClassManager "sqlalchemy.orm.ClassManager")
    (`sqlalchemy.util.langhelpers.HasMemoized`, `builtins.dict`, `typing.Generic`,
    `sqlalchemy.event.registry.EventTarget`)
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Deprecated since version 1.4: The ClassManager.deferred_scalar_loader attribute
    is now named expired_attribute_loader'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始已弃用：ClassManager.deferred_scalar_loader 属性现在命名为 expired_attribute_loader
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: previously known as deferred_scalar_loader
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以前称为 deferred_scalar_loader
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: TODO
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Mark this instance as the manager for its class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将此实例标记为其类的管理器。
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return a (instance) -> InstanceState callable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 (实例) -> InstanceState 可调用。
- en: “state getter” callables should raise either KeyError or AttributeError if no
    InstanceState could be found for the instance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到实例的 InstanceState，"state getter" 可调用应引发 KeyError 或 AttributeError。
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: remove all instrumentation established by this ClassManager.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 删除此 ClassManager 建立的所有检测工具。
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Describes an object attribute that corresponds to a table column or other column
    expression.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 描述对应于表列或其他列表达式的对象属性。
- en: Public constructor is the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") function.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 函数。
- en: '**Members**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[expressions](#sqlalchemy.orm.ColumnProperty.Comparator.expressions), [operate()](#sqlalchemy.orm.ColumnProperty.Comparator.operate),
    [reverse_operate()](#sqlalchemy.orm.ColumnProperty.Comparator.reverse_operate),
    [columns_to_assign](#sqlalchemy.orm.ColumnProperty.columns_to_assign), [declarative_scan()](#sqlalchemy.orm.ColumnProperty.declarative_scan),
    [do_init()](#sqlalchemy.orm.ColumnProperty.do_init), [expression](#sqlalchemy.orm.ColumnProperty.expression),
    [instrument_class()](#sqlalchemy.orm.ColumnProperty.instrument_class), [mapper_property_to_assign](#sqlalchemy.orm.ColumnProperty.mapper_property_to_assign),
    [merge()](#sqlalchemy.orm.ColumnProperty.merge)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[expressions](#sqlalchemy.orm.ColumnProperty.Comparator.expressions), [operate()](#sqlalchemy.orm.ColumnProperty.Comparator.operate),
    [reverse_operate()](#sqlalchemy.orm.ColumnProperty.Comparator.reverse_operate),
    [columns_to_assign](#sqlalchemy.orm.ColumnProperty.columns_to_assign), [declarative_scan()](#sqlalchemy.orm.ColumnProperty.declarative_scan),
    [do_init()](#sqlalchemy.orm.ColumnProperty.do_init), [expression](#sqlalchemy.orm.ColumnProperty.expression),
    [instrument_class()](#sqlalchemy.orm.ColumnProperty.instrument_class), [mapper_property_to_assign](#sqlalchemy.orm.ColumnProperty.mapper_property_to_assign),
    [merge()](#sqlalchemy.orm.ColumnProperty.merge)'
- en: '**Class signature**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    (`sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm.StrategizedProperty`, `sqlalchemy.orm._IntrospectsAnnotations`,
    [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"))
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")（`sqlalchemy.orm._MapsColumns`，`sqlalchemy.orm.StrategizedProperty`，`sqlalchemy.orm._IntrospectsAnnotations`，[`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified")）
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Produce boolean, comparison, and other operators for [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") attributes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")属性生成布尔值、比较和其他操作符。
- en: See the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for a brief overview.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")的文档以获取简要概述。
- en: See also
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](../core/custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '**Class signature**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.ColumnProperty.Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"))
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.ColumnProperty.Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator
    "sqlalchemy.orm.ColumnProperty.Comparator")（`sqlalchemy.util.langhelpers.MemoizedSlots`，[`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")）
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The full sequence of columns referenced by this
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由此引用的列的完整序列
- en: attribute, adjusted for any aliasing in progress.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，根据正在进行的任何别名调整。
- en: New in version 1.3.17.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.17中的新功能。
- en: See also
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Mapping a Class against Multiple Tables](nonstandard_mappings.html#maptojoin)
    - usage example'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[将类映射到多个表](nonstandard_mappings.html#maptojoin) - 用法示例'
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Operate on an argument.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写这个方法可以使通用行为应用于所有操作。例如，重写[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左右两侧：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Parameters:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘other’一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊操作符（如`ColumnOperators.contains()`）传递。'
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Reverse operate on an argument.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.ColumnProperty.Comparator.operate
    "sqlalchemy.orm.ColumnProperty.Comparator.operate").
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与[`operate()`](#sqlalchemy.orm.ColumnProperty.Comparator.operate "sqlalchemy.orm.ColumnProperty.Comparator.operate")相同。
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Perform class-specific initializaton at early declarative scanning time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期声明扫描时执行类特定的初始化。
- en: New in version 2.0.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Perform subclass-specific initialization post-mapper-creation steps.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在映射创建后执行子类特定的初始化步骤。
- en: This is a template method called by the `MapperProperty` object’s init() method.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`MapperProperty`对象的init()方法调用的模板方法。
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Return the primary column or expression for this ColumnProperty.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此ColumnProperty的主列或表达式。
- en: 'E.g.:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Composing from Column Properties at Mapping Time](mapped_sql_expr.html#mapper-column-property-sql-expressions-composed)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[在映射时从列属性组合](mapped_sql_expr.html#mapper-column-property-sql-expressions-composed)'
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Mapper调用的钩子，用于初始化由此MapperProperty管理的类属性的仪器化。
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ���里的`MapperProperty`通常会调用属性模块以设置`InstrumentedAttribute`。
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是设置`InstrumentedAttribute`的两个步骤中的第一步，并且在映射器设置过程的早期调用。
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步通常是`init_class_attribute`步骤，通过`StrategizedProperty`通过`post_instrument_class()`钩子调用。此步骤为`InstrumentedAttribute`分配附加状态（特别是“impl”），该状态在`MapperProperty`确定需要执行什么类型的持久性管理后确定（例如标量，对象，集合等）。
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将此`MapperProperty`表示的属性从源对象合并到目标对象。
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Declarative-compatible front-end for the [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") class.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")类兼容的声明性前端。
- en: Public constructor is the [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是[`composite()`](composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")函数。
- en: 'Changed in version 2.0: Added [`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")
    as a Declarative compatible subclass of [`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty").'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：将[`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")添加为[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")的声明兼容子类。
- en: See also
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Composite Column Types](composites.html#mapper-composite)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[复合列类型](composites.html#mapper-composite)'
- en: '**Class signature**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")
    ([`sqlalchemy.orm.descriptor_props.CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.descriptor_props.CompositeProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")（[`sqlalchemy.orm.descriptor_props.CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")，`sqlalchemy.orm.base._DeclarativeMapped`）
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Defines a “composite” mapped attribute, representing a collection of columns
    as one attribute.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个“复合”映射属性，表示一组列作为一个属性。
- en: '[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")
    is constructed using the [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")是使用[`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数构建的。'
- en: See also
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Composite Column Types](composites.html#mapper-composite)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[复合列类型](composites.html#mapper-composite)'
- en: '**Members**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[create_row_processor()](#sqlalchemy.orm.CompositeProperty.CompositeBundle.create_row_processor),
    [columns_to_assign](#sqlalchemy.orm.CompositeProperty.columns_to_assign), [declarative_scan()](#sqlalchemy.orm.CompositeProperty.declarative_scan),
    [do_init()](#sqlalchemy.orm.CompositeProperty.do_init), [get_history()](#sqlalchemy.orm.CompositeProperty.get_history),
    [instrument_class()](#sqlalchemy.orm.CompositeProperty.instrument_class), [mapper_property_to_assign](#sqlalchemy.orm.CompositeProperty.mapper_property_to_assign)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[create_row_processor()](#sqlalchemy.orm.CompositeProperty.CompositeBundle.create_row_processor)，[columns_to_assign](#sqlalchemy.orm.CompositeProperty.columns_to_assign)，[declarative_scan()](#sqlalchemy.orm.CompositeProperty.declarative_scan)，[do_init()](#sqlalchemy.orm.CompositeProperty.do_init)，[get_history()](#sqlalchemy.orm.CompositeProperty.get_history)，[instrument_class()](#sqlalchemy.orm.CompositeProperty.instrument_class)，[mapper_property_to_assign](#sqlalchemy.orm.CompositeProperty.mapper_property_to_assign)'
- en: '**Class signature**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.CompositeProperty`](#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") (`sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm._IntrospectsAnnotations`,
    `sqlalchemy.orm.descriptor_props.DescriptorProperty`)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.CompositeProperty`](#sqlalchemy.orm.CompositeProperty "sqlalchemy.orm.CompositeProperty")（`sqlalchemy.orm._MapsColumns`，`sqlalchemy.orm._IntrospectsAnnotations`，`sqlalchemy.orm.descriptor_props.DescriptorProperty`）
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Produce boolean, comparison, and other operators for [`Composite`](#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") attributes.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")属性生成布尔值，比较和其他运算符。
- en: See the example in [Redefining Comparison Operations for Composites](composites.html#composite-operations)
    for an overview of usage , as well as the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator").
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[Redefining Comparison Operations for Composites](composites.html#composite-operations)中的示例，以了解用法概述，以及[`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")的文档。
- en: See also
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的操作符](../core/custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '**Class signature**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.CompositeProperty.Comparator`](#sqlalchemy.orm.CompositeProperty.Comparator
    "sqlalchemy.orm.CompositeProperty.Comparator") ([`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"))
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.CompositeProperty.Comparator`](#sqlalchemy.orm.CompositeProperty.Comparator
    "sqlalchemy.orm.CompositeProperty.Comparator")（[`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")）
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Class signature**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.CompositeProperty.CompositeBundle`](#sqlalchemy.orm.CompositeProperty.CompositeBundle
    "sqlalchemy.orm.CompositeProperty.CompositeBundle") ([`sqlalchemy.orm.Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle"))
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.CompositeProperty.CompositeBundle`](#sqlalchemy.orm.CompositeProperty.CompositeBundle
    "sqlalchemy.orm.CompositeProperty.CompositeBundle")（[`sqlalchemy.orm.Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")）
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Produce the “row processing” function for this [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")生成“行处理”函数。
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被子类重写以在提取结果时提供自定义行为。该方法在查询执行时传递了语句对象和一组“行处理”函数；当给定一个结果行时，这些处理函数将返回单个属性值，然后可以将其调整为任何类型的返回数据结构。
- en: 'The example below illustrates replacing the usual [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将通常的[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")返回结构替换为直接的Python字典：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'A result from the above [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") will return dictionary values:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的结果将返回字典值：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Perform class-specific initializaton at early declarative scanning time.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的声明扫描时执行类特定的初始化。
- en: New in version 2.0.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.0版开始。
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Initialization which occurs after the [`Composite`](#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite") has been associated with its parent mapper.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")与其父Mapper关联之后发生的初始化。
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Provided for userland code that uses attributes.get_history().
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为使用`attributes.get_history()`的用户代码提供。
- en: '[PRE39]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 由Mapper调用的钩子，用于启动由此MapperProperty管理的类属性的检测。
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的MapperProperty通常会调用attributes模块来设置一个InstrumentedAttribute。
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是设置InstrumentedAttribute的两个步骤中的第一个步骤，并且在Mapper设置过程中的早期阶段调用。
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步通常是init_class_attribute步骤，通过post_instrument_class()钩子从StrategizedProperty调用。此步骤为InstrumentedAttribute分配了附加状态（特别是“impl”），该状态在MapperProperty确定需要执行什么类型的持久性管理之后确定。
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: A token propagated throughout the course of a chain of attribute events.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在一系列属性事件中传播的令牌。
- en: Serves as an indicator of the source of the event and also provides a means
    of controlling propagation across a chain of attribute operations.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 用作事件源的指示器，还提供了一种控制在一系列属性操作中传播的方法。
- en: The `Event` object is sent as the `initiator` argument when dealing with events
    such as [`AttributeEvents.append()`](events.html#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append"), [`AttributeEvents.set()`](events.html#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set"), and [`AttributeEvents.remove()`](events.html#sqlalchemy.orm.AttributeEvents.remove
    "sqlalchemy.orm.AttributeEvents.remove").
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 处理事件时，`Event`对象作为`initiator`参数发送，例如处理[`AttributeEvents.append()`](events.html#sqlalchemy.orm.AttributeEvents.append
    "sqlalchemy.orm.AttributeEvents.append")、[`AttributeEvents.set()`](events.html#sqlalchemy.orm.AttributeEvents.set
    "sqlalchemy.orm.AttributeEvents.set")和[`AttributeEvents.remove()`](events.html#sqlalchemy.orm.AttributeEvents.remove
    "sqlalchemy.orm.AttributeEvents.remove")等事件。
- en: The `Event` object is currently interpreted by the backref event handlers, and
    is used to control the propagation of operations across two mutually-dependent
    attributes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`Event`对象当前由反向引用事件处理程序解释，并用于控制操作在两个相互依赖属性之间的传播。'
- en: 'Changed in version 2.0: Changed the name from `AttributeEvent` to `AttributeEventToken`.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：将名称从`AttributeEvent`更改为`AttributeEventToken`。
- en: 'Attribute impl:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 属性实现：
- en: The `AttributeImpl` which is the current event initiator.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当前事件发起者的`AttributeImpl`。
- en: 'Attribute op:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 属性操作：
- en: The symbol `OP_APPEND`, `OP_REMOVE`, `OP_REPLACE`, or `OP_BULK_REPLACE`, indicating
    the source operation.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 符号`OP_APPEND`、`OP_REMOVE`、`OP_REPLACE`或`OP_BULK_REPLACE`，指示源操作。
- en: '[PRE42]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Members**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[check_modified()](#sqlalchemy.orm.IdentityMap.check_modified)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[check_modified()](#sqlalchemy.orm.IdentityMap.check_modified)'
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: return True if any InstanceStates present have been marked as ‘modified’.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在任何已标记为“修改”的InstanceState，则返回True。
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: A base class applied to all ORM objects and attributes that are related to things
    that can be returned by the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于所有与可以由[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数返回的对象相关的ORM对象和属性的基类。
- en: The attributes defined here allow the usage of simple boolean checks to test
    basic facts about the object returned.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此处定义的属性允许使用简单的布尔检查来测试有关返回对象的基本事实。
- en: '**Members**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[extension_type](#sqlalchemy.orm.InspectionAttr.extension_type), [is_aliased_class](#sqlalchemy.orm.InspectionAttr.is_aliased_class),
    [is_attribute](#sqlalchemy.orm.InspectionAttr.is_attribute), [is_bundle](#sqlalchemy.orm.InspectionAttr.is_bundle),
    [is_clause_element](#sqlalchemy.orm.InspectionAttr.is_clause_element), [is_instance](#sqlalchemy.orm.InspectionAttr.is_instance),
    [is_mapper](#sqlalchemy.orm.InspectionAttr.is_mapper), [is_property](#sqlalchemy.orm.InspectionAttr.is_property),
    [is_selectable](#sqlalchemy.orm.InspectionAttr.is_selectable)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[extension_type](#sqlalchemy.orm.InspectionAttr.extension_type), [is_aliased_class](#sqlalchemy.orm.InspectionAttr.is_aliased_class),
    [is_attribute](#sqlalchemy.orm.InspectionAttr.is_attribute), [is_bundle](#sqlalchemy.orm.InspectionAttr.is_bundle),
    [is_clause_element](#sqlalchemy.orm.InspectionAttr.is_clause_element), [is_instance](#sqlalchemy.orm.InspectionAttr.is_instance),
    [is_mapper](#sqlalchemy.orm.InspectionAttr.is_mapper), [is_property](#sqlalchemy.orm.InspectionAttr.is_property),
    [is_selectable](#sqlalchemy.orm.InspectionAttr.is_selectable)'
- en: While the boolean checks here are basically the same as using the Python isinstance()
    function, the flags here can be used without the need to import all of these classes,
    and also such that the SQLAlchemy class system can change while leaving the flags
    here intact for forwards-compatibility.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这里的布尔检查基本上与使用Python的isinstance()函数相同，但这里的标志可以在不需要导入所有这些类的情况下使用，并且SQLAlchemy类系统可以更改，同时保持这里的标志不变以实现向前兼容性。
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为`NotExtension.NOT_EXTENSION`。
- en: See also
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HybridExtensionType`](extensions/hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](extensions/hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE46]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: True if this object is an instance of [`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`AliasedClass`](queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")的实例，则返回True。
- en: '[PRE47]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: True if this object is a Python [descriptor](../glossary.html#term-descriptor).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是Python的[描述符](../glossary.html#term-descriptor)的实例，则返回True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以指代许多类型之一。通常是一个[`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute")，它代表一个[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")处理属性事件。但也可以是一个扩展类型，如[`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")或[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")将指代一个标识特定子类型的常量。
- en: See also
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE48]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: True if this object is an instance of [`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Bundle`](queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的实例，则返回True。
- en: '[PRE49]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: True if this object is an instance of [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")的实例，则返回True。
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: True if this object is an instance of [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")的实例，则返回True。
- en: '[PRE51]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: True if this object is an instance of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的实例，则返回True。
- en: '[PRE52]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: True if this object is an instance of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")的实例，则返回True。
- en: '[PRE53]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Return True if this object is an instance of [`Selectable`](../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Selectable`](../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的实例，则返回True。
- en: '[PRE54]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Adds the `.info` attribute to [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 将`.info`属性添加到[`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")。
- en: The rationale for [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    vs. [`InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo "sqlalchemy.orm.InspectionAttrInfo")
    is that the former is compatible as a mixin for classes that specify `__slots__`;
    this is essentially an implementation artifact.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")与[`InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.InspectionAttrInfo")之间的理由是前者兼容作为指定`__slots__`的类的mixin；这本质上是一种实现工件。'
- en: '**Members**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[info](#sqlalchemy.orm.InspectionAttrInfo.info)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[info](#sqlalchemy.orm.InspectionAttrInfo.info)'
- en: '**Class signature**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.InspectionAttrInfo") ([`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo "sqlalchemy.orm.InspectionAttrInfo")（[`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")）
- en: '[PRE55]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    关联。
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时生成。或者，它可以作为构造函数参数指定给 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 或 [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") 函数。
- en: See also
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[PRE56]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: tracks state information at the instance level.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例级别跟踪状态信息。
- en: The [`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is a key object used by the SQLAlchemy ORM in order to track the state of an object;
    it is created the moment an object is instantiated, typically as a result of [instrumentation](../glossary.html#term-instrumentation)
    which SQLAlchemy applies to the `__init__()` method of the class.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    是 SQLAlchemy ORM 中用于跟踪对象状态的关键对象；它在对象实例化时创建，通常是作为 SQLAlchemy 应用于类的 `__init__()`
    方法的 [instrumentation](../glossary.html#term-instrumentation) 的结果。'
- en: '[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    is also a semi-public object, available for runtime inspection as to the state
    of a mapped instance, including information such as its current status within
    a particular [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and details about data on individual attributes. The public API in order to acquire
    a [`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") system:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    也是一个半公开对象，可用于运行时检查映射实例的状态，包括其在特定 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中的当前状态以及有关各个属性的数据的详细信息。获取 [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 对象的公共 API 是使用 [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") 系统：'
- en: '[PRE57]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Inspection of Mapped Instances](mapping_styles.html#orm-mapper-inspection-instancestate)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[映射实例的检查](mapping_styles.html#orm-mapper-inspection-instancestate)'
- en: '**Members**'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[async_session](#sqlalchemy.orm.InstanceState.async_session), [attrs](#sqlalchemy.orm.InstanceState.attrs),
    [callables](#sqlalchemy.orm.InstanceState.callables), [deleted](#sqlalchemy.orm.InstanceState.deleted),
    [detached](#sqlalchemy.orm.InstanceState.detached), [dict](#sqlalchemy.orm.InstanceState.dict),
    [expired_attributes](#sqlalchemy.orm.InstanceState.expired_attributes), [has_identity](#sqlalchemy.orm.InstanceState.has_identity),
    [identity](#sqlalchemy.orm.InstanceState.identity), [identity_key](#sqlalchemy.orm.InstanceState.identity_key),
    [is_instance](#sqlalchemy.orm.InstanceState.is_instance), [mapper](#sqlalchemy.orm.InstanceState.mapper),
    [object](#sqlalchemy.orm.InstanceState.object), [pending](#sqlalchemy.orm.InstanceState.pending),
    [persistent](#sqlalchemy.orm.InstanceState.persistent), [session](#sqlalchemy.orm.InstanceState.session),
    [transient](#sqlalchemy.orm.InstanceState.transient), [unloaded](#sqlalchemy.orm.InstanceState.unloaded),
    [unloaded_expirable](#sqlalchemy.orm.InstanceState.unloaded_expirable), [unmodified](#sqlalchemy.orm.InstanceState.unmodified),
    [unmodified_intersection()](#sqlalchemy.orm.InstanceState.unmodified_intersection),
    [was_deleted](#sqlalchemy.orm.InstanceState.was_deleted)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[async_session](#sqlalchemy.orm.InstanceState.async_session), [attrs](#sqlalchemy.orm.InstanceState.attrs),
    [callables](#sqlalchemy.orm.InstanceState.callables), [deleted](#sqlalchemy.orm.InstanceState.deleted),
    [detached](#sqlalchemy.orm.InstanceState.detached), [dict](#sqlalchemy.orm.InstanceState.dict),
    [expired_attributes](#sqlalchemy.orm.InstanceState.expired_attributes), [has_identity](#sqlalchemy.orm.InstanceState.has_identity),
    [identity](#sqlalchemy.orm.InstanceState.identity), [identity_key](#sqlalchemy.orm.InstanceState.identity_key),
    [is_instance](#sqlalchemy.orm.InstanceState.is_instance), [mapper](#sqlalchemy.orm.InstanceState.mapper),
    [object](#sqlalchemy.orm.InstanceState.object), [pending](#sqlalchemy.orm.InstanceState.pending),
    [persistent](#sqlalchemy.orm.InstanceState.persistent), [session](#sqlalchemy.orm.InstanceState.session),
    [transient](#sqlalchemy.orm.InstanceState.transient), [unloaded](#sqlalchemy.orm.InstanceState.unloaded),
    [unloaded_expirable](#sqlalchemy.orm.InstanceState.unloaded_expirable), [unmodified](#sqlalchemy.orm.InstanceState.unmodified),
    [unmodified_intersection()](#sqlalchemy.orm.InstanceState.unmodified_intersection),
    [was_deleted](#sqlalchemy.orm.InstanceState.was_deleted)'
- en: '**Class signature**'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    ([`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    ([`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `typing.Generic`)
- en: '[PRE58]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Return the owning [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") for this instance, or `None` if none available.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此实例的拥有 [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，如果没有可用，则返回 `None`。
- en: This attribute is only non-None when the `sqlalchemy.ext.asyncio` API is in
    use for this ORM object. The returned [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") object will be a proxy for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object that would be returned from the [`InstanceState.session`](#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") attribute for this [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当此 ORM 对象使用 `sqlalchemy.ext.asyncio` API 时，此属性才不为 `None`。返回的 [`AsyncSession`](extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象将是一个代理，用于表示此 [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") 的 [`InstanceState.session`](#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") 属性将返回的 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象。
- en: New in version 1.4.18.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.18 中的新功能。
- en: See also
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Asynchronous I/O (asyncio)](extensions/asyncio.html)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[异步 I/O（asyncio）](extensions/asyncio.html)'
- en: '[PRE59]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Return a namespace representing each attribute on the mapped object, including
    its current value and history.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示映射对象上每个属性的命名空间，包括其当前值和历史记录。
- en: The returned object is an instance of [`AttributeState`](#sqlalchemy.orm.AttributeState
    "sqlalchemy.orm.AttributeState"). This object allows inspection of the current
    data within an attribute as well as attribute history since the last flush.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象是 [`AttributeState`](#sqlalchemy.orm.AttributeState "sqlalchemy.orm.AttributeState")
    的实例。此对象允许检查属性内的当前数据以及自上次刷新以来的属性历史记录。
- en: '[PRE60]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A namespace where a per-state loader callable can be associated.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 可以关联每个状态加载器可调用的命名空间。
- en: In SQLAlchemy 1.0, this is only used for lazy loaders / deferred loaders that
    were set up via query option.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 1.0 中，这仅用于通过查询选项设置的延迟加载器/延迟加载器。
- en: Previously, callables was used also to indicate expired attributes by storing
    a link to the InstanceState itself in this dictionary. This role is now handled
    by the expired_attributes set.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，可调用函数还用于通过在此字典中存储与 InstanceState 本身的链接来指示过期属性。现在，这个角色由 expired_attributes
    集合处理。
- en: '[PRE61]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Return `True` if the object is [deleted](../glossary.html#term-deleted).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象已被[删除](../glossary.html#term-deleted)，则返回`True`。
- en: An object that is in the deleted state is guaranteed to not be within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") of its parent [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"); however if the session’s transaction is rolled back,
    the object will be restored to the persistent state and the identity map.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 处于删除状态的对象保证不在其父[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") 中；但是如果会话的事务被回滚，对象将被恢复到持久状态和标识映射。
- en: Note
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    attribute refers to a specific state of the object that occurs between the “persistent”
    and “detached” states; once the object is [detached](../glossary.html#term-detached),
    the [`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    attribute **no longer returns True**; in order to detect that a state was deleted,
    regardless of whether or not the object is associated with a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), use the [`InstanceState.was_deleted`](#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted") accessor.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    属性指的是对象在“持久”状态和“分离”状态之间发生的特定状态；一旦对象被[分离](../glossary.html#term-detached)，[`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") 属性**不再返回 True**；为了检测状态是否已删除，无论对象是否与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联，都可以使用[`InstanceState.was_deleted`](#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted") 访问器。'
- en: See also
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE62]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return `True` if the object is [detached](../glossary.html#term-detached).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象是[分离](../glossary.html#term-detached)，则返回`True`。
- en: See also
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE63]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Return the instance dict used by the object.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象使用的实例字典。
- en: Under normal circumstances, this is always synonymous with the `__dict__` attribute
    of the mapped object, unless an alternative instrumentation system has been configured.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，这通常与映射对象的`__dict__`属性同义，除非已配置了替代的仪器系统。
- en: In the case that the actual object has been garbage collected, this accessor
    returns a blank dictionary.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实际对象已经被垃圾回收，此访问器将返回一个空字典。
- en: '[PRE64]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The set of keys which are ‘expired’ to be loaded by the manager’s deferred scalar
    loader, assuming no pending changes.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 由管理器的延迟标量加载器加载的‘过期’键集合，假设没有挂起的更改。
- en: see also the `unmodified` collection which is intersected against this set when
    a refresh operation occurs.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 还请参见在刷新操作发生时与此集合相交的`unmodified`集合。
- en: '[PRE65]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Return `True` if this object has an identity key.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象具有标识键，则返回`True`。
- en: This should always have the same value as the expression `state.persistent`
    or `state.detached`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这应始终具有与表达式 `state.persistent` 或 `state.detached` 相同的值。
- en: '[PRE66]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Return the mapped identity of the mapped object. This is the primary key identity
    as persisted by the ORM which can always be passed directly to [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get").
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 返回映射对象的映射标识。这是 ORM 持久化的主键标识，始终可以直接传递给[`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")。
- en: Returns `None` if the object has no primary key identity.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象没有主键标识，则返回`None`。
- en: Note
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: An object which is [transient](../glossary.html#term-transient) or [pending](../glossary.html#term-pending)
    does **not** have a mapped identity until it is flushed, even if its attributes
    include primary key values.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 对象在刷新之前是[瞬态](../glossary.html#term-transient)或[挂起](../glossary.html#term-pending)的情况下，**没有**映射的标识，即使其属性包括主键值。
- en: '[PRE67]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Return the identity key for the mapped object.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 返回映射对象的标识键。
- en: This is the key used to locate the object within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") mapping. It contains the identity as returned
    by [`identity`](#sqlalchemy.orm.InstanceState.identity "sqlalchemy.orm.InstanceState.identity")
    within it.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于在[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")映射中定位对象的键。它包含由[`identity`](#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity")返回的标识。
- en: '[PRE68]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: True if this object is an instance of [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")的实例，则返回`True`。
- en: '[PRE69]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    used for this mapped object.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于此映射对象的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: '[PRE70]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Return the mapped object represented by this [`InstanceState`](#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`InstanceState`](#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")表示的映射对象。
- en: Returns None if the object has been garbage collected
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象已被垃圾收集，则返回`None`。
- en: '[PRE71]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Return `True` if the object is [pending](../glossary.html#term-pending).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象是[挂起的](../glossary.html#term-pending)，则返回`True`。
- en: See also
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE72]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Return `True` if the object is [persistent](../glossary.html#term-persistent).
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象是[持久的](../glossary.html#term-persistent)，则返回`True`。
- en: An object that is in the persistent state is guaranteed to be within the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") of its parent [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 处于持久状态的对象保证位于其父[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")中。
- en: See also
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE73]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Return the owning [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for this instance, or `None` if none available.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此实例的拥有[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，如果没有可用的则返回`None`。
- en: Note that the result here can in some cases be *different* from that of `obj
    in session`; an object that’s been deleted will report as not `in session`, however
    if the transaction is still in progress, this attribute will still refer to that
    session. Only when the transaction is completed does the object become fully detached
    under normal circumstances.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此处的结果在某些情况下可能与`obj in session`的结果*不同*；已删除的对象将报告为不在`session`中，但是如果事务仍在进行中，则此属性仍将指向该会话。通常情况下，只有在事务完成时，对象才会完全分离。
- en: See also
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState.async_session`](#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session")'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.async_session`](#sqlalchemy.orm.InstanceState.async_session
    "sqlalchemy.orm.InstanceState.async_session")'
- en: '[PRE74]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Return `True` if the object is [transient](../glossary.html#term-transient).
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象是[瞬时的](../glossary.html#term-transient)，则返回`True`。
- en: See also
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE75]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return the set of keys which do not have a loaded value.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 返回不具有加载值的键的集合。
- en: This includes expired attributes and any other attribute that was never populated
    or modified.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括已过期的属性和任何未填充或未修改的属性。
- en: '[PRE76]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Synonymous with [`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded").
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded "sqlalchemy.orm.InstanceState.unloaded")同义。
- en: 'Deprecated since version 2.0: The [`InstanceState.unloaded_expirable`](#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") attribute is deprecated. Please
    use [`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded "sqlalchemy.orm.InstanceState.unloaded").'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0起已弃用：[`InstanceState.unloaded_expirable`](#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable")属性已弃用。请使用[`InstanceState.unloaded`](#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded")。
- en: This attribute was added as an implementation-specific detail at some point
    and should be considered to be private.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性在某个时候添加为实现特定的细节，并且应被视为私有。
- en: '[PRE77]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Return the set of keys which have no uncommitted changes
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 返回没有未提交更改的键的集合。
- en: '[PRE78]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Return self.unmodified.intersection(keys).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 返回self.unmodified.intersection(keys)。
- en: '[PRE79]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Return True if this object is or was previously in the “deleted” state and has
    not been reverted to persistent.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象处于“已删除”状态或先前处于“已删除”状态，并且未恢复为持久状态，则返回True。
- en: This flag returns True once the object was deleted in flush. When the object
    is expunged from the session either explicitly or via transaction commit and enters
    the “detached” state, this flag will continue to report True.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 该标志一旦对象在刷新时被删除就会返回True。当对象被从会话中显式地删除或通过事务提交并进入“分离”状态时，此标志将继续报告True。
- en: See also
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    - refers to the “deleted” state'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.deleted`](#sqlalchemy.orm.InstanceState.deleted "sqlalchemy.orm.InstanceState.deleted")
    - 指的是“已删除”状态'
- en: '[`was_deleted()`](session_api.html#sqlalchemy.orm.util.was_deleted "sqlalchemy.orm.util.was_deleted")
    - standalone function'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[`was_deleted()`](session_api.html#sqlalchemy.orm.util.was_deleted "sqlalchemy.orm.util.was_deleted")
    - 独立函数'
- en: '[Quickie Intro to Object States](session_state_management.html#session-object-states)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[对象状态简介](session_state_management.html#session-object-states)'
- en: '[PRE80]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Base class for [descriptor](../glossary.html#term-descriptor) objects that intercept
    attribute events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") is accessible via the `QueryableAttribute.property`
    attribute.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代表[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象拦截属性事件的描述符对象的基类。实际的[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")可通过`QueryableAttribute.property`属性访问。
- en: See also
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
- en: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
- en: '**Class signature**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") ([`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"))
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.orm.InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") ([`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"))
- en: '[PRE81]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: An enumeration.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ATTR_EMPTY](#sqlalchemy.orm.LoaderCallableStatus.ATTR_EMPTY), [ATTR_WAS_SET](#sqlalchemy.orm.LoaderCallableStatus.ATTR_WAS_SET),
    [NEVER_SET](#sqlalchemy.orm.LoaderCallableStatus.NEVER_SET), [NO_VALUE](#sqlalchemy.orm.LoaderCallableStatus.NO_VALUE),
    [PASSIVE_CLASS_MISMATCH](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_CLASS_MISMATCH),
    [PASSIVE_NO_RESULT](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_NO_RESULT)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[ATTR_EMPTY](#sqlalchemy.orm.LoaderCallableStatus.ATTR_EMPTY), [ATTR_WAS_SET](#sqlalchemy.orm.LoaderCallableStatus.ATTR_WAS_SET),
    [NEVER_SET](#sqlalchemy.orm.LoaderCallableStatus.NEVER_SET), [NO_VALUE](#sqlalchemy.orm.LoaderCallableStatus.NO_VALUE),
    [PASSIVE_CLASS_MISMATCH](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_CLASS_MISMATCH),
    [PASSIVE_NO_RESULT](#sqlalchemy.orm.LoaderCallableStatus.PASSIVE_NO_RESULT)'
- en: '**Class signature**'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.LoaderCallableStatus`](#sqlalchemy.orm.LoaderCallableStatus
    "sqlalchemy.orm.LoaderCallableStatus") (`enum.Enum`)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.orm.LoaderCallableStatus`](#sqlalchemy.orm.LoaderCallableStatus
    "sqlalchemy.orm.LoaderCallableStatus") (`enum.Enum`)
- en: '[PRE82]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Symbol used internally to indicate an attribute had no callable.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 用于内部表示属性没有可调用。
- en: '[PRE83]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Symbol returned by a loader callable to indicate the retrieved value, or values,
    were assigned to their attributes on the target object.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 由加载器可调用返回的符号，表示检索到的值或值已分配给目标对象上的属性。
- en: '[PRE84]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Synonymous with NO_VALUE
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 与NO_VALUE同义
- en: 'Changed in version 1.4: NEVER_SET was merged with NO_VALUE'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：NEVER_SET已与NO_VALUE合并
- en: '[PRE85]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Symbol which may be placed as the ‘previous’ value of an attribute, indicating
    no value was loaded for an attribute when it was modified, and flags indicated
    we were not to load it.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 符号，可放置为属性的“前一个”值，表示修改属性时未加载任何值，并且标志指示我们不加载它。
- en: '[PRE86]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Symbol indicating that an object is locally present for a given primary key
    identity but it is not of the requested class. The return value is therefore None
    and no SQL should be emitted.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 表示对象在给定的主键标识下本地存在，但它不是请求的类。因此，返回值为None，不应发出任何SQL。
- en: '[PRE87]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Symbol returned by a loader callable or other attribute/history retrieval operation
    when a value could not be determined, based on loader callable flags.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 当值无法确定时，由加载器可调用或其他属性/历史检索操作返回的符号，基于加载器可调用标志。
- en: '[PRE88]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Represent an ORM mapped attribute on a mapped class.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在映射类上表示ORM映射属性。
- en: This class represents the complete descriptor interface for any class attribute
    that will have been [instrumented](../glossary.html#term-instrumented) by the
    ORM [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    class. Provides appropriate information to type checkers such as pylance and mypy
    so that ORM-mapped attributes are correctly typed.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 该类表示任何将由ORM [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")类[检测](../glossary.html#term-instrumented)的类属性的完整描述符接口。为类型检查器（如pylance和mypy）提供适当的信息，以便正确对ORM映射属性进行类型化。
- en: The most prominent use of [`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    is in the [Declarative Mapping](declarative_styles.html#orm-explicit-declarative-base)
    form of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    configuration, where used explicitly it drives the configuration of ORM attributes
    such as `mapped_class()` and [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")最突出的用途是在[声明式映射](declarative_styles.html#orm-explicit-declarative-base)形式的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")配置中，当显式使用时，它驱动ORM属性（如`mapped_class()`和[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")）的配置。'
- en: See also
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using a Declarative Base Class](declarative_styles.html#orm-explicit-declarative-base)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用声明式基类](declarative_styles.html#orm-explicit-declarative-base)'
- en: '[Declarative Table with mapped_column()](declarative_tables.html#orm-declarative-table)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用`mapped_column()`声明式表](declarative_tables.html#orm-declarative-table)'
- en: Tip
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped") class represents
    attributes that are handled directly by the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class. It does not include other Python descriptor classes
    that are provided as extensions, including [Hybrid Attributes](extensions/hybrid.html)
    and the [Association Proxy](extensions/associationproxy.html). While these systems
    still make use of ORM-specific superclasses and structures, they are not [instrumented](../glossary.html#term-instrumented)
    by the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    and instead provide their own functionality when they are accessed on a class.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")类表示由[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")类直接处理的属性。它不包括其他作为扩展提供的Python描述符类，包括[混合属性](extensions/hybrid.html)和[关联代理](extensions/associationproxy.html)。虽然这些系统仍然使用ORM特定的超类和结构，但当它们在类上被访问时，它们不会被[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")所[检测](../glossary.html#term-instrumented)，而是在访问时提供自己的功能。'
- en: New in version 1.4.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Class signature**'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    ([`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.base.SQLORMExpression"),
    `sqlalchemy.orm.base.ORMDescriptor`, `sqlalchemy.orm.base._MappedAnnotationBase`,
    `sqlalchemy.sql.roles.DDLConstraintColumnRole`)
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Mapped`](#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")（[`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.base.SQLORMExpression")，`sqlalchemy.orm.base.ORMDescriptor`，`sqlalchemy.orm.base._MappedAnnotationBase`，`sqlalchemy.sql.roles.DDLConstraintColumnRole`)
- en: '[PRE89]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Maps a single [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    on a class.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在类上映射单个[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    is a specialization of the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    class and is oriented towards declarative configuration.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")是[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")类的一个特化，面向声明式配置。'
- en: To construct [`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    objects, use the [`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") constructor function.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")对象，请使用[`mapped_column()`](mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造函数。
- en: New in version 2.0.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '**Class signature**'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    (`sqlalchemy.orm._IntrospectsAnnotations`, `sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm.base._DeclarativeMapped`)
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.orm.MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")
    (`sqlalchemy.orm._IntrospectsAnnotations`, `sqlalchemy.orm._MapsColumns`, `sqlalchemy.orm.base._DeclarativeMapped`)
- en: '[PRE90]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Represent a particular class attribute mapped by [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 表示由[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")映射的特定类属性。
- en: The most common occurrences of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") are the mapped [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is represented in a mapping as an instance
    of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    and a reference to another class produced by [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), represented in the mapping as an instance of [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")最常见的出现是映射为[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")实例的映射[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，以及由[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")生成的对另一个类的引用，表示为[`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")实例。'
- en: '**Members**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[cascade_iterator()](#sqlalchemy.orm.MapperProperty.cascade_iterator), [class_attribute](#sqlalchemy.orm.MapperProperty.class_attribute),
    [comparator](#sqlalchemy.orm.MapperProperty.comparator), [create_row_processor()](#sqlalchemy.orm.MapperProperty.create_row_processor),
    [do_init()](#sqlalchemy.orm.MapperProperty.do_init), [doc](#sqlalchemy.orm.MapperProperty.doc),
    [info](#sqlalchemy.orm.MapperProperty.info), [init()](#sqlalchemy.orm.MapperProperty.init),
    [instrument_class()](#sqlalchemy.orm.MapperProperty.instrument_class), [is_property](#sqlalchemy.orm.MapperProperty.is_property),
    [key](#sqlalchemy.orm.MapperProperty.key), [merge()](#sqlalchemy.orm.MapperProperty.merge),
    [parent](#sqlalchemy.orm.MapperProperty.parent), [post_instrument_class()](#sqlalchemy.orm.MapperProperty.post_instrument_class),
    [set_parent()](#sqlalchemy.orm.MapperProperty.set_parent), [setup()](#sqlalchemy.orm.MapperProperty.setup)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[cascade_iterator()](#sqlalchemy.orm.MapperProperty.cascade_iterator), [class_attribute](#sqlalchemy.orm.MapperProperty.class_attribute),
    [comparator](#sqlalchemy.orm.MapperProperty.comparator), [create_row_processor()](#sqlalchemy.orm.MapperProperty.create_row_processor),
    [do_init()](#sqlalchemy.orm.MapperProperty.do_init), [doc](#sqlalchemy.orm.MapperProperty.doc),
    [info](#sqlalchemy.orm.MapperProperty.info), [init()](#sqlalchemy.orm.MapperProperty.init),
    [instrument_class()](#sqlalchemy.orm.MapperProperty.instrument_class), [is_property](#sqlalchemy.orm.MapperProperty.is_property),
    [key](#sqlalchemy.orm.MapperProperty.key), [merge()](#sqlalchemy.orm.MapperProperty.merge),
    [parent](#sqlalchemy.orm.MapperProperty.parent), [post_instrument_class()](#sqlalchemy.orm.MapperProperty.post_instrument_class),
    [set_parent()](#sqlalchemy.orm.MapperProperty.set_parent), [setup()](#sqlalchemy.orm.MapperProperty.setup)'
- en: '**Class signature**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    ([`sqlalchemy.sql.cache_key.HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), `sqlalchemy.orm._DCAttributeOptions`,
    `sqlalchemy.orm.base._MappedAttribute`, [`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.util.langhelpers.MemoizedSlots`)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.orm.MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    ([`sqlalchemy.sql.cache_key.HasCacheKey`](../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), `sqlalchemy.orm._DCAttributeOptions`,
    `sqlalchemy.orm.base._MappedAttribute`, [`sqlalchemy.orm.base.InspectionAttrInfo`](#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.util.langhelpers.MemoizedSlots`)
- en: '[PRE91]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Iterate through instances related to the given instance for a particular ‘cascade’,
    starting with this MapperProperty.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代与特定“cascade”相关的给定实例的实例，从这个MapperProperty开始。
- en: Return an iterator3-tuples (instance, mapper, state).
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个迭代器3元组（实例，映射器，状态）。
- en: Note that the ‘cascade’ collection on this MapperProperty is checked first for
    the given type before cascade_iterator is called.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在调用cascade_iterator之前，首先检查此MapperProperty上的“cascade”集合是否适用于给定类型。
- en: This method typically only applies to Relationship.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法通常只适用于关系（Relationship）。
- en: '[PRE92]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Return the class-bound descriptor corresponding to this [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对应的类绑定描述符。
- en: 'This is basically a `getattr()` call:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是一个`getattr()`调用：
- en: '[PRE93]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'I.e. if this [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    were named `addresses`, and the class to which it is mapped is `User`, this sequence
    is possible:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 即，如果此[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")被命名为`addresses`，并且将其映射到的类是`User`，则此序列是可能的：
- en: '[PRE94]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    instance that implements SQL expression construction on behalf of this mapped
    attribute.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此映射属性的SQL表达式构造的[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")实例。
- en: '[PRE96]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Produce row processing functions and append to the given set of populators lists.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 生成行处理函数并附加到给定的填充器列表。
- en: '[PRE97]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Perform subclass-specific initialization post-mapper-creation steps.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 执行子类特定的初始化后映射器创建步骤。
- en: This is a template method called by the `MapperProperty` object’s init() method.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`MapperProperty`对象的`init()`方法调用的模板方法。
- en: '[PRE98]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: optional documentation string
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的文档字符串
- en: '[PRE99]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")相关联。
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问时生成字典。或者，它可以作为构造函数参数指定给[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")或[`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数。
- en: See also
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[PRE100]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Called after all mappers are created to assemble relationships between mappers
    and perform other post-mapper-creation initialization steps.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建所有映射器后调用，以组装映射器之间的关系并执行其他后映射器创建初始化步骤。
- en: '[PRE101]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 由映射器调用到属性的挂钩，以启动由此`MapperProperty`管理的类属性的仪器化。
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的`MapperProperty`通常会调用属性模块以设置`InstrumentedAttribute`。
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是设置`InstrumentedAttribute`的两个步骤中的第一个步骤，并在映射器设置过程中的早期阶段调用。
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步通常是`init_class_attribute`步骤，通过`post_instrument_class()`挂钩从`StrategizedProperty`调用。此步骤分配了额外的状态给`InstrumentedAttribute`（具体为“impl”），该状态在`MapperProperty`确定其需要执行的持久性管理类型（例如标量、对象、集合等）后确定。
- en: '[PRE102]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Part of the InspectionAttr interface; states this object is a mapper property.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: InspectionAttr接口的一部分；说明此对象是一个映射器属性。
- en: '[PRE103]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: name of class attribute
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性的名称
- en: '[PRE104]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 将此`MapperProperty`表示的属性从源对象合并到目标对象。
- en: '[PRE105]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    managing this property.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 管理此属性的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: '[PRE106]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Perform instrumentation adjustments that need to occur after init() has completed.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init()`完成后需要进行的仪器化调整。
- en: The given Mapper is the Mapper invoking the operation, which may not be the
    same Mapper as self.parent in an inheritance scenario; however, Mapper will always
    at least be a sub-mapper of self.parent.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的`Mapper`是调用操作的`Mapper`，这可能不是相同的`Mapper`作为继承场景中的`self.parent`的`Mapper`；然而，`Mapper`将始终至少是`self.parent`的子映射器。
- en: This method is typically used by StrategizedProperty, which delegates it to
    LoaderStrategy.init_class_attribute() to perform final setup on the class-bound
    InstrumentedAttribute.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法通常由 StrategizedProperty 使用，后者将其委派给 LoaderStrategy.init_class_attribute()
    以在类绑定的 InstrumentedAttribute 上执行最终设置。
- en: '[PRE107]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Set the parent mapper that references this MapperProperty.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 设置引用此 MapperProperty 的父映射器。
- en: This method is overridden by some subclasses to perform extra setup when the
    mapper is first known.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 某些子类重写此方法以在首次了解映射器时执行额外的设置。
- en: '[PRE108]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Called by Query for the purposes of constructing a SQL statement.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Query 调用，用于构造 SQL 语句。
- en: Each MapperProperty associated with the target mapper processes the statement
    referenced by the query context, adding columns and/or criterion as appropriate.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 与目标映射器关联的每个 MapperProperty 处理查询上下文引用的语句，根据需要添加列和/或条件。
- en: '[PRE109]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Declarative front-end for the [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") class.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    类的声明式前端。'
- en: Public constructor is the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") function.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 函数。
- en: 'Changed in version 2.0: Added [`MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression
    "sqlalchemy.orm.MappedSQLExpression") as a Declarative compatible subclass for
    [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty").'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中更改：将 [`MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression "sqlalchemy.orm.MappedSQLExpression")
    添加为 [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    的声明式兼容子类。
- en: See also
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MappedColumn`](#sqlalchemy.orm.MappedColumn "sqlalchemy.orm.MappedColumn")'
- en: '**Class signature**'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression
    "sqlalchemy.orm.MappedSQLExpression") ([`sqlalchemy.orm.properties.ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.properties.ColumnProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.MappedSQLExpression`](#sqlalchemy.orm.MappedSQLExpression
    "sqlalchemy.orm.MappedSQLExpression") ([`sqlalchemy.orm.properties.ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.properties.ColumnProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
- en: '[PRE110]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Symbols indicating the type of extension that a [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") is part of.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    所属扩展类型的符号。
- en: '**Class signature**'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.InspectionAttrExtensionType") (`enum.Enum`)
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.InspectionAttrExtensionType") (`enum.Enum`)
- en: '[PRE111]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: An enumeration.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[NOT_EXTENSION](#sqlalchemy.orm.NotExtension.NOT_EXTENSION)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '[NOT_EXTENSION](#sqlalchemy.orm.NotExtension.NOT_EXTENSION)'
- en: '**Class signature**'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.NotExtension`](#sqlalchemy.orm.NotExtension "sqlalchemy.orm.NotExtension")
    ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.NotExtension`](#sqlalchemy.orm.NotExtension "sqlalchemy.orm.NotExtension")
    ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
- en: '[PRE112]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Symbol indicating an [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    that’s not part of sqlalchemy.ext.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 表示 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    不是 sqlalchemy.ext 的一部分的符号。
- en: Is assigned to the [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 被赋给 [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 属性。
- en: '[PRE113]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Merge a result into the given [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s Session.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果合并到给定的 [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的会话中。
- en: 'Deprecated since version 2.0: The [`merge_result()`](#sqlalchemy.orm.merge_result
    "sqlalchemy.orm.merge_result") function is considered legacy as of the 1.x series
    of SQLAlchemy and becomes a legacy construct in 2.0\. The function as well as
    the method on [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    is superseded by the [`merge_frozen_result()`](#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html))'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.0版本起弃用：[`merge_result()`](#sqlalchemy.orm.merge_result "sqlalchemy.orm.merge_result")函数在SQLAlchemy
    1.x系列中被视为遗留函数，并在2.0版中成为遗留结构。该函数以及[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")上的方法被[`merge_frozen_result()`](#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result")函数取代。（有关SQLAlchemy 2.0的背景，请参见：[SQLAlchemy
    2.0 - 主要迁移指南](../changelog/migration_20.html)）
- en: See [`Query.merge_result()`](queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") for top-level documentation on this function.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此函数的顶层文档，请参见[`Query.merge_result()`](queryguide/query.html#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result")。
- en: '[PRE114]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Merge a [`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult
    "sqlalchemy.engine.FrozenResult") back into a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), returning a new [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object with [persistent](../glossary.html#term-persistent)
    objects.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")合并回[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，返回一个新的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，其中包含[持久化](../glossary.html#term-persistent)对象。
- en: See the section [Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    for an example.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 有关示例，请参见[重新执行语句](session_events.html#do-orm-execute-re-executing)部分。
- en: See also
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing)'
- en: '[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")'
- en: '[`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FrozenResult`](../core/connections.html#sqlalchemy.engine.FrozenResult "sqlalchemy.engine.FrozenResult")'
- en: '[PRE115]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Defines SQL operations for ORM mapped attributes.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 定义ORM映射属性的SQL操作。
- en: SQLAlchemy allows for operators to be redefined at both the Core and ORM level.
    [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    is the base class of operator redefinition for ORM-level operations, including
    those of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    [`Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship"),
    and [`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite").
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy允许在核心和ORM级别重新定义运算符。[`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")是ORM级别操作重新定义的基类，包括[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")、[`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")和[`Composite`](#sqlalchemy.orm.Composite "sqlalchemy.orm.Composite")的操作。
- en: 'User-defined subclasses of [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") may be created. The built-in Python comparison
    and math operator methods, such as `ColumnOperators.__eq__()`, `ColumnOperators.__lt__()`,
    and `ColumnOperators.__add__()`, can be overridden to provide new operator behavior.
    The custom [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    is passed to the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    instance via the `comparator_factory` argument. In each case, the appropriate
    subclass of [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    should be used:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 可以创建[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")的用户定义子类。可以重写内置的Python比较和数学运算符方法，如`ColumnOperators.__eq__()`，`ColumnOperators.__lt__()`和`ColumnOperators.__add__()`，以提供新的操作行为。定制的[`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")通过`comparator_factory`参数传递给[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")实例。在每种情况下，应使用适当的[`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator")子类：
- en: '[PRE116]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Note that for column-level operator redefinition, it’s usually simpler to define
    the operators at the Core level, using the [`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory") attribute. See [Redefining and
    Creating New Operators](../core/custom_types.html#types-operators) for more detail.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于列级操作符的重新定义，通常更简单的方法是在核心级别定义操作符，使用[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")属性。有关更多详细信息，请参阅[重新定义和创建新操作符](../core/custom_types.html#types-operators)。
- en: See also
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '[`比较器`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
- en: '`Comparator`'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`比较器`'
- en: '`Comparator`'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`比较器`'
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](../core/custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '**Members**'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.orm.PropComparator.__eq__), [__le__()](#sqlalchemy.orm.PropComparator.__le__),
    [__lt__()](#sqlalchemy.orm.PropComparator.__lt__), [__ne__()](#sqlalchemy.orm.PropComparator.__ne__),
    [adapt_to_entity()](#sqlalchemy.orm.PropComparator.adapt_to_entity), [adapter](#sqlalchemy.orm.PropComparator.adapter),
    [all_()](#sqlalchemy.orm.PropComparator.all_), [and_()](#sqlalchemy.orm.PropComparator.and_),
    [any()](#sqlalchemy.orm.PropComparator.any), [any_()](#sqlalchemy.orm.PropComparator.any_),
    [asc()](#sqlalchemy.orm.PropComparator.asc), [between()](#sqlalchemy.orm.PropComparator.between),
    [bitwise_and()](#sqlalchemy.orm.PropComparator.bitwise_and), [bitwise_lshift()](#sqlalchemy.orm.PropComparator.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.orm.PropComparator.bitwise_not), [bitwise_or()](#sqlalchemy.orm.PropComparator.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.orm.PropComparator.bitwise_rshift), [bitwise_xor()](#sqlalchemy.orm.PropComparator.bitwise_xor),
    [bool_op()](#sqlalchemy.orm.PropComparator.bool_op), [collate()](#sqlalchemy.orm.PropComparator.collate),
    [concat()](#sqlalchemy.orm.PropComparator.concat), [contains()](#sqlalchemy.orm.PropComparator.contains),
    [desc()](#sqlalchemy.orm.PropComparator.desc), [distinct()](#sqlalchemy.orm.PropComparator.distinct),
    [endswith()](#sqlalchemy.orm.PropComparator.endswith), [has()](#sqlalchemy.orm.PropComparator.has),
    [icontains()](#sqlalchemy.orm.PropComparator.icontains), [iendswith()](#sqlalchemy.orm.PropComparator.iendswith),
    [ilike()](#sqlalchemy.orm.PropComparator.ilike), [in_()](#sqlalchemy.orm.PropComparator.in_),
    [is_()](#sqlalchemy.orm.PropComparator.is_), [is_distinct_from()](#sqlalchemy.orm.PropComparator.is_distinct_from),
    [is_not()](#sqlalchemy.orm.PropComparator.is_not), [is_not_distinct_from()](#sqlalchemy.orm.PropComparator.is_not_distinct_from),
    [isnot()](#sqlalchemy.orm.PropComparator.isnot), [isnot_distinct_from()](#sqlalchemy.orm.PropComparator.isnot_distinct_from),
    [istartswith()](#sqlalchemy.orm.PropComparator.istartswith), [like()](#sqlalchemy.orm.PropComparator.like),
    [match()](#sqlalchemy.orm.PropComparator.match), [not_ilike()](#sqlalchemy.orm.PropComparator.not_ilike),
    [not_in()](#sqlalchemy.orm.PropComparator.not_in), [not_like()](#sqlalchemy.orm.PropComparator.not_like),
    [notilike()](#sqlalchemy.orm.PropComparator.notilike), [notin_()](#sqlalchemy.orm.PropComparator.notin_),
    [notlike()](#sqlalchemy.orm.PropComparator.notlike), [nulls_first()](#sqlalchemy.orm.PropComparator.nulls_first),
    [nulls_last()](#sqlalchemy.orm.PropComparator.nulls_last), [nullsfirst()](#sqlalchemy.orm.PropComparator.nullsfirst),
    [nullslast()](#sqlalchemy.orm.PropComparator.nullslast), [of_type()](#sqlalchemy.orm.PropComparator.of_type),
    [op()](#sqlalchemy.orm.PropComparator.op), [operate()](#sqlalchemy.orm.PropComparator.operate),
    [property](#sqlalchemy.orm.PropComparator.property), [regexp_match()](#sqlalchemy.orm.PropComparator.regexp_match),
    [regexp_replace()](#sqlalchemy.orm.PropComparator.regexp_replace), [reverse_operate()](#sqlalchemy.orm.PropComparator.reverse_operate),
    [startswith()](#sqlalchemy.orm.PropComparator.startswith), [timetuple](#sqlalchemy.orm.PropComparator.timetuple)'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.orm.PropComparator.__eq__), [__le__()](#sqlalchemy.orm.PropComparator.__le__),
    [__lt__()](#sqlalchemy.orm.PropComparator.__lt__), [__ne__()](#sqlalchemy.orm.PropComparator.__ne__),
    [adapt_to_entity()](#sqlalchemy.orm.PropComparator.adapt_to_entity), [adapter](#sqlalchemy.orm.PropComparator.adapter),
    [all_()](#sqlalchemy.orm.PropComparator.all_), [and_()](#sqlalchemy.orm.PropComparator.and_),
    [any()](#sqlalchemy.orm.PropComparator.any), [any_()](#sqlalchemy.orm.PropComparator.any_),
    [asc()](#sqlalchemy.orm.PropComparator.asc), [between()](#sqlalchemy.orm.PropComparator.between),
    [bitwise_and()](#sqlalchemy.orm.PropComparator.bitwise_and), [bitwise_lshift()](#sqlalchemy.orm.PropComparator.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.orm.PropComparator.bitwise_not), [bitwise_or()](#sqlalchemy.orm.PropComparator.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.orm.PropComparator.bitwise_rshift), [bitwise_xor()](#sqlalchemy.orm.PropComparator.bitwise_xor),
    [bool_op()](#sqlalchemy.orm.PropComparator.bool_op), [collate()](#sqlalchemy.orm.PropComparator.collate),
    [concat()](#sqlalchemy.orm.PropComparator.concat), [contains()](#sqlalchemy.orm.PropComparator.contains),
    [desc()](#sqlalchemy.orm.PropComparator.desc), [distinct()](#sqlalchemy.orm.PropComparator.distinct),
    [endswith()](#sqlalchemy.orm.PropComparator.endswith), [has()](#sqlalchemy.orm.PropComparator.has),
    [icontains()](#sqlalchemy.orm.PropComparator.icontains), [iendswith()](#sqlalchemy.orm.PropComparator.iendswith),
    [ilike()](#sqlalchemy.orm.PropComparator.ilike), [in_()](#sqlalchemy.orm.PropComparator.in_),
    [is_()](#sqlalchemy.orm.PropComparator.is_), [is_distinct_from()](#sqlalchemy.orm.PropComparator.is_distinct_from),
    [is_not()](#sqlalchemy.orm.PropComparator.is_not), [is_not_distinct_from()](#sqlalchemy.orm.PropComparator.is_not_distinct_from),
    [isnot()](#sqlalchemy.orm.PropComparator.isnot), [isnot_distinct_from()](#sqlalchemy.orm.PropComparator.isnot_distinct_from),
    [istartswith()](#sqlalchemy.orm.PropComparator.istartswith), [like()](#sqlalchemy.orm.PropComparator.like),
    [match()](#sqlalchemy.orm.PropComparator.match), [not_ilike()](#sqlalchemy.orm.PropComparator.not_ilike),
    [not_in()](#sqlalchemy.orm.PropComparator.not_in), [not_like()](#sqlalchemy.orm.PropComparator.not_like),
    [notilike()](#sqlalchemy.orm.PropComparator.notilike), [notin_()](#sqlalchemy.orm.PropComparator.notin_),
    [notlike()](#sqlalchemy.orm.PropComparator.notlike), [nulls_first()](#sqlalchemy.orm.PropComparator.nulls_first),
    [nulls_last()](#sqlalchemy.orm.PropComparator.nulls_last), [nullsfirst()](#sqlalchemy.orm.PropComparator.nullsfirst),
    [nullslast()](#sqlalchemy.orm.PropComparator.nullslast), [of_type()](#sqlalchemy.orm.PropComparator.of_type),
    [op()](#sqlalchemy.orm.PropComparator.op), [operate()](#sqlalchemy.orm.PropComparator.operate),
    [property](#sqlalchemy.orm.PropComparator.property), [regexp_match()](#sqlalchemy.orm.PropComparator.regexp_match),
    [regexp_replace()](#sqlalchemy.orm.PropComparator.regexp_replace), [reverse_operate()](#sqlalchemy.orm.PropComparator.reverse_operate),
    [startswith()](#sqlalchemy.orm.PropComparator.startswith), [timetuple](#sqlalchemy.orm.PropComparator.timetuple)'
- en: '**Class signature**'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    (`sqlalchemy.orm.base.SQLORMOperations`, `typing.Generic`, [`sqlalchemy.sql.expression.ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"))
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")
    (`sqlalchemy.orm.base.SQLORMOperations`, `typing.Generic`, [`sqlalchemy.sql.expression.ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators"))
- en: '[PRE117]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__eq__`
    *方法继承*'
- en: Implement the `==` operator.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `==` 运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a = b`。如果目标是 `None`，则生成 `a IS NULL`。
- en: '[PRE118]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法继承*'
- en: Implement the `<=` operator.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a <= b`。
- en: '[PRE119]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法继承*'
- en: Implement the `<` operator.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a < b`。
- en: '[PRE120]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__ne__`
    *方法继承*'
- en: Implement the `!=` operator.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `!=` 运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a != b`。如果目标是 `None`，则生成 `a IS NOT NULL`。
- en: '[PRE121]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `PropComparator` 的副本，将使用给定的[`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") 来生成相应的表达式。
- en: '[PRE122]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Produce a callable that adapts column expressions to suit an aliased version
    of this comparator.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个可调用对象，以使列表达式适合此比较器的别名版本。
- en: '[PRE123]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法继承*'
- en: Produce an [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象产生一个 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    子句。
- en: See the documentation for [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要将新的[`ColumnOperators.all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与此方法的**传统**版本混淆，后者是专用于[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的方法，采用不同的调用风格，[`Comparator.all()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法。
- en: '[PRE124]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Add additional criteria to the ON clause that’s represented by this relationship
    attribute.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 向由此关系属性表示的ON子句添加额外的条件。
- en: 'E.g.:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE125]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: New in version 1.4.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Combining Relationship with Custom ON Criteria](queryguide/select.html#orm-queryguide-join-on-augmented)'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[将 Relationship 与自定义 ON 条件结合](queryguide/select.html#orm-queryguide-join-on-augmented)'
- en: '[Adding Criteria to loader options](queryguide/relationships.html#loader-option-criteria)'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '[向加载器选项添加条件](queryguide/relationships.html#loader-option-criteria)'
- en: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
- en: '[PRE126]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Return a SQL expression representing true if this element references a member
    which meets the given criterion.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个SQL表达式，如果此元素引用满足给定条件的成员，则表示为真。
- en: The usual implementation of `any()` is `Comparator.any()`.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`any()`的常规实现是`Comparator.any()`。'
- en: 'Parameters:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`criterion` – an optional ClauseElement formulated against the member class’
    table or attributes.'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`criterion` – 针对成员类表或属性制定的可选ClauseElement。'
- en: '`**kwargs` – key/value pairs corresponding to member class attribute names
    which will be compared via equality to the corresponding values.'
  id: totrans-542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 键/值对应于成员类属性名称，这些属性将通过等式与相应的值进行比较。'
- en: '[PRE127]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要将新的[`ColumnOperators.any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与此方法的**传统**版本混淆，后者是专用于[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的方法，采用不同的调用风格，[`Comparator.any()`](../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法。
- en: '[PRE128]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")
    clause against the parent object.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`asc()`](../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE129]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '*inherited from the* [`ColumnOperators.between()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 针对父对象生成一个[`between()`](../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between")子句，给定下限和上限范围。
- en: '[PRE130]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位与操作，通常通过`&`运算符。
- en: New in version 2.0.2.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE131]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位左移操作，通常通过`<<`运算符。
- en: New in version 2.0.2.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE132]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位非操作，通常通过`~`运算符。
- en: New in version 2.0.2.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE133]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位或操作，通常通过`|`运算符。
- en: New in version 2.0.2.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE134]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位右移操作，通常通过`>>`运算符。
- en: New in version 2.0.2.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0.2中。
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE135]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个按位异或操作，通常通过`^`运算符实现，或者在 PostgreSQL 中使用`#`。
- en: New in version 2.0.2.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0.2 版中新增。
- en: See also
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../core/operators.html#operators-bitwise)'
- en: '[PRE136]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '*inherited from the* [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义的布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用 [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。使用 [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回的表达式的“布尔”特性将存在于
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的上。
- en: See also
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE137]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 子句，给定排序规则字符串。
- en: See also
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.collate "sqlalchemy.sql.expression.collate")'
- en: '[PRE138]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 ‘concat’ 运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a || b`，或在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE139]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '*inherited from the* [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘contains’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值中间的匹配：
- en: '[PRE140]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'E.g.:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE141]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为`True`，以对字符串值内这些字符的出现应用转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.contains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非将[`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE142]'
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Will render as:'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE143]'
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符建立为转义字符。然后可以将该字符放在`%`和`_`的出现之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE144]'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Will render as:'
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE145]'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE146]'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE147]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`desc()`](../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE148]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`distinct()`](../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE149]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’运算符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的末尾匹配：
- en: '[PRE150]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'E.g.:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE151]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也会像通配符一样起作用。 对于字面字符串值，可以将[`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。
    或者，[`ColumnOperators.endswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。 这通常是一个简单的字符串值，但也可以是任意SQL表达式。 除非将[`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True，否则不会默认转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE152]'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Will render as:'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE153]'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，给定时将使用`ESCAPE`关键字将其渲染为转义字符。然后，可以在`%`和`_`的出现之前放置此字符，以允许它们作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE154]'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Will render as:'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE155]'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE156]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的文字参数在传递给数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE157]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Return a SQL expression representing true if this element references a member
    which meets the given criterion.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个SQL表达式，如果此元素引用满足给定条件的成员，则表示为true。
- en: The usual implementation of `has()` is `Comparator.has()`.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '`has()`的通常实现是`Comparator.has()`。'
- en: 'Parameters:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`criterion` – an optional ClauseElement formulated against the member class’
    table or attributes.'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`criterion` – 针对成员类表或属性制定的可选ClauseElement。'
- en: '`**kwargs` – key/value pairs corresponding to member class attribute names
    which will be compared via equality to the corresponding values.'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 键/值对，对应于将通过等式与相应值进行比较的成员类属性名称。'
- en: '[PRE158]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，测试对字符串值中间的大小写不敏感匹配：
- en: '[PRE159]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'E.g.:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE160]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，所以存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样行为。对于文字字符串值，可以将
    [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.icontains.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` - 要进行比较的表达式。通常这是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不被转义，除非
    [`ColumnOperators.icontains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志被设置为 True。'
- en: '`autoescape` –'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` -'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个文字字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE161]'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Will render as:'
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将被渲染为：
- en: '[PRE162]'
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中参数的值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` -'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将使用 `ESCAPE` 关键字来建立该字符作为转义字符。然后，可以将该字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个如下的表达式：
- en: '[PRE163]'
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Will render as:'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将被渲染为：
- en: '[PRE164]'
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与[`ColumnOperators.contains.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE165]'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE166]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的不区分大小写匹配进行测试：
- en: '[PRE167]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'E.g.:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE168]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式内部存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自己而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将确定一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE169]'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Will render as:'
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE170]'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来确定该字符作为转义字符。然后可以将该字符放在`%`和`_`之前，以使它们可以作为它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE171]'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Will render as:'
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE172]'
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.iendswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE173]'
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE174]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ilike` 运算符，例如，大小写不敏感的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成形式为：
- en: '[PRE175]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 或在支持 ILIKE 运算符的后端上：
- en: '[PRE176]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'E.g.:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE177]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Parameters:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE178]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: See also
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE179]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE180]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，项目列表被转换为与给定列表相同长度的一组绑定参数：
- en: '[PRE181]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较的对象是包含多个表达式的[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，可以提供一个元组列表：
- en: '[PRE182]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'An empty list, e.g.:'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE183]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，通常试图得到一个空的 SELECT 语句作为子查询。例如在 SQLite
    上，该表达式是：
- en: '[PRE184]'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.4 中更改：在所有情况下，空的 IN 表达式现在使用执行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，如果它包含 [`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志：
- en: '[PRE185]'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现一个特殊的非 SQL 占位符表达式，看起来像：
- en: '[PRE186]'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个占位符表达式在语句执行时拦截，被转换成前面所示的可变数量的绑定参数形式。如果语句执行为：
- en: '[PRE187]'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE188]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增：“expanding” 绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则渲染一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在 SQLite 上，这将是：
- en: '[PRE189]'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.3 中新增：“expanding” 绑定参数现在支持空列表
- en: 'a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, which is usually a correlated scalar select:'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE190]'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 呈现如下：
- en: '[PRE191]'
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Parameters:'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面量列表，一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者一个包含设置为True的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造，其中包括[`bindparam.expanding`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志。'
- en: '[PRE192]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时���会自动生成`IS`，这会解析为`NULL`。但是，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE193]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上，如SQLite，可能呈现“a IS NOT b”。
- en: '[PRE194]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，这会解析为`NULL`。但是，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()`运算符从先前版本的`isnot()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") '
- en: '[PRE195]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.is_not_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法继承*'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为 “a IS NOT DISTINCT FROM b”；在一些平台上，比如 SQLite，可能会渲染为 “a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not_distinct_from()` 运算符在之前的版本中从 `isnot_distinct_from()` 重命名。
    以前的名称仍然可用于向后兼容。
- en: '[PRE196]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.isnot()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法继承*'
- en: Implement the `IS NOT` operator.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与 `None` 的值进行比较时，会自动生成 `IS NOT`，它解析为 `NULL`。 然而，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用
    `IS NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not()` 运算符在之前的版本中从 `isnot()` 重命名。 以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE197]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.isnot_distinct_from()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法继承*'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为 “a IS NOT DISTINCT FROM b”；在一些平台上，比如 SQLite，可能会渲染为 “a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not_distinct_from()` 运算符在之前的版本中从 `isnot_distinct_from()` 重命名。
    以前的名称仍然可用于向后兼容。
- en: '[PRE198]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法继承*'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 运算符，例如，[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于对字符串值的开头进行不区分大小写的匹配：
- en: '[PRE199]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'E.g.:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE200]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)标志设置为True，以对字符串值内这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是一个普通字符串值，但也可以是任意SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非设置了[`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)标志为True。'
- en: '`autoescape` –'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE201]'
  id: totrans-831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Will render as:'
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE202]'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将使用`ESCAPE`关键字来将该字符设定为转义字符。然后可以将该字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE203]'
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'Will render as:'
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE204]'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.istartswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)结合使用：
- en: '[PRE205]'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)'
- en: '[PRE206]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '*inherited from the* [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like)
    *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators)'
- en: Implement the `like` operator.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`操作符。
- en: 'In a column context, produces the expression:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE207]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'E.g.:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE208]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'Parameters:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`escape` –'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染`ESCAPE`关键字，例如：
- en: '[PRE209]'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: See also
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE210]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '*inherited from the* [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘match’操作符。
- en: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端��供的类似MATCH的函数或操作符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染`x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../dialects/postgresql.html#postgresql-match).'
  id: totrans-865
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：现在在PostgreSQL中使用`plainto_tsquery()`代替`to_tsquery()`；为了与其他形式兼容，请参见[全文搜索](../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染`MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染`CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将操作符发出为“MATCH”。这与SQLite兼容，例如。
- en: '[PRE211]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")进行否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`操作符从先前版本的`notilike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE212]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")进行否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，则编译器会生成一个“空not in”表达式。 默认情况下，这将产生“1 = 1”的表达式，以在所有情况下产生true。
    可以使用[`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：`not_in()`运算符从先前版本的`notin_()`重命名。 以确保向后兼容性，先前的名称仍然可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2起更改：[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")运算符现在默认情况下为一个空IN序列生成一个“静态”表达式。
- en: See also
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE213]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")进行否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：`not_like()`运算符从先前版本的`notlike()`重命名。 以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE214]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用否定与[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起更改：`not_ilike()`运算符从先前版本的`notilike()`重命名。 以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE215]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法* 的 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")中使用否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器会生成一个“空not in”表达式。默认情况下，这会变成表达式“1 = 1”，以在所有情况下产生true。可以使用[`create_engine.empty_in_strategy`](../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：`not_in()`运算符从先前版本的`notin_()`重命名。先前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.2中更改：[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下为一个空的IN序列生成一个“静态”表达式。
- en: See also
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE216]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法* 的 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")中使用否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4中更改：`not_like()`运算符从先前版本的`notlike()`重命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE217]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法* 的 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：`nulls_first()` 操作符从之前的版本 `nullsfirst()` 重命名。 以前的名称仍可用于向后兼容。
- en: '[PRE218]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *类*'
- en: Produce a [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：`nulls_last()` 操作符从之前的版本 `nullslast()` 重命名。 以前的名称仍可用于向后兼容。
- en: '[PRE219]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *类*'
- en: Produce a [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：`nulls_first()` 操作符从之前的版本 `nullsfirst()` 重命名。 以前的名称仍可用于向后兼容。
- en: '[PRE220]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *类*'
- en: Produce a [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本更改：`nulls_last()` 操作符从之前的版本 `nullslast()` 重命名。 以前的名称仍可用于向后兼容。
- en: '[PRE221]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: Redefine this object in terms of a polymorphic subclass, [`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct, or [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 重新定义此对象，以便使用多态子类、[`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 构造或 [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造。
- en: Returns a new PropComparator from which further criterion can be evaluated.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 PropComparator，可以从中评估进一步的标准。
- en: 'e.g.:'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE222]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Parameters:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**class_** – a class or mapper indicating that criterion will be against this
    specific subclass.'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '**class_** – 表示标准为针对此特定子类的类或映射器。'
- en: See also
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Relationship to join between aliased targets](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - in the [ORM Querying Guide](queryguide/index.html)'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用关联在别名目标之间连接](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - 在[ORM 查询指南](queryguide/index.html)中'
- en: '[Joining to specific sub-types or with_polymorphic() entities](queryguide/inheritance.html#inheritance-of-type)'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接到特定子类型或使用with_polymorphic()实体](queryguide/inheritance.html#inheritance-of-type)'
- en: '[PRE223]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '*inherited from the* [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE224]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'produces:'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE225]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来使位运算符明确。例如：
- en: '[PRE226]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位与。
- en: 'Parameters:'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为中缀运算符输出在这个元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库在SQL表达式中期望应用于运算符的优先级。这个整数值作为SQL编译器的提示，用于知道何时应该在特定操作周围渲染显式括号。较低的数字将导致在应用于具有更高优先级的另一个运算符时表达式被加括号。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis) -
    detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但我的括号没有正确显示](../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy; 如果为True，则该运算符将被视为“比较”运算符，即评估为布尔真/假值的运算符，如`==`，`>`等。提供此标志是为了ORM关系可以在自定义连接条件中使用时建立该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的操作符会自动设置这个参数，同时也提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表达“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此运算符产生的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而那些不指定的将与��操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的Python函数，可以以与数据库服务器上运行此操作符时相同的方式评估两个Python值。用于在Python中进行SQL表达式评估函数，例如用于ORM混合属性的函数，以及在多行更新或删除后用于匹配会话中对象的ORM“评估器”。
- en: 'e.g.:'
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE227]'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也将适用于非SQL左右对象：
- en: '[PRE228]'
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: New in version 2.0.
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: See also
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的操作符](../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](join_conditions.html#relationship-custom-operator)'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](join_conditions.html#relationship-custom-operator)'
- en: '[PRE229]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '*inherited from the* [`Operators.operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators") *方法的* [`Operators.operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate")'
- en: Operate on an argument.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最低级别的操作，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个方法可以让常见的行为应用到所有操作中。例如，重写[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")来应用`func.lower()`到左右两侧：
- en: '[PRE230]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'Parameters:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘其他’一侧。对于大多数操作来说，将是一个单一的标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以由特殊操作符传递，如`ColumnOperators.contains()`。'
- en: '[PRE231]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Return the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    associated with this [`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator").
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")关联的[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")。
- en: Return values here will commonly be instances of [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") or [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship").
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的返回值通常是[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")或[`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")的实例。
- en: '[PRE232]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的‘regexp match’操作符。
- en: 'E.g.:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE233]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")尝试解析为后端提供的类似REGEXP的函数或操作符，但是可用的特定正则表达式语法和标志**不是后端无关的**。'
- en: 'Examples include:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时渲染`x ~ y`或`x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染`REGEXP_LIKE(x, y)`。
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的`REGEXP`占位符运算符，并调用 Python 的`re.match()`内置函数。
- en: other backends may provide special implementations.
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-999
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将作为“REGEXP”或“NOT REGEXP”发出。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为 Oracle、PostgreSQL、MySQL 和 MariaDB 实现了正则表达式支持。SQLite 部分支持。第三方方言之间的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 任何要应用的正则表达式字符串标志，仅作为普通的 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。在 PostgreSQL 中使用忽略大小写标志‘i’时，将使用忽略大小写的正则表达式匹配运算符`~*`或`!~*`。'
- en: New in version 1.4.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 更改为：2.0.18 请注意，由于实现错误，“flags”参数先前接受了 SQL 表达式对象，例如列表达式，除了普通的 Python
    字符串。这种实现与缓存一起使用时无法正常工作，并已被移除；应该仅传递字符串作为“flags”参数，因为这些标志在 SQL 表达式中被呈现为文字内联值。
- en: See also
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE234]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *的* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘regexp replace’运算符。
- en: 'E.g.:'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE235]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 试图解析为由后端提供的类似 REGEXP_REPLACE
    的函数，通常会发出函数`REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用的标志**不是后端通用的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 实现了正则表达式替换支持。第三方方言之间的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-1017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-1018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 任何要应用的正则表达式字符串标志，仅作为普通的 Python 字符串传递。这些标志是特定于后端的。一些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本 1.4.48 改变，: 2.0.18 请注意，由于实现错误，之前“flags”参数接受了 SQL 表达式对象，例如列表达式，而不仅仅是普通的
    Python 字符串。这种实现在缓存方面无法正常工作，已被移除；应该只传递字符串作为“flags”参数，因为这些标志会作为 SQL 表达式中的文字内联值呈现。'
- en: See also
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE236]'
  id: totrans-1023
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators") *的* [`Operators.reverse_operate()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法。'
- en: Reverse operate on an argument.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.PropComparator.operate "sqlalchemy.orm.PropComparator.operate").
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法与 [`operate()`](#sqlalchemy.orm.PropComparator.operate "sqlalchemy.orm.PropComparator.operate")
    相同。
- en: '[PRE237]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法*。'
- en: Implement the `startswith` operator.
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `startswith` 操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值的开头是否匹配：
- en: '[PRE238]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'E.g.:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE239]'
  id: totrans-1033
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用 `LIKE`，所以在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也将像通配符一样运行。对于字面字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 `True`，以便对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.startswith.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立转义字符，然后将其应用于比较值内所有的 `"%"`、`"_"` 和转义字符本身的出现，假定该比较值为文本字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE240]'
  id: totrans-1040
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'Will render as:'
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE241]'
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值 `:param` 的情况下，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定的字符，当使用时会带有 `ESCAPE` 关键字来将该字符设定为转义字符。然后可以将该字符放在 `%` 和 `_` 的前面，以使它们可以被视为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE242]'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Will render as:'
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE243]'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.startswith.autoescape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 结合使用：
- en: '[PRE244]'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的情况下，给定的文本参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE245]'
  id: totrans-1057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *的属性* [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较日期时间对象。
- en: '[PRE246]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Describes an object property that holds a single item or list of items that
    correspond to a related database table.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 描述一个对象属性，该属性包含与相关数据库表对应的单个项目或项目列表。
- en: Public constructor is the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数。
- en: See also
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship Configuration](relationships.html)'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '[关系配置](relationships.html)'
- en: 'Changed in version 2.0: Added [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") as a Declarative compatible subclass for [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版更改：将 [`Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship")
    添加为 [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")
    的声明兼容子类。
- en: '**Class signature**'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship")
    ([`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Relationship`](#sqlalchemy.orm.Relationship "sqlalchemy.orm.Relationship")（[`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty")，`sqlalchemy.orm.base._DeclarativeMapped`）
- en: '[PRE247]'
  id: totrans-1068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: enumeration which indicates the ‘direction’ of a [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举指示 [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")
    的‘方向’。
- en: '[`RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection "sqlalchemy.orm.RelationshipDirection")
    is accessible from the `Relationship.direction` attribute of [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '[`RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection "sqlalchemy.orm.RelationshipDirection")
    可从 [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")
    的 `Relationship.direction` 属性访问。'
- en: '**Members**'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[MANYTOMANY](#sqlalchemy.orm.RelationshipDirection.MANYTOMANY), [MANYTOONE](#sqlalchemy.orm.RelationshipDirection.MANYTOONE),
    [ONETOMANY](#sqlalchemy.orm.RelationshipDirection.ONETOMANY)'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '[MANYTOMANY](#sqlalchemy.orm.RelationshipDirection.MANYTOMANY), [MANYTOONE](#sqlalchemy.orm.RelationshipDirection.MANYTOONE),
    [ONETOMANY](#sqlalchemy.orm.RelationshipDirection.ONETOMANY)'
- en: '**Class signature**'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection
    "sqlalchemy.orm.RelationshipDirection") (`enum.Enum`)
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.RelationshipDirection`](#sqlalchemy.orm.RelationshipDirection
    "sqlalchemy.orm.RelationshipDirection") (`enum.Enum`)
- en: '[PRE248]'
  id: totrans-1075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Indicates the many-to-many direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    的多对多方向。
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: 此符号通常由内部使用，但可能在某些 API 功能中公开。
- en: '[PRE249]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Indicates the many-to-one direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    的多对一方向。
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 此符号通常由内部使用，但可能在某些 API 功能中公开。
- en: '[PRE250]'
  id: totrans-1081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Indicates the one-to-many direction for a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    的一对多方向。
- en: This symbol is typically used by the internals but may be exposed within certain
    API features.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 此符号通常由内部使用，但可能在某些 API 功能中公开。
- en: '[PRE251]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Describes an object property that holds a single item or list of items that
    correspond to a related database table.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 描述持有单个项目或与相关数据库表对应的项目列表的对象属性。
- en: Public constructor is the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数。
- en: See also
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Relationship Configuration](relationships.html)'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '[关系配置](relationships.html)'
- en: '**Members**'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__eq__), [__init__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__init__),
    [__ne__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__ne__), [adapt_to_entity()](#sqlalchemy.orm.RelationshipProperty.Comparator.adapt_to_entity),
    [and_()](#sqlalchemy.orm.RelationshipProperty.Comparator.and_), [any()](#sqlalchemy.orm.RelationshipProperty.Comparator.any),
    [contains()](#sqlalchemy.orm.RelationshipProperty.Comparator.contains), [entity](#sqlalchemy.orm.RelationshipProperty.Comparator.entity),
    [has()](#sqlalchemy.orm.RelationshipProperty.Comparator.has), [in_()](#sqlalchemy.orm.RelationshipProperty.Comparator.in_),
    [mapper](#sqlalchemy.orm.RelationshipProperty.Comparator.mapper), [of_type()](#sqlalchemy.orm.RelationshipProperty.Comparator.of_type),
    [cascade](#sqlalchemy.orm.RelationshipProperty.cascade), [cascade_iterator()](#sqlalchemy.orm.RelationshipProperty.cascade_iterator),
    [declarative_scan()](#sqlalchemy.orm.RelationshipProperty.declarative_scan), [do_init()](#sqlalchemy.orm.RelationshipProperty.do_init),
    [entity](#sqlalchemy.orm.RelationshipProperty.entity), [instrument_class()](#sqlalchemy.orm.RelationshipProperty.instrument_class),
    [mapper](#sqlalchemy.orm.RelationshipProperty.mapper), [merge()](#sqlalchemy.orm.RelationshipProperty.merge)'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__eq__), [__init__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__init__),
    [__ne__()](#sqlalchemy.orm.RelationshipProperty.Comparator.__ne__), [adapt_to_entity()](#sqlalchemy.orm.RelationshipProperty.Comparator.adapt_to_entity),
    [and_()](#sqlalchemy.orm.RelationshipProperty.Comparator.and_), [any()](#sqlalchemy.orm.RelationshipProperty.Comparator.any),
    [contains()](#sqlalchemy.orm.RelationshipProperty.Comparator.contains), [entity](#sqlalchemy.orm.RelationshipProperty.Comparator.entity),
    [has()](#sqlalchemy.orm.RelationshipProperty.Comparator.has), [in_()](#sqlalchemy.orm.RelationshipProperty.Comparator.in_),
    [mapper](#sqlalchemy.orm.RelationshipProperty.Comparator.mapper), [of_type()](#sqlalchemy.orm.RelationshipProperty.Comparator.of_type),
    [cascade](#sqlalchemy.orm.RelationshipProperty.cascade), [cascade_iterator()](#sqlalchemy.orm.RelationshipProperty.cascade_iterator),
    [declarative_scan()](#sqlalchemy.orm.RelationshipProperty.declarative_scan), [do_init()](#sqlalchemy.orm.RelationshipProperty.do_init),
    [entity](#sqlalchemy.orm.RelationshipProperty.entity), [instrument_class()](#sqlalchemy.orm.RelationshipProperty.instrument_class),
    [mapper](#sqlalchemy.orm.RelationshipProperty.mapper), [merge()](#sqlalchemy.orm.RelationshipProperty.merge)'
- en: '**Class signature**'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") (`sqlalchemy.orm._IntrospectsAnnotations`,
    `sqlalchemy.orm.StrategizedProperty`, [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"))
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") (`sqlalchemy.orm._IntrospectsAnnotations`,
    `sqlalchemy.orm.StrategizedProperty`, [`sqlalchemy.log.Identified`](../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"))
- en: '[PRE252]'
  id: totrans-1093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Produce boolean, comparison, and other operators for [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") attributes.
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")属性生成布尔值、比较和其他操作符。
- en: See the documentation for [`PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator") for a brief overview of ORM level operator definition.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")的文档，了解ORM级别操作符定义的简要概述。
- en: See also
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator")'
- en: '[`Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.orm.ColumnProperty.Comparator "sqlalchemy.orm.ColumnProperty.Comparator")'
- en: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[Redefining and Creating New Operators](../core/custom_types.html#types-operators)'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](../core/custom_types.html#types-operators)'
- en: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TypeEngine.comparator_factory`](../core/type_api.html#sqlalchemy.types.TypeEngine.comparator_factory
    "sqlalchemy.types.TypeEngine.comparator_factory")'
- en: '**Class signature**'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.RelationshipProperty.Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"))
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.RelationshipProperty.Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator") (`sqlalchemy.util.langhelpers.MemoizedSlots`,
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"))
- en: '[PRE253]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Implement the `==` operator.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: 'In a many-to-one context, such as:'
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 在多对一的上下文中，例如：
- en: '[PRE254]'
  id: totrans-1107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'this will typically produce a clause such as:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常会生成一个子句，例如：
- en: '[PRE255]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Where `<some id>` is the primary key of the given object.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`<some id>`是给定对象的主键。
- en: 'The `==` operator provides partial functionality for non- many-to-one comparisons:'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '`==`运算符为非多对一比较提供了部分功能：'
- en: Comparisons against collections are not supported. Use `Comparator.contains()`.
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持与集合进行比较。请使用`Comparator.contains()`。
- en: Compared to a scalar one-to-many, will produce a clause that compares the target
    columns in the parent to the given target.
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与标量一对多相比，将生成一个子句，比较父级中的目标列与给定目标。
- en: Compared to a scalar many-to-many, an alias of the association table will be
    rendered as well, forming a natural join that is part of the main body of the
    query. This will not work for queries that go beyond simple AND conjunctions of
    comparisons, such as those which use OR. Use explicit joins, outerjoins, or `Comparator.has()`
    for more comprehensive non-many-to-one scalar membership tests.
  id: totrans-1114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与标量多对多相比，关联表的别名也将被渲染，形成一个自然连接，作为查询主体的一部分。这对于超出简单AND比较的查询不起作用，例如使用OR的查询。请使用显式连接、外连接或`Comparator.has()`进行更全面的非多对一标量成员测试。
- en: Comparisons against `None` given in a one-to-many or many-to-many context produce
    a NOT EXISTS clause.
  id: totrans-1115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个一对多或多对多的上下文中与`None`进行比较会产生一个NOT EXISTS子句。
- en: '[PRE256]'
  id: totrans-1116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Construction of [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator") is internal to the ORM’s attribute
    mechanics.
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator "sqlalchemy.orm.RelationshipProperty.Comparator")的构造是ORM属性机制的内部实现。'
- en: '[PRE257]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Implement the `!=` operator.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: 'In a many-to-one context, such as:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 在多对一的上下文中，例如：
- en: '[PRE258]'
  id: totrans-1121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'This will typically produce a clause such as:'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常会生成一个子句，例如：
- en: '[PRE259]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Where `<some id>` is the primary key of the given object.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`<some id>`是给定对象的主键。
- en: 'The `!=` operator provides partial functionality for non- many-to-one comparisons:'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '`!=`运算符为非多对一比较提供了部分功能：'
- en: Comparisons against collections are not supported. Use `Comparator.contains()`
    in conjunction with [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_").
  id: totrans-1126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持对集合的比较。使用 `Comparator.contains()` 结合 [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_")。
- en: Compared to a scalar one-to-many, will produce a clause that compares the target
    columns in the parent to the given target.
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与标量一对多相比，将生成一个在父项中比较目标列与给定目标的子句。
- en: Compared to a scalar many-to-many, an alias of the association table will be
    rendered as well, forming a natural join that is part of the main body of the
    query. This will not work for queries that go beyond simple AND conjunctions of
    comparisons, such as those which use OR. Use explicit joins, outerjoins, or `Comparator.has()`
    in conjunction with [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") for more comprehensive non-many-to-one scalar
    membership tests.
  id: totrans-1128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与标量多对多相比，关联表的别名也将被呈现，形成查询主体的一部分的自然连接。这不适用于超出简单 AND 比较的查询，例如使用 OR 的查询。使用显式联接、外联接或
    `Comparator.has()` 结合 [`not_()`](../core/sqlelement.html#sqlalchemy.sql.expression.not_
    "sqlalchemy.sql.expression.not_") 进行更全面的非一对多标量成员测试。
- en: Comparisons against `None` given in a one-to-many or many-to-many context produce
    an EXISTS clause.
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一对多或多对多的情况下与 `None` 比较会产生 EXISTS 子句。
- en: '[PRE260]'
  id: totrans-1130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 PropComparator 的副本，该副本将使用给定的[`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") 来生成相应的表达式。
- en: '[PRE261]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Add AND criteria.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 AND 条件。
- en: See [`PropComparator.and_()`](#sqlalchemy.orm.PropComparator.and_ "sqlalchemy.orm.PropComparator.and_")
    for an example.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[`PropComparator.and_()`](#sqlalchemy.orm.PropComparator.and_ "sqlalchemy.orm.PropComparator.and_")
    以获取示例。
- en: New in version 1.4.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本新增。
- en: '[PRE262]'
  id: totrans-1136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Produce an expression that tests a collection against particular criterion,
    using EXISTS.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个根据特定标准测试集合的表达式，使用 EXISTS。
- en: 'An expression like:'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE263]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Will produce a query like:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成类似于以下的查询：
- en: '[PRE264]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Because `Comparator.any()` uses a correlated subquery, its performance is not
    nearly as good when compared against large target tables as that of using a join.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `Comparator.any()` 使用相关子查询，所以与大型目标表相比，其性能不如使用联接好。
- en: '`Comparator.any()` is particularly useful for testing for empty collections:'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator.any()` 特别适用于测试空集合：'
- en: '[PRE265]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: 'will produce:'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成：
- en: '[PRE266]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '`Comparator.any()` is only valid for collections, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that has `uselist=True`. For scalar references,
    use `Comparator.has()`.'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator.any()` 仅适用于集合，即具有 `uselist=True` 的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")。对于标量引用，请使用 `Comparator.has()`。'
- en: '[PRE267]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Return a simple expression that tests a collection for containment of a particular
    item.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个简单的表达式，测试集合是否包含特定项。
- en: '`Comparator.contains()` is only valid for a collection, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that implements one-to-many or many-to-many with
    `uselist=True`.'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator.contains()` 仅适用于集合，即实现一对多或多对多关系且 `uselist=True` 的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")。'
- en: 'When used in a simple one-to-many context, an expression like:'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单的一对多上下文中使用时，例如表达式：
- en: '[PRE268]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Produces a clause like:'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的子句类似于：
- en: '[PRE269]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Where `<some id>` is the value of the foreign key attribute on `other` which
    refers to the primary key of its parent object. From this it follows that `Comparator.contains()`
    is very useful when used with simple one-to-many operations.
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `<some id>` 是指 `other` 上的外键属性的值，该属性引用其父对象的主键。因此，`Comparator.contains()` 在与简单的一对多操作一起使用时非常有用。
- en: 'For many-to-many operations, the behavior of `Comparator.contains()` has more
    caveats. The association table will be rendered in the statement, producing an
    “implicit” join, that is, includes multiple tables in the FROM clause which are
    equated in the WHERE clause:'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多对多操作，`Comparator.contains()` 的行为有更多注意事项。关联表将呈现在语句中，生成一个“隐式”联接，即，在 WHERE 子句中包括多个表：
- en: '[PRE270]'
  id: totrans-1157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: 'Produces a query like:'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的查询类似于：
- en: '[PRE271]'
  id: totrans-1159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Where `<some id>` would be the primary key of `other`. From the above, it is
    clear that `Comparator.contains()` will **not** work with many-to-many collections
    when used in queries that move beyond simple AND conjunctions, such as multiple
    `Comparator.contains()` expressions joined by OR. In such cases subqueries or
    explicit “outer joins” will need to be used instead. See `Comparator.any()` for
    a less-performant alternative using EXISTS, or refer to [`Query.outerjoin()`](queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") as well as [Joins](queryguide/select.html#orm-queryguide-joins)
    for more details on constructing outer joins.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`<some id>`将是`other`的主键。从上面可以明显看出，当在超出简单AND连接的查询中使用多个由OR连接的`Comparator.contains()`表达式时，`Comparator.contains()`将**不会**与多对多集合一起工作。在这种情况下，需要使用子查询或显式“外连接”。查看`Comparator.any()`以获取使用EXISTS的性能较差的替代方案，或者参考[`Query.outerjoin()`](queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")以及[Joins](queryguide/select.html#orm-queryguide-joins)以获取有关构建外连接的更多详细信息。
- en: kwargs may be ignored by this operator but are required for API conformance.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: kwargs可能会被此运算符忽略，但对于API符合性是必需的。
- en: '[PRE272]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: The target entity referred to by this [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator").
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 被此[`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator "sqlalchemy.orm.RelationshipProperty.Comparator")引用的目标实体。
- en: This is either a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")或[`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp")对象。
- en: This is the “target” or “remote” side of the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")的“目标”或“远程”端。
- en: '[PRE273]'
  id: totrans-1166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Produce an expression that tests a scalar reference against particular criterion,
    using EXISTS.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个表达式，使用EXISTS针对特定标准测试标量引用。
- en: 'An expression like:'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的表达式：
- en: '[PRE274]'
  id: totrans-1169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: 'Will produce a query like:'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成一个查询如下：
- en: '[PRE275]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Because `Comparator.has()` uses a correlated subquery, its performance is not
    nearly as good when compared against large target tables as that of using a join.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Comparator.has()`使用相关子查询，所以当与大型目标表进行比较时，其性能不如使用连接。
- en: '`Comparator.has()` is only valid for scalar references, i.e. a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that has `uselist=False`. For collection references,
    use `Comparator.any()`.'
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator.has()`仅适用于标量引用，即具有`uselist=False`的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")。对于集合引用，请使用`Comparator.any()`。'
- en: '[PRE276]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Produce an IN clause - this is not implemented for [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-based attributes at this time.
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个IN子句 - 目前尚未为基于[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的属性实现此功能。
- en: '[PRE277]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: The target [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    referred to by this [`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator
    "sqlalchemy.orm.RelationshipProperty.Comparator").
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 被此[`Comparator`](#sqlalchemy.orm.RelationshipProperty.Comparator "sqlalchemy.orm.RelationshipProperty.Comparator")引用的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。
- en: This is the “target” or “remote” side of the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")的“目标”或“远程”端。
- en: '[PRE278]'
  id: totrans-1179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Redefine this object in terms of a polymorphic subclass.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 重新定义此对象以多态子类的术语。
- en: See [`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type "sqlalchemy.orm.PropComparator.of_type")
    for an example.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type "sqlalchemy.orm.PropComparator.of_type")的示例。
- en: '[PRE279]'
  id: totrans-1182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Return the current cascade setting for this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")的当前级联设置。
- en: '[PRE280]'
  id: totrans-1184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Iterate through instances related to the given instance for a particular ‘cascade’,
    starting with this MapperProperty.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历与特定‘cascade’相关联的给定实例的实例，从此MapperProperty开始。
- en: Return an iterator3-tuples (instance, mapper, state).
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个迭代器三元组（实例，映射器，状态）。
- en: Note that the ‘cascade’ collection on this MapperProperty is checked first for
    the given type before cascade_iterator is called.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在调用cascade_iterator之前，将首先检查此MapperProperty上的‘cascade’集合是否具有给定类型。
- en: This method typically only applies to Relationship.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法通常仅适用于Relationship。
- en: '[PRE281]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Perform class-specific initializaton at early declarative scanning time.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期声明扫描时执行类特定的初始化。
- en: New in version 2.0.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: '[PRE282]'
  id: totrans-1192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Perform subclass-specific initialization post-mapper-creation steps.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 执行子类特定的初始化后映射器创建步骤。
- en: This is a template method called by the `MapperProperty` object’s init() method.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`MapperProperty`对象的init()方法调用的模板方法。
- en: '[PRE283]'
  id: totrans-1195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Return the target mapped entity, which is an inspect() of the class or aliased
    class that is referenced by this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty").
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 返回目标映射实体，这是由此[`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")引用的类或别名类的inspect()。
- en: '[PRE284]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Hook called by the Mapper to the property to initiate instrumentation of the
    class attribute managed by this MapperProperty.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 由Mapper调用的钩子，用于启动由此MapperProperty管理的类属性的工具化。
- en: The MapperProperty here will typically call out to the attributes module to
    set up an InstrumentedAttribute.
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的MapperProperty通常会调用属性模块来设置InstrumentedAttribute。
- en: This step is the first of two steps to set up an InstrumentedAttribute, and
    is called early in the mapper setup process.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是设置`InstrumentedAttribute`的两个步骤中的第一个步骤，并在映射器设置过程中早期调用。
- en: The second step is typically the init_class_attribute step, called from StrategizedProperty
    via the post_instrument_class() hook. This step assigns additional state to the
    InstrumentedAttribute (specifically the “impl”) which has been determined after
    the MapperProperty has determined what kind of persistence management it needs
    to do (e.g. scalar, object, collection, etc).
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步通常是通过StrategizedProperty通过post_instrument_class()钩子调用的init_class_attribute步骤。此步骤为InstrumentedAttribute分配了附加状态（特别是“impl”），该状态在MapperProperty确定需要执行何种持久性管理后确定（例如标量、对象、集合等）。
- en: '[PRE285]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Return the targeted [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    for this [`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty").
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`RelationshipProperty`](#sqlalchemy.orm.RelationshipProperty "sqlalchemy.orm.RelationshipProperty")的目标[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。
- en: '[PRE286]'
  id: totrans-1204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Merge the attribute represented by this `MapperProperty` from source to destination
    object.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 将此`MapperProperty`表示的属性从源对象合并到目标对象。
- en: '[PRE287]'
  id: totrans-1206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: A type that may be used to indicate any ORM-level attribute or object that acts
    in place of one, in the context of SQL expression construction.
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可用于指示任何ORM级别属性或对象的类型，用于SQL表达式构建的上下文中。
- en: '[`SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")
    extends from the Core [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") to add additional SQL methods
    that are ORM specific, such as [`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type"), and is part of the bases for [`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"). It may be used in [**PEP 484**](https://peps.python.org/pep-0484/)
    typing to indicate arguments or return values that should behave as ORM-level
    attribute expressions.'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")从核心[`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")扩展，添加了额外的ORM特定的SQL方法，例如[`PropComparator.of_type()`](#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")，并且是[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")的基础之一。它可以在[**PEP 484**](https://peps.python.org/pep-0484/)类型提示中用于指示应该作为ORM级别属性表达式行为的参数或返回值。'
- en: New in version 2.0.0b4.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.0b4中的新功能。
- en: '**Class signature**'
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")
    (`sqlalchemy.orm.base.SQLORMOperations`, [`sqlalchemy.sql.expression.SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"), `sqlalchemy.util.langhelpers.TypingOnly`)
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.SQLORMExpression")（`sqlalchemy.orm.base.SQLORMOperations`，[`sqlalchemy.sql.expression.SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")，`sqlalchemy.util.langhelpers.TypingOnly`)
- en: '[PRE288]'
  id: totrans-1212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Declarative front-end for the [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty") class.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SynonymProperty`](#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")类的声明性前端。'
- en: Public constructor is the [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") function.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 公共构造函数是 [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    函数。
- en: 'Changed in version 2.0: Added [`Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    as a Declarative compatible subclass for [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.SynonymProperty")'
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版中的变更：将 [`Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym") 添加为与
    [`SynonymProperty`](#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    兼容的声明式子类。
- en: See also
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: '[同义词](mapped_attributes.html#synonyms) - 同义词概述'
- en: '**Class signature**'
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    ([`sqlalchemy.orm.descriptor_props.SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.descriptor_props.SynonymProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    ([`sqlalchemy.orm.descriptor_props.SynonymProperty`](#sqlalchemy.orm.SynonymProperty
    "sqlalchemy.orm.descriptor_props.SynonymProperty"), `sqlalchemy.orm.base._DeclarativeMapped`)
- en: '[PRE289]'
  id: totrans-1220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Denote an attribute name as a synonym to a mapped property, in that the attribute
    will mirror the value and expression behavior of another attribute.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性名标记为映射属性的同义词，即属性将反映另一个属性的值和表达行为。
- en: '[`Synonym`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym") is constructed
    using the [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    function.'
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
  zh: '[`同义词`](#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym") 是使用 [`synonym()`](mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") 函数构建的。'
- en: See also
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Synonyms](mapped_attributes.html#synonyms) - Overview of synonyms'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: '[同义词](mapped_attributes.html#synonyms) - 同义词概述'
- en: '**Members**'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[doc](#sqlalchemy.orm.SynonymProperty.doc), [info](#sqlalchemy.orm.SynonymProperty.info),
    [key](#sqlalchemy.orm.SynonymProperty.key), [parent](#sqlalchemy.orm.SynonymProperty.parent),
    [set_parent()](#sqlalchemy.orm.SynonymProperty.set_parent), [uses_objects](#sqlalchemy.orm.SynonymProperty.uses_objects)'
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: '[doc](#sqlalchemy.orm.SynonymProperty.doc), [info](#sqlalchemy.orm.SynonymProperty.info),
    [key](#sqlalchemy.orm.SynonymProperty.key), [parent](#sqlalchemy.orm.SynonymProperty.parent),
    [set_parent()](#sqlalchemy.orm.SynonymProperty.set_parent), [uses_objects](#sqlalchemy.orm.SynonymProperty.uses_objects)'
- en: '**Class signature**'
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SynonymProperty`](#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    (`sqlalchemy.orm.descriptor_props.DescriptorProperty`)
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.SynonymProperty`](#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    (`sqlalchemy.orm.descriptor_props.DescriptorProperty`)
- en: '[PRE290]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '*inherited from the* `DescriptorProperty.doc` *attribute of* `DescriptorProperty`'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `DescriptorProperty.doc` *属性的* `DescriptorProperty`'
- en: optional documentation string
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的文档字符串
- en: '[PRE291]'
  id: totrans-1232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '*inherited from the* [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")
    *属性的* [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr").
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    关联。
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时生成。或者，它可以作为 [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), 或 [`composite()`](composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") 函数的构造函数参数指定。
- en: See also
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryableAttribute.info`](#sqlalchemy.orm.QueryableAttribute.info "sqlalchemy.orm.QueryableAttribute.info")'
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[PRE292]'
  id: totrans-1239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '*inherited from the* [`MapperProperty.key`](#sqlalchemy.orm.MapperProperty.key
    "sqlalchemy.orm.MapperProperty.key") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`MapperProperty.key`](#sqlalchemy.orm.MapperProperty.key "sqlalchemy.orm.MapperProperty.key")
    *属性的* [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
- en: name of class attribute
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性的名称
- en: '[PRE293]'
  id: totrans-1242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '*inherited from the* [`MapperProperty.parent`](#sqlalchemy.orm.MapperProperty.parent
    "sqlalchemy.orm.MapperProperty.parent") *attribute of* [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`MapperProperty.parent`](#sqlalchemy.orm.MapperProperty.parent "sqlalchemy.orm.MapperProperty.parent")
    *属性的* [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
- en: the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    managing this property.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 管理此属性的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: '[PRE294]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: Set the parent mapper that references this MapperProperty.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 设置引用此MapperProperty的父Mapper。
- en: This method is overridden by some subclasses to perform extra setup when the
    mapper is first known.
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 一些子类会重写此方法，在首次了解Mapper时执行额外的设置。
- en: '[PRE295]'
  id: totrans-1248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-1250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '**Class signature**'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryContext.default_load_options`](#sqlalchemy.orm.QueryContext.default_load_options
    "sqlalchemy.orm.QueryContext.default_load_options") (`sqlalchemy.sql.expression.Options`)
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryContext.default_load_options`](#sqlalchemy.orm.QueryContext.default_load_options
    "sqlalchemy.orm.QueryContext.default_load_options") (`sqlalchemy.sql.expression.Options`)
- en: '[PRE298]'
  id: totrans-1253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Base class for [descriptor](../glossary.html#term-descriptor) objects that intercept
    attribute events on behalf of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") object. The actual [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") is accessible via the `QueryableAttribute.property`
    attribute.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代表[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")对象拦截属性事件的描述符对象的基类。实际的[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")可通过`QueryableAttribute.property`属性访问。
- en: See also
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstrumentedAttribute`](#sqlalchemy.orm.InstrumentedAttribute "sqlalchemy.orm.InstrumentedAttribute")'
- en: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")'
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.attrs`](mapping_api.html#sqlalchemy.orm.Mapper.attrs "sqlalchemy.orm.Mapper.attrs")'
- en: '**Members**'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[adapt_to_entity()](#sqlalchemy.orm.QueryableAttribute.adapt_to_entity), [and_()](#sqlalchemy.orm.QueryableAttribute.and_),
    [expression](#sqlalchemy.orm.QueryableAttribute.expression), [info](#sqlalchemy.orm.QueryableAttribute.info),
    [is_attribute](#sqlalchemy.orm.QueryableAttribute.is_attribute), [of_type()](#sqlalchemy.orm.QueryableAttribute.of_type),
    [operate()](#sqlalchemy.orm.QueryableAttribute.operate), [parent](#sqlalchemy.orm.QueryableAttribute.parent),
    [reverse_operate()](#sqlalchemy.orm.QueryableAttribute.reverse_operate)'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: '[adapt_to_entity()](#sqlalchemy.orm.QueryableAttribute.adapt_to_entity), [and_()](#sqlalchemy.orm.QueryableAttribute.and_),
    [expression](#sqlalchemy.orm.QueryableAttribute.expression), [info](#sqlalchemy.orm.QueryableAttribute.info),
    [is_attribute](#sqlalchemy.orm.QueryableAttribute.is_attribute), [of_type()](#sqlalchemy.orm.QueryableAttribute.of_type),
    [operate()](#sqlalchemy.orm.QueryableAttribute.operate), [parent](#sqlalchemy.orm.QueryableAttribute.parent),
    [reverse_operate()](#sqlalchemy.orm.QueryableAttribute.reverse_operate)'
- en: '**Class signature**'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") (`sqlalchemy.orm.base._DeclarativeMapped`,
    [`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression "sqlalchemy.orm.base.SQLORMExpression"),
    [`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr"),
    [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator "sqlalchemy.orm.PropComparator"),
    `sqlalchemy.sql.roles.JoinTargetRole`, `sqlalchemy.sql.roles.OnClauseRole`, `sqlalchemy.sql.expression.Immutable`,
    `sqlalchemy.sql.cache_key.SlotsMemoizedHasCacheKey`, `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.event.registry.EventTarget`)
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute")
    (`sqlalchemy.orm.base._DeclarativeMapped`, [`sqlalchemy.orm.base.SQLORMExpression`](#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.base.SQLORMExpression"), [`sqlalchemy.orm.base.InspectionAttr`](#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr"), [`sqlalchemy.orm.PropComparator`](#sqlalchemy.orm.PropComparator
    "sqlalchemy.orm.PropComparator"), `sqlalchemy.sql.roles.JoinTargetRole`, `sqlalchemy.sql.roles.OnClauseRole`,
    `sqlalchemy.sql.expression.Immutable`, `sqlalchemy.sql.cache_key.SlotsMemoizedHasCacheKey`,
    `sqlalchemy.util.langhelpers.MemoizedSlots`, `sqlalchemy.event.registry.EventTarget`)
- en: '[PRE299]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Return a copy of this PropComparator which will use the given [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp") to produce corresponding expressions.
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 PropComparator 的副本，该副本将使用给定的[`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp")来生成相应的表达式。
- en: '[PRE300]'
  id: totrans-1266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Add additional criteria to the ON clause that’s represented by this relationship
    attribute.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 向由此关系属性表示的 ON 子句添加附加条件。
- en: 'E.g.:'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE301]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: New in version 1.4.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: See also
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Combining Relationship with Custom ON Criteria](queryguide/select.html#orm-queryguide-join-on-augmented)'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: '[将关联与自定义 ON 条件组合](queryguide/select.html#orm-queryguide-join-on-augmented)'
- en: '[Adding Criteria to loader options](queryguide/relationships.html#loader-option-criteria)'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: '[向加载器选项添加条件](queryguide/relationships.html#loader-option-criteria)'
- en: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")'
- en: '[PRE302]'
  id: totrans-1275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: The SQL expression object represented by this [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute").
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute "sqlalchemy.orm.QueryableAttribute")表示的
    SQL 表达式对象。
- en: This will typically be an instance of a [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") subclass representing a column expression.
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，这将是一个[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")子类的实例，代表着一个列表达式。
- en: '[PRE303]'
  id: totrans-1278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: Return the ‘info’ dictionary for the underlying SQL element.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回底层 SQL 元素的‘info’字典。
- en: 'The behavior here is as follows:'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的行为如下：
- en: If the attribute is a column-mapped property, i.e. [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty"), which is mapped directly to a schema-level [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, this attribute will return the [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") dictionary associated with the core-level
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object.
  id: totrans-1281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果属性是一个列映射属性，即[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")，它直接映射到模式级[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，那么此属性将返回与核心级[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象关联的[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")字典。
- en: If the attribute is a [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")
    but is mapped to any other kind of SQL expression other than a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the attribute will refer to the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") dictionary associated directly with the
    [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty"),
    assuming the SQL expression itself does not have its own `.info` attribute (which
    should be the case, unless a user-defined SQL construct has defined one).
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果属性是一个[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty "sqlalchemy.orm.ColumnProperty")，但映射到除[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")之外的任何其他类型的 SQL 表达式，该属性将直接指向与[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")关联的[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info")字典，假设 SQL 表达式本身没有自己的`.info`属性（这应该是情况，除非用户定义的
    SQL 构造已定义了一个）。
- en: If the attribute refers to any other kind of [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty"), including [`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship"), the attribute will refer to the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info") dictionary associated with that [`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果属性指的是任何其他类型的[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")，包括[`Relationship`](#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")，那么该属性将指向与该[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")相关联的[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info
    "sqlalchemy.orm.MapperProperty.info")字典。
- en: To access the [`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")
    dictionary of the [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    unconditionally, including for a [`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty") that’s associated directly with a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the attribute can be referred to using `QueryableAttribute.property`
    attribute, as `MyClass.someattribute.property.info`.
  id: totrans-1284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要无条件访问[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")字典的[`MapperProperty`](#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")，包括与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")直接关联的[`ColumnProperty`](#sqlalchemy.orm.ColumnProperty
    "sqlalchemy.orm.ColumnProperty")，可以使用`QueryableAttribute.property`属性引用属性，如`MyClass.someattribute.property.info`。
- en: See also
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MapperProperty.info`](#sqlalchemy.orm.MapperProperty.info "sqlalchemy.orm.MapperProperty.info")'
- en: '[PRE304]'
  id: totrans-1288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: True if this object is a Python [descriptor](../glossary.html#term-descriptor).
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是Python的[描述符](../glossary.html#term-descriptor)，则为True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以指代许多类型。通常是一个处理[`MapperProperty`](#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")属性事件的[`QueryableAttribute`](#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")。但也可以是一个扩展类型，如[`AssociationProxy`](extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")或[`hybrid_property`](extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")将引用一个常量，用于标识特定的子类型。
- en: See also
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE305]'
  id: totrans-1293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: Redefine this object in terms of a polymorphic subclass, [`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") construct, or [`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 重新定义此对象以多态子类，[`with_polymorphic()`](queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")构造或[`aliased()`](queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造。
- en: Returns a new PropComparator from which further criterion can be evaluated.
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的`PropComparator`，可以进一步评估标准。
- en: 'e.g.:'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE306]'
  id: totrans-1297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: 'Parameters:'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**class_** – a class or mapper indicating that criterion will be against this
    specific subclass.'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: '**class_** – 一个表示标准将针对特定子类的类或映射器。'
- en: See also
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Relationship to join between aliased targets](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - in the [ORM Querying Guide](queryguide/index.html)'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用关系在别名目标之间进行连接](queryguide/select.html#orm-queryguide-joining-relationships-aliased)
    - 在[ORM查询指南](queryguide/index.html)中'
- en: '[Joining to specific sub-types or with_polymorphic() entities](queryguide/inheritance.html#inheritance-of-type)'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接到特定子类型或`with_polymorphic()`实体](queryguide/inheritance.html#inheritance-of-type)'
- en: '[PRE307]'
  id: totrans-1303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: Operate on an argument.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此操作可以使通用行为应用于所有操作。例如，覆盖[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左侧和右侧：
- en: '[PRE308]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: 'Parameters:'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’方。对于大多数操作来说，将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-1311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊操作符（如`ColumnOperators.contains()`）传递。'
- en: '[PRE309]'
  id: totrans-1312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: Return an inspection instance representing the parent.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示父实体的检查实例。
- en: This will be either an instance of [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") or [`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp"), depending upon the nature of the parent entity
    which this attribute is associated with.
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")或[`AliasedInsp`](queryguide/api.html#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp")的实例，取决于此属性所关联的父实体的性质。
- en: '[PRE310]'
  id: totrans-1315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: Reverse operate on an argument.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.orm.QueryableAttribute.operate
    "sqlalchemy.orm.QueryableAttribute.operate").
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式与[`operate()`](#sqlalchemy.orm.QueryableAttribute.operate "sqlalchemy.orm.QueryableAttribute.operate")相同。
- en: '[PRE311]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-1319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: Filter the given list of InstanceStates to those relevant to the given DependencyProcessor.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的InstanceState列表过滤为与给定DependencyProcessor相关的实例。
- en: '[PRE313]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: Mark processed objects as clean / deleted after a successful flush().
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功的flush()后，将已处理的对象标记为干净/已删除。
- en: This method is called within the flush() method after the execute() method has
    succeeded and the transaction has been committed.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 在execute()方法成功执行且事务已提交后，在flush()方法内调用此方法。
- en: '[PRE314]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: Facade to attributes.get_state_history(), including caching of results.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 作为attributes.get_state_history()的门面，包括结果的缓存。
- en: '[PRE315]'
  id: totrans-1326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: Return `True` if the given state is marked as deleted within this uowtransaction.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定状态在此uowtransaction中标记为已删除，则返回`True`。
- en: '[PRE316]'
  id: totrans-1328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: Remove pending actions for a state from the uowtransaction.
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 从uowtransaction中移除状态的待处理操作。
- en: '**Members**'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[filter_states_for_dep()](#sqlalchemy.orm.UOWTransaction.filter_states_for_dep),
    [finalize_flush_changes()](#sqlalchemy.orm.UOWTransaction.finalize_flush_changes),
    [get_attribute_history()](#sqlalchemy.orm.UOWTransaction.get_attribute_history),
    [is_deleted()](#sqlalchemy.orm.UOWTransaction.is_deleted), [remove_state_actions()](#sqlalchemy.orm.UOWTransaction.remove_state_actions),
    [was_already_deleted()](#sqlalchemy.orm.UOWTransaction.was_already_deleted)'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '[filter_states_for_dep()](#sqlalchemy.orm.UOWTransaction.filter_states_for_dep),
    [finalize_flush_changes()](#sqlalchemy.orm.UOWTransaction.finalize_flush_changes),
    [get_attribute_history()](#sqlalchemy.orm.UOWTransaction.get_attribute_history),
    [is_deleted()](#sqlalchemy.orm.UOWTransaction.is_deleted), [remove_state_actions()](#sqlalchemy.orm.UOWTransaction.remove_state_actions),
    [was_already_deleted()](#sqlalchemy.orm.UOWTransaction.was_already_deleted)'
- en: '[PRE317]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Return `True` if the given state is expired and was deleted previously.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定状态已过期且先前已被删除，则返回`True`。
