- en: Contextual/Thread-local Sessions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文/线程本地会话
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/contextual.html](https://docs.sqlalchemy.org/en/20/orm/contextual.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/contextual.html](https://docs.sqlalchemy.org/en/20/orm/contextual.html)
- en: Recall from the section [When do I construct a Session, when do I commit it,
    and when do I close it?](session_basics.html#session-faq-whentocreate), the concept
    of “session scopes” was introduced, with an emphasis on web applications and the
    practice of linking the scope of a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with that of a web request. Most modern web frameworks
    include integration tools so that the scope of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") can be managed automatically, and these tools should
    be used as they are available.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下[何时构建会话，何时提交，何时关闭？](session_basics.html#session-faq-whentocreate)一节中，介绍了“会话范围”的概念，强调了在Web应用程序中链接[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的范围与Web请求的范围之间的实践。大多数现代Web框架都包括集成工具，以便自动管理[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的范围，并且应该使用这些工具，只要它们可用。
- en: SQLAlchemy includes its own helper object, which helps with the establishment
    of user-defined [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    scopes. It is also used by third-party integration systems to help construct their
    integration schemes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy包括其自己的辅助对象，它有助于建立用户定义的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")范围。它也被第三方集成系统用于帮助构建它们的集成方案。
- en: The object is the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object, and it represents a **registry** of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. If you’re not familiar with the registry pattern,
    a good introduction can be found in [Patterns of Enterprise Architecture](https://martinfowler.com/eaaCatalog/registry.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象是[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")对象，它表示一组[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的**注册表**。如果您对注册表模式不熟悉，可以在[企业架构模式](https://martinfowler.com/eaaCatalog/registry.html)中找到一个很好的介绍。
- en: Warning
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry by default uses a Python `threading.local()` in order to track [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. **This is not necessarily compatible with
    all application servers**, particularly those which make use of greenlets or other
    alternative forms of concurrency control, which may lead to race conditions (e.g.
    randomly occurring failures) when used in moderate to high concurrency scenarios.
    Please read [Thread-Local Scope](#unitofwork-contextual-threadlocal) and [Using
    Thread-Local Scope with Web Applications](#session-lifespan) below to more fully
    understand the implications of using `threading.local()` to track [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and consider more explicit means of scoping
    when using application servers which are not based on traditional threads.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")注册表默认使用Python的`threading.local()`来跟踪[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。**这不一定与所有应用服务器兼容**，特别是那些使用绿色线程或其他替代形式的并发控制的服务器，这可能导致在中高并发情况下使用时出现竞争条件（例如，随机发生的故障）。请阅读下面的[线程局部范围](#unitofwork-contextual-threadlocal)和[在Web应用程序中使用线程局部范围](#session-lifespan)以更充分地理解使用`threading.local()`来跟踪[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的影响，并在使用不基于传统线程的应用服务器时考虑更明确的范围。'
- en: Note
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object is a very popular and useful object used by many SQLAlchemy applications.
    However, it is important to note that it presents **only one approach** to the
    issue of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    management. If you’re new to SQLAlchemy, and especially if the term “thread-local
    variable” seems strange to you, we recommend that if possible you familiarize
    first with an off-the-shelf integration system such as [Flask-SQLAlchemy](https://pypi.org/project/Flask-SQLAlchemy/)
    or [zope.sqlalchemy](https://pypi.org/project/zope.sqlalchemy).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")对象是许多SQLAlchemy应用程序中非常流行和有用的对象。然而，重要的是要注意，它只提供了解决[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")管理问题的**一个方法**。如果你对SQLAlchemy还不熟悉，特别是如果“线程本地变量”这个术语对你来说很陌生，我们建议你如果可能的话，首先熟悉一下诸如[Flask-SQLAlchemy](https://pypi.org/project/Flask-SQLAlchemy/)或[zope.sqlalchemy](https://pypi.org/project/zope.sqlalchemy/)之类的现成集成系统。'
- en: 'A [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is constructed by calling it, passing it a **factory** which can create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. A factory is just something that produces a
    new object when called, and in the case of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the most common factory is the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker"), introduced earlier in this section. Below we illustrate
    this usage:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用它并传递一个可以创建新[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的**工厂**来构造[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")。工厂只是在调用时生成一个新对象的东西，在[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的情况下，最常见的工厂是在本节前面介绍的[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")。下面我们举例说明这种用法：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object we’ve created will now call upon the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") when we “call” the registry:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")对象现在将在我们“调用”注册表时调用[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Above, `some_session` is an instance of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which we can now use to talk to the database. This
    same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is also present within the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry we’ve created. If we call upon the registry a second time, we get back
    the **same** [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`some_session`是[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的一个实例，我们现在可以用它来与数据库交互。这个相同的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")也存在于我们创建的[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")注册表中。如果我们第二次调用注册表，我们会得到**相同的**[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This pattern allows disparate sections of the application to call upon a global
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session"),
    so that all those areas may share the same session without the need to pass it
    explicitly. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    we’ve established in our registry will remain, until we explicitly tell our registry
    to dispose of it, by calling [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式允许应用程序的不同部分调用全局的[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")，这样所有这些区域就可以在不需要显式传递的情况下共享同一个会话。我们在注册表中建立的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将保持不变，直到我们显式告诉注册表将其销毁，方法是调用[`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove")：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method first calls [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which has the effect of releasing any connection/transactional
    resources owned by the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    first, then discarding the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") itself. “Releasing” here means that connections are
    returned to their connection pool and any transactional state is rolled back,
    ultimately using the `rollback()` method of the underlying DBAPI connection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    方法首先调用当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    上的 [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")，其效果是首先释放任何由
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    拥有的连接/事务资源，然后丢弃 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    本身。这里的“释放”意味着连接被返回到其连接池，并且任何事务状态都被回滚，最终使用底层 DBAPI 连接的 `rollback()` 方法。'
- en: 'At this point, the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object is “empty”, and will create a **new** [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called again. As illustrated below, this is not
    the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    we had before:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    对象是“空的”，在再次调用时将创建一个**新的** [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。如下所示，这不是我们之前所拥有的相同 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above series of steps illustrates the idea of the “registry” pattern in
    a nutshell. With that basic idea in hand, we can discuss some of the details of
    how this pattern proceeds.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述一系列步骤简要说明了“注册表”模式的概念。有了这个基本概念，我们可以讨论这种模式如何进行的一些细节。
- en: Implicit Method Access
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式方法访问
- en: 'The job of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is simple; hold onto a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for all who ask for it. As a means of producing more transparent access to this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    also includes **proxy behavior**, meaning that the registry itself can be treated
    just like a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly; when methods are called on this object, they are **proxied** to the
    underlying [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    being maintained by the registry:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    的工作很简单；为所有请求它的人保留一个 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。为了更透明地访问这个
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 还包括**代理行为**，这意味着注册表本身可以直接像 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 一样对待；当在此对象上调用方法时，它们会**代理**到注册表维护的底层 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above code accomplishes the same task as that of acquiring the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling upon the registry, then using that [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码实现了通过调用注册表获取当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    然后使用该 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的相同任务。
- en: '## Thread-Local Scope'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '## 线程本地作用域'
- en: Users who are familiar with multithreaded programming will note that representing
    anything as a global variable is usually a bad idea, as it implies that the global
    object will be accessed by many threads concurrently. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object is entirely designed to be used in a **non-concurrent**
    fashion, which in terms of multithreading means “only in one thread at a time”.
    So our above example of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    usage, where the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object is maintained across multiple calls, suggests that some process needs to
    be in place such that multiple calls across many threads don’t actually get a
    handle to the same session. We call this notion **thread local storage**, which
    means, a special object is used that will maintain a distinct object per each
    application thread. Python provides this via the [threading.local()](https://docs.python.org/library/threading.html#threading.local)
    construct. The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object by default uses this object as storage, so that a single [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is maintained for all who call upon the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") registry, but only within the scope of a single
    thread. Callers who call upon the registry in a different thread get a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance that is local to that other thread.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉多线程编程的用户会注意到，将任何东西表示为全局变量通常是一个坏主意，因为这意味着全局对象将被许多线程同时访问。[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象完全设计成以**非并发**方式使用，从多线程的角度来看，这意味着“一次只能在一个线程中”。因此，我们上面对
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    的使用示例，其中相同的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象在多次调用中保持不变，暗示着需要某种处理方式，以使多个线程中的多次调用实际上不会获取到同一个会话的句柄。我们称这个概念为**线程本地存储**，意思是，使用一个特殊的对象，它将为每个应用程序线程维护一个独立的对象。Python通过
    [threading.local()](https://docs.python.org/library/threading.html#threading.local)
    构造提供了这个功能。[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    对象默认使用此对象作为存储，以便为所有调用 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    注册表的人维护一个单一的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，但仅在单个线程范围内。在不同线程中调用注册表的调用者会获取一个仅限于该其他线程的
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    实例。
- en: Using this technique, the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") provides a quick and relatively simple (if one
    is familiar with thread-local storage) way of providing a single, global object
    in an application that is safe to be called upon from multiple threads.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    提供了一种快速且相对简单（如果熟悉线程本地存储的话）的方式，在应用程序中提供一个单一的全局对象，可以安全地从多个线程调用。
- en: 'The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method, as always, removes the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") associated with the thread, if any. However, one advantage
    of the `threading.local()` object is that if the application thread itself ends,
    the “storage” for that thread is also garbage collected. So it is in fact “safe”
    to use thread local scope with an application that spawns and tears down threads,
    without the need to call [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"). However, the scope of transactions themselves,
    i.e. ending them via [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") or [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), will usually still be something that must
    be explicitly arranged for at the appropriate time, unless the application actually
    ties the lifespan of a thread to the lifespan of a transaction.  ## Using Thread-Local
    Scope with Web Applications'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    方法始终会删除与该线程关联的当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果有的话）。然而，`threading.local()`
    对象的一个优点是，如果应用程序线程本身结束，那么该线程的“存储”也会被垃圾回收。因此，在一个产生并销毁线程的应用程序中使用线程局部范围实际上是“安全”的，而不需要调用
    [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")。然而，事务本身的范围，即通过
    [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    或 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")
    结束它们，通常仍然是必须在适当的时候明确安排的东西，除非应用程序实际上将线程的寿命与事务的寿命绑定在一起。## 使用线程局部范围与 Web 应用程序'
- en: As discussed in the section [When do I construct a Session, when do I commit
    it, and when do I close it?](session_basics.html#session-faq-whentocreate), a
    web application is architected around the concept of a **web request**, and integrating
    such an application with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") usually implies that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be associated with that request. As it turns out,
    most Python web frameworks, with notable exceptions such as the asynchronous frameworks
    Twisted and Tornado, use threads in a simple way, such that a particular web request
    is received, processed, and completed within the scope of a single *worker thread*.
    When the request ends, the worker thread is released to a pool of workers where
    it is available to handle another request.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[何时构建会话，何时提交它，何时关闭它？](session_basics.html#session-faq-whentocreate)一节中所讨论的，一个
    web 应用程序是围绕着**网络请求**的概念构建的，并且将这样的应用程序与 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 集成通常意味着将 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 与该请求相关联。事实证明，大多数 Python web 框架，特别是异步框架 Twisted 和 Tornado
    之类的著名例外，以简单的方式使用线程，使得一个特定的网络请求在一个单独的*工作线程*的范围内接收、处理和完成。当请求结束时，工作线程被释放到一个工作线程池中，在那里它可以处理另一个请求。
- en: 'This simple correspondence of web request and thread means that to associate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a thread implies it is also associated with the web request running within
    that thread, and vice versa, provided that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is created only after the web request begins and torn
    down just before the web request ends. So it is a common practice to use [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") as a quick way to integrate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with a web application. The sequence diagram below illustrates
    this flow:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的网络请求和线程的对应关系意味着，将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    关联到一个线程意味着它也与在该线程内运行的网络请求关联，反之亦然，前提是 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 只在网络请求开始后创建并在网络请求结束前被销毁。因此，将 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 用作将 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 与 web 应用程序集成的快速方法是一种常见做法。下面的顺序图说明了这个流程：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using the above flow, the process of integrating the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the web application has exactly two requirements:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述流程，将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    与 Web 应用程序集成的过程只有两个要求：
- en: Create a single [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry when the web application first starts, ensuring that this object is accessible
    by the rest of the application.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 应用程序首次启动时创建一个单一的 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    注册表，确保此对象可被应用程序的其余部分访问。
- en: Ensure that [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove") is called when the web request ends, usually
    by integrating with the web framework’s event system to establish an “on request
    end” event.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 Web 请求结束时调用 [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove")，通常是通过与 Web 框架的事件系统集成来建立“请求结束时”事件。
- en: As noted earlier, the above pattern is **just one potential way** to integrate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a web framework, one which in particular makes the significant assumption
    that the **web framework associates web requests with application threads**. It
    is however **strongly recommended that the integration tools provided with the
    web framework itself be used, if available**, instead of [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，上述模式只是整合 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    到 Web 框架的**一种潜在方式**，特别是假定**Web 框架将 Web 请求与应用线程关联**。然而，**强烈建议使用 Web 框架本身提供的集成工具，如果有的话**，而不是
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")。
- en: In particular, while using a thread local can be convenient, it is preferable
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    be associated **directly with the request**, rather than with the current thread.
    The next section on custom scopes details a more advanced configuration which
    can combine the usage of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    with direct request based scope, or any kind of scope.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，虽然使用线程本地存储很方便，但最好将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    **直接与请求关联**，而不是与当前线程关联。下一节关于自定义范围详细介绍了一种更高级的配置，可以将 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 的使用与直接基于请求的范围，或任何类型的范围结合起来。
- en: Using Custom Created Scopes
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义创建的范围
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object’s default behavior of “thread local” scope is only one of many options
    on how to “scope” a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    A custom scope can be defined based on any existing system of getting at “the
    current thing we are working with”.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    对象的默认行为“线程本地”范围只是如何“范围” [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的许多选项之一。可以根据任何现有的“我们正在处理的当前事物”的系统来定义自定义范围。'
- en: 'Suppose a web framework defines a library function `get_current_request()`.
    An application built using this framework can call this function at any time,
    and the result will be some kind of `Request` object that represents the current
    request being processed. If the `Request` object is hashable, then this function
    can be easily integrated with [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") to associate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the request. Below we illustrate this in conjunction
    with a hypothetical event marker provided by the web framework `on_request_end`,
    which allows code to be invoked whenever a request ends:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 Web 框架定义了一个库函数 `get_current_request()`。使用此框架构建的应用程序可以随时调用此函数，结果将是表示正在处理的当前请求的某种
    `Request` 对象。如果 `Request` 对象是可哈希的，那么此函数可以很容易地与 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 集成，以将 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 与请求关联起来。下面我们结合 Web 框架提供的假设事件标记器 `on_request_end`，说明了这一点，该标记器允许在请求结束时调用代码：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Above, we instantiate [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    in the usual way, except that we pass our request-returning function as the “scopefunc”.
    This instructs [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    to use this function to generate a dictionary key whenever the registry is called
    upon to return the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). In this case it is particularly important that we ensure
    a reliable “remove” system is implemented, as this dictionary is not otherwise
    self-managed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，我们以通常的方式实例化[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")，唯一的区别是我们将请求返回函数作为“scopefunc”传递。这指示[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")在每次调用注册表返回当前[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时使用此函数生成字典键。在这种情况下，我们特别需要确保实现可靠的“删除”系统，因为否则此字典不会自行管理。
- en: Contextual Session API
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文会话 API
- en: '| Object Name | Description |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | Describes
    the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | 描述应用于类级别[`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")属性的类型。 |'
- en: '| [scoped_session](#sqlalchemy.orm.scoped_session) | Provides scoped management
    of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [scoped_session](#sqlalchemy.orm.scoped_session) | 提供[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的作用域管理。 |'
- en: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | A Registry that can store
    one or multiple instances of a single class on the basis of a “scope” function.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | 可以根据“作用域”函数存储单个类的一个或多个实例的注册表。
    |'
- en: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry") that uses a `threading.local()` variable for
    storage. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | 使用`threading.local()`变量进行存储的[`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry")。 |'
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Provides scoped management of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提供[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的作用域管理。
- en: See [Contextual/Thread-local Sessions](#unitofwork-contextual) for a tutorial.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[上下文/线程本地会话](#unitofwork-contextual)教程。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using [Asynchronous I/O (asyncio)](extensions/asyncio.html), the async-compatible
    [`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") class should be used in place of
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[异步 I/O (asyncio)](extensions/asyncio.html)时，应该使用与[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")类异步兼容的[`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session")类。
- en: '**Members**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
- en: '**Class signature**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Return the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    creating it using the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，如果不存在，则使用[`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")创建它。
- en: 'Parameters:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is not present. If the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is present and keyword arguments have been passed, [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 关键字参数将传递给[`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")可调用对象，如果不存在现有的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。如果存在[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")并且已传递关键字参数，则会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Construct a new [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")。
- en: 'Parameters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`session_factory` – a factory to create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. This is usually, but not necessarily, an
    instance of [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session_factory` – 一个用于创建新的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例的工厂。通常情况下，但不一定，这是一个[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")的实例。'
- en: '`scopefunc` – optional function which defines the current scope. If not passed,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object assumes “thread-local” scope, and will use a Python `threading.local()`
    in order to maintain the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If passed, the function should return a hashable token;
    this token will be used as the key in a dictionary in order to store and retrieve
    the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 可选函数，定义当前范围。如果未传递，[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")对象假定“线程本地”范围，并将使用Python的`threading.local()`来维护当前[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。如果传递了函数，该函数应返回一个可散列的令牌；此令牌将用作字典中的键，以便存储和检索当前[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。'
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Place an object into this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个对象放入此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法传递的对象处于[瞬态](../glossary.html#term-transient)状态时，它们将移动到[挂起](../glossary.html#term-pending)状态，直到下一次刷新，然后它们将移动到[持久](../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法传递的对象处于[分离](../glossary.html#term-detached)状态时，它们将直接移动到[持久](../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    will be moved back to the [transient](../glossary.html#term-transient) state,
    and will no longer be present within this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，则在它们被传递给[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时处于瞬态的对象将被移回[瞬态](../glossary.html#term-transient)状态，并且将不再存在于此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话基础知识](session_basics.html#id1)中'
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Add the given collection of instances to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集添加到此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: See the documentation for [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的一般行为描述，请参阅文档。
- en: See also
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话基础知识](session_basics.html#id1)中'
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的`Session.autoflush`属性的代理。
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Begin a transaction, or nested transaction, on this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未开始事务，则在此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上开始事务或嵌套事务。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object features **autobegin** behavior, so that normally it is not necessary to
    call the [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    method explicitly. However, it may be used in order to control the scope of when
    the transactional state is begun.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象具有**自动开始**行为，因此通常不需要显式调用[`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法。但是，它可以用于控制事务状态开始的范围。'
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于开始最外层事务时，如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已在事务内部，则会引发错误。
- en: 'Parameters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested"). For documentation on SAVEPOINT transactions,
    please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌套** - 如果为True，则开始SAVEPOINT事务，并等效于调用[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。有关SAVEPOINT事务的文档，请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)。'
- en: 'Returns:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a Python context manager, allowing
    [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。请注意，[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")充当Python上下文管理器，允许在“with”块中使用[`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。请参阅[显式开始](session_transaction.html#session-explicit-begin)获取示例。'
- en: See also
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[自动开始](session_basics.html#session-autobegin)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 Session 上开始一个“嵌套”事务，例如 SAVEPOINT。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库及其关联的驱动程序必须支持 SQL SAVEPOINT，该方法才能正确运行。
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 SAVEPOINT 事务的文档，请参阅[使用 SAVEPOINT](session_transaction.html#session-begin-nested)。
- en: 'Returns:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a context manager, allowing [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象。请注意，[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 作为上下文管理器，允许在“with”块中使用 [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。有关用法示例，请参阅[使用 SAVEPOINT](session_transaction.html#session-begin-nested)。'
- en: See also
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SAVEPOINT](session_transaction.html#session-begin-nested)'
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - 为了使 SAVEPOINT 正确工作，SQLite 驱动程序需要特殊的解决方法。对于 asyncio 用例，请参阅[Serializable isolation
    / Savepoints / Transactional DDL（asyncio 版本）](../dialects/sqlite.html#aiosqlite-serializable)
    部分。'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Proxy for the `Session.bind` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 `Session.bind` 属性。
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Perform a bulk insert of the given list of mapping dictionaries.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量插入。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: Legacy Feature
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 传统功能
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是 SQLAlchemy 2.0 系列的传统功能。对于现代批量插入和更新，请参阅[ORM 批量 INSERT 语句](queryguide/dml.html#orm-queryguide-bulk-insert)
    和[ORM 根据主键批量更新](queryguide/dml.html#orm-queryguide-bulk-update)。2.0 API 与此方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 一个映射类，或者实际的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象，表示映射列表中表示的单个对象类型。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` – 一个字典序列，每个字典包含要插入的映射行的状态，以映射类上的属性名称表示。如果映射引用多个表，例如联合继承映射，每个字典必须包含要填充到所有表中的所有键。'
- en: '`return_defaults` –'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` –'
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为 True 时，将更改 INSERT 过程以确保获取新生成的主键值。通常设置此参数的原因是启用[联合表继承](inheritance.html#joined-inheritance)映射的批量插入。
- en: Note
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不支持 RETURNING 的后端，[`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") 参数可以显著降低性能，因为无法批量处理 INSERT 语句。请参阅
    [“插入多个值”行为的 INSERT 语句](../core/connections.html#engine-insertmanyvalues) 了解哪些后端会受到影响的背景信息。
- en: '`render_nulls` –'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render_nulls` –'
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为 True 时，`None` 的值将导致 NULL 值包含在 INSERT 语句中，而不是将列从 INSERT 中省略。这允许要 INSERT
    的所有行具有相同的列集，从而允许将所有行批量发送到 DBAPI。通常，包含与上一行不同的 NULL 值组合的每个列集必须省略 INSERT 语句中的一系列不同列，这意味着必须将其作为单独的语句发出。通过传递此标志，可以确保将所有行的完整集合批量处理到一个批次中；但是，成本是将被省略的列调用的服务器端默认值将被跳过，因此必须确保这些值不是必需的。
- en: Warning
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置此标志时，**不会为那些以 NULL 插入的列调用服务器端默认 SQL 值**；NULL 值将被明确发送。必须小心确保整个操作不需要调用服务器端默认函数。
- en: See also
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 启用的 INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects") '
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Perform a bulk save of the given list of objects.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定对象列表执行批量保存。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: Legacy Feature
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法作为 SQLAlchemy 2.0 系列的传统功能。有关现代批量 INSERT 和 UPDATE，请参见[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM批量按主键UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一般的ORM映射对象的INSERT和UPDATE，请优先使用标准的[工作单元](../glossary.html#term-unit-of-work)数据管理模式，在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)的[ORM数据操作](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation)中引入。SQLAlchemy
    2.0 现在使用现代方言的[“Insert Many Values”行为用于INSERT语句](../core/connections.html#engine-insertmanyvalues)，解决了以前批量INSERT速度慢的问题。
- en: 'Parameters:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`objects` –'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objects` –'
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") afterwards.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个映射对象实例的序列。映射对象按原样持久化，并且在之后**不**与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联。
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in traditional operation; if the object has the `InstanceState.key`
    attribute set, then the object is assumed to be “detached” and will result in
    an UPDATE. Otherwise, an INSERT is used.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个对象，该对象是作为INSERT还是UPDATE发送取决于传统操作中[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")使用的相同规则；如果对象具有`InstanceState.key`属性设置，则假定对象为“分离”，并将导致UPDATE。否则，使用INSERT。
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 UPDATE 的情况下，语句根据已更改的属性分组，因此将成为每个 SET 子句的主题。如果`update_changed_only`为 False，则将应用每个对象中存在的所有属性到
    UPDATE 语句中，这可能有助于将语句分组到更大的executemany()中，并且还将减少检查属性历史记录的开销。
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` – 当为 True 时，将缺少生成默认值的值的行插入“一次”，以便主键值可用。特别是，这将允许联合继承和其他多表映射正确插入，而无需提前提供主键值；但是，[`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `大大降低了`该方法的性能收益。强烈建议请使用标准的[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all")方法。'
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_changed_only` – 当为 True 时，基于每个状态中已记录更改的属性渲染 UPDATE 语句。当为 False 时，除主键属性外，将所有存在的属性渲染到
    SET 子句中。'
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_order` - 当为 True 时，插入和更新的顺序与给定对象的顺序完全匹配。当为 False 时，常见类型的对象被分组为插入和更新，以便提供更多的批处理机会。'
- en: See also
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Perform a bulk update of the given list of mapping dictionaries.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量更新。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Legacy Feature
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 传统功能
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 SQLAlchemy 2.0 系列的一个传统功能。有关现代批量 INSERT 和 UPDATE，请参阅[ORM 批量 INSERT 语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM
    通过主键进行批量 UPDATE](queryguide/dml.html#orm-queryguide-bulk-update) 部分。2.0 API 与此方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 一个映射类，或者表示映射列表中所表示的单一对象的实际[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` - 一系列字典，每个字典包含要更新的映射行的状态，以映射类上的属性名称为准。如果映射涉及多个表，比如联接继承映射，则每个字典可能包含对所有表对应的键。所有这些已存在且不是主键的键都将应用于
    UPDATE 语句的 SET 子句；所需的主键值将应用于 WHERE 子句。'
- en: See also
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")所使用的事务资源和
    ORM 对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This expunges all ORM objects associated with this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这会清除与此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联的所有ORM对象，结束任何正在进行的事务，并释放此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")自身从关联的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象中签出的任何[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。然后，该操作将使[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于可以再次使用的状态。
- en: Tip
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In the default running mode the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认运行模式下，[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法**不会阻止再次使用会话**。[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本身实际上没有明确的“关闭”状态；它只是表示[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将释放所有数据库连接和ORM对象。
- en: Setting the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`将使`close`最终，意味着会禁止对会话的任何进一步操作。
- en: 'Changed in version 1.4: The [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")方法不会立即创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象；只有在再次为数据库操作使用[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时才会创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - 一个类似的方法，行为类似于`close()`，参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`True`。'
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Close *all* sessions in memory.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭*所有*内存中的会话。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.3版本起已弃用：[`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") 方法已弃用，将在将来的版本中删除。请参考`close_all_sessions()`。
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Flush pending changes and commit the current transaction.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新待处理更改并提交当前事务。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    Additionally, this re-load operation is not supported when using asyncio-oriented
    APIs. The [`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") parameter may be used to disable this behavior.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当COMMIT操作完成时，所有对象都被完全[过期](../glossary.html#term-expired)，擦除其内部内容，在下次访问对象时会自动重新加载。在此期间，这些对象处于过期状态，如果从[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中[分离](../glossary.html#term-detached)，它们将无法运行。此外，在使用基于asyncio的API时不支持此重新加载操作。[`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")参数可用于禁用此行为。
- en: When there is no transaction in place for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    since the previous call to [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), the method will begin and commit an internal-only
    “logical” transaction, that does not normally affect the database unless pending
    flush changes were detected, but will still invoke event handlers and object expiration
    rules.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")没有正在进行的事务时，表示自上次调用[`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")以来没有对此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进行任何操作，则该方法将开始并提交一个仅限内部的“逻辑”事务，通常不会影响数据库，除非检测到待处理的刷新更改，但仍将调用事件处理程序和对象过期规则。
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最外层数据库事务会无条件提交，自动释放任何正在进行的SAVEPOINT。
- en: See also
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅。
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)。'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)。'
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 AsyncSession 时避免隐式 IO](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)。'
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: reconfigure the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置由此[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")使用的[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")。
- en: See [`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")。
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对应于此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前事务对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，如果没有进行中的事务，则开始一个新事务并返回[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（注意，直到发出第一个 SQL 语句之前，才会与 DBAPI 建立事务状态）。
- en: Ambiguity in multi-bind or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects can be resolved through any of the optional
    keyword arguments. This ultimately makes usage of the [`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind") method for resolution.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 多绑定或未绑定的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象中的歧义可以通过任何可选的关键字参数来解决。最终，这使得使用[`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind")方法来解析。
- en: 'Parameters:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 绑定参数字典。可能包括“mapper”、“bind”、“clause”、“其他传递给[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")的自定义参数。'
- en: '`execution_options` –'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将传递给[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")的执行选项字典，**仅在首次获取连接时**。如果连接已经存在于[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，则会发出警告并忽略参数。
- en: See also
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Mark an instance as deleted.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类代理。
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递的对象被假定为[持久的](../glossary.html#term-persistent)或[分离的](../glossary.html#term-detached)时，调用该方法后，对象将保持在[持久](../glossary.html#term-persistent)状态，直到下一次刷新进行。在此期间，该对象还将成为[`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted")集合的成员。
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次刷新进行时，对象将转移到[删除](../glossary.html#term-deleted)状态，表示在当前事务中为其行发出了`DELETE`语句。当事务成功提交时，已删除的对象将转移到[分离](../glossary.html#term-detached)状态，并且不再存在于此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[删除](session_basics.html#session-deleting) - 在[使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE26]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在此`Session`中标记为“已删除”的实例集合
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类进行了代理。
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The set of all persistent instances considered dirty.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为脏的所有持久实例的集合。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类进行了代理。
- en: 'E.g.:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE28]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 实例在被修改但未被删除时被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个“脏”计算是“乐观”的；大多数属性设置或集合修改操作都会将实例标记为“脏”，并将其放入这个集合中，即使属性的值没有净变化。在刷新时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会发生SQL操作（这是一项更昂贵的操作，因此只在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例是否对其属性有可操作的净变化，请使用[`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Execute a SQL expression construct.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL表达式构造。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类进行了代理。
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示语句执行结果的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: 'E.g.:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The API contract of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")的API合同类似于[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")，[2.0风格](../glossary.html#term-2.0-style)版本的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: 'Changed in version 1.4: the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始变更：当使用[2.0风格](../glossary.html#term-2.0-style)ORM使用时，[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法现在是ORM语句执行的主要点。
- en: 'Parameters:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 可执行的语句（即[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")表达式，如[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")）。'
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 可选字典或字典列表，其中包含绑定的参数值。如果是单个字典，则执行单行操作；如果是字典列表，则将调用“executemany”。每个字典中的键必须对应于语句中存在的参数名称。'
- en: '`execution_options` –'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，将与语句执行相关联。此字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项子集，并且还可以提供只在ORM上下文中理解的其他选项。
- en: See also
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 用于确定绑定的其他参数的字典。可能包括“mapper”，“bind”或其他自定义参数。此字典的内容传递给[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。'
- en: 'Returns:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE31]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Expire the attributes on an instance.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性过期。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过时。下次访问过期属性时，将向[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与先前在同一事务中读取的相同值，而不管该事务之外的数据库状态的变化。
- en: To expire all objects in the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是在调用[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")或[`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法时将所有状态过期，以便为新的事务加载新状态。因此，仅在当前事务中发出了非ORM SQL语句的特定情况下调用[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire")才有意义。'
- en: 'Parameters:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE32]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Expires all persistent instances within this Session.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久实例过期。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类提供代理。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当下次访问持久实例的任何属性时，将使用 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在该事务中读取的相同值，而不考虑该事务之外的数据库状态的更改。
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象和这些对象上的单个属性过期，请使用 [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire")。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的默认行为是在调用 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 或 [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法时使所有状态过期，以便为新事务加载新状态。因此，通常不需要调用 [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")，假设事务是隔离的。'
- en: See also
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE33]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Remove the instance from this `Session`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 `Session` 中移除实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类提供代理。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对实例的所有内部引用。将根据 *expunge* 级联规则应用级联。
- en: '[PRE34]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Remove all object instances from this `Session`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 `Session` 中移除所有对象实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类提供代理。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在此 `Session` 中对所有对象调用 `expunge(obj)`。
- en: '[PRE35]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Flush all the object changes to the database.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有待处理的对象创建、删除和修改写入数据库，作为INSERTs、DELETEs、UPDATEs等。操作会自动按照会话的工作单元依赖解析器进行排序。
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库操作将在当前事务上下文中发出，并且不会影响事务的状态，除非发生错误，在这种情况下，整个事务都将回滚。您可以在事务中随意刷新()以将更改从Python移动到数据库的事务缓冲区。
- en: 'Parameters:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**objects** –'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**objects** –'
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 可选；限制刷新操作仅对给定集合中存在的元素进行操作。
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能适用于极为狭窄的一组使用案例，其中可能需要在完全刷新()发生之前对特定对象进行操作。不适用于常规用途。
- en: '[PRE36]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于给定主键标识符的实例，如果找不到则返回`None`。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类的[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: 'E.g.:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE37]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'New in version 1.4: Added [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get"), which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：添加了[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")，它已从现在的遗留[`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法中移动。
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")是特殊的，它直接提供对[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的标识映射的访问。如果给定的主键标识符存在于本地标识映射中，则直接从此集合返回对象，并且不会发出SQL，除非对象已被标记为完全过期。如果不存在，则执行SELECT以定位对象。'
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")还将执行检查，看对象是否存在于标识映射中并标记为过期
    - 还会发出SELECT以刷新对象以及确保行仍然存在。如果不是，则引发[`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。'
- en: 'Parameters:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` – 指示要加载的实体类型的映射类或[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: '`ident` –'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ident` –'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代表主键的标量、元组或字典。对于复合（例如，多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常是最方便的。如果一行的主键是值“5”，调用看起来像：
- en: '[PRE38]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组形式包含主键值，通常按照其对应于映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的主键列的顺序排列，或者如果使用了[`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")配置参数，则按照该参数使用的顺序排列。例如，如果一行的主键由整数数字“5, 10”表示，调用将如下所示：
- en: '[PRE39]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典形式应包含键，对应于每个主键元素的映射属性名称。如果映射类具有存储对象主键值的属性 `id`、`version_id`，则调用将如下所示：
- en: '[PRE40]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` – 可选的加载器选项序列，如果发出查询，则将应用于该查询。'
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate_existing` – 导致该方法无条件发出 SQL 查询并使用新加载的数据刷新对象，无论对象是否已存在。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选布尔值 `True`，表示应该使用 FOR UPDATE，或者可以是一个包含标志的字典，表示用于 SELECT
    的一组更具体的 FOR UPDATE 标志；标志应该与[`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")方法的参数匹配。取代 [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") 参数。'
- en: '`execution_options` –'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，如果发出查询，则与查询执行相关联。此字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项子集，并且还可以提供只在 ORM 上下文中理解的其他选项。
- en: New in version 1.4.29.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4.29 开始新增。
- en: See also
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM 特定的执行选项'
- en: '`bind_arguments` –'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` –'
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定绑定的附加参数字典。可能包括“mapper”、“bind”或其他自定义参数。此字典的内容传递给 [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。
- en: 'Returns:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或 `None`。
- en: '[PRE41]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Return a “bind” to which this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定的“bind”。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 代理为[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: “bind”通常是 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的实例，除非 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    已经被明确地直接绑定到 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的情况除外。
- en: For a multiply-bound or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多重绑定或未绑定的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，使用
    `mapper` 或 `clause` 参数来确定要返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当通过 ORM 操作调用 [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")，比如 [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")，以及 [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") 中的每个单独的 INSERT/UPDATE/DELETE 操作时，“mapper”参数通常会出现在调用中。
- en: 'The order of resolution is:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 解析顺序为：
- en: if mapper given and [`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了 mapper 并且 [`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") 存在，则根据首先使用的 mapper，然后使用的 mapped class，然后使用 mapped class
    的 `__mro__` 中存在的任何基类来定位绑定，从更具体的超类到更一般的超类。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了 clause 并且存在 `Session.binds`，则根据 `Session.binds` 中存在的给定 clause 中的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象来定位绑定。
- en: if `Session.binds` is present, return that.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在 `Session.binds`，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了 clause，则尝试返回与 clause 最终关联的元数据的绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了 mapper，则尝试返回与 mapper 映射到的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他可选择的元数据最终关联的绑定。
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找不到绑定，则会引发 [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](persistence_techniques.html#session-custom-partitioning).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    方法可以在 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的用户定义的子类上被覆盖，以提供任何类型的绑定解析方案。请参阅[自定义垂直分区](persistence_techniques.html#session-custom-partitioning)中的示例。
- en: 'Parameters:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或相应的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。绑定可以首先通过查看与此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联的“绑定”映射来派生自[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，其次是通过查看与[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")来派生绑定。'
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（即[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")、[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")等）。如果未提供`mapper`参数或无法生成绑定，则将搜索给定的表达式构造以获取绑定元素，通常是与绑定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话的多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE42]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 基于给定的主键标识符返回一个实例，如果找不到则引发异常。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`异常。
- en: For a detailed documentation of the arguments see the method [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 查看有关参数的详细文档，请参阅方法[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")。
- en: New in version 2.0.22.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.22版中的新功能。
- en: 'Returns:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例。
- en: See also
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - 相应的方法，用于'
- en: returns `None` if no row was found with the provided primary key
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到提供的主键的行，则返回`None`。
- en: '[PRE43]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return an identity key.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标识键。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE44]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Proxy for the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性的代理。
- en: '[PRE45]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: A user-modifiable dictionary.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可修改的字典。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法中的`info`参数进行填充。此处的字典始终局限于此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")并且可以独立于所有其他[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE46]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: True if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则返回True。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'Changed in version 1.4: The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新事务，因此在首次实例化[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的刷新过程失败，并且必须发出[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不处于事务中，则在首次使用时[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将自动开始，因此在这种情况下[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务中，并且该事务尚未在内部回滚，则[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于刷新期间先前的异常，此会话的事务已回滚。”（或类似）](../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE47]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个受检的属性的历史记录，并将当前值与其先前提交的值进行比较（如果有）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是对在[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中检查给定实例的更昂贵且准确的版本；会执行每个属性净“脏”状态的完整测试。
- en: 'E.g.:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE48]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A few caveats to this method apply:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一些注意事项适用：
- en: Instances present in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中存在的实例在使用此方法进行测试时可能报告`False`。这是因为对象可能已经通过属性变异接收到更改事件，从而将其放置在[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")中，但最终状态与从数据库加载的状态相同，在此处没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用新值时，如果标量属性未加载或已过期，则可能未记录先前设置的值 - 在这些情况下，即使最终对其数据库值没有净变化，也假定属性已更改。大多数情况下，SQLAlchemy在设置事件发生时不需要“旧”值，因此如果旧值不存在，则会跳过SQL调用的开销，这基于以下假设：标量值通常需要更新，在那些几种情况中不需要，平均而言比发出防御性SELECT要便宜。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有在属性容器的`active_history`标志设置为`True`时，才会无条件地在设置时获取“旧”值。通常为主键属性和不是简单多对一的标量对象引用设置此标志。要为任意映射列设置此标志，请使用带有[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的`active_history`参数。
- en: 'Parameters:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试的映射实例的待处理更改。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 表示是否应该包含多值集合在操作中。将其设置为`False`是一种仅检测基于本地列的属性（即标量列或多对一外键）的方法，这些属性在刷新时会导致此实例的更新。'
- en: '[PRE49]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的相应实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 代理为[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if not already.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    检查源实例的主键属性，并尝试将其与会话中具有相同主键的实例进行协调。如果在本地找不到，它将尝试根据主键从数据库加载对象，如果找不到，则创建一个新实例。然后将源实例上的每个属性的状态复制到目标实例。然后方法返回生成的目标实例；如果原始源实例尚未关联，则保持不变且未关联[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。'
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作如果关联映射使用`cascade="merge"`，将级联到关联的实例。
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 有关合并的详细讨论，请参阅[合并](session_state_management.html#unitofwork-merging)。
- en: 'Parameters:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – Instance to be merged.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要合并的实例。'
- en: '`load` –'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` –'
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，当为False时，[`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")
    切换到“高性能”模式，导致它放弃发出历史事件以及所有数据库访问。此标志用于诸如从二级缓存传输对象图到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，或将刚加载的对象传输到工作线程或进程拥有的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中而无需重新查询数据库的情况。
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This is so that when the merge operation populates
    local attributes and cascades to related objects and collections, the values can
    be “stamped” onto the target object as is, without generating any history or attribute
    events, and without the need to reconcile the incoming data with any existing
    related objects or collections that might not be loaded. The resulting objects
    from `load=False` are always produced as “clean”, so it is only appropriate that
    the given objects should be “clean” as well, else this suggests a mis-use of the
    method.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load=False` 的用例添加了一个警告，即给定对象必须处于“干净”状态，即没有要刷新的挂起更改 - 即使传入对象与任何[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")都分离。这样，当合并操作填充本地属性并级联到相关对象和集合时，值可以“盖章”到目标对象上，而不会生成任何历史或属性事件，并且不需要将传入数据与可能未加载的任何现有相关对象或集合进行协调。`load=False`
    的结果对象始终以“干净”方式生成，因此只有给定对象也应该“干净”，否则这表明方法的误用。 '
- en: '`options` –'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` –'
- en: optional sequence of loader options which will be applied to the [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的加载器选项序列，将在合并操作从数据库加载现有对象的版本时应用于[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")方法。
- en: New in version 1.4.24.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.24版本中新增。
- en: See also
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 提供了将单个对象“合并”到[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中的替代方法'
- en: '[PRE50]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“新”的所有实例的集合。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: '[PRE51]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Return a context manager that disables autoflush.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个禁用自动刷新的上下文管理器。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: 'e.g.:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE52]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在`with:`块内进行的操作不会受到查询访问时发生的刷新的影响。这在初始化涉及现有数据库查询的一系列对象时非常有用，其中未完成的对象不应立即被刷新。
- en: '[PRE53]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Return the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象所属的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This is an alias of [`object_session()`](session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`object_session()`](session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")的别名。
- en: '[PRE54]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对应的新[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 注意[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象在SQLAlchemy
    2.0中已被废弃；现在使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造ORM查询。
- en: See also
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)'
- en: '[ORM Querying Guide](queryguide/index.html)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM查询指南](queryguide/index.html)'
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[旧版查询API](queryguide/query.html) - 旧版API文档'
- en: '[PRE55]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: return a class property which produces a legacy [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object against the class and the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个类属性，当调用时会针对该类和当前[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")产生一个旧版的[`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。
- en: Legacy Feature
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 旧版特性
- en: The [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") accessor is specific to the legacy
    [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    and is not considered to be part of [2.0-style](../glossary.html#term-1) ORM use.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") 访问器专门针对传统的 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象，不被视为 [2.0-style](../glossary.html#term-1) ORM 使用的一部分。'
- en: 'e.g.:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE56]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Produces instances of the session’s configured query class by default. To override
    and use a custom implementation, provide a `query_cls` callable. The callable
    will be invoked with the class’s mapper as a positional argument and a session
    keyword argument.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，通过会话配置的查询类产生会话的实例。要覆盖并使用自定义实现，请提供一个 `query_cls` 可调用对象。将使用类的映射器作为位置参数和会话关键字参数调用可调用对象。
- en: There is no limit to the number of query properties placed on a class.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在类上放置的查询属性的数量没有限制。
- en: '[PRE57]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Expire and refresh attributes on the given instance.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定实例的过期和刷新属性。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 代理为 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类代表 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 选定的属性将首先过期，就像使用 [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") 时一样；然后将向数据库发出 SELECT 语句，以使用当前事务中可用的当前值刷新面向列的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象已经急加载了，那么 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 导向的属性也将立即加载，并使用它们最初加载的急加载策略。
- en: 'New in version 1.4: - the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中：- [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法现在也可以刷新急加载的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 如果惰性加载的关系不在 [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 中命名，则它们将保持为“惰性加载”属性，并且不会隐式刷新。
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.4 版本中的更改：[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法现在将刷新那些在 [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 集合中显式命名的惰性加载的 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 导向的属性。
- en: Tip
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: While the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method is capable of refreshing both column
    and relationship oriented attributes, its primary focus is on refreshing of local
    column-oriented attributes on a single instance. For more open ended “refresh”
    functionality, including the ability to refresh the attributes on many objects
    at once while having explicit control over relationship loader strategies, use
    the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法能够刷新列和关系导向属性，但其主要焦点是在单个实例上刷新本地列导向属性。对于更开放式的“刷新”功能，包括在具有显式控制关系加载器策略的同时刷新多个对象的属性的能力，请改用
    [populate existing](queryguide/api.html#orm-queryguide-populate-existing) 功能。
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，高度隔离的事务将返回在同一事务中先前读取的相同值，而不管该事务外部数据库状态的变化如何。刷新属性通常只在事务开始时有意义，此时数据库行尚未被访问。
- en: 'Parameters:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选。一个字符串属性名称的可迭代集合，指示要刷新的属性的子集。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选布尔值 `True`，表示应该使用 FOR UPDATE，或者可以是一个包含标志的字典，指示要在 SELECT
    中使用一组更具体的 FOR UPDATE 标志；标志应该与 [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") 的参数匹配。覆盖 [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") 参数。'
- en: See also
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[Refreshing / Expiring](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    允许任何 ORM 查询按照正常加载的方式刷新对象。'
- en: '[PRE58]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Dispose of the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    if present.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，释放当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This will first call [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which releases any existing transactional/connection
    resources still being held; transactions specifically are rolled back. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is then discarded. Upon next usage within the same scope,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    will produce a new [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 这首先会在当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    上调用 [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    方法，释放仍在持有的任何现有的事务/连接资源；具体地，会回滚事务。然后丢弃 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。在同一作用域内的下一次使用时，[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 将生成一个新的 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象。
- en: '[PRE59]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 结束此 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的事务资源和 ORM 对象，将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会将会...
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is reset as though the object were brand new, and ready to be used again. This
    method may then be useful for [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects which set [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法历史上提供的相同的“仅重置”行为，其中[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态被重置，就像对象是全新的，准备好再次使用一样。然后，此方法可能对将[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象有用，以便“仅重置”行为仍然可用。
- en: New in version 2.0.22.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.22中的内容。
- en: See also
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - 当参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`时，类似的方法还会阻止对会话的重新使用。'
- en: '[PRE60]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Rollback the current transaction in progress.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: If no transaction is in progress, this method is a pass-through.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有事务正在进行，则此方法将被忽略。
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法总是回滚最顶层的数据库事务，丢弃可能正在进行的任何嵌套事务。
- en: See also
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rolling Back](session_basics.html#session-rollback)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[回滚](session_basics.html#session-rollback)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[PRE61]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Execute a statement and return a scalar result.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法和参数与[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")相同；返回结果是一个标量 Python 值。
- en: '[PRE62]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Execute a statement and return the results as scalars.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并将结果作为标量返回。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和参数与 [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 相同；返回结果是一个过滤对象 [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")，该对象将返回单个元素而不是 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象。
- en: 'Returns:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") 对象
- en: 'New in version 1.4.24: Added [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 新特性在版本1.4.24中添加：增加了 [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 新特性在版本1.4.26中添加：增加了[`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")
- en: See also
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 实体](queryguide/select.html#orm-queryguide-select-orm-entities) - 将[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的行为与[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")进行对比'
- en: '[PRE63]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is needed.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给 `__init__` 的 session_factory 存储在这个属性中，以后可以访问。当需要一个新的非范围 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 时，这可能会很有用。
- en: '[PRE64]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: A Registry that can store one or multiple instances of a single class on the
    basis of a “scope” function.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以基于“作用域”函数存储一个或多个单个类实例的注册表。
- en: The object implements `__call__` as the “getter”, so by calling `myregistry()`
    the contained object is returned for the current scope.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象实现了 `__call__` 作为“getter”，因此通过调用 `myregistry()` 返回当前范围的包含对象。
- en: 'Parameters:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`createfunc` – a callable that returns a new object to be placed in the registry'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createfunc` – 一个可调用的函数，返回要放置在注册表中的新对象'
- en: '`scopefunc` – a callable that will return a key to store/retrieve an object.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 一个可调用的函数，它将返回一个用于存储/检索对象的键。'
- en: '**Members**'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
- en: '**Class signature**'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    (`typing.Generic`)
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    (`typing.Generic`)
- en: '[PRE65]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Construct a new [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry").
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")。
- en: 'Parameters:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`createfunc` – A creation function that will generate a new value for the current
    scope, if none is present.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createfunc` – 一个创建函数，如果当前范围中不存在，则会生成一个新值。'
- en: '`scopefunc` – A function that returns a hashable token representing the current
    scope (such as, current thread identifier).'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 返回表示当前范围的可哈希令牌的函数（例如，当前线程标识符）。'
- en: '[PRE66]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Clear the current scope, if any.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 清除当前范围，如果有的话。
- en: '[PRE67]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Return True if an object is present in the current scope.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象存在于当前范围中，则返回 True。
- en: '[PRE68]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Set the value for the current scope.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 设置当前范围的值。
- en: '[PRE69]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    that uses a `threading.local()` variable for storage.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `threading.local()` 变量进行存储的 [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry")。
- en: '**Class signature**'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry") ([`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry"))
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry")（[`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry")）
- en: '[PRE70]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Describes the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 描述应用于类级别的[`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")属性的类型。
- en: New in version 2.0.5.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.5中新增。
- en: '**Class signature**'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor") (`typing_extensions.Protocol`)
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor")（`typing_extensions.Protocol`）
- en: Implicit Method Access
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式方法访问
- en: 'The job of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    is simple; hold onto a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for all who ask for it. As a means of producing more transparent access to this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    also includes **proxy behavior**, meaning that the registry itself can be treated
    just like a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    directly; when methods are called on this object, they are **proxied** to the
    underlying [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    being maintained by the registry:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")的工作很简单；为所有请求它的人保存一个[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。为了更透明地访问这个[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")还包括**代理行为**，意味着可以直接将注册表本身视为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")；当在这个对象上调用方法时，它们会**被代理**到注册表维护的基础[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")上：'
- en: '[PRE71]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The above code accomplishes the same task as that of acquiring the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling upon the registry, then using that [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码完成了与通过调用注册表获取当前[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")相同的任务，然后使用该[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: '## Thread-Local Scope'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '## 线程本地作用域'
- en: Users who are familiar with multithreaded programming will note that representing
    anything as a global variable is usually a bad idea, as it implies that the global
    object will be accessed by many threads concurrently. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object is entirely designed to be used in a **non-concurrent**
    fashion, which in terms of multithreading means “only in one thread at a time”.
    So our above example of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    usage, where the same [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object is maintained across multiple calls, suggests that some process needs to
    be in place such that multiple calls across many threads don’t actually get a
    handle to the same session. We call this notion **thread local storage**, which
    means, a special object is used that will maintain a distinct object per each
    application thread. Python provides this via the [threading.local()](https://docs.python.org/library/threading.html#threading.local)
    construct. The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object by default uses this object as storage, so that a single [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is maintained for all who call upon the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") registry, but only within the scope of a single
    thread. Callers who call upon the registry in a different thread get a [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instance that is local to that other thread.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉多线程编程的用户来说，将任何东西表示为全局变量通常都是一个坏主意，因为这意味着全局对象将被许多线程同时访问。[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象完全设计成以**非并发**方式使用，从多线程的角度来看，这意味着“一次只能在一个线程中”。因此，我们上面的[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")使用示例，其中同一个[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象在多个调用之间保持不变，表明需要有一些进程存在，以确保许多线程中的多个调用实际上不会获得相同的会话句柄。我们将此概念称为**线程本地存储**，这意味着使用一个特殊对象，该对象将维护每个应用程序线程的独立对象。Python通过[threading.local()](https://docs.python.org/library/threading.html#threading.local)构造提供了这一功能。[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")对象默认使用此对象作为存储，以便在调用[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")注册表的所有调用者中维护单个[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，但仅在单个线程的范围内。在不同线程中调用注册表的调用者将获得一个针对该其他线程本地的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")实例。
- en: Using this technique, the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") provides a quick and relatively simple (if one
    is familiar with thread-local storage) way of providing a single, global object
    in an application that is safe to be called upon from multiple threads.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")提供了一种快速而相对简单（如果熟悉线程本地存储的话）的方式，在应用程序中提供一个可以安全地从多个线程调用的单一全局对象。
- en: The [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")
    method, as always, removes the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") associated with the thread, if any. However, one advantage
    of the `threading.local()` object is that if the application thread itself ends,
    the “storage” for that thread is also garbage collected. So it is in fact “safe”
    to use thread local scope with an application that spawns and tears down threads,
    without the need to call [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove"). However, the scope of transactions themselves,
    i.e. ending them via [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") or [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), will usually still be something that must
    be explicitly arranged for at the appropriate time, unless the application actually
    ties the lifespan of a thread to the lifespan of a transaction.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，[`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove "sqlalchemy.orm.scoped_session.remove")方法会删除当前与线程关联的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")（如果有的话）。然而，`threading.local()`对象的一个优点是，如果应用程序线程本身结束，那么该线程的“存储”也会被垃圾回收。因此，在应用程序生成和销毁线程的情况下，使用线程本地作用域实际上是“安全”的，而无需调用[`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove")。然而，事务本身的范围，即通过[`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")或[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")结束它们，通常仍然是必须在适当时候显式安排的，除非应用程序实际上将线程的寿命与事务的寿命绑定在一起。
- en: '## Using Thread-Local Scope with Web Applications'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '## 在 Web 应用程序中使用线程本地作用域'
- en: As discussed in the section [When do I construct a Session, when do I commit
    it, and when do I close it?](session_basics.html#session-faq-whentocreate), a
    web application is architected around the concept of a **web request**, and integrating
    such an application with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") usually implies that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be associated with that request. As it turns out,
    most Python web frameworks, with notable exceptions such as the asynchronous frameworks
    Twisted and Tornado, use threads in a simple way, such that a particular web request
    is received, processed, and completed within the scope of a single *worker thread*.
    When the request ends, the worker thread is released to a pool of workers where
    it is available to handle another request.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[何时构建会话、何时提交以及何时关闭会话？](session_basics.html#session-faq-whentocreate)一节中所讨论的，Web
    应用程序的架构围绕着**web 请求**的概念展开，而将这样的应用程序与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")集成通常意味着[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将与该请求相关联。事实证明，大多数 Python Web 框架（Twisted 和 Tornado 等异步框架是显著的例外）都以简单的方式使用线程，这样一个特定的
    web 请求就在一个*工作线程*的范围内接收、处理和完成。当请求结束时，工作线程被释放到一个工作线程池中，在那里它可以处理另一个请求。
- en: 'This simple correspondence of web request and thread means that to associate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a thread implies it is also associated with the web request running within
    that thread, and vice versa, provided that the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is created only after the web request begins and torn
    down just before the web request ends. So it is a common practice to use [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") as a quick way to integrate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with a web application. The sequence diagram below illustrates
    this flow:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: Web 请求与线程的这种简单对应关系意味着将[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")与线程关联也意味着它也与在该线程中运行的
    web 请求相关联，反之亦然，前提是[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")仅在
    Web 请求开始后创建，并在 Web 请求结束前销毁。因此，将[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")作为将[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")与 Web 应用程序集成的一种快速方法是一种常见做法。下面的时序图说明了这个流程：
- en: '[PRE72]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Using the above flow, the process of integrating the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the web application has exactly two requirements:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述流程，将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    与 Web 应用程序集成的过程具有确切的两个要求：
- en: Create a single [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    registry when the web application first starts, ensuring that this object is accessible
    by the rest of the application.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Web 应用程序首次启动时创建单个 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    注册表，确保此对象可被应用程序的其余部分访问。
- en: Ensure that [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove") is called when the web request ends, usually
    by integrating with the web framework’s event system to establish an “on request
    end” event.
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 Web 请求结束时调用 [`scoped_session.remove()`](#sqlalchemy.orm.scoped_session.remove
    "sqlalchemy.orm.scoped_session.remove")，通常通过与 Web 框架的事件系统集成以建立“请求结束时”事件来实现。
- en: As noted earlier, the above pattern is **just one potential way** to integrate
    a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with a web framework, one which in particular makes the significant assumption
    that the **web framework associates web requests with application threads**. It
    is however **strongly recommended that the integration tools provided with the
    web framework itself be used, if available**, instead of [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，上述模式仅是将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    与 Web 框架集成的**一种潜在方式**，特别是假设**Web 框架将 Web 请求与应用程序线程关联**。但是，**强烈建议**如果有的话，使用 Web
    框架本身提供的集成工具，而不是 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")。
- en: In particular, while using a thread local can be convenient, it is preferable
    that the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    be associated **directly with the request**, rather than with the current thread.
    The next section on custom scopes details a more advanced configuration which
    can combine the usage of [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    with direct request based scope, or any kind of scope.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，虽然使用线程本地可能很方便，但最好将 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    与请求**直接关联**，而不是与当前线程关联。下一节关于自定义作用域详细介绍了一种更高级的配置，可以将 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 的使用与直接基于请求的作用域或任何类型的作用域相结合。
- en: Using Custom Created Scopes
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义创建的作用域
- en: The [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object’s default behavior of “thread local” scope is only one of many options
    on how to “scope” a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    A custom scope can be defined based on any existing system of getting at “the
    current thing we are working with”.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    对象的“线程本地”作用域是“对 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    进行作用域”多种选项之一。可以基于任何现有的获取“我们正在处理的当前事物”的系统定义自定义作用域。'
- en: 'Suppose a web framework defines a library function `get_current_request()`.
    An application built using this framework can call this function at any time,
    and the result will be some kind of `Request` object that represents the current
    request being processed. If the `Request` object is hashable, then this function
    can be easily integrated with [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") to associate the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with the request. Below we illustrate this in conjunction
    with a hypothetical event marker provided by the web framework `on_request_end`,
    which allows code to be invoked whenever a request ends:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个 Web 框架定义了一个名为 `get_current_request()` 的库函数。使用该框架构建的应用程序可以随时调用此函数，其结果将是表示正在处理的当前请求的某种
    `Request` 对象。如果 `Request` 对象是可散列的，那么此函数可以很容易地与 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 集成以将 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 与请求关联起来。下面我们结合 Web 框架提供的假设事件标记 `on_request_end` 来说明这一点，该事件标记允许在请求结束时调用代码：
- en: '[PRE73]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Above, we instantiate [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    in the usual way, except that we pass our request-returning function as the “scopefunc”.
    This instructs [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    to use this function to generate a dictionary key whenever the registry is called
    upon to return the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). In this case it is particularly important that we ensure
    a reliable “remove” system is implemented, as this dictionary is not otherwise
    self-managed.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们以通常的方式实例化 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")，唯一不同的是我们将我们的请求返回函数作为“scopefunc”传递。这指示
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    使用此函数生成字典键，每当注册表被调用以返回当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    时。在这种情况下，确保实现可靠的“移除”系统非常重要，因为否则这个字典不会自我管理。
- en: Contextual Session API
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上下文会话 API
- en: '| Object Name | Description |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | Describes
    the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| [QueryPropertyDescriptor](#sqlalchemy.orm.QueryPropertyDescriptor) | 描述应用于类级
    [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") 属性的类型。 |'
- en: '| [scoped_session](#sqlalchemy.orm.scoped_session) | Provides scoped management
    of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| [scoped_session](#sqlalchemy.orm.scoped_session) | 提供对 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象的作用域管理。 |'
- en: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | A Registry that can store
    one or multiple instances of a single class on the basis of a “scope” function.
    |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| [ScopedRegistry](#sqlalchemy.util.ScopedRegistry) | 可以根据“范围”函数存储单个类的一个或多个实例的注册表。
    |'
- en: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry") that uses a `threading.local()` variable for
    storage. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| [ThreadLocalRegistry](#sqlalchemy.util.ThreadLocalRegistry) | 使用 `threading.local()`
    变量进行存储的 [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")。
    |'
- en: '[PRE74]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Provides scoped management of [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 提供对 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的作用域管理。
- en: See [Contextual/Thread-local Sessions](#unitofwork-contextual) for a tutorial.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[上下文/线程本地会话](#unitofwork-contextual)以获取教程。
- en: Note
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using [Asynchronous I/O (asyncio)](extensions/asyncio.html), the async-compatible
    [`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") class should be used in place of
    [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[异步 I/O (asyncio)](extensions/asyncio.html)时，应该使用与 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 替代的异步兼容 [`async_scoped_session`](extensions/asyncio.html#sqlalchemy.ext.asyncio.async_scoped_session
    "sqlalchemy.ext.asyncio.async_scoped_session") 类。
- en: '**Members**'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.orm.scoped_session.__call__), [__init__()](#sqlalchemy.orm.scoped_session.__init__),
    [add()](#sqlalchemy.orm.scoped_session.add), [add_all()](#sqlalchemy.orm.scoped_session.add_all),
    [autoflush](#sqlalchemy.orm.scoped_session.autoflush), [begin()](#sqlalchemy.orm.scoped_session.begin),
    [begin_nested()](#sqlalchemy.orm.scoped_session.begin_nested), [bind](#sqlalchemy.orm.scoped_session.bind),
    [bulk_insert_mappings()](#sqlalchemy.orm.scoped_session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.scoped_session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.scoped_session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.scoped_session.close), [close_all()](#sqlalchemy.orm.scoped_session.close_all),
    [commit()](#sqlalchemy.orm.scoped_session.commit), [configure()](#sqlalchemy.orm.scoped_session.configure),
    [connection()](#sqlalchemy.orm.scoped_session.connection), [delete()](#sqlalchemy.orm.scoped_session.delete),
    [deleted](#sqlalchemy.orm.scoped_session.deleted), [dirty](#sqlalchemy.orm.scoped_session.dirty),
    [execute()](#sqlalchemy.orm.scoped_session.execute), [expire()](#sqlalchemy.orm.scoped_session.expire),
    [expire_all()](#sqlalchemy.orm.scoped_session.expire_all), [expunge()](#sqlalchemy.orm.scoped_session.expunge),
    [expunge_all()](#sqlalchemy.orm.scoped_session.expunge_all), [flush()](#sqlalchemy.orm.scoped_session.flush),
    [get()](#sqlalchemy.orm.scoped_session.get), [get_bind()](#sqlalchemy.orm.scoped_session.get_bind),
    [get_one()](#sqlalchemy.orm.scoped_session.get_one), [identity_key()](#sqlalchemy.orm.scoped_session.identity_key),
    [identity_map](#sqlalchemy.orm.scoped_session.identity_map), [info](#sqlalchemy.orm.scoped_session.info),
    [is_active](#sqlalchemy.orm.scoped_session.is_active), [is_modified()](#sqlalchemy.orm.scoped_session.is_modified),
    [merge()](#sqlalchemy.orm.scoped_session.merge), [new](#sqlalchemy.orm.scoped_session.new),
    [no_autoflush](#sqlalchemy.orm.scoped_session.no_autoflush), [object_session()](#sqlalchemy.orm.scoped_session.object_session),
    [query()](#sqlalchemy.orm.scoped_session.query), [query_property()](#sqlalchemy.orm.scoped_session.query_property),
    [refresh()](#sqlalchemy.orm.scoped_session.refresh), [remove()](#sqlalchemy.orm.scoped_session.remove),
    [reset()](#sqlalchemy.orm.scoped_session.reset), [rollback()](#sqlalchemy.orm.scoped_session.rollback),
    [scalar()](#sqlalchemy.orm.scoped_session.scalar), [scalars()](#sqlalchemy.orm.scoped_session.scalars),
    [session_factory](#sqlalchemy.orm.scoped_session.session_factory)'
- en: '**Class signature**'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    (`typing.Generic`)
- en: '[PRE75]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    creating it using the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") if not present.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在，使用[`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory")创建当前[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: 'Parameters:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '****kw** – Keyword arguments will be passed to the [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") callable, if an existing [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is not present. If the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is present and keyword arguments have been passed, [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '****kw** – 如果不存在现有的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，则将关键字参数传递给
    [`scoped_session.session_factory`](#sqlalchemy.orm.scoped_session.session_factory
    "sqlalchemy.orm.scoped_session.session_factory") 可调用对象。如果存在 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并且传递了关键字参数，则会引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。'
- en: '[PRE76]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Construct a new [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session").
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")。
- en: 'Parameters:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`session_factory` – a factory to create new [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") instances. This is usually, but not necessarily, an
    instance of [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session_factory` – 用于创建新的 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 实例的工厂。通常情况下，但并非一定如此，它是 [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 的实例。'
- en: '`scopefunc` – optional function which defines the current scope. If not passed,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    object assumes “thread-local” scope, and will use a Python `threading.local()`
    in order to maintain the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If passed, the function should return a hashable token;
    this token will be used as the key in a dictionary in order to store and retrieve
    the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 定义当前范围的可选函数。如果未传递，则 [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session") 对象假定“线程本地”范围，并将使用 Python 的 `threading.local()`
    来维护当前 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。如果传递，则该函数应返回可哈希的标记；此标记将用作字典中的键，以便存储和检索当前
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '[PRE77]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Place an object into this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象放入此 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    中。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类的代理。
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    方法时处于 [transient](../glossary.html#term-transient) 状态的对象将移至 [pending](../glossary.html#term-pending)
    状态，直到下一次刷新，此时它们将移至 [persistent](../glossary.html#term-persistent) 状态。
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    方法时处于 [detached](../glossary.html#term-detached) 状态的对象将直接移至 [persistent](../glossary.html#term-persistent)
    状态。
- en: If the transaction used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is rolled back, objects which were transient when they
    were passed to [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    will be moved back to the [transient](../glossary.html#term-transient) state,
    and will no longer be present within this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的事务被回滚，则在传递给 [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    时处于暂时状态的对象将被移回到 [transient](../glossary.html#term-transient) 状态，并且将不再存在于此 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中。
- en: See also
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话基础知识](session_basics.html#id1)中'
- en: '[PRE78]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Add the given collection of instances to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: See the documentation for [`Session.add()`](session_api.html#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") for a general behavioral description.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 有关一般行为描述，请参阅[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的文档。
- en: See also
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](session_api.html#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话基础知识](session_basics.html#id1)中'
- en: '[PRE79]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Proxy for the `Session.autoflush` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的`Session.autoflush`属性的代理。
- en: '[PRE80]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Begin a transaction, or nested transaction, on this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 在此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上开始事务或嵌套事务，如果尚未开始。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object features **autobegin** behavior, so that normally it is not necessary to
    call the [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    method explicitly. However, it may be used in order to control the scope of when
    the transactional state is begun.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象具有**自动开始**行为，因此通常不需要显式调用[`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法。但是，可以使用它来控制事务状态开始的范围。'
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 用于开始最外层事务时，如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已在事务内部，则会引发错误。
- en: 'Parameters:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested"). For documentation on SAVEPOINT transactions,
    please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '**nested** – 如果为True，则开始一个SAVEPOINT事务，并等同于调用[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。有关SAVEPOINT事务的文档，请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)。'
- en: 'Returns:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a Python context manager, allowing
    [`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。请注意，[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")充当Python上下文管理器，允许在“with”块中使用[`Session.begin()`](session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。有关示例，请参阅[显式开始](session_transaction.html#session-explicit-begin)。'
- en: See also
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[自动开始](session_basics.html#session-autobegin)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")'
- en: '[PRE81]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 在此Session上开始一个“嵌套”事务，例如SAVEPOINT。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库及其关联的驱动程序必须支持SQL SAVEPOINT才能使该方法正常运行。
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SAVEPOINT事务的文档，请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)。
- en: 'Returns:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object. Note that [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") acts as a context manager, allowing [`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。请注意，[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")充当上下文管理器，允许在“with”块中使用[`Session.begin_nested()`](session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)以获取用法示例。'
- en: See also
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SAVEPOINT](session_transaction.html#session-begin-nested)'
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务DDL](../dialects/sqlite.html#pysqlite-serializable) - 在SQLite驱动程序中，需要特殊的解决方法才能使SAVEPOINT正常工作。对于asyncio用例，请参阅[可序列化隔离/保存点/事务DDL（asyncio版本）](../dialects/sqlite.html#aiosqlite-serializable)部分。'
- en: '[PRE82]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Proxy for the `Session.bind` attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session.bind`](#sqlalchemy.orm.Session.bind
    "sqlalchemy.orm.Session.bind")属性。
- en: '[PRE83]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Perform a bulk insert of the given list of mapping dictionaries.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量插入。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Legacy Feature
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是SQLAlchemy 2.0系列的旧特性。对于现代批量INSERT和UPDATE，请参阅[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。2.0
    API与此方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 一个映射类，或者实际的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象，代表映射列表中表示的对象类型。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` – 一系列字典，每个字典包含要插入的映射行的状态，以映射类上的属性名称表示。如果映射涉及多个表，例如联接继承映射，则每个字典必须包含要填充到所有表中的所有键。'
- en: '`return_defaults` –'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` –'
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，插入过程将被改变，以确保新生成的主键值将被获取。通常，此参数的理由是为了使[联接表继承](inheritance.html#joined-inheritance)映射能够被批量插入。
- en: Note
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不支持 RETURNING 的后端，[`Session.bulk_insert_mappings.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") 参数可能会显著降低性能，因为 INSERT 语句无法再批量处理。请参阅[“插入多个值”行为的
    INSERT 语句](../core/connections.html#engine-insertmanyvalues)以了解受影响的后端的背景信息。
- en: '`render_nulls` –'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render_nulls` –'
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 True 时，`None` 的值将导致 NULL 值被包含在 INSERT 语句中，而不是从 INSERT 中省略该列。这允许所有要插入的行具有相同的列集，从而允许将完整的行集批量到
    DBAPI。通常，每个包含与上一行不同组合的 NULL 值的列集必须从呈现的 INSERT 语句中省略一个不同的系列列，这意味着它必须作为一个单独的语句发出。通过传递此标志，保证了整个行集将被批处理到一个批次中；但代价是，由省略列调用的服务器端默认值将被跳过，因此必须小心确保这些值不是必需的。
- en: Warning
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置此标志时，**不会调用服务器端默认的 SQL 值**用于那些以 NULL 插入的列；NULL 值将显式发送。必须小心确保整个操作不需要调用任何服务器端默认函数。
- en: See also
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-启用的 INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE84]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Perform a bulk save of the given list of objects.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定对象列表执行批量保存。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类，代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类。
- en: Legacy Feature
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是 SQLAlchemy 2.0 系列的传统功能。对于现代批量插入和更新，请参阅[ORM批量插入语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量更新](queryguide/dml.html#orm-queryguide-bulk-update)部分。
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一般的ORM映射对象的INSERT和UPDATE，请优先使用标准的[unit of work](../glossary.html#term-unit-of-work)数据管理模式，介绍在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)的[ORM数据操作](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation)部分。SQLAlchemy
    2.0 现在使用现代方言的[“插入多个值”的行为用于INSERT语句](../core/connections.html#engine-insertmanyvalues)，解决了以前的批量插入缓慢的问题。
- en: 'Parameters:'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`objects` –'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objects` –'
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") afterwards.
  id: totrans-621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列映射对象实例。映射对象按原样保留，并且之后**不**与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联。
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in traditional operation; if the object has the `InstanceState.key`
    attribute set, then the object is assumed to be “detached” and will result in
    an UPDATE. Otherwise, an INSERT is used.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个对象，对象是作为INSERT还是UPDATE发送取决于[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在传统操作中使用的相同规则；如果对象具有`InstanceState.key`属性设置，则假定对象是“分离的”，将导致UPDATE。否则，将使用INSERT。
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UPDATE的情况下，语句根据已更改的属性分组，并且因此将成为每个SET子句的主题。如果 `update_changed_only` 设置为 False，则每个对象中存在的所有属性都将应用于UPDATE语句，这可能有助于将语句组合成更大的executemany()，还将减少检查属性历史的开销。
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` – 当设置为 True 时，缺少生成默认值的值的行，即整数主键默认值和序列，将`逐个插入`，以便主键值可用。特别是这将允许加入继承和其他多表映射正确插入，无需提前提供主键值；然而，[`Session.bulk_save_objects.return_defaults`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `极大地降低了`该方法的整体性能。强烈建议请使用标准的[`Session.add_all()`](session_api.html#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all")方法。'
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_changed_only` – 当设置为 True 时，UPDATE语句基于每个状态中已记录更改的属性。当设置为 False 时，所有存在的属性（主键属性除外）都将进入SET子句。'
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_order` – 当为 True 时，插入和更新的顺序与对象给出的顺序完全匹配。当为 False 时，常见类型的对象被分组为插入和更新，以便更多批处理机会。'
- en: See also
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用 ORM 的 INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE85]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Perform a bulk update of the given list of mapping dictionaries.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 执行给定映射字典列表的批量更新。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类的代理。
- en: Legacy Feature
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是 SQLAlchemy 2.0 系列的遗留特性。对于现代批量插入和更新，请参阅 [ORM 批量插入语句](queryguide/dml.html#orm-queryguide-bulk-insert)
    和 [ORM 通过主键批量更新](queryguide/dml.html#orm-queryguide-bulk-update) 部分。2.0 API 共享此方法的实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 一个映射类，或者实际的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象，代表映射列表中表示的单个对象类型。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` – 一个字典序列，每个字典包含要更新的映射行的状态，以映射类上的属性名称表示。如果映射涉及多个表，例如连接继承映射，则每个字典可能包含对应于所有表的键。所有那些出现且不是主键的键都应用于
    UPDATE 语句的 SET 子句；必需的主键值应用于 WHERE 子句。'
- en: See also
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用 ORM 的 INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](session_api.html#sqlalchemy.orm.Session.bulk_save_objects
    "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[PRE86]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    使用的事务资源和 ORM 对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类的代理。
- en: This expunges all ORM objects associated with this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 这会清除与此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联的所有ORM对象，结束进行中的任何事务，并释放此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本身从关联的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象中签出的任何[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。然后，操作会使[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于可以再次使用的状态。
- en: Tip
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In the default running mode the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认运行模式下，[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法**不会阻止使用该Session**。
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")本身实际上并没有明确的“关闭”状态；
    它只是表示[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将释放所有数据库连接和ORM对象。
- en: Setting the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`将使`close`最终化，这意味着对会话的任何进一步操作都将被禁止。
- en: 'Changed in version 1.4: The [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法不会立即创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象； 只有在再次为数据库操作使用[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，才会创建新的[`SessionTransaction`](session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - 一种行为类似于带有参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`True`的`close()`的方法。'
- en: '[PRE87]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Close *all* sessions in memory.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭*所有*内存中的会话。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类为[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类进行了代理。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起不推荐使用：[`Session.close_all()`](session_api.html#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all")方法已弃用，并将在将来的版本中删除。请参阅`close_all_sessions()`。
- en: '[PRE88]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Flush pending changes and commit the current transaction.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新待处理更改并提交当前事务。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    Additionally, this re-load operation is not supported when using asyncio-oriented
    APIs. The [`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") parameter may be used to disable this behavior.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 当 COMMIT 操作完成时，所有对象都将被完全[过期](../glossary.html#term-expired)，擦除其内部内容，在下次访问对象时将自动重新加载。在此期间，这些对象处于过期状态，如果它们从[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中[分离](../glossary.html#term-detached)出来，则将无法正常工作。此外，使用基于
    asyncio 的 API 时不支持此重新加载操作。[`Session.expire_on_commit`](session_api.html#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")参数可用于禁用此行为。
- en: When there is no transaction in place for the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    since the previous call to [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), the method will begin and commit an internal-only
    “logical” transaction, that does not normally affect the database unless pending
    flush changes were detected, but will still invoke event handlers and object expiration
    rules.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")没有正在进行的事务时，表示自上次调用[`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")以来在此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")上没有调用操作，该方法将开始并提交一个仅内部使用的“逻辑”事务，通常不会影响数据库，除非检测到待冲洗的更改，但仍将调用事件处理程序和对象过期规则。
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 最外层的数据库事务无条件提交，自动释放任何正在生效的 SAVEPOINT。
- en: See also
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务管理](session_transaction.html#unitofwork-transaction)'
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 AsyncSession 时防止隐式 IO](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
- en: '[PRE89]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: reconfigure the [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") used by this [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 重新配置由此[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")使用的[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")。
- en: See [`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [`sessionmaker.configure()`](session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")。
- en: '[PRE90]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前事务对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，或者如果没有进行事务，则开始新事务并返回[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（请注意，在发出第一条SQL语句之前，与DBAPI之间不会建立事务状态）。
- en: Ambiguity in multi-bind or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects can be resolved through any of the optional
    keyword arguments. This ultimately makes usage of the [`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind") method for resolution.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 多绑定或未绑定的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象中的歧义可以通过任何可选关键字参数来解决。最终，通过使用[`get_bind()`](#sqlalchemy.orm.scoped_session.get_bind
    "sqlalchemy.orm.scoped_session.get_bind")方法进行解决。
- en: 'Parameters:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  id: totrans-677
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 绑定参数字典。可能包括“mapper”，“bind”，“clause”，其他传递给[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")的自定义参数。'
- en: '`execution_options` –'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行选项字典，将在首次获得连接时传递给[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，**仅在首次获得连接时**。如果连接已经存在于[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，则发出警告并忽略参数。
- en: See also
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别/DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
- en: '[PRE91]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Mark an instance as deleted.
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted") collection.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递时，假定对象为[持久](../glossary.html#term-persistent)或[分离](../glossary.html#term-detached)状态；在调用该方法之后，对象将保持[持久](../glossary.html#term-persistent)状态，直到下一个刷新发生。在此期间，对象还将是[`Session.deleted`](session_api.html#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted")集合的成员。
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次刷新发生时，对象将移动到[删除](../glossary.html#term-deleted)状态，表示在当前事务中为其行发出了`DELETE`语句。当事务成功提交时，删除的对象将移动到[分离](../glossary.html#term-detached)状态，并且不再存在于此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[删除](session_basics.html#session-deleting) - 在[使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE92]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“已删除”的所有实例的集合
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类，代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: '[PRE93]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The set of all persistent instances considered dirty.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 被视为脏的所有持久实例的集合。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类，代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: 'E.g.:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE94]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未被删除时被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此“脏”计算是“乐观”的；大多数属性设置或集合修改操作都会将实例标记为“脏”，并将其放入此集合中，即使属性的值没有净变化。在刷新时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会发生
    SQL 操作（这是一个更昂贵的操作，因此只在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified") method.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例是否对其属性具有可操作的净变化，请使用[`Session.is_modified()`](session_api.html#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE95]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Execute a SQL expression construct.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 表达式构造。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类，代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个表示语句执行结果的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: 'E.g.:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE96]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The API contract of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")的
    API 合同与[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")类似，是[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[2.0风格](../glossary.html#term-2.0-style)版本。'
- en: 'Changed in version 1.4: the [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：当使用[2.0风格](../glossary.html#term-2.0-style) ORM 使用时，[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法现在是 ORM 语句执行的主要点。
- en: 'Parameters:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 可执行的语句（即[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")表达式，如[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")）。'
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 可选的字典，或包含绑定参数值的字典列表。如果是单个字典，则执行单行；如果是字典列表，则会触发“executemany”。每个字典中的键必须与语句中存在的参数名相对应。'
- en: '`execution_options` –'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，将与语句执行关联。该字典可以提供 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 接受的选项子集，并且还可以提供仅在 ORM 上下文中理解的其他选项。
- en: See also
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM 特定的执行选项'
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 用于确定绑定的其他参数字典。可能包括“mapper”、“bind”或其他自定义参数。此字典的内容将传递给 [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 方法。'
- en: 'Returns:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象。
- en: '[PRE97]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Expire the attributes on an instance.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例上的属性过期。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，代理 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过期。当下一次访问已过期的属性时，将向 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与该事务中先前读取的相同值，而不管该事务之外的数据库状态的变化。
- en: To expire all objects in the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") simultaneously, use [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 同时使[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，可使用
    [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")
    方法。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 或 [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法时，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出了非 ORM SQL 语句的情况下调用
    [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    才有意义。
- en: 'Parameters:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE98]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Expires all persistent instances within this Session.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 使本 `Session` 中的所有持久化实例过期。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的代表 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 下次访问持久化实例上的任何属性时，将使用 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不管该事务之外的数据库状态是否发生变化。
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象以及这些对象上的单个属性过期，请使用 [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire")。
- en: The [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s default behavior is to expire all state whenever the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 或 [`Session.commit()`](session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法时，[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，通常情况下不需要调用 [`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")，假设事务是隔离的。
- en: See also
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE99]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Remove the instance from this `Session`.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 `Session` 中删除实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的代表 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对实例的所有内部引用。将根据 *expunge* 级联规则应用级联。
- en: '[PRE100]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Remove all object instances from this `Session`.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 `Session` 中删除所有对象实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 代理了 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的代表 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在此 `Session` 中的所有对象上调用 `expunge(obj)`。
- en: '[PRE101]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Flush all the object changes to the database.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有待处理的对象创建、删除和修改写入数据库，作为 INSERT、DELETE、UPDATE 等操作。操作会自动按照 Session 的工作单元依赖解决器进行排序。
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库操作将在当前事务上下文中发出，并且不会影响事务的状态，除非发生错误，此时整个事务将回滚。您可以在事务中随意刷新（flush()）以将更改从 Python
    移动到数据库的事务缓冲区。
- en: 'Parameters:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**objects** –'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象** -'
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 可选；将刷新操作限制为仅对给定集合中存在的元素进行操作。
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能仅适用于极少数情况，特定对象可能需要在完全执行 flush() 之前进行操作。不适用于一般用途。
- en: '[PRE102]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于给定主键标识符的实例，如果找不到，则返回 `None`。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类，为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: 'E.g.:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE103]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'New in version 1.4: Added [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get"), which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中新增：新增 [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")，它从现在遗留的 [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") 方法中移动而来。
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    特殊之处在于它直接提供对 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的标识映射的访问。如果给定的主键标识符存在于本地标识映射中，则直接从此集合返回对象，而不发出 SQL，除非对象已标记为完全过期。如果不存在，则执行 SELECT
    以定位对象。'
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    方法也会检查对象是否存在于标识映射中并标记为过期 - 还会发出 SELECT 来刷新对象以及确保行仍然存在。如果不存在，则会引发 [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。'
- en: 'Parameters:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  id: totrans-769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` - 表示要加载的实体类型的映射类或 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: '`ident` –'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ident` -'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示主键的标量、元组或字典。对于复合（例如多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常是最方便的。如果行的主键值为“5”，则调用如下所示：
- en: '[PRE104]'
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组形式包含主键值，通常按照它们对应于映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的主键列的顺序排列，或者如果使用了[`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")配置参数，则按照该参数使用的顺序排列。例如，如果行的主键由整数数字“5, 10”表示，则调用将如下所示：
- en: '[PRE105]'
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典形式应包含键，这些键对应于主键的每个元素的映射属性名称。如果映射类具有`id`、`version_id`作为存储对象主键值的属性，则调用如下所示：
- en: '[PRE106]'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` – 可选的加载器选项序列，如果发出了查询，则将应用于该查询。'
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  id: totrans-779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate_existing` – 导致该方法无条件发出SQL查询，并使用新加载的数据刷新对象，而不管对象是否已存在。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选的布尔值`True`，表示应使用FOR UPDATE，或者可以是一个包含标志的字典，用于指示用于SELECT的更具体的FOR
    UPDATE标志集；标志应与[`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")的参数匹配。取代[`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh")参数。'
- en: '`execution_options` –'
  id: totrans-781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，如果发出了查询，则将与查询执行关联起来。此字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项子集，并且还可以提供仅在ORM上下文中理解的其他选项。
- en: New in version 1.4.29.
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.29版本中的新功能。
- en: See also
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` –'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` –'
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定绑定的其他参数的字典。可能包括“mapper”、“bind”或其他自定义参数。此字典的内容传递给 [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 方法。
- en: 'Returns:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或`None`。
- en: '[PRE107]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Return a “bind” to which this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is bound.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定的“bind”。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 代理给[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: “bind”通常是[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的实例，除非[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")已经明确地直接绑定到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况除外。
- en: For a multiply-bound or unbound [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the `mapper` or `clause` arguments are used to determine
    the appropriate bind to return.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多重绑定或未绑定的[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，使用`mapper`或`clause`参数来确定要返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通常在通过ORM操作调用[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")时，会出现“mapper”参数，例如[`Session.query()`](session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")中的每个单独的INSERT/UPDATE/DELETE操作，[`Session.flush()`](session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用等。
- en: 'The order of resolution is:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 解析顺序为：
- en: if mapper given and [`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session") is present, locate a bind based first on the mapper
    in use, then on the mapped class in use, then on any base classes that are present
    in the `__mro__` of the mapped class, from more specific superclasses to more
    general.
  id: totrans-797
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了映射器并且[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds
    "sqlalchemy.orm.Session")存在，则首先基于正在使用的映射器，然后基于正在使用的映射类，最后基于映射类的`__mro__`中存在的任何基类来定位绑定，从更具体的超类到更一般的超类。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-798
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了clause并且存在`Session.binds`，则基于`Session.binds`中存在的给定clause中的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象来定位绑定。
- en: if `Session.binds` is present, return that.
  id: totrans-799
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在`Session.binds`，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-800
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了clause，则尝试返回与最终与clause相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-801
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了映射器，则尝试返回与映射器映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择对象最终相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的绑定。
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-802
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法找到绑定时，引发[`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method can be overridden on a user-defined
    subclass of [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to provide any kind of bind resolution scheme. See the example at [Custom Vertical
    Partitioning](persistence_techniques.html#session-custom-partitioning).
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Session.get_bind()`](session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法可以在[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的用户定义子类上被重写，以提供任何类型的绑定解析方案。请参阅[Custom Vertical Partitioning](persistence_techniques.html#session-custom-partitioning)中的示例。
- en: 'Parameters:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and secondly by consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") is mapped for a bind.'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或对应的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。绑定可以首先通过查看与此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联的“binds”映射，其次通过查看与此[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")来派生绑定。'
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（即[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")等）。如果不存在`mapper`参数或无法生成绑定，则将搜索给定的表达式构造，通常是与绑定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](session_api.html#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](session_api.html#sqlalchemy.orm.Session.bind_mapper
    "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](session_api.html#sqlalchemy.orm.Session.bind_table
    "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE108]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回确切的一个实例，如果未找到则引发异常。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 代理为[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`异常。
- en: For a detailed documentation of the arguments see the method [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解参数的文档，请参阅方法[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")。
- en: New in version 2.0.22.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.22 中的新功能。
- en: 'Returns:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例。
- en: See also
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - 相同的方法，但代替'
- en: returns `None` if no row was found with the provided primary key
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到提供的主键的行，则返回`None`。
- en: '[PRE109]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Return an identity key.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个身份键。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 代理为[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE110]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Proxy for the [`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map") attribute on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session") class.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session.identity_map`](session_api.html#sqlalchemy.orm.Session.identity_map
    "sqlalchemy.orm.Session.identity_map")属性。
- en: '[PRE111]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: A user-modifiable dictionary.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可修改的字典。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    constructor or [`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")构造函数或[`sessionmaker`](session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")构造函数或工厂方法的`info`参数进行填充。此处的字典始终局限于此[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")并且可以独立于所有其他[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象进行修改。
- en: '[PRE112]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: True if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    not in “partial rollback” state.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则返回True。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: 'Changed in version 1.4: The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") no longer begins a new transaction immediately, so this
    attribute will be False when the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is first instantiated.'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不再立即开始新的事务，因此当首次实例化[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的刷新过程失败，并且必须发出[`Session.rollback()`](session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is not in a transaction at all, the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will autobegin when it is first used, so in this case
    [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will return True.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不在事务中，则第一次使用时会自动开始，因此在这种情况下[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回True。
- en: Otherwise, if this [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务中，并且该事务尚未在内部回滚，则[`Session.is_active`](session_api.html#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回True。
- en: See also
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于在刷新期间发生的先前异常，此会话的事务已回滚。”（或类似）](../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](session_api.html#sqlalchemy.orm.Session.in_transaction
    "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE113]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的实例具有本地修改的属性，则返回`True`。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代理。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个受控属性的历史记录，并将当前值与其以前提交的值（如果有）进行比较。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection; a full test for each attribute’s net
    “dirty” status is performed.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是一个更昂贵且更准确的版本，用于检查给定实例是否在[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")集合中；对于每个属性的净“脏”状态进行了全面测试。
- en: 'E.g.:'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE114]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'A few caveats to this method apply:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") collection may report `False` when tested with
    this method. This is because the object may have received change events via attribute
    mutation, thus placing it in [`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty"), but ultimately the state is the same as that
    loaded from the database, resulting in no net change here.
  id: totrans-851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用此方法测试时，[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")集合中存在的实例可能报告`False`。这是因为该对象可能已通过属性突变接收到更改事件，从而将其放置在[`Session.dirty`](session_api.html#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")中，但最终状态与从数据库加载的状态相同，在此处没有净更改。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新值被应用时，标量属性可能未记录先前设置的值，如果属性在新值接收时未加载或过期，则在这些情况下，即使最终没有对其数据库值进行净更改，也假定该属性发生了更改。大多数情况下，当发生设置事件时，SQLAlchemy不需要“旧”值，因此，如果旧值不存在，则跳过SQL调用的开销，基于假设更新标量值通常是必要的，而在那些很少的情况下它不是，平均而言比发出防御性SELECT要便宜。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  id: totrans-853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当属性容器的`active_history`标志设置为`True`时，将无条件获取“旧”值，仅在发生设置时。通常为主键属性和非简单多对一的标量对象引用设置此标志。要为任意映射列设置此标志，请使用[`column_property()`](mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")中的`active_history`参数。
- en: 'Parameters:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` - 要测试是否存在未决更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` - 表示是否应在操作中包含多值集合。将其设置为`False`是一种检测仅基于本地列的属性（即标量列或多对一外键）的方法，这些属性在刷新此实例时将导致UPDATE。'
- en: '[PRE115]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的相应实例。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")类，代表[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoping.scoped_session")类。
- en: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if not already.'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")检查源实例的主键属性，并尝试将其与会话中具有相同主键的实例进行协调。如果在本地找不到，它会尝试根据主键从数据库加载对象，如果找不到任何对象，则创建一个新实例。然后将源实例上的每个属性的状态复制到目标实例。然后，该方法将返回结果目标实例；原始源实例保持不变，并且如果尚未与[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联，则保持不相关。'
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关联映射了`cascade="merge"`，此操作会级联到关联的实例。
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 有关合并的详细讨论，请参阅[合并](session_state_management.html#unitofwork-merging)。
- en: 'Parameters:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – Instance to be merged.'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要合并的实例。'
- en: '`load` –'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` –'
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为False时，[`merge()`](#sqlalchemy.orm.scoped_session.merge "sqlalchemy.orm.scoped_session.merge")切换到“高性能”模式，导致它放弃发出历史事件以及所有数据库访问。此标志用于将对象图转移到来自第二级缓存的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，或者将刚加载的对象转移到由工作线程或进程拥有的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，而无需重新查询数据库。
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). This is so that when the merge operation populates
    local attributes and cascades to related objects and collections, the values can
    be “stamped” onto the target object as is, without generating any history or attribute
    events, and without the need to reconcile the incoming data with any existing
    related objects or collections that might not be loaded. The resulting objects
    from `load=False` are always produced as “clean”, so it is only appropriate that
    the given objects should be “clean” as well, else this suggests a mis-use of the
    method.
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load=False`用例添加了这样的警告，即给定对象必须处于“干净”状态，即没有待刷新的更改 - 即使传入对象与任何[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")都没有关联。这是为了当合并操作填充本地属性并级联到相关对象和集合时，值可以按原样“盖印”到目标对象上，而不生成任何历史或属性事件，并且无需将传入数据与可能未加载的任何现有相关对象或集合进行协调。来自`load=False`的结果对象始终作为“干净”生成，因此只有给定的对象也应该“干净”，否则这表明方法的错误使用。'
- en: '`options` –'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` –'
- en: optional sequence of loader options which will be applied to the [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在合并操作加载对象的现有版本时，将应用到 [`Session.get()`](session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 方法的可选加载器选项序列。
- en: New in version 1.4.24.
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增。
- en: See also
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 提供了将单个对象“合并”到 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中的替代方法'
- en: '[PRE116]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 `Session` 中标记为“新”的所有实例的集合。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类而为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: '[PRE117]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Return a context manager that disables autoflush.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个上下文管理器，用于禁用自动提交。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类而为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: 'e.g.:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE118]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `with:` 块中进行的操作将不会受到在查询访问时发生的刷新的影响。当初始化涉及现有数据库查询的一系列对象时，尚未完成的对象不应立即被刷新时，这将很有用。
- en: '[PRE119]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Return the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    to which an object belongs.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类而为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: This is an alias of [`object_session()`](session_api.html#sqlalchemy.orm.object_session
    "sqlalchemy.orm.object_session").
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`object_session()`](session_api.html#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")
    的别名。
- en: '[PRE120]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的与此 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对应的 [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 代表 [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类而为 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类代理。
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象在 SQLAlchemy 2.0 中已被标记为遗留；现在使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造 ORM 查询。
- en: See also
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)'
- en: '[ORM Querying Guide](queryguide/index.html)'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询指南](queryguide/index.html)'
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '[遗留查询 API](queryguide/query.html) - 遗留 API 文档'
- en: '[PRE121]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: return a class property which produces a legacy [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object against the class and the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when called.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个类属性，当调用时，该属性会针对类和当前 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 生成一个遗留 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。
- en: Legacy Feature
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: The [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") accessor is specific to the legacy
    [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    and is not considered to be part of [2.0-style](../glossary.html#term-1) ORM use.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '[`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") 访问器是特定于传统的 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象的，不被视为 [2.0风格](../glossary.html#term-1) ORM 使用的一部分。'
- en: 'e.g.:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE122]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Produces instances of the session’s configured query class by default. To override
    and use a custom implementation, provide a `query_cls` callable. The callable
    will be invoked with the class’s mapper as a positional argument and a session
    keyword argument.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，生成会话配置的查询类的实例。要覆盖并使用自定义实现，请提供一个 `query_cls` 可调用对象。将以类的映射器作为位置参数和一个会话关键字参数调用该可调用对象。
- en: There is no limit to the number of query properties placed on a class.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 类上放置的查询属性数量没有限制。
- en: '[PRE123]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Expire and refresh attributes on the given instance.
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定实例上过期并刷新属性。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    类的 [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    类。
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 选定的属性将首先过期，就像使用 [`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") 时一样；然后将向数据库发出 SELECT 语句，以使用当前事务中可用的当前值刷新列导向属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    导向属性如果已经在对象上急切加载，将立即被加载，使用与最初加载时相同的急切加载策略。'
- en: 'New in version 1.4: - the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版开始：- [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法也可以刷新急切加载的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通常使用`select`（或“延迟”）加载器策略加载的 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 导向属性也将加载，**如果它们在 attribute_names 集合中明确命名**，则使用
    `immediate` 加载器策略发出 SELECT 语句加载该属性。如果惰性加载的关系未在 [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 中命名，则它们将保持为“惰性加载”属性，不会被隐式刷新。
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本 2.0.4 开始更改：[`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法现在将刷新 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 导向属性的惰性加载属性，对于那些在 [`Session.refresh.attribute_names`](session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 集合中明确命名的属性。 '
- en: Tip
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: While the [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method is capable of refreshing both column
    and relationship oriented attributes, its primary focus is on refreshing of local
    column-oriented attributes on a single instance. For more open ended “refresh”
    functionality, including the ability to refresh the attributes on many objects
    at once while having explicit control over relationship loader strategies, use
    the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`Session.refresh()`](session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法能够刷新列和关系导向属性，但其主要重点是刷新单个实例上的本地列导向属性。对于更开放式的“刷新”功能，包括能够同时刷新多个对象的属性，并对关系加载器策略有明确控制的功能，请使用[填充现有对象](queryguide/api.html#orm-queryguide-populate-existing)功能。
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，高度隔离的事务将返回与在同一事务中先前读取的相同值，而不考虑该事务之外数据库状态的更改。通常只在事务开始时刷新属性才有意义，在那时数据库行尚未被访问。
- en: 'Parameters:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选。一个包含字符串属性名称的可迭代集合，指示要刷新的属性子集。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选布尔值 `True` 表示应该使用 FOR UPDATE，或者可以是一个包含标志的字典，指示应该使用更具体的
    FOR UPDATE 标志集合进行 SELECT；标志应该与 [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") 的参数匹配。取代 [`Session.refresh.lockmode`](session_api.html#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") 参数。'
- en: See also
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](session_api.html#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire_all()`](session_api.html#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")'
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '[填充现有对象](queryguide/api.html#orm-queryguide-populate-existing) - 允许任何 ORM 查询刷新对象，就像它们通常加载的方式一样。'
- en: '[PRE124]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Dispose of the current [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    if present.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 丢弃当前[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（如果存在）。
- en: This will first call [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method on the current [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), which releases any existing transactional/connection
    resources still being held; transactions specifically are rolled back. The [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is then discarded. Upon next usage within the same scope,
    the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")
    will produce a new [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 这将首先在当前[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上调用[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")方法，释放仍在保持的任何现有事务/连接资源；具体来说，事务将被回滚。然后丢弃[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。在同一范围内的下一次使用时，[`scoped_session`](#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")将生成一个新的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: '[PRE125]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务资源和
    ORM 对象，将会重置会话到其初始状态。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is reset as though the object were brand new, and ready to be used again. This
    method may then be useful for [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects which set [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法在历史上提供的相同的“仅重置”行为，其中[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态被重置，就像对象是全新的，准备好再次使用。对于将[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，此方法可能会很有用，以便仍然可以使用“仅重置”行为。
- en: New in version 2.0.22.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.22中的新功能。
- en: See also
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](session_api.html#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - 当参数[`Session.close_resets_only`](session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`时，类似的方法还会阻止重复使用Session。'
- en: '[PRE126]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Rollback the current transaction in progress.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: If no transaction is in progress, this method is a pass-through.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有进行中的事务，则此方���是一个透传。
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法始终回滚顶层数据库事务，丢弃可能正在进行的任何嵌套事务。
- en: See also
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Rolling Back](session_basics.html#session-rollback)'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '[回滚](session_basics.html#session-rollback)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[PRE127]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Execute a statement and return a scalar result.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和参数与[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")相同；返回结果是一个标量Python值。
- en: '[PRE128]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Execute a statement and return the results as scalars.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并将结果作为标量返回。
- en: Proxied for the [`Session`](session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    class on behalf of the [`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")
    class.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 代理[`scoped_session`](#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoping.scoped_session")类代表[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类。
- en: Usage and parameters are the same as that of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法和参数与[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")相同；返回结果是一个[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")过滤对象，它将返回单个元素而不是[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: 'Returns:'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")对象
- en: 'New in version 1.4.24: Added [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中新增：[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.26中新增：[`scoped_session.scalars()`](#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")
- en: See also
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 实体](queryguide/select.html#orm-queryguide-select-orm-entities) - 将[`Session.execute()`](session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的行为与[`Session.scalars()`](session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")进行对比'
- en: '[PRE129]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: The session_factory provided to __init__ is stored in this attribute and may
    be accessed at a later time. This can be useful when a new non-scoped [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is needed.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给__init__的session_factory存储在此属性中，可以在以后访问。当需要新的非范围化的[`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，这可能会有用。
- en: '[PRE130]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: A Registry that can store one or multiple instances of a single class on the
    basis of a “scope” function.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以根据“scope”函数存储单个类的一个或多个实例的注册表。
- en: The object implements `__call__` as the “getter”, so by calling `myregistry()`
    the contained object is returned for the current scope.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象实现了`__call__`作为“getter”，因此通过调用`myregistry()`将返回当前范围内的包含对象。
- en: 'Parameters:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`createfunc` – a callable that returns a new object to be placed in the registry'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createfunc` – 返回要放置在注册表中的新对象的可调用函数'
- en: '`scopefunc` – a callable that will return a key to store/retrieve an object.'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 一个可调用函数，将返回一个键以存储/检索对象。'
- en: '**Members**'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.util.ScopedRegistry.__init__), [clear()](#sqlalchemy.util.ScopedRegistry.clear),
    [has()](#sqlalchemy.util.ScopedRegistry.has), [set()](#sqlalchemy.util.ScopedRegistry.set)'
- en: '**Class signature**'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    (`typing.Generic`)
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")（`typing.Generic`）
- en: '[PRE131]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Construct a new [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry").
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")。
- en: 'Parameters:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`createfunc` – A creation function that will generate a new value for the current
    scope, if none is present.'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`createfunc` – 如果当前范围中不存在，则生成新值的创建函数。'
- en: '`scopefunc` – A function that returns a hashable token representing the current
    scope (such as, current thread identifier).'
  id: totrans-970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scopefunc` – 一个返回表示当前范围的可哈希令牌的函数（例如，当前线程标识符）。'
- en: '[PRE132]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Clear the current scope, if any.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 清除当前范围（如果有）。
- en: '[PRE133]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Return True if an object is present in the current scope.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前范围中存在对象，则返回True。
- en: '[PRE134]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Set the value for the current scope.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 设置当前范围的值。
- en: '[PRE135]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: A [`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry "sqlalchemy.util.ScopedRegistry")
    that uses a `threading.local()` variable for storage.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`threading.local()`变量进行存储的[`ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry")。
- en: '**Class signature**'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry") ([`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry"))
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.util.ThreadLocalRegistry`](#sqlalchemy.util.ThreadLocalRegistry
    "sqlalchemy.util.ThreadLocalRegistry")（[`sqlalchemy.util.ScopedRegistry`](#sqlalchemy.util.ScopedRegistry
    "sqlalchemy.util.ScopedRegistry")）
- en: '[PRE136]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Describes the type applied to a class-level [`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") attribute.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 描述应用于类级别[`scoped_session.query_property()`](#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")属性的类型。
- en: New in version 2.0.5.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.5 版本新增。
- en: '**Class signature**'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor") (`typing_extensions.Protocol`)
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.QueryPropertyDescriptor`](#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor")（`typing_extensions.Protocol`）
