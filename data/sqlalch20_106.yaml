- en: Core Internals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心内部
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/internals.html](https://docs.sqlalchemy.org/en/20/core/internals.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/internals.html](https://docs.sqlalchemy.org/en/20/core/internals.html)
- en: Some key internal constructs are listed here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些关键的内部结构。
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [AdaptedConnection](#sqlalchemy.engine.AdaptedConnection) | Interface of
    an adapted connection object to support the DBAPI protocol. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [AdaptedConnection](#sqlalchemy.engine.AdaptedConnection) | 支持 DBAPI 协议的适配连接对象的接口。
    |'
- en: '| [BindTyping](#sqlalchemy.engine.BindTyping) | Define different methods of
    passing typing information for bound parameters in a statement to the database
    driver. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [BindTyping](#sqlalchemy.engine.BindTyping) | 定义了在语句中传递绑定参数的不同方法以传递到数据库驱动程序。
    |'
- en: '| [Compiled](#sqlalchemy.engine.Compiled) | Represent a compiled SQL or DDL
    expression. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [Compiled](#sqlalchemy.engine.Compiled) | 表示编译的 SQL 或 DDL 表达式。 |'
- en: '| [DBAPIConnection](#sqlalchemy.engine.interfaces.DBAPIConnection) | protocol
    representing a [**PEP 249**](https://peps.python.org/pep-0249/) database connection.
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [DBAPIConnection](#sqlalchemy.engine.interfaces.DBAPIConnection) | 表示 [**PEP
    249**](https://peps.python.org/pep-0249/) 数据库连接的协议。 |'
- en: '| [DBAPICursor](#sqlalchemy.engine.interfaces.DBAPICursor) | protocol representing
    a [**PEP 249**](https://peps.python.org/pep-0249/) database cursor. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [DBAPICursor](#sqlalchemy.engine.interfaces.DBAPICursor) | 表示 [**PEP 249**](https://peps.python.org/pep-0249/)
    数据库游标的协议。 |'
- en: '| [DBAPIType](#sqlalchemy.engine.interfaces.DBAPIType) | protocol representing
    a [**PEP 249**](https://peps.python.org/pep-0249/) database type. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [DBAPIType](#sqlalchemy.engine.interfaces.DBAPIType) | 表示 [**PEP 249**](https://peps.python.org/pep-0249/)
    数据库类型的协议。 |'
- en: '| [DDLCompiler](#sqlalchemy.sql.compiler.DDLCompiler) |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [DDLCompiler](#sqlalchemy.sql.compiler.DDLCompiler) |  |'
- en: '| [DefaultDialect](#sqlalchemy.engine.default.DefaultDialect) | Default implementation
    of Dialect |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultDialect](#sqlalchemy.engine.default.DefaultDialect) | Dialect 的默认实现
    |'
- en: '| [DefaultExecutionContext](#sqlalchemy.engine.default.DefaultExecutionContext)
    |  |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [DefaultExecutionContext](#sqlalchemy.engine.default.DefaultExecutionContext)
    |  |'
- en: '| [Dialect](#sqlalchemy.engine.Dialect) | Define the behavior of a specific
    database and DB-API combination. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [Dialect](#sqlalchemy.engine.Dialect) | 定义特定数据库和 DB-API 组合的行为。 |'
- en: '| [ExecutionContext](#sqlalchemy.engine.ExecutionContext) | A messenger object
    for a Dialect that corresponds to a single execution. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [ExecutionContext](#sqlalchemy.engine.ExecutionContext) | 用于对应于单个执行的 Dialect
    的信使对象。 |'
- en: '| [ExpandedState](#sqlalchemy.sql.compiler.ExpandedState) | represents state
    to use when producing “expanded” and “post compile” bound parameters for a statement.
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [ExpandedState](#sqlalchemy.sql.compiler.ExpandedState) | 表示在为语句生成“扩展”和“编译后”绑定参数时要使用的状态。
    |'
- en: '| [GenericTypeCompiler](#sqlalchemy.sql.compiler.GenericTypeCompiler) |  |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [GenericTypeCompiler](#sqlalchemy.sql.compiler.GenericTypeCompiler) |  |'
- en: '| [Identified](#sqlalchemy.log.Identified) |  |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [Identified](#sqlalchemy.log.Identified) |  |'
- en: '| [IdentifierPreparer](#sqlalchemy.sql.compiler.IdentifierPreparer) | Handle
    quoting and case-folding of identifiers based on options. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [IdentifierPreparer](#sqlalchemy.sql.compiler.IdentifierPreparer) | 根据选项处理标识符的引用和大小写折叠。
    |'
- en: '| [SQLCompiler](#sqlalchemy.sql.compiler.SQLCompiler) | Default implementation
    of [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled").
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [SQLCompiler](#sqlalchemy.sql.compiler.SQLCompiler) | [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled") 的默认实现。 |'
- en: '| [StrSQLCompiler](#sqlalchemy.sql.compiler.StrSQLCompiler) | A [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") subclass which allows a small selection
    of non-standard SQL features to render into a string value. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [StrSQLCompiler](#sqlalchemy.sql.compiler.StrSQLCompiler) | [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 的子类，允许将一小部分非标准 SQL 特性渲染为字符串值。 |'
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define different methods of passing typing information for bound parameters
    in a statement to the database driver.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了在语句中传递绑定参数的不同方法以传递到数据库驱动程序。
- en: New in version 2.0.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: '**Members**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[NONE](#sqlalchemy.engine.BindTyping.NONE), [RENDER_CASTS](#sqlalchemy.engine.BindTyping.RENDER_CASTS),
    [SETINPUTSIZES](#sqlalchemy.engine.BindTyping.SETINPUTSIZES)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[NONE](#sqlalchemy.engine.BindTyping.NONE), [RENDER_CASTS](#sqlalchemy.engine.BindTyping.RENDER_CASTS),
    [SETINPUTSIZES](#sqlalchemy.engine.BindTyping.SETINPUTSIZES)'
- en: '**Class signature**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    (`enum.Enum`)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '类[`sqlalchemy.engine.BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    (`enum.Enum`) '
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: No steps are taken to pass typing information to the database driver.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 没有采取任何步骤将类型信息传递给数据库驱动程序。
- en: This is the default behavior for databases such as SQLite, MySQL / MariaDB,
    SQL Server.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 SQLite、MySQL/MariaDB、SQL Server 等数据库的默认行为。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Render casts or other directives in the SQL string.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 字符串中渲染转换或其他指令。
- en: This method is used for all PostgreSQL dialects, including asyncpg, pg8000,
    psycopg, psycopg2\. Dialects which implement this can choose which kinds of datatypes
    are explicitly cast in SQL statements and which aren’t.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法适用于所有 PostgreSQL 方言，包括 asyncpg、pg8000、psycopg、psycopg2。实现此方法的方言可以选择在 SQL
    语句中明确转换哪些类型的数据类型，哪些不转换。
- en: When RENDER_CASTS is used, the compiler will invoke the `SQLCompiler.render_bind_cast()`
    method for the rendered string representation of each [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object whose dialect-level type sets
    the [`TypeEngine.render_bind_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_bind_cast
    "sqlalchemy.types.TypeEngine.render_bind_cast") attribute.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 RENDER_CASTS 时，编译器将为渲染的字符串表示形式中的每个 [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象调用 `SQLCompiler.render_bind_cast()`
    方法，该对象的方言级类型设置了 [`TypeEngine.render_bind_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_bind_cast
    "sqlalchemy.types.TypeEngine.render_bind_cast") 属性。
- en: The `SQLCompiler.render_bind_cast()` is also used to render casts for one form
    of “insertmanyvalues” query, when both `InsertmanyvaluesSentinelOpts.USE_INSERT_FROM_SELECT`
    and `InsertmanyvaluesSentinelOpts.RENDER_SELECT_COL_CASTS` are set, where the
    casts are applied to the intermediary columns e.g. “INSERT INTO t (a, b, c) SELECT
    p0::TYP, p1::TYP, p2::TYP ” “FROM (VALUES (?, ?), (?, ?), …)”.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQLCompiler.render_bind_cast()` 也用于渲染一种形式的 “insertmanyvalues” 查询的转换，当同时设置了
    `InsertmanyvaluesSentinelOpts.USE_INSERT_FROM_SELECT` 和 `InsertmanyvaluesSentinelOpts.RENDER_SELECT_COL_CASTS`
    时，转换应用于中间列，例如 “INSERT INTO t (a, b, c) SELECT p0::TYP, p1::TYP, p2::TYP ” “FROM
    (VALUES (?, ?), (?, ?), …)”。'
- en: 'New in version 2.0.10: - `SQLCompiler.render_bind_cast()` is now used within
    some elements of the “insertmanyvalues” implementation.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10 版本中的新内容：- 现在在 “insertmanyvalues” 实现的某些部分中使用了 `SQLCompiler.render_bind_cast()`。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Use the pep-249 setinputsizes method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pep-249 的 setinputsizes 方法。
- en: This is only implemented for DBAPIs that support this method and for which the
    SQLAlchemy dialect has the appropriate infrastructure for that dialect set up.
    Current dialects include cx_Oracle as well as optional support for SQL Server
    using pyodbc.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 仅对支持此方法的 DBAPIs 实现了此功能，并且对于 SQLAlchemy 方言已经设置了适当的基础架构的情况下才实现了。当前的方言包括 cx_Oracle，以及对使用
    pyodbc 的 SQL Server 的可选支持。
- en: When using setinputsizes, dialects also have a means of only using the method
    for certain datatypes using include/exclude lists.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 setinputsizes 时，方言还可以通过包含/排除列表的方式只对某些数据类型使用该方法。
- en: When SETINPUTSIZES is used, the [`Dialect.do_set_input_sizes()`](#sqlalchemy.engine.Dialect.do_set_input_sizes
    "sqlalchemy.engine.Dialect.do_set_input_sizes") method is called for each statement
    executed which has bound parameters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SETINPUTSIZES 时，对于每个执行的语句，具有绑定参数的语句都会调用 [`Dialect.do_set_input_sizes()`](#sqlalchemy.engine.Dialect.do_set_input_sizes
    "sqlalchemy.engine.Dialect.do_set_input_sizes") 方法。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Represent a compiled SQL or DDL expression.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 表示已编译的 SQL 或 DDL 表达式。
- en: '**Members**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.engine.Compiled.__init__), [cache_key](#sqlalchemy.engine.Compiled.cache_key),
    [compile_state](#sqlalchemy.engine.Compiled.compile_state), [construct_params()](#sqlalchemy.engine.Compiled.construct_params),
    [dml_compile_state](#sqlalchemy.engine.Compiled.dml_compile_state), [execution_options](#sqlalchemy.engine.Compiled.execution_options),
    [params](#sqlalchemy.engine.Compiled.params), [sql_compiler](#sqlalchemy.engine.Compiled.sql_compiler),
    [state](#sqlalchemy.engine.Compiled.state), [statement](#sqlalchemy.engine.Compiled.statement),
    [string](#sqlalchemy.engine.Compiled.string)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.engine.Compiled.__init__), [cache_key](#sqlalchemy.engine.Compiled.cache_key),
    [compile_state](#sqlalchemy.engine.Compiled.compile_state), [construct_params()](#sqlalchemy.engine.Compiled.construct_params),
    [dml_compile_state](#sqlalchemy.engine.Compiled.dml_compile_state), [execution_options](#sqlalchemy.engine.Compiled.execution_options),
    [params](#sqlalchemy.engine.Compiled.params), [sql_compiler](#sqlalchemy.engine.Compiled.sql_compiler),
    [state](#sqlalchemy.engine.Compiled.state), [statement](#sqlalchemy.engine.Compiled.statement),
    [string](#sqlalchemy.engine.Compiled.string)'
- en: The `__str__` method of the `Compiled` object should produce the actual text
    of the statement. `Compiled` objects are specific to their underlying database
    dialect, and also may or may not be specific to the columns referenced within
    a particular set of bind parameters. In no case should the `Compiled` object be
    dependent on the actual values of those bind parameters, even though it may reference
    those values as defaults.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Compiled`对象的`__str__`方法应生成语句的实际文本。`Compiled`对象特定于其底层数据库方言，并且可能特定于在特定绑定参数集中引用的列。在任何情况下，`Compiled`对象都不应依赖于这些绑定参数的实际值，即使它可能引用这些值作为默认值。'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Construct a new [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    object.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象。
- en: 'Parameters:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to compile against.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 编译的[`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。'
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 要编译的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。'
- en: '`schema_translate_map` –'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_translate_map` –'
- en: dictionary of schema names to be translated when forming the resultant SQL
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模式名称的字典，用于在形成结果 SQL 时进行翻译
- en: See also
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](connections.html#schema-translating)'
- en: '`compile_kwargs` – additional kwargs that will be passed to the initial call
    to `Compiled.process()`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` – 将传递给初始调用`Compiled.process()`的额外kwargs。'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")
    that was generated ahead of creating this [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")对象之前生成的[`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")。
- en: This is used for routines that need access to the original [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instance generated when the [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance was first cached, typically in order to
    reconcile the original list of [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with a per-statement list that’s
    generated on each call.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用于需要访问在首次缓存`Compiled`实例时生成的原始[`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")实例的例程，通常是为了将原始的[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象列表与在每次调用时生成的每个语句列表进行对比。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Optional `CompileState` object that maintains additional state used by the compiler.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`CompileState`对象，用于维护编译器使用的其他状态。
- en: Major executable objects such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") will generate this state when compiled in
    order to calculate additional information about the object. For the top level
    object that is to be executed, the state can be stored here where it can also
    have applicability towards result set processing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的可执行对象，例如[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")、[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")在编译时会生成此状态，以计算关于对象的其他信息。对于要执行的顶级对象，可以将状态存储在此处，也可以适用于结果集处理。
- en: New in version 1.4.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return the bind params for this compiled object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此编译对象的绑定参数。
- en: 'Parameters:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**params** – a dict of string/object pairs whose values will override bind
    values compiled in to the statement.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**params** – 一个字符串/对象对的字典，其值将覆盖编译到语句中的绑定值。'
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Optional `CompileState` assigned at the same point that .isinsert, .isupdate,
    or .isdelete is assigned.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`CompileState`在分配`.isinsert`、`.isupdate`或`.isdelete`时分配。
- en: This will normally be the same object as .compile_state, with the exception
    of cases like the `ORMFromStatementCompileState` object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常将是与`.compile_state`相同的对象，但有一种例外情况，例如`ORMFromStatementCompileState`对象。
- en: New in version 1.4.40.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.40 中的新功能。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Execution options propagated from the statement. In some cases, sub-elements
    of the statement can modify these.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从语句传播的执行选项。在某些情况下，语句的子元素可以修改这些选项。
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Return the bind params for this compiled object.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此已编译对象的绑定参数。
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return a Compiled that is capable of processing SQL expressions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个能够处理SQL表达式的已编译对象。
- en: If this compiler is one, it would likely just return ‘self’.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此编译器是一个，那么它很可能只返回‘self’。
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: description of the compiler’s state
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器状态的描述
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The statement to compile.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译的语句。
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The string representation of the `statement`
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`statement`的字符串表示'
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    connection.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[**PEP 249**](https://peps.python.org/pep-0249/)数据库连接的协议。
- en: New in version 2.0.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容。
- en: See also
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Connection Objects](https://www.python.org/dev/peps/pep-0249/#connection-objects)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接对象](https://www.python.org/dev/peps/pep-0249/#connection-objects) - 在[**PEP
    249**](https://peps.python.org/pep-0249/)中'
- en: '**Members**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[autocommit](#sqlalchemy.engine.interfaces.DBAPIConnection.autocommit), [close()](#sqlalchemy.engine.interfaces.DBAPIConnection.close),
    [commit()](#sqlalchemy.engine.interfaces.DBAPIConnection.commit), [cursor()](#sqlalchemy.engine.interfaces.DBAPIConnection.cursor),
    [rollback()](#sqlalchemy.engine.interfaces.DBAPIConnection.rollback)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[自动提交](#sqlalchemy.engine.interfaces.DBAPIConnection.autocommit)，[close()](#sqlalchemy.engine.interfaces.DBAPIConnection.close)，[commit()](#sqlalchemy.engine.interfaces.DBAPIConnection.commit)，[cursor()](#sqlalchemy.engine.interfaces.DBAPIConnection.cursor)，[rollback()](#sqlalchemy.engine.interfaces.DBAPIConnection.rollback)'
- en: '**Class signature**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.DBAPIConnection`](#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") (`typing_extensions.Protocol`)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.DBAPIConnection`](#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection")（`typing_extensions.Protocol`）
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    cursor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[**PEP 249**](https://peps.python.org/pep-0249/)数据库游标的协议。
- en: New in version 2.0.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容。
- en: See also
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Cursor Objects](https://www.python.org/dev/peps/pep-0249/#cursor-objects)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[游标对象](https://www.python.org/dev/peps/pep-0249/#cursor-objects) - 在[**PEP
    249**](https://peps.python.org/pep-0249/)中'
- en: '**Members**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[arraysize](#sqlalchemy.engine.interfaces.DBAPICursor.arraysize), [callproc()](#sqlalchemy.engine.interfaces.DBAPICursor.callproc),
    [close()](#sqlalchemy.engine.interfaces.DBAPICursor.close), [description](#sqlalchemy.engine.interfaces.DBAPICursor.description),
    [execute()](#sqlalchemy.engine.interfaces.DBAPICursor.execute), [executemany()](#sqlalchemy.engine.interfaces.DBAPICursor.executemany),
    [fetchall()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchall), [fetchmany()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchmany),
    [fetchone()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchone), [lastrowid](#sqlalchemy.engine.interfaces.DBAPICursor.lastrowid),
    [nextset()](#sqlalchemy.engine.interfaces.DBAPICursor.nextset), [rowcount](#sqlalchemy.engine.interfaces.DBAPICursor.rowcount),
    [setinputsizes()](#sqlalchemy.engine.interfaces.DBAPICursor.setinputsizes), [setoutputsize()](#sqlalchemy.engine.interfaces.DBAPICursor.setoutputsize)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[数组大小](#sqlalchemy.engine.interfaces.DBAPICursor.arraysize)，[callproc()](#sqlalchemy.engine.interfaces.DBAPICursor.callproc)，[close()](#sqlalchemy.engine.interfaces.DBAPICursor.close)，[description](#sqlalchemy.engine.interfaces.DBAPICursor.description)，[execute()](#sqlalchemy.engine.interfaces.DBAPICursor.execute)，[executemany()](#sqlalchemy.engine.interfaces.DBAPICursor.executemany)，[fetchall()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchall)，[fetchmany()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchmany)，[fetchone()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchone)，[lastrowid](#sqlalchemy.engine.interfaces.DBAPICursor.lastrowid)，[nextset()](#sqlalchemy.engine.interfaces.DBAPICursor.nextset)，[rowcount](#sqlalchemy.engine.interfaces.DBAPICursor.rowcount)，[setinputsizes()](#sqlalchemy.engine.interfaces.DBAPICursor.setinputsizes)，[setoutputsize()](#sqlalchemy.engine.interfaces.DBAPICursor.setoutputsize)'
- en: '**Class signature**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.DBAPICursor`](#sqlalchemy.engine.interfaces.DBAPICursor
    "sqlalchemy.engine.interfaces.DBAPICursor") (`typing_extensions.Protocol`)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.interfaces.DBAPICursor`](#sqlalchemy.engine.interfaces.DBAPICursor
    "sqlalchemy.engine.interfaces.DBAPICursor")（`typing_extensions.Protocol`）
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The description attribute of the Cursor.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 游标的描述属性。
- en: See also
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[cursor.description](https://www.python.org/dev/peps/pep-0249/#description)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[cursor.description](https://www.python.org/dev/peps/pep-0249/#description)
    - 在[**PEP 249**](https://peps.python.org/pep-0249/)中'
- en: '[PRE27]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    type.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[**PEP 249**](https://peps.python.org/pep-0249/)数据库类型的协议。
- en: New in version 2.0.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容。
- en: See also
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Type Objects](https://www.python.org/dev/peps/pep-0249/#type-objects) - in
    [**PEP 249**](https://peps.python.org/pep-0249/)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[类型对象](https://www.python.org/dev/peps/pep-0249/#type-objects) - 在 [**PEP 249**](https://peps.python.org/pep-0249/)'
- en: '**Class signature**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.interfaces.DBAPIType`](#sqlalchemy.engine.interfaces.DBAPIType
    "sqlalchemy.engine.interfaces.DBAPIType") (`typing_extensions.Protocol`)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.engine.interfaces.DBAPIType`](#sqlalchemy.engine.interfaces.DBAPIType
    "sqlalchemy.engine.interfaces.DBAPIType") (`typing_extensions.Protocol`) 的定义
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Members**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.compiler.DDLCompiler.__init__), [cache_key](#sqlalchemy.sql.compiler.DDLCompiler.cache_key),
    [compile_state](#sqlalchemy.sql.compiler.DDLCompiler.compile_state), [construct_params()](#sqlalchemy.sql.compiler.DDLCompiler.construct_params),
    [define_constraint_remote_table()](#sqlalchemy.sql.compiler.DDLCompiler.define_constraint_remote_table),
    [dml_compile_state](#sqlalchemy.sql.compiler.DDLCompiler.dml_compile_state), [execution_options](#sqlalchemy.sql.compiler.DDLCompiler.execution_options),
    [params](#sqlalchemy.sql.compiler.DDLCompiler.params), [sql_compiler](#sqlalchemy.sql.compiler.DDLCompiler.sql_compiler),
    [state](#sqlalchemy.sql.compiler.DDLCompiler.state), [statement](#sqlalchemy.sql.compiler.DDLCompiler.statement),
    [string](#sqlalchemy.sql.compiler.DDLCompiler.string)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[`__init__()`](#sqlalchemy.sql.compiler.DDLCompiler.__init__), [cache_key](#sqlalchemy.sql.compiler.DDLCompiler.cache_key),
    [compile_state](#sqlalchemy.sql.compiler.DDLCompiler.compile_state), [`construct_params()`](#sqlalchemy.sql.compiler.DDLCompiler.construct_params),
    [define_constraint_remote_table()](#sqlalchemy.sql.compiler.DDLCompiler.define_constraint_remote_table),
    [dml_compile_state](#sqlalchemy.sql.compiler.DDLCompiler.dml_compile_state), [execution_options](#sqlalchemy.sql.compiler.DDLCompiler.execution_options),
    [params](#sqlalchemy.sql.compiler.DDLCompiler.params), [sql_compiler](#sqlalchemy.sql.compiler.DDLCompiler.sql_compiler),
    [state](#sqlalchemy.sql.compiler.DDLCompiler.state), [statement](#sqlalchemy.sql.compiler.DDLCompiler.statement),
    [string](#sqlalchemy.sql.compiler.DDLCompiler.string)'
- en: '**Class signature**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.compiler.DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") ([`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled"))
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.compiler.DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler")（[`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")的一个子类）
- en: '[PRE39]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*inherited from the* `sqlalchemy.sql.compiler.Compiled.__init__` *method of*
    [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    *的* `sqlalchemy.sql.compiler.Compiled.__init__` *方法*'
- en: Construct a new [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    object.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    对象。
- en: 'Parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to compile against.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 要编译的 [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。'
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 待编译的 [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")。'
- en: '`schema_translate_map` –'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema_translate_map` –'
- en: dictionary of schema names to be translated when forming the resultant SQL
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于形成生成 SQL 时要翻译的模式名称字典
- en: See also
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式名称的翻译](connections.html#schema-translating)'
- en: '`compile_kwargs` – additional kwargs that will be passed to the initial call
    to `Compiled.process()`.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile_kwargs` – 将传递给初始调用 `Compiled.process()` 的额外 kwargs。'
- en: '[PRE40]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*inherited from the* `Compiled.cache_key` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    *的* `Compiled.cache_key` *属性*'
- en: The [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")
    that was generated ahead of creating this [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled") object.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    对象之前生成的 [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")。
- en: This is used for routines that need access to the original [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instance generated when the [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled") instance was first cached, typically in order
    to reconcile the original list of [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with a per-statement list that’s
    generated on each call.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于需要访问在首次缓存[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")实例时生成的原始[`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey")实例的例程，通常是为了调和原始的[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象列表与每次调用时生成的每个语句列表。
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*inherited from the* `Compiled.compile_state` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.compile_state` *属性*'
- en: Optional `CompileState` object that maintains additional state used by the compiler.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `CompileState` 对象，用于维护编译器使用的其他状态。
- en: Major executable objects such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") will generate this state when compiled in
    order to calculate additional information about the object. For the top level
    object that is to be executed, the state can be stored here where it can also
    have applicability towards result set processing.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的可执行对象，如[`Insert`](dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")、[`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")，在编译时会生成此状态，以计算有关对象的其他信息。对于要执行的顶级对象，该状态可以存储在这里，也可以适用于结果集处理。
- en: New in version 1.4.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能。
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return the bind params for this compiled object.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此编译对象的绑定参数。
- en: 'Parameters:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**params** – a dict of string/object pairs whose values will override bind
    values compiled in to the statement.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**params** – 一个字符串/对象对的字典，其值将覆盖编译到语句中的绑定值。'
- en: '[PRE43]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Format the remote table clause of a CREATE CONSTRAINT clause.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化 CREATE CONSTRAINT 语句的远程表子句。
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '*inherited from the* `Compiled.dml_compile_state` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.dml_compile_state` *属性*'
- en: Optional `CompileState` assigned at the same point that .isinsert, .isupdate,
    or .isdelete is assigned.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在分配 `.isinsert`、`.isupdate` 或 `.isdelete` 的相同点分配的可选的 `CompileState`。
- en: This will normally be the same object as .compile_state, with the exception
    of cases like the `ORMFromStatementCompileState` object.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是与 `.compile_state` 相同的对象，但有一些例外情况，比如 `ORMFromStatementCompileState` 对象。
- en: New in version 1.4.40.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.40 版中的新功能。
- en: '[PRE45]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '*inherited from the* `Compiled.execution_options` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.execution_options` *属性*'
- en: Execution options propagated from the statement. In some cases, sub-elements
    of the statement can modify these.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 语句中传播的执行选项。在某些情况下，语句的子元素可以修改这些选项。
- en: '[PRE46]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '*inherited from the* `Compiled.params` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.params` *属性*'
- en: Return the bind params for this compiled object.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此编译对象的绑定参数。
- en: '[PRE47]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: description of the compiler’s state
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器状态的描述
- en: '[PRE49]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '*inherited from the* `Compiled.statement` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.statement` *属性*'
- en: The statement to compile.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要编译的语句。
- en: '[PRE50]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '*inherited from the* `Compiled.string` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    的 `Compiled.string` *属性*'
- en: The string representation of the `statement`
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`statement` 的字符串表示'
- en: '[PRE51]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Default implementation of Dialect
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Dialect 的默认实现
- en: '**Members**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[bind_typing](#sqlalchemy.engine.default.DefaultDialect.bind_typing), [colspecs](#sqlalchemy.engine.default.DefaultDialect.colspecs),
    [connect()](#sqlalchemy.engine.default.DefaultDialect.connect), [construct_arguments](#sqlalchemy.engine.default.DefaultDialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.default.DefaultDialect.create_connect_args),
    [create_xid()](#sqlalchemy.engine.default.DefaultDialect.create_xid), [cte_follows_insert](#sqlalchemy.engine.default.DefaultDialect.cte_follows_insert),
    [dbapi](#sqlalchemy.engine.default.DefaultDialect.dbapi), [dbapi_exception_translation_map](#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.default.DefaultDialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.default.DefaultDialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.default.DefaultDialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.default.DefaultDialect.default_schema_name),
    [default_sequence_base](#sqlalchemy.engine.default.DefaultDialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.default.DefaultDialect.delete_returning),
    [delete_returning_multifrom](#sqlalchemy.engine.default.DefaultDialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.default.DefaultDialect.denormalize_name),
    [div_is_floordiv](#sqlalchemy.engine.default.DefaultDialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.default.DefaultDialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.default.DefaultDialect.do_close), [do_commit()](#sqlalchemy.engine.default.DefaultDialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_commit_twophase),
    [do_execute()](#sqlalchemy.engine.default.DefaultDialect.do_execute), [do_execute_no_params()](#sqlalchemy.engine.default.DefaultDialect.do_execute_no_params),
    [do_executemany()](#sqlalchemy.engine.default.DefaultDialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.default.DefaultDialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_recover_twophase),
    [do_release_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.default.DefaultDialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_twophase),
    [do_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_savepoint), [do_set_input_sizes()](#sqlalchemy.engine.default.DefaultDialect.do_set_input_sizes),
    [do_terminate()](#sqlalchemy.engine.default.DefaultDialect.do_terminate), [driver](#sqlalchemy.engine.default.DefaultDialect.driver),
    [engine_config_types](#sqlalchemy.engine.default.DefaultDialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.default.DefaultDialect.engine_created),
    [exclude_set_input_sizes](#sqlalchemy.engine.default.DefaultDialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.default.DefaultDialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.default.DefaultDialect.execution_ctx_cls),
    [favor_returning_over_lastrowid](#sqlalchemy.engine.default.DefaultDialect.favor_returning_over_lastrowid),
    [full_returning](#sqlalchemy.engine.default.DefaultDialect.full_returning), [get_async_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_async_dialect_cls),
    [get_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.default.DefaultDialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls),
    [get_dialect_pool_class()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.default.DefaultDialect.get_driver_connection),
    [get_foreign_keys()](#sqlalchemy.engine.default.DefaultDialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.default.DefaultDialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.default.DefaultDialect.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.default.DefaultDialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.default.DefaultDialect.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.default.DefaultDialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.default.DefaultDialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.default.DefaultDialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.default.DefaultDialect.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.default.DefaultDialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.default.DefaultDialect.get_sequence_names),
    [get_table_comment()](#sqlalchemy.engine.default.DefaultDialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.default.DefaultDialect.get_table_names),
    [get_table_options()](#sqlalchemy.engine.default.DefaultDialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.default.DefaultDialect.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.default.DefaultDialect.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_view_names),
    [has_index()](#sqlalchemy.engine.default.DefaultDialect.has_index), [has_schema()](#sqlalchemy.engine.default.DefaultDialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.default.DefaultDialect.has_sequence), [has_table()](#sqlalchemy.engine.default.DefaultDialect.has_table),
    [has_terminate](#sqlalchemy.engine.default.DefaultDialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.default.DefaultDialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.default.DefaultDialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.default.DefaultDialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.default.DefaultDialect.initialize), [inline_comments](#sqlalchemy.engine.default.DefaultDialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.default.DefaultDialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.default.DefaultDialect.insert_returning),
    [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.default.DefaultDialect.is_async), [is_disconnect()](#sqlalchemy.engine.default.DefaultDialect.is_disconnect),
    [label_length](#sqlalchemy.engine.default.DefaultDialect.label_length), [load_provisioning()](#sqlalchemy.engine.default.DefaultDialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.default.DefaultDialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.default.DefaultDialect.max_identifier_length),
    [name](#sqlalchemy.engine.default.DefaultDialect.name), [normalize_name()](#sqlalchemy.engine.default.DefaultDialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.default.DefaultDialect.on_connect), [on_connect_url()](#sqlalchemy.engine.default.DefaultDialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.default.DefaultDialect.paramstyle), [positional](#sqlalchemy.engine.default.DefaultDialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.default.DefaultDialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.default.DefaultDialect.preparer), [reflection_options](#sqlalchemy.engine.default.DefaultDialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.reset_isolation_level),
    [returns_native_bytes](#sqlalchemy.engine.default.DefaultDialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.default.DefaultDialect.sequences_optional),
    [server_side_cursors](#sqlalchemy.engine.default.DefaultDialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.default.DefaultDialect.server_version_info),
    [set_connection_execution_options()](#sqlalchemy.engine.default.DefaultDialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.default.DefaultDialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.set_isolation_level),
    [statement_compiler](#sqlalchemy.engine.default.DefaultDialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.default.DefaultDialect.supports_alter), [supports_comments](#sqlalchemy.engine.default.DefaultDialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.default.DefaultDialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.default.DefaultDialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.default.DefaultDialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.default.DefaultDialect.supports_empty_insert),
    [supports_identity_columns](#sqlalchemy.engine.default.DefaultDialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.default.DefaultDialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.default.DefaultDialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.default.DefaultDialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.default.DefaultDialect.supports_native_enum),
    [supports_native_uuid](#sqlalchemy.engine.default.DefaultDialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.default.DefaultDialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.default.DefaultDialect.supports_sane_rowcount),
    [supports_sane_rowcount_returning](#sqlalchemy.engine.default.DefaultDialect.supports_sane_rowcount_returning),
    [supports_sequences](#sqlalchemy.engine.default.DefaultDialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.default.DefaultDialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.default.DefaultDialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.default.DefaultDialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.default.DefaultDialect.tuple_in_values),
    [type_compiler](#sqlalchemy.engine.default.DefaultDialect.type_compiler), [type_compiler_cls](#sqlalchemy.engine.default.DefaultDialect.type_compiler_cls),
    [type_compiler_instance](#sqlalchemy.engine.default.DefaultDialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.default.DefaultDialect.type_descriptor),
    [update_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.default.DefaultDialect.update_returning),
    [update_returning_multifrom](#sqlalchemy.engine.default.DefaultDialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.default.DefaultDialect.use_insertmanyvalues),
    [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.default.DefaultDialect.use_insertmanyvalues_wo_returning)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[bind_typing](#sqlalchemy.engine.default.DefaultDialect.bind_typing), [colspecs](#sqlalchemy.engine.default.DefaultDialect.colspecs),
    [connect()](#sqlalchemy.engine.default.DefaultDialect.connect), [construct_arguments](#sqlalchemy.engine.default.DefaultDialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.default.DefaultDialect.create_connect_args),
    [create_xid()](#sqlalchemy.engine.default.DefaultDialect.create_xid), [cte_follows_insert](#sqlalchemy.engine.default.DefaultDialect.cte_follows_insert),
    [dbapi](#sqlalchemy.engine.default.DefaultDialect.dbapi), [dbapi_exception_translation_map](#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.default.DefaultDialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.default.DefaultDialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.default.DefaultDialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.default.DefaultDialect.default_schema_name),
    [default_sequence_base](#sqlalchemy.engine.default.DefaultDialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.default.DefaultDialect.delete_returning),
    [delete_returning_multifrom](#sqlalchemy.engine.default.DefaultDialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.default.DefaultDialect.denormalize_name),
    [div_is_floordiv](#sqlalchemy.engine.default.DefaultDialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.default.DefaultDialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.default.DefaultDialect.do_close), [do_commit()](#sqlalchemy.engine.default.DefaultDialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_commit_twophase),
    [do_execute()](#sqlalchemy.engine.default.DefaultDialect.do_execute), [do_execute_no_params()](#sqlalchemy.engine.default.DefaultDialect.do_execute_no_params),
    [do_executemany()](#sqlalchemy.engine.default.DefaultDialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.default.DefaultDialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_recover_twophase),
    [do_release_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.default.DefaultDialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_twophase),
    [do_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_savepoint), [do_set_input_sizes()](#sqlalchemy.engine.default.DefaultDialect.do_set_input_sizes),
    [do_terminate()](#sqlalchemy.engine.default.DefaultDialect.do_terminate), [driver](#sqlalchemy.engine.default.DefaultDialect.driver),
    [engine_config_types](#sqlalchemy.engine.default.DefaultDialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.default.DefaultDialect.engine_created),
    [exclude_set_input_sizes](#sqlalchemy.engine.default.DefaultDialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.default.DefaultDialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.default.DefaultDialect.execution_ctx_cls),
    [favor_returning_over_lastrowid](#sqlalchemy.engine.default.DefaultDialect.favor_returning_over_lastrowid),
    [full_returning](#sqlalchemy.engine.default.DefaultDialect.full_returning), [get_async_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_async_dialect_cls),
    [get_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.default.DefaultDialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls),
    [get_dialect_pool_class()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.default.DefaultDialect.get_driver_connection),
    [get_foreign_keys()](#sqlalchemy.engine.default.DefaultDialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.default.DefaultDialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.default.Default.DefaultDialect.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.default.Default.Dialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.default.Default.Dialect.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.default.Default.Dialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.default.Default.Dialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.default.Default.Dialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.default.Default.Dialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.default.Default.Dialect.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.default.Default.Dialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.default.Default.Dialect.get_sequence_names),
    [get_table_comment()](#sqlalchemy.engine.default.Default.Dialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.default.Default.Dialect.get_table_names),
    [get_table_options()](#sqlalchemy.engine.default.Default.Dialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.default.Default.Dialect.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.default.Default.Dialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.default.Default.Dialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.default.Default.Dialect.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.default.Default.Dialect.get_view_names),
    [has_index()](#sqlalchemy.engine.default.Default.Dialect.has_index), [has_schema()](#sqlalchemy.engine.default.Default.Dialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.default.Default.Dialect.has_sequence), [has_table()](#sqlalchemy.engine.default.Default.Dialect.has_table),
    [has_terminate](#sqlalchemy.engine.default.Default.Dialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.default.Default.Dialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.default.Default.Dialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.default.Default.Dialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.default.Default.Dialect.initialize), [inline_comments](#sqlalchemy.engine.default.Default.Dialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.default.Default.Dialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.default.Default.Dialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.default.Default.Dialect.insert_returning),
    [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.default.Default.Dialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.default.Default.Dialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.default.Default.Dialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.default.Default.Dialect.is_async), [is_disconnect()](#sqlalchemy.engine.default.Default.Dialect.is_disconnect),
    [label_length](#sqlalchemy.engine.default.Default.Dialect.label_length), [load_provisioning()](#sqlalchemy.engine.default.Default.Dialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.default.Default.Dialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.default.Default.Dialect.max_identifier_length),
    [name](#sqlalchemy.engine.default.Default.Dialect.name), [normalize_name()](#sqlalchemy.engine.default.Default.Dialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.default.Default.Dialect.on_connect), [on_connect_url()](#sqlalchemy.engine.default.Default.Dialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.default.Default.Dialect.paramstyle), [positional](#sqlalchemy.engine.default.Default.Dialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.default.Default.Dialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.default.Default.Dialect.preparer), [reflection_options](#sqlalchemy.engine.default.Default.Dialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.default.Default.Dialect.reset_isolation_level),
    [returns_native_bytes](#sqlalchemy.engine.default.Default.Dialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.default.Default.Dialect.sequences_optional),
    [server_side_cursors](#sqlalchemy.engine.default.Default.Dialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.default.Default.DefaultDialect.server_version_info),
    [set_connection_execution_options()](#sqlalchemy.engine.default.Default.Dialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.default.Default.Dialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.default.Default.Dialect.set_isolation_level),
    [statement_compiler](#sqlalchemy.engine.default.Default.Dialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.default.Default.Dialect.supports_alter), [supports_comments](#sqlalchemy.engine.default.Default.Dialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.default.Default.Dialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.default.Default.Dialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.default.Default.Dialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.default.Default.Dialect.supports_empty_insert),
    [supports_identity_columns](#sqlalchemy.engine.default.Default.Dialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.default.Default.Dialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.default.Default.Dialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.default.Default.Dialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.default.Default.Dialect.supports_native_enum),
    [supports_native_uuid](#sqlalchemy.engine.default.Default.Dialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.default.Default.Dialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.default.Default.Dialect.supports_sane_rowcount),
    [supports_sane_rowcount_returning](#sqlalchemy.engine.default.Default.Dialect.supports_sane_rowcount_returning),
    [supports_sequences](#sqlalchemy.engine.default.Default.Dialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.default.Default.Dialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.default.Default.Dialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.default.Default.Dialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.default.Default.Dialect.tuple_in_values),
    [type_compiler](#sqlalchemy.engine.default.Default.Dialect.type_compiler), [type_compiler_cls](#sqlalchemy.engine.default.Default.Dialect.type_compiler_cls),
    [type_compiler_instance](#sqlalchemy.engine.default.Default.Dialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.default.Default.Dialect.type_descriptor),
    [update_executemany_returning](#sqlalchemy.engine.default.Default.Dialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.default.Default.DefaultDialect.update_returning),
    [update_returning_multifrom](#sqlalchemy.engine.default.Default.Dialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.default.Default.Dialect.use_insertmanyvalues),
    [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.default.Default.Dialect.use_insertmanyvalues_wo_returning)'
- en: '**Class signature**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.default.DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") ([`sqlalchemy.engine.interfaces.Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect"))
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.engine.default.DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") 类 ([`sqlalchemy.engine.interfaces.Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect"))'
- en: '[PRE52]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: define a means of passing typing information to the database and/or driver for
    bound parameters.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 定义将类型信息传递给绑定参数的数据库和/或驱动程序的方法。
- en: See [`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    for values.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有关值，请参阅 [`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")。
- en: New in version 2.0.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE53]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: A dictionary of TypeEngine classes from sqlalchemy.types mapped to subclasses
    that are specific to the dialect class. This dictionary is class-level only and
    is not accessed from the dialect instance itself.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从 sqlalchemy.types 映射到特定于方言类的子类的 TypeEngine 类字典。该字典仅适用于类级别，并且不是从方言实例本身访问的。
- en: '[PRE54]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Establish a connection using this dialect’s DBAPI.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方言的 DBAPI 建立连接。
- en: 'The default implementation of this method is:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的默认实现为：
- en: '[PRE55]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `*cargs, **cparams` parameters are generated directly from this dialect’s
    [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`*cargs, **cparams` 参数直接从此方言的 [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法生成。'
- en: This method may be used for dialects that need to perform programmatic per-connection
    steps when a new connection is procured from the DBAPI.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可用于需要在从 DBAPI 获得新连接时执行程序化的每个连接步骤的方言。
- en: 'Parameters:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cargs` – positional parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cargs` – 从 [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法返回的位置参数'
- en: '`**cparams` – keyword parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**cparams` – 从 [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法返回的关键字参数。'
- en: 'Returns:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a DBAPI connection, typically from the [**PEP 249**](https://peps.python.org/pep-0249/)
    module level `.connect()` function.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 DBAPI 连接，通常来自于 [**PEP 249**](https://peps.python.org/pep-0249/) 模块级别的 `.connect()`
    函数。
- en: See also
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
- en: '[PRE56]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* `Dialect.construct_arguments` *attribute of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.construct_arguments` *属性*'
- en: Optional set of argument specifiers for various SQLAlchemy constructs, typically
    schema items.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 各种 SQLAlchemy 构造的可选参数说明，通常是模式项。
- en: 'To implement, establish as a series of tuples, as in:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现，将其建立为元组的系列，如下所示：
- en: '[PRE57]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: If the above construct is established on the PostgreSQL dialect, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will now accept the keyword arguments `postgresql_using`,
    `postgresql_where`, nad `postgresql_ops`. Any other argument specified to the
    constructor of [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    which is prefixed with `postgresql_` will raise [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以上结构在 PostgreSQL 方言上建立，则 [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 结构现在将接受关键字参数 `postgresql_using`、`postgresql_where`
    和 `postgresql_ops`。构造函数中以 `postgresql_` 为前缀的任何其他参数都将引发 [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: A dialect which does not include a `construct_arguments` member will not participate
    in the argument validation system. For such a dialect, any argument name is accepted
    by all participating constructs, within the namespace of arguments prefixed with
    that dialect name. The rationale here is so that third-party dialects that haven’t
    yet implemented this feature continue to function in the old way.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 不包括`construct_arguments`成员的方言将不参与参数验证系统。对于这样的方言，任何参数名称都被所有参与的构造接受，在以该方言名称为前缀的参数命名空间内。这里的原理是，尚未实现此功能的第三方方言将继续以旧方式运行。
- en: See also
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - implementing base class which consumes [`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - 实现基类，它消耗[`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
- en: '[PRE58]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Build DB-API compatible connection arguments.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 构建DB-API兼容的连接参数。
- en: Given a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object, returns a tuple consisting of a `(*args, **kwargs)` suitable to send directly
    to the dbapi’s connect function. The arguments are sent to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method which then runs the DBAPI-level `connect()`
    function.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象，返回一个包含`(*args,
    **kwargs)`的元组，适合直接发送到dbapi的connect函数。这些参数被发送到[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect")方法，然后运行DBAPI级别的`connect()`函数。
- en: The method typically makes use of the [`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args") method in order to generate a
    dictionary of options.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通常利用[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")方法生成一个选项字典。
- en: 'The default implementation is:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 默认实现为：
- en: '[PRE59]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Parameters:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**url** – 一个[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象'
- en: 'Returns:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a tuple of `(*args, **kwargs)` which will be passed to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将传递给[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")方法的`(*args,
    **kwargs)`元组。
- en: See also
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
- en: '[PRE60]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Create a random two-phase transaction ID.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个随机的两阶段事务ID。
- en: This id will be passed to do_begin_twophase(), do_rollback_twophase(), do_commit_twophase().
    Its format is unspecified.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此ID将传递给do_begin_twophase()、do_rollback_twophase()、do_commit_twophase()。其格式未指定。
- en: '[PRE61]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: target database, when given a CTE with an INSERT statement, needs the CTE to
    be below the INSERT
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 给定CTE和INSERT语句时的目标数据库，需要CTE在INSERT语句之下。
- en: '[PRE62]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: A reference to the DBAPI module object itself.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: DBAPI模块对象本身的引用。
- en: SQLAlchemy dialects import DBAPI modules using the classmethod [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi"). The rationale is so that any dialect
    module can be imported and used to generate SQL statements without the need for
    the actual DBAPI driver to be installed. Only when an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is constructed using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") does the DBAPI get imported; at that point, the creation
    process will assign the DBAPI module to this attribute.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy方言使用classmethod [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") 导入DBAPI模块。其原因是任何方言模块都可以被导入和用于生成SQL语句，而无需安装实际的DBAPI驱动程序。只有在使用[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")构造[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")时，DBAPI才会被导入；此时，创建过程将把DBAPI模块分配给此属性。
- en: Dialects should therefore implement [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") which will import the necessary module
    and return it, and then refer to `self.dbapi` in dialect code in order to refer
    to the DBAPI module contents.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，方言应实现 [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi")，它将导入必要的模块并返回它，然后在方言代码中引用 `self.dbapi`
    以引用 DBAPI 模块内容。
- en: 'Changed in version The: [`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi
    "sqlalchemy.engine.Dialect.dbapi") attribute is exclusively used as the per-[`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")-instance reference to the DBAPI module. The previous
    not-fully-documented `.Dialect.dbapi()` classmethod is deprecated and replaced
    by [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi "sqlalchemy.engine.Dialect.import_dbapi").'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 版本更改：[`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi "sqlalchemy.engine.Dialect.dbapi")
    属性专门用作每个[`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect") 实例对
    DBAPI 模块的引用。以前未完全记录的 `.Dialect.dbapi()` 类方法已被弃用，并由 [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") 替换。
- en: '[PRE63]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '*inherited from the* `Dialect.dbapi_exception_translation_map` *attribute of*
    [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.dbapi_exception_translation_map` *属性*'
- en: A dictionary of names that will contain as values the names of pep-249 exceptions
    (“IntegrityError”, “OperationalError”, etc) keyed to alternate class names, to
    support the case where a DBAPI has exception classes that aren’t named as they
    are referred to (e.g. IntegrityError = MyException). In the vast majority of cases
    this dictionary is empty.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名称字典，其值将包含作为值的 pep-249 异常的名称（“IntegrityError”、“OperationalError” 等），键入为替代类名，以支持
    DBAPI 具有不以它们所引用的方式命名的异常类的情况（例如 IntegrityError = MyException）。在绝大多数情况下，此字典为空。
- en: '[PRE64]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: alias of [`DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler "sqlalchemy.sql.compiler.DDLCompiler")
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler "sqlalchemy.sql.compiler.DDLCompiler")
    的别名'
- en: '[PRE65]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: the isolation that is implicitly present on new connections
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在新连接上隐含存在的隔离级别
- en: '[PRE66]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: for INSERT… VALUES (DEFAULT) syntax, the token to put in the parenthesis.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 INSERT… VALUES (DEFAULT) 语法，括号中放置的令牌。
- en: '[PRE67]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: the name of the default schema. This value is only available for supporting
    dialects, and is typically populated during the initial connection to the database.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 默认模式的名称。此值仅适用于支持的方言，并且通常在与数据库的初始连接期间填充。
- en: '[PRE68]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: the default value that will be rendered as the “START WITH” portion of a CREATE
    SEQUENCE DDL statement.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 将呈现为 CREATE SEQUENCE DDL 语句的“START WITH” 部分的默认值。
- en: '[PRE69]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: dialect supports DELETE..RETURNING with executemany.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持具有 executemany 的 DELETE..RETURNING。
- en: '[PRE70]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: if the dialect supports RETURNING with DELETE
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持带有 DELETE 的 RETURNING
- en: New in version 2.0.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE71]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: if the dialect supports RETURNING with DELETE..FROM
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持带有 DELETE..FROM 的 RETURNING
- en: New in version 2.0.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE72]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: convert the given name to a case insensitive identifier for the backend if it
    is an all-lowercase name.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的名称是全小写名称，则将其转换为后端的不区分大小写标识符。
- en: This method is only used if the dialect defines requires_name_normalize=True.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法仅在方言定义 `requires_name_normalize=True` 时使用。
- en: '[PRE73]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: target database treats the / division operator as “floor division”
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库将 / 除法运算符视为“地板除法”
- en: '[PRE74]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Provide an implementation of `connection.begin()`, given a DB-API connection.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给定 DB-API 连接的 `connection.begin()` 实现。
- en: The DBAPI has no dedicated “begin” method and it is expected that transactions
    are implicit. This hook is provided for those DBAPIs that might need additional
    help in this area.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: DBAPI 没有专用的“开始”方法，预期事务是隐式的。此挂钩是为了那些可能需要在此领域提供额外帮助的 DBAPI 而提供的。
- en: 'Parameters:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个 DBAPI 连接，通常在 `ConnectionFairy` 中被代理。'
- en: '[PRE75]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '*inherited from the* `Dialect.do_begin_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.do_begin_twophase()` *方法*'
- en: Begin a two phase transaction on the given connection.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上开始两阶段事务。
- en: 'Parameters:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '[PRE76]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Provide an implementation of `connection.close()`, given a DBAPI connection.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给定 DBAPI 连接的 `connection.close()` 实现。
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection has been detached from the pool, or is being returned beyond
    the normal capacity of the pool.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接从池中分离或被返回超出池的正常容量时，将调用此钩子。
- en: '[PRE77]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Provide an implementation of `connection.commit()`, given a DB-API connection.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `connection.commit()` 的实现，给定一个DB-API连接。
- en: 'Parameters:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个DBAPI连接，通常在 `ConnectionFairy` 中代理。'
- en: '[PRE78]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '*inherited from the* `Dialect.do_commit_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *方法的* `Dialect.do_commit_twophase()`。'
- en: Commit a two phase transaction on the given connection.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上提交一个两阶段事务。
- en: 'Parameters:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 是否调用了 [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '`recover` – if the recover flag was passed.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recover` – 如果传递了恢复标志。'
- en: '[PRE79]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Provide an implementation of `cursor.execute(statement, parameters)`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.execute(statement, parameters)` 的实现。
- en: '[PRE80]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Provide an implementation of `cursor.execute(statement)`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.execute(statement)` 的实现。
- en: The parameter collection should not be sent.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 不应发送参数集合。
- en: '[PRE81]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Provide an implementation of `cursor.executemany(statement, parameters)`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.executemany(statement, parameters)` 的实现。
- en: '[PRE82]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: ping the DBAPI connection and return True if the connection is usable.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 检查DBAPI连接并在连接可用时返回True。
- en: '[PRE83]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '*inherited from the* `Dialect.do_prepare_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *方法的* `Dialect.do_prepare_twophase()`。'
- en: Prepare a two phase transaction on the given connection.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上准备一个两阶段事务。
- en: 'Parameters:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '[PRE84]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '*inherited from the* `Dialect.do_recover_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *方法的* `Dialect.do_recover_twophase()`。'
- en: Recover list of uncommitted prepared two phase transaction identifiers on the
    given connection.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上恢复未提交的准备好的两阶段事务标识符列表。
- en: 'Parameters:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**connection** – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**connection** – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '[PRE85]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Release the named savepoint on a connection.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接上释放命名保存点。
- en: 'Parameters:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE86]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Provide an implementation of `connection.rollback()`, given a DB-API connection.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `connection.rollback()` 的实现，给定一个DB-API连接。
- en: 'Parameters:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个DBAPI连接，通常在 `ConnectionFairy` 中代理。'
- en: '[PRE87]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Rollback a connection to the named savepoint.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 将连接回滚到命名保存点。
- en: 'Parameters:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE88]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '*inherited from the* `Dialect.do_rollback_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *方法的* `Dialect.do_rollback_twophase()`。'
- en: Rollback a two phase transaction on the given connection.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上回滚两阶段事务。
- en: 'Parameters:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 是否调用了[`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '`recover` – if the recover flag was passed.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recover` – 如果传递了recover标志。'
- en: '[PRE89]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Create a savepoint with the given name.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定名称创建一个保存点。
- en: 'Parameters:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE90]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '*inherited from the* `Dialect.do_set_input_sizes()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.do_set_input_sizes()` *方法。'
- en: invoke the cursor.setinputsizes() method with appropriate arguments
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适当的参数调用`cursor.setinputsizes()`方法。
- en: This hook is called if the [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") attribute is set to the [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") value. Parameter data is passed
    in a list of tuples (paramname, dbtype, sqltype), where `paramname` is the key
    of the parameter in the statement, `dbtype` is the DBAPI datatype and `sqltype`
    is the SQLAlchemy type. The order of tuples is in the correct parameter order.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing "sqlalchemy.engine.Dialect.bind_typing")属性设置为[`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES")值，则调用此钩子。参数数据以元组列表的形式传递（paramname，dbtype，sqltype），其中`paramname`是语句中参数的键，`dbtype`是DBAPI数据类型，`sqltype`是SQLAlchemy类型。元组的顺序是正确的参数顺序。
- en: New in version 1.4.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本新推出。
- en: 'Changed in version 2.0: - setinputsizes mode is now enabled by setting [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") to [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES"). Dialects which accept a `use_setinputsizes`
    parameter should set this value appropriately.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：- 通过将[`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing")设置为[`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES")来启用setinputsizes模式。接受`use_setinputsizes`参数的方言应适当设置此值。
- en: '[PRE91]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Provide an implementation of `connection.close()` that tries as much as possible
    to not block, given a DBAPI connection.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个实现了尽可能不阻塞的`connection.close()`的钩子，给定一个DBAPI连接。
- en: In the vast majority of cases this just calls .close(), however for some asyncio
    dialects may call upon different API features.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，这只是调用`.close()`，但是对于某些asyncio方言可能调用不同的API功能。
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection is being recycled or has been invalidated.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接被回收或无效时，此钩子由[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")调用。
- en: New in version 1.4.41.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4.41版本新推出。
- en: '[PRE92]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: identifying name for the dialect’s DBAPI
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 方言的DBAPI的标识名称。
- en: '[PRE93]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: a mapping of string keys that can be in an engine config linked to type conversion
    functions.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符串键的映射，可以是引擎配置中的类型转换函数。
- en: '[PRE94]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '*inherited from the* `Dialect.engine_created()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.engine_created()` *方法。'
- en: A convenience hook called before returning the final [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的钩子，在返回最终[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")之前调用。
- en: If the dialect returned a different class from the [`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls") method, then the hook
    is called on both classes, first on the dialect class returned by the [`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls") method and then on
    the class on which the method was called.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言从[`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls")方法返回了不同的类，则该钩子将在两个类上调用，首先在由[`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls")方法返回的方言类上调用，然后在调用方法的类上调用。
- en: The hook should be used by dialects and/or wrappers to apply special events
    to the engine or its components. In particular, it allows a dialect-wrapping class
    to apply dialect-level events.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子应由方言和/或包装器用于将特殊事件应用于引擎或其组件。特别是，它允许方言包装类应用方言级事件。
- en: '[PRE95]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: set of DBAPI type objects that should be excluded in automatic cursor.setinputsizes()
    calls.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 设置应在自动 cursor.setinputsizes() 调用中排除的 DBAPI 类型对象集合。
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当 bind_typing 为 BindTyping.SET_INPUT_SIZES 时才使用此选项。
- en: '[PRE96]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: alias of `tuple`
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`tuple` 的别名'
- en: '[PRE97]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: alias of [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") 的别名'
- en: '[PRE98]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: for backends that support both a lastrowid and a RETURNING insert strategy,
    favor RETURNING for simple single-int pk inserts.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持 lastrowid 和 RETURNING 插入策略的后端，请优先使用 RETURNING 进行简单的单整数 pk 插入。
- en: cursor.lastrowid tends to be more performant on most backends.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数后端上，cursor.lastrowid 往往更具性能。
- en: '[PRE99]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Deprecated since version 2.0: full_returning is deprecated, please use insert_returning,
    update_returning, delete_returning'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 弃用：full_returning 已弃用，请改用 insert_returning、update_returning、delete_returning
- en: '[PRE100]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '*inherited from the* `Dialect.get_async_dialect_cls()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.get_async_dialect_cls()` 方法'
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used by an async engine.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 URL，返回将由异步引擎使用的 [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: By default this is an alias of [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and just returns the cls. It may
    be used if a dialect provides both a sync and async version under the same name,
    like the `psycopg` driver.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这是 [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") 的别名，只返回 cls。如果一个方言在同一名称下提供了同步和异步版本，则可以使用它，例如
    `psycopg` 驱动程序。
- en: New in version 2.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2 中的新功能。
- en: See also
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
- en: '[PRE101]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '*inherited from the* `Dialect.get_check_constraints()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.get_check_constraints()` 方法'
- en: Return information about check constraints in `table_name`.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `table_name` 中检查约束的信息。
- en: Given a string `table_name` and an optional string `schema`, return check constraint
    information as a list of dicts corresponding to the [`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") dictionary.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串 `table_name` 和一个可选的字符串 `schema`，将检查约束信息作为与 [`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") 字典相对应的字典列表返回。
- en: This is an internal dialect method. Applications should use [`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints").
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 [`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")。
- en: '[PRE102]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '*inherited from the* `Dialect.get_columns()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.get_columns()` 方法'
- en: Return information about columns in `table_name`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于 `table_name` 中列的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return column information
    as a list of dictionaries corresponding to the [`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") dictionary.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、一个字符串
    `table_name` 和一个可选的字符串 `schema`，将列信息作为与 [`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") 字典相对应的字典列表返回。
- en: This is an internal dialect method. Applications should use [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns").
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。 应用程序应使用[`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")。
- en: '[PRE103]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Given a DBAPI connection, return its isolation level, or a default isolation
    level if one cannot be retrieved.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，返回其隔离级别，或者如果无法检索到隔离级别，则返回默认隔离级别。
- en: May be overridden by subclasses in order to provide a “fallback” isolation level
    for databases that cannot reliably retrieve the actual isolation level.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 可以由子类覆盖，以提供对于无法可靠检索实际隔离级别的数据库的“回退”隔离级别。
- en: By default, calls the `Interfaces.get_isolation_level()` method, propagating
    any exceptions raised.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，调用`Interfaces.get_isolation_level()`方法，传播引发的任何异常。
- en: New in version 1.3.22.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增1.3.22。
- en: '[PRE104]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '*inherited from the* `Dialect.get_dialect_cls()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`方言`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_dialect_cls()` *方法*'
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个URL，返回将要使用的[`方言`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: This is a hook that allows an external plugin to provide functionality around
    an existing dialect, by allowing the plugin to be loaded from the url based on
    an entrypoint, and then the plugin returns the actual dialect to be used.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个挂钩，允许外部插件围绕现有方言提供功能，通过允许从基于入口点的URL加载插件，然后插件返回要使用的实际方言。
- en: By default this just returns the cls.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这只是返回cls。
- en: '[PRE105]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: return a Pool class to use for a given URL
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于给定URL的Pool类。
- en: '[PRE106]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Returns the connection object as returned by the external driver package.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由外部驱动程序包返回的连接对象。
- en: For normal dialects that use a DBAPI compliant driver this call will just return
    the `connection` passed as argument. For dialects that instead adapt a non DBAPI
    compliant driver, like when adapting an asyncio driver, this call will return
    the connection-like object as returned by the driver.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用DBAPI兼容驱动程序的普通方言，此调用将只返回作为参数传递的`connection`。 对于改用非DBAPI兼容驱动程序进行适配的方言，例如在适配异步驱动程序时，此调用将返回驱动程序返回的类似连接的对象。
- en: New in version 1.4.24.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增1.4.24。
- en: '[PRE107]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '*inherited from the* `Dialect.get_foreign_keys()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`方言`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_foreign_keys()` *方法*'
- en: Return information about foreign_keys in `table_name`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于`table_name`中外键的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return foreign key information
    as a list of dicts corresponding to the [`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") dictionary.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`连接`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，一个字符串`table_name`，和一个可选字符串`schema`，返回作为与[`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint")字典对应的字典列表的外键信息。
- en: This is an internal dialect method. Applications should use `Inspector.get_foreign_keys()`.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。 应用程序应使用`Inspector.get_foreign_keys()`。
- en: '[PRE108]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '*inherited from the* `Dialect.get_indexes()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`方言`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_indexes()` *方法*'
- en: Return information about indexes in `table_name`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 返回关于`table_name`中索引的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name` and an optional string `schema`, return index information
    as a list of dictionaries corresponding to the [`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") dictionary.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`连接`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，一个字符串`table_name`和一个可选字符串`schema`，返回作为与[`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")字典对应的字典列表的索引信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个内部方言方法。应用程序应使用 [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")。 '
- en: '[PRE109]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '*inherited from the* `Dialect.get_isolation_level()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.get_isolation_level()` *方法*'
- en: Given a DBAPI connection, return its isolation level.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 DBAPI 连接，返回其隔离级别。
- en: When working with a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, the corresponding DBAPI connection may
    be procured using the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象时，可以使用 [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") 访问器获取相应的 DBAPI 连接。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个方言级方法，用作 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 和 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 隔离级别功能实现的一部分；对于大多数典型用例，应优先使用这些 API。
- en: See also
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 的隔离级别'
- en: '[PRE110]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '*inherited from the* `Dialect.get_isolation_level_values()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.get_isolation_level_values()` *方法*'
- en: return a sequence of string isolation level names that are accepted by this
    dialect.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个字符串隔离级别名称序列，该序列被此方言接受。
- en: 'The available names should use the following conventions:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 可用名称应使用以下约定：
- en: use UPPERCASE names. isolation level methods will accept lowercase names but
    these are normalized into UPPERCASE before being passed along to the dialect.
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大写命名。隔离级别方法将接受小写名称，但在传递给方言之前会将其标准化为大写。
- en: separate words should be separated by spaces, not underscores, e.g. `REPEATABLE
    READ`. isolation level names will have underscores converted to spaces before
    being passed along to the dialect.
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单词之间应该用空格分隔，而不是下划线，例如 `REPEATABLE READ`。在传递给方言之前，隔离级别名称将下划线转换为空格。
- en: The names for the four standard isolation names to the extent that they are
    supported by the backend should be `READ UNCOMMITTED` `READ COMMITTED`, `REPEATABLE
    READ`, `SERIALIZABLE`
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于标准隔离名称，如果后端支持，应为 `READ UNCOMMITTED`、`READ COMMITTED`、`REPEATABLE READ`、`SERIALIZABLE`
- en: if the dialect supports an autocommit option it should be provided using the
    isolation level name `AUTOCOMMIT`.
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果方言支持自动提交选项，则应使用隔离级别名称 `AUTOCOMMIT`。
- en: Other isolation modes may also be present, provided that they are named in UPPERCASE
    and use spaces not underscores.
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他隔离模式也可能存在，只要它们以大写形式命名并使用空格而不是下划线。
- en: This function is used so that the default dialect can check that a given isolation
    level parameter is valid, else raises an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于默认方言检查给定的隔离级别参数是否有效，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: A DBAPI connection is passed to the method, in the unlikely event that the dialect
    needs to interrogate the connection itself to determine this list, however it
    is expected that most backends will return a hardcoded list of values. If the
    dialect supports “AUTOCOMMIT”, that value should also be present in the sequence
    returned.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，方法会传递一个DBAPI连接，以便方言自身需要查询连接本身以确定此列表，但是大多数后端都会返回一个硬编码的值列表。如果方言支持“AUTOCOMMIT”，那么该值也应该存在于返回的序列中。
- en: The method raises `NotImplementedError` by default. If a dialect does not implement
    this method, then the default dialect will not perform any checking on a given
    isolation level value before passing it onto the [`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level") method. This is to allow backwards-compatibility
    with third party dialects that may not yet be implementing this method.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法默认引发`NotImplementedError`。如果方言未实现此方法，则默认方言将不会在将其传递给[`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level")方法之前对给定的隔离级别值执行任何检查。这是为了与尚未实现此方法的第三方方言保持向后兼容。
- en: New in version 2.0.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0新增。
- en: '[PRE111]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '*inherited from the* `Dialect.get_materialized_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_materialized_view_names()` *方法*'
- en: Return a list of all materialized view names available in the database.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有可用物化视图名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_materialized_view_names()`.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_materialized_view_names()`。
- en: 'Parameters:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** –'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式** –'
- en: schema name to query, if not the default schema.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的模式名称，如果不是默认模式。
- en: New in version 2.0.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0新增。
- en: '[PRE112]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Return information about check constraints in all tables in the given `schema`.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的检查约束信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints").
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")。
- en: Note
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将针对`Dialect.get_table_names()`、`Dialect.get_view_names()`或`Dialect.get_materialized_view_names()`返回的每个对象调用单表方法，具体取决于提供的`kind`。希望支持更快实现的方言应该实现此方法。'
- en: New in version 2.0.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0新增。
- en: '[PRE113]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return information about columns in all tables in the given `schema`.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的列信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns")。
- en: Note
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将针对`Dialect.get_table_names()`、`Dialect.get_view_names()`或`Dialect.get_materialized_view_names()`返回的每个对象调用单表方法，具体取决于提供的`kind`。希望支持更快实现的方言应该实现此方法。'
- en: New in version 2.0.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0新增。
- en: '[PRE114]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Return information about foreign_keys in all tables in the given `schema`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表的外键信息。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_foreign_keys()`.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 `Inspector.get_multi_foreign_keys()`。
- en: Note
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，它会根据提供的 `kind` 对 `Dialect.get_table_names()`、`Dialect.get_view_names()`
    或 `Dialect.get_materialized_view_names()` 返回的每个对象调用单个表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE115]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Return information about indexes in in all tables in the given `schema`.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表的索引信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes").
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")。
- en: Note
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，它会根据提供的 `kind` 对 `Dialect.get_table_names()`、`Dialect.get_view_names()`
    或 `Dialect.get_materialized_view_names()` 返回的每个对象调用单个表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE116]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return information about primary key constraints in all tables in the given
    `schema`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表的主键约束信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint").
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 [`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")。
- en: Note
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，它会根据提供的 `kind` 对 `Dialect.get_table_names()`、`Dialect.get_view_names()`
    或 `Dialect.get_materialized_view_names()` 返回的每个对象调用单个表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE117]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Return information about the table comment in all tables in the given `schema`.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表的表注释信息。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_comment()`.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 `Inspector.get_multi_table_comment()`。
- en: Note
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，它会根据提供的 `kind` 对 `Dialect.get_table_names()`、`Dialect.get_view_names()`
    或 `Dialect.get_materialized_view_names()` 返回的每个对象调用单个表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE118]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中表创建时指定的选项字典。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_options()`.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 `Inspector.get_multi_table_options()`。
- en: Note
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，它会根据提供的 `kind` 对 `Dialect.get_table_names()`、`Dialect.get_view_names()`
    或 `Dialect.get_materialized_view_names()` 返回的每个对象调用单个表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中新增。
- en: '[PRE119]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Return information about unique constraints in all tables in the given `schema`.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的唯一约束信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints").
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")。
- en: Note
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用`Dialect.get_table_names()`、`Dialect.get_view_names()`或`Dialect.get_materialized_view_names()`返回的每个对象的单表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0。
- en: '[PRE120]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '*inherited from the* `Dialect.get_pk_constraint()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_pk_constraint()` *方法。'
- en: Return information about the primary key constraint on table_name`.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`上主键约束的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return primary key information
    as a dictionary corresponding to the [`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") dictionary.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 给定[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、字符串`table_name`和可选字符串`schema`，返回与[`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint")字典对应的主键信息字典。
- en: This is an internal dialect method. Applications should use [`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint").
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")。
- en: '[PRE121]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '*inherited from the* `Dialect.get_schema_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_schema_names()` *方法。'
- en: Return a list of all schema names available in the database.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有模式名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_schema_names()`.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_schema_names()`。
- en: '[PRE122]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '*inherited from the* `Dialect.get_sequence_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_sequence_names()` *方法。'
- en: Return a list of all sequence names available in the database.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有序列名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_sequence_names()`.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_sequence_names()`。
- en: 'Parameters:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name to query, if not the default schema.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** – 要查询的模式名称，如果不是默认模式。'
- en: New in version 1.4.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4。
- en: '[PRE123]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '*inherited from the* `Dialect.get_table_comment()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_table_comment()` *方法。'
- en: Return the “comment” for the table identified by `table_name`.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由`table_name`标识的表的“注释”。
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a dictionary corresponding to the [`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") dictionary.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 给定字符串`table_name`和可选字符串`schema`，返回与[`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")字典对应的表注释信息字典。
- en: This is an internal dialect method. Applications should use [`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment").
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")。
- en: 'Raise:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出：
- en: '`NotImplementedError` for dialects that don’t support comments.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持注释的方言，抛出 `NotImplementedError`。
- en: New in version 1.2.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: '[PRE124]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*inherited from the* `Dialect.get_table_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_table_names()` *方法。*'
- en: Return a list of table names for `schema`.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `schema` 的表名列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_table_names()`.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_table_names()`。
- en: '[PRE125]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '*inherited from the* `Dialect.get_table_options()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_table_options()` *方法。*'
- en: Return a dictionary of options specified when `table_name` was created.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 返回创建 `table_name` 时指定的选项字典。
- en: This is an internal dialect method. Applications should use `Inspector.get_table_options()`.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_table_options()`。
- en: '[PRE126]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '*inherited from the* `Dialect.get_temp_table_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_temp_table_names()` *方法。*'
- en: Return a list of temporary table names on the given connection, if supported
    by the underlying backend.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定连接上的临时表名列表，如果底层后端支持。
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_table_names()`.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_temp_table_names()`。
- en: '[PRE127]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '*inherited from the* `Dialect.get_temp_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_temp_view_names()` *方法。*'
- en: Return a list of temporary view names on the given connection, if supported
    by the underlying backend.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定连接上的临时视图名列表，如果底层后端支持。
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_view_names()`.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_temp_view_names()`。
- en: '[PRE128]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '*inherited from the* `Dialect.get_unique_constraints()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_unique_constraints()` *方法。*'
- en: Return information about unique constraints in `table_name`.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `table_name` 中唯一约束的信息。
- en: Given a string `table_name` and an optional string `schema`, return unique constraint
    information as a list of dicts corresponding to the [`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") dictionary.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串 `table_name` 和一个可选的字符串 `schema`，返回唯一约束信息，作为与 [`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") 字典相对应的字典列表。
- en: This is an internal dialect method. Applications should use [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints").
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")。
- en: '[PRE129]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '*inherited from the* `Dialect.get_view_definition()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_view_definition()` *方法。*'
- en: Return plain or materialized view definition.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回普通或材料化视图定义。
- en: This is an internal dialect method. Applications should use `Inspector.get_view_definition()`.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_view_definition()`。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `view_name`, and an optional string `schema`, return the view definition.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，一个字符串
    `view_name`，和一个可选的字符串 `schema`，返回视图定义。
- en: '[PRE130]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '*inherited from the* `Dialect.get_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.get_view_names()` *方法。*'
- en: Return a list of all non-materialized view names available in the database.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有非材料化视图名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_view_names()`.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.get_view_names()`。
- en: 'Parameters:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name to query, if not the default schema.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** – 要查询的模式名称，如果不是默认模式。'
- en: '[PRE131]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Check the existence of a particular index name in the database.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定索引名称的存在性。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `table_name` and string index name, return `True` if an index
    of the given name on the given table exists, `False` otherwise.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，一个字符串 `table_name` 和字符串索引名称，如果给定表上存在给定名称的索引，则返回 `True`，否则返回 `False`。
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this in terms of the [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") and [`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes
    "sqlalchemy.engine.Dialect.get_indexes") methods, however dialects can implement
    a more performant version.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    在 [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table "sqlalchemy.engine.Dialect.has_table")
    和 [`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes "sqlalchemy.engine.Dialect.get_indexes")
    方法方面实现了这一点，但是方言可以实现更高效的版本。'
- en: This is an internal dialect method. Applications should use `Inspector.has_index()`.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.has_index()`。
- en: New in version 1.4.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE132]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Check the existence of a particular schema name in the database.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定模式名称的存在性。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `schema_name`, return `True` if a schema of the given exists,
    `False` otherwise.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，一个字符串 `schema_name`，如果存在给定的模式，则返回 `True`，否则返回 `False`。
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this by checking the presence of `schema_name` among the schemas returned
    by [`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names"), however dialects can implement
    a more performant version.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    通过检查 [`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names") 返回的模式中是否存在 `schema_name` 来实现这一点，但是方言可以实现更高效的版本。'
- en: This is an internal dialect method. Applications should use `Inspector.has_schema()`.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.has_schema()`。
- en: New in version 2.0.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE133]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '*inherited from the* `Dialect.has_sequence()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.has_sequence()` *方法继承*'
- en: Check the existence of a particular sequence in the database.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定序列的存在性。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and a string sequence_name, return `True` if the given sequence exists
    in the database, `False` otherwise.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象和一个字符串 sequence_name，如果数据库中存在给定的序列，则返回 `True`，否则返回 `False`。
- en: This is an internal dialect method. Applications should use `Inspector.has_sequence()`.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用 `Inspector.has_sequence()`。
- en: '[PRE134]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* `Dialect.has_table()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.has_table()` *方法继承*'
- en: For internal dialect use, check the existence of a particular table or view
    in the database.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内部方言使用，检查数据库中特定表或视图的存在性。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string table_name and optional schema name, return True if the given
    table exists in the database, False otherwise.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象，一个字符串 table_name 和可选的模式名称，如果数据库中存在给定的表，则返回 True，否则返回 False。
- en: This method serves as the underlying implementation of the public facing [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method, and is also used internally
    to implement the “checkfirst” behavior for methods like [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法作为公共面向的 [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 方法的底层实现，并且在内部用于实现方法如 [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") 和 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 的“checkfirst”行为。
- en: Note
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is used internally by SQLAlchemy, and is published so that third-party
    dialects may provide an implementation. It is **not** the public API for checking
    for table presence. Please use the [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法由 SQLAlchemy 内部使用，并发布以便第三方方言可以提供实现。这**不是**用于检查表存在性的公共 API。请使用 [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 方法。
- en: 'Changed in version 2.0::: [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") now formally supports checking for additional
    table-like objects:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '2.0 版本更改::: [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table "sqlalchemy.engine.Dialect.has_table")
    现在正式支持检查其他类似表的对象：'
- en: any type of views (plain or materialized)
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的视图（普通或材料化）
- en: temporary tables of any kind
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的临时表
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types, and dialects to the degree that the backing database
    supports views or temporary tables should seek to support locating these objects
    for full compliance.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这两个检查没有正式规定，不同的方言在行为上会有所不同。方言测试套件现在包括对所有这些对象类型的测试，支持视图或临时表的程度应该寻求支持定位这些对象以实现完全的兼容性。
- en: '[PRE135]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Whether or not this dialect has a separate “terminate” implementation that does
    not block or require awaiting.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言是否具有单独的“终止”实现，不会阻塞或需要等待。
- en: '[PRE136]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: This element will refer to an instance of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") once a [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") has been constructed.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构造了 [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    的实例，此元素将引用一个 [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") 的实例。
- en: '[PRE137]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '*inherited from the* `Dialect.import_dbapi()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.import_dbapi()` *方法。'
- en: Import the DBAPI module that is used by this dialect.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 导入此方言使用的 DBAPI 模块。
- en: The Python module object returned here will be assigned as an instance variable
    to a constructed dialect under the name `.dbapi`.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 此处返回的 Python 模块对象将被分配为构造的方言的一个实例变量，名称为 `.dbapi`。
- en: 'Changed in version 2.0: The [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") class method is renamed from the previous
    method `.Dialect.dbapi()`, which would be replaced at dialect instantiation time
    by the DBAPI module itself, thus using the same name in two different ways. If
    a `.Dialect.dbapi()` classmethod is present on a third-party dialect, it will
    be used and a deprecation warning will be emitted.'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本更改：[`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") 类方法从先前的方法 `.Dialect.dbapi()` 重命名，该方法将在方言实例化时由
    DBAPI 模块本身替换，因此以两种不同方式使用相同的名称。如果第三方方言上存在 `.Dialect.dbapi()` 类方法，将使用它并���出弃用警告。
- en: '[PRE138]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: set of DBAPI type objects that should be included in automatic cursor.setinputsizes()
    calls.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 应包含在自动 cursor.setinputsizes() 调用中的一组 DBAPI 类型对象。
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在 bind_typing 为 BindTyping.SET_INPUT_SIZES 时使用。
- en: '[PRE139]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: Called during strategized creation of the dialect with a connection.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用连接创建方言时调用。
- en: Allows dialects to configure options based on server version info or other properties.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 允许方言根据服务器版本信息或其他属性配置选项。
- en: The connection passed here is a SQLAlchemy Connection object, with full capabilities.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 此处传递的连接是一个具有完整功能的SQLAlchemy连接对象。
- en: The initialize() method of the base dialect should be called via super().
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 应通过super()调用基础方言的initialize()方法。
- en: Note
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: as of SQLAlchemy 1.4, this method is called **before** any [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hooks are called.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，在调用任何[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")钩子之前调用此方法。
- en: '[PRE140]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Indicates the dialect supports comment DDL that’s inline with the definition
    of a Table or Column. If False, this implies that ALTER must be used to set table
    and column comments.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否支持与表或列定义内联的注释DDL。如果为False，则意味着必须使用ALTER来设置表和列的注释。
- en: '[PRE141]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 当dialect.do_executemany()被使用时，方言/驱动程序/数据库支持某些方法来提供INSERT…RETURNING支持。
- en: '[PRE142]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used along with the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter being set.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 当dialect.do_executemany()与设置了[`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")参数一起使用时，方言/驱动程序/数据库支持某些方法来提供INSERT…RETURNING支持。
- en: '[PRE143]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: if the dialect supports RETURNING with INSERT
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持INSERT与RETURNING
- en: New in version 2.0.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '[PRE144]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Options indicating the database supports a form of bulk INSERT where the autoincrement
    integer primary key can be reliably used as an ordering for INSERTed rows.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 指示数据库是否支持一种形式的批量插入，其中自增整数主键可以可靠地用作INSERT的行的排序。
- en: New in version 2.0.10.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10版本中的新功能。
- en: See also
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '[将返回的行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)'
- en: '[PRE145]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: Alternate to insertmanyvalues_page_size, will additionally limit page size based
    on number of parameters total in the statement.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 与insertmanyvalues_page_size替代，还将基于语句中的参数总数限制页面大小。
- en: '[PRE146]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Number of rows to render into an individual INSERT..VALUES() statement for `ExecuteStyle.INSERTMANYVALUES`
    executions.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`ExecuteStyle.INSERTMANYVALUES`执行中渲染为单个INSERT..VALUES()语句的行数。
- en: The default dialect defaults this to 1000.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方言将此默认设置为1000。
- en: New in version 2.0.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: See also
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - execution option available
    on [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    statements'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上可用的执行选项，语句'
- en: '[PRE147]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Whether or not this dialect is intended for asyncio use.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言是否用于asyncio使用。
- en: '[PRE148]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Return True if the given DB-API error indicates an invalid connection
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的DB-API错误表示无效连接，则返回True
- en: '[PRE149]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: optional user-defined max length for SQL labels
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: SQL标签的可选用户定义的最大长度
- en: '[PRE150]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: set up the provision.py module for this dialect.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 为此方言设置provision.py模块。
- en: For dialects that include a provision.py module that sets up provisioning followers,
    this method should initiate that process.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含一个设置供应跟随者的provision.py模块的方言，此方法应启动该过程。
- en: 'A typical implementation would be:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 典型实现可能是：
- en: '[PRE151]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'The default method assumes a module named `provision.py` inside the owning
    package of the current dialect, based on the `__module__` attribute:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方法假定当前方言的所有者包中有一个名为`provision.py`的模块，基于`__module__`属性：
- en: '[PRE152]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: New in version 1.3.14.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.14版本中的新功能。
- en: '[PRE153]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: The maximum length of identifier names.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符名称的最大长度。
- en: '[PRE155]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: identifying name for the dialect from a DBAPI-neutral point of view (i.e. ‘sqlite’)
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 方言的从DBAPI中立点来看的标识名称（即“sqlite”）
- en: '[PRE156]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: convert the given name to lowercase if it is detected as case insensitive.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到名称不区分大小写，则将给定名称转换为小写。
- en: This method is only used if the dialect defines requires_name_normalize=True.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当方言定义requires_name_normalize=True时才使用此方法。
- en: '[PRE157]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: return a callable which sets up a newly created DBAPI connection.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象设置新创建的DBAPI连接。
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可调用函数应该接受一个名为“conn”的参数，它就是 DBAPI 连接本身。内部可调用函数没有返回值。
- en: 'E.g.:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE158]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置方言范围内的每个连接的选项，例如隔离模式、Unicode 模式等。
- en: The “do_on_connect” callable is invoked by using the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook, then unwrapping the DBAPI
    connection and passing it into the callable.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: “do_on_connect” 可调用函数是通过使用 [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 事件钩子来调用的，然后解包 DBAPI 连接并将其传递给可调用函数。
- en: 'Changed in version 1.4: the on_connect hook is no longer called twice for the
    first connection of a dialect. The on_connect hook is still called before the
    [`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize "sqlalchemy.engine.Dialect.initialize")
    method however.'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：不再为方言的第一个连接调用两次 on_connect 钩子。然而，在 [`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize
    "sqlalchemy.engine.Dialect.initialize") 方法之前仍会调用 on_connect 钩子。
- en: 'Changed in version 1.4.3: the on_connect hook is invoked from a new method
    on_connect_url that passes the URL that was used to create the connect args. Dialects
    can implement on_connect_url instead of on_connect if they need the URL object
    that was used for the connection in order to get additional context.'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4.3 版本中更改：从一个新方法 on_connect_url 调用 on_connect 钩子，该方法传递用于创建连接参数的 URL。如果方言需要使用用于连接的
    URL 对象来获取附加上下文，则可以实现 on_connect_url 而不是 on_connect。
- en: If None is returned, no event listener is generated.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回 None，则不生成事件监听器。
- en: 'Returns:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可调用的函数，接受一个单一的 DBAPI 连接作为参数，或者为 None。
- en: See also
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - allows the DBAPI `connect()` sequence itself to be controlled.'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - 允许控制 DBAPI `connect()` 序列本身。'
- en: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - supersedes [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    to also receive the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object in context.'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - 取代了 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    来接收上下文中的 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 对象。'
- en: '[PRE159]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '*inherited from the* `Dialect.on_connect_url()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.on_connect_url()` *方法。'
- en: return a callable which sets up a newly created DBAPI connection.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用的函数，用于设置新创建的 DBAPI 连接。
- en: This method is a new hook that supersedes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method when implemented by a dialect.
    When not implemented by a dialect, it invokes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method directly to maintain compatibility
    with existing dialects. There is no deprecation for [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") expected.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 当由方言实现时，这个方法是一个新的钩子，它取代了 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") 方法。当方言没有实现时，它直接调用 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") 方法，以保持与现有方言的兼容性。不会为 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") 预期进行弃用。
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可调用函数应该接受一个名为“conn”的参数，它就是 DBAPI 连接本身。内部可调用函数没有返回值。
- en: 'E.g.:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE160]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置方言范围内的每个连接的选项，例如隔离模式、Unicode 模式等。
- en: This method differs from [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") in that it is passed the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object that’s relevant to the connect args. Normally
    the only way to get this is from the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hook is to look on the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") itself, however this URL object may have been replaced
    by plugins.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法与 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    不同之处在于，它接收与连接参数相关的 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象。通常，从 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    钩子获取这个对象的唯一方式是查看 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    本身，但是这个 URL 对象可能已经被插件替换。
- en: Note
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The default implementation of [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") is to invoke the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method. Therefore if a dialect implements
    this method, the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method **will not be called** unless the
    overriding dialect calls it directly from here.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    的默认实现是调用 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    方法。因此，如果一个方言实现了这个方法，那么除非覆盖方言直接从这里调用，否则不会调用 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") 方法。'
- en: 'New in version 1.4.3: added [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") which normally calls into [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect").'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.3 中的新内容：增加了 [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url")，它通常调用 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")。
- en: 'Parameters:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object representing the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    that was passed to the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '**url** – 表示传递给 [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法的 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 的 [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象。'
- en: 'Returns:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可接受单个 DBAPI 连接作为参数的可调用对象，或者为 None。
- en: See also
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
- en: '[PRE161]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: the paramstyle to be used (some DB-APIs support multiple paramstyles).
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 将要使用的参数风格（某些 DB-API 支持多个参数风格）。
- en: '[PRE162]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: True if the paramstyle for this Dialect is positional.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个 Dialect 的参数风格是按位置的，则为 True。
- en: '[PRE163]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: True if ‘implicit’ primary key functions must be executed separately in order
    to get their value, if RETURNING is not used.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有使用 RETURNING，则‘implicit’ 主键函数必须分别执行以获取它们的值，则为 True。
- en: This is currently oriented towards PostgreSQL when the `implicit_returning=False`
    parameter is used on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象上使用 `implicit_returning=False` 参数时，这目前是针对 PostgreSQL 的。
- en: '[PRE164]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: alias of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer")
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '[`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer "sqlalchemy.sql.compiler.IdentifierPreparer")
    的别名'
- en: '[PRE165]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '*inherited from the* `Dialect.reflection_options` *attribute of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    *的* `Dialect.reflection_options` *属性*'
- en: Sequence of string names indicating keyword arguments that can be established
    on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object which will be passed as “reflection options” when using [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table").
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符串名称序列，指示可以在使用 [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 时作为“反射选项”传递的关键字参数，这些参数将在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象上设置。
- en: Current example is “oracle_resolve_synonyms” in the Oracle dialect.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 当前示例是Oracle方言中的“oracle_resolve_synonyms”。
- en: '[PRE166]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Given a DBAPI connection, revert its isolation to the default.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，将其隔离恢复为默认值。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个方言级方法，用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")隔离级别设施的实现的一部分；这些API应该优先用于大多数典型用例。
- en: See also
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[PRE167]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: indicates if Python bytes() objects are returned natively by the driver for
    SQL “binary” datatypes.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 指示Python bytes()对象是否由驱动程序原生返回SQL“binary”数据类型。
- en: New in version 2.0.11.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0.11中提供。
- en: '[PRE168]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: If True, indicates if the [`Sequence.optional`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter on the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct should signal to not generate a CREATE
    SEQUENCE. Applies only to dialects that support sequences. Currently used only
    to allow PostgreSQL SERIAL to be used on a column that specifies Sequence() for
    usage on other backends.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则表示[`Sequence.optional`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence")参数在[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")构造上是否应该发出信号以不生成CREATE SEQUENCE。仅适用于支持序列的方言。目前仅用于允许在指定Sequence()用于其他后端的列上使用PostgreSQL
    SERIAL。
- en: '[PRE169]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: deprecated; indicates if the dialect should attempt to use server side cursors
    by default
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用；指示方言是否应尝试默认使用服务器端游标
- en: '[PRE170]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: a tuple containing a version number for the DB backend in use.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 包含正在使用的DB后端的版本号的元组。
- en: This value is only available for supporting dialects, and is typically populated
    during the initial connection to the database.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 此值仅适用于支持的方言，并且通常在初始连接到数据库时填充。
- en: '[PRE171]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Establish execution options for a given connection.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定连接建立执行选项。
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") in order to implement the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option. Dialects can
    intercept various execution options which may need to modify state on a particular
    DBAPI connection.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 这由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")实现，以实现[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项。方言可以拦截各种执行选项，这些选项可能需要修改特定DBAPI连接上的状态。
- en: New in version 1.4.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中提供。
- en: '[PRE172]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Establish execution options for a given engine.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定引擎建立执行选项。
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") to establish event hooks for new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created by the given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will then invoke the [`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options") method for that
    connection.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 这由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")实现，用于为给定的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")创建的新[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例建立事件钩子，然后调用该连接的[`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options")方法。
- en: '[PRE173]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '*inherited from the* `Dialect.set_isolation_level()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")
    的 `Dialect.set_isolation_level()` *方法*'
- en: Given a DBAPI connection, set its isolation level.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，设置其隔离级别。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是一个方言级方法，用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")隔离级别功能的实现的一部分；对于大多数典型用例，应优先使用这些API。
- en: If the dialect also implements the [`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values") method, then the given
    level is guaranteed to be one of the string names within that sequence, and the
    method will not need to anticipate a lookup failure.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言还实现了[`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values")方法，则给定的级别将保证是该序列中的字符串名称之一，且该方法不需要预先考虑查找失败。
- en: See also
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[PRE174]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: alias of [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")的别名'
- en: '[PRE175]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '`True` if the database supports `ALTER TABLE` - used only for generating foreign
    key constraints in certain circumstances'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库支持`ALTER TABLE`，则为`True` - 仅在某些情况下用于生成外键约束
- en: '[PRE176]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Indicates the dialect supports comment DDL on tables and columns.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 表明方言支持对表和列进行评论的DDL。
- en: '[PRE177]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Indicates if the dialect supports comment DDL on constraints.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持对约束进行评论的DDL。
- en: '[PRE178]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: dialect supports INSERT… VALUES (DEFAULT) syntax
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT… VALUES (DEFAULT)语法
- en: '[PRE179]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: dialect supports INSERT… DEFAULT VALUES syntax
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT… DEFAULT VALUES语法
- en: '[PRE180]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: dialect supports INSERT () VALUES ()
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT () VALUES ()
- en: '[PRE181]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: target database supports IDENTITY
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持IDENTITY
- en: '[PRE182]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Target database supports INSERT…VALUES with multiple value sets, i.e. INSERT
    INTO table (cols) VALUES (…), (…), (…), …
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持使用多个值集合的 INSERT…VALUES，即 INSERT INTO table (cols) VALUES (…), (…), (…),
    …
- en: '[PRE183]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Indicates if the dialect supports a native boolean construct. This will prevent
    [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    from generating a CHECK constraint when that type is used.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否支持本地布尔构造。这将阻止 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    在使用该类型时生成 CHECK 约束。
- en: '[PRE184]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: indicates if Decimal objects are handled and returned for precision numeric
    types, or if floats are returned
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 Decimal 对象是否被处理并返回为精度数字类型，或者返回浮点数。
- en: '[PRE185]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Indicates if the dialect supports a native ENUM construct. This will prevent
    [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") from
    generating a CHECK constraint when that type is used in “native” mode.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否支持本地 ENUM 构造。这将阻止 [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    在“本地”模式下使用时生成 CHECK 约束。
- en: '[PRE186]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: indicates if Python UUID() objects are handled natively by the driver for SQL
    UUID datatypes.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 Python UUID() 对象是否由驱动程序原生处理 SQL UUID 数据类型。
- en: New in version 2.0.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 2.0。
- en: '[PRE187]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements when executed via executemany.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否正确地实现了通过 executemany 执行的 `UPDATE` 和 `DELETE` 语句的 rowcount。
- en: '[PRE188]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否正确地实现了 `UPDATE` 和 `DELETE` 语句的 rowcount。
- en: '[PRE189]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: True if this dialect supports sane rowcount even if RETURNING is in use.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此方言支持使用 RETURNING，则即使使用 RETURNING，也支持合理的行数。
- en: For dialects that don’t support RETURNING, this is synonymous with `supports_sane_rowcount`.
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持 RETURNING 的方言，这与 `supports_sane_rowcount` 是同义词。
- en: '[PRE190]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Indicates if the dialect supports CREATE SEQUENCE or similar.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否支持 CREATE SEQUENCE 或类似操作。
- en: '[PRE191]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: indicates if the dialect supports server side cursors
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言是否支持服务器端游标。
- en: '[PRE192]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: target database supports ORDER BY <labelname>, where <labelname> refers to a
    label in the columns clause of the SELECT
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持 ORDER BY <labelname>，其中 <labelname> 是 SELECT 的列子句中的标签。
- en: '[PRE193]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: indicates if this dialect supports caching.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此方言是否支持缓存。
- en: All dialects that are compatible with statement caching should set this flag
    to True directly on each dialect class and subclass that supports it. SQLAlchemy
    tests that this flag is locally present on each dialect subclass before it will
    use statement caching. This is to provide safety for legacy or new dialects that
    are not yet fully tested to be compliant with SQL statement caching.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与语句缓存兼容的方言都应该在每个支持它的方言类和子类上直接设置此标志为 True。SQLAlchemy 在使用语句缓存之前会测试每个方言子类上是否本地存在此标志。这是为了提供对尚未完全测试以符合
    SQL 语句缓存的旧版或新版方言的安全性。
- en: New in version 1.4.5.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 1.4.5。
- en: See also
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三方方言的缓存](connections.html#engine-thirdparty-caching)'
- en: '[PRE194]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: target database supports tuple IN, i.e. (x, y) IN ((q, p), (r, z))
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持元组 IN，即 (x, y) IN ((q, p), (r, z))
- en: '[PRE195]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: legacy; this is a TypeCompiler class at the class level, a TypeCompiler instance
    at the instance level.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的；这是一个在类级别的 TypeCompiler 类，在实例级别的 TypeCompiler 实例。
- en: Refer to type_compiler_instance instead.
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 type_compiler_instance。
- en: '[PRE196]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: alias of [`GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler "sqlalchemy.sql.compiler.GenericTypeCompiler")
    的别名。'
- en: '[PRE197]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: instance of a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    class used to compile SQL type objects
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译 SQL 类型对象的 [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    类的实例。
- en: New in version 2.0.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 2.0。
- en: '[PRE198]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: Provide a database-specific [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object, given the generic object which comes from
    the types module.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个特定于数据库的 [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    对象，给定来自 types 模块的通用对象。
- en: This method looks for a dictionary called `colspecs` as a class or instance-level
    variable, and passes on to `adapt_type()`.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法寻找一个名为 `colspecs` 的字典，作为类或实例级变量，并传递给 `adapt_type()`。
- en: '[PRE199]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: dialect supports UPDATE..RETURNING with executemany.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 方言是否支持 UPDATE..RETURNING 与 executemany。
- en: '[PRE200]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: if the dialect supports RETURNING with UPDATE
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持使用 RETURNING 的 UPDATE
- en: New in version 2.0.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 2.0。
- en: '[PRE201]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: if the dialect supports RETURNING with UPDATE..FROM
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持使用 RETURNING 的 UPDATE..FROM
- en: New in version 2.0.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 新于版本 2.0。
- en: '[PRE202]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: if True, indicates “insertmanyvalues” functionality should be used to allow
    for `insert_executemany_returning` behavior, if possible.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则表示应使用“insertmanyvalues”功能，以允许进行`insert_executemany_returning`行为，如果可能的话。
- en: 'In practice, setting this to True means:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，将其设置为True意味着：
- en: if `supports_multivalues_insert`, `insert_returning` and `use_insertmanyvalues`
    are all True, the SQL compiler will produce an INSERT that will be interpreted
    by the [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    as an `ExecuteStyle.INSERTMANYVALUES` execution that allows for INSERT of many
    rows with RETURNING by rewriting a single-row INSERT statement to have multiple
    VALUES clauses, also executing the statement multiple times for a series of batches
    when large numbers of rows are given.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`supports_multivalues_insert`、`insert_returning`和`use_insertmanyvalues`都为True，则SQL编译器将生成一个INSERT，由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")解释为`ExecuteStyle.INSERTMANYVALUES`执行，允许通过将单行INSERT语句重写为具有多个VALUES子句来INSERT多行并在给定大量行时多次执行语句以进行一系列批处理。
- en: The parameter is False for the default dialect, and is set to True for SQLAlchemy
    internal dialects SQLite, MySQL/MariaDB, PostgreSQL, SQL Server. It remains at
    False for Oracle, which provides native “executemany with RETURNING” support and
    also does not support `supports_multivalues_insert`. For MySQL/MariaDB, those
    MySQL dialects that don’t support RETURNING will not report `insert_executemany_returning`
    as True.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 对于默认方言，该参数为False，并且对于SQLAlchemy内部方言SQLite、MySQL/MariaDB、PostgreSQL、SQL Server，该参数设置为True。对于提供本地“带RETURNING的executemany”支持且不支持`supports_multivalues_insert`的Oracle，该参数保持为False。对于不支持RETURNING的MySQL/MariaDB，这些MySQL方言将不会报告`insert_executemany_returning`为True。
- en: New in version 2.0.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '[“插入多个值”行为适用于INSERT语句](connections.html#engine-insertmanyvalues)'
- en: '[PRE203]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: if True, and use_insertmanyvalues is also True, INSERT statements that don’t
    include RETURNING will also use “insertmanyvalues”.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，并且use_insertmanyvalues也为True，则不包括RETURNING的INSERT语句也将使用“insertmanyvalues”。
- en: New in version 2.0.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '[“插入多个值”行为适用于INSERT语句](connections.html#engine-insertmanyvalues)'
- en: '[PRE204]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Define the behavior of a specific database and DB-API combination.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 定义特定数据库和DB-API组合的行为。
- en: Any aspect of metadata definition, SQL query generation, execution, result-set
    handling, or anything else which varies between databases is defined under the
    general category of the Dialect. The Dialect acts as a factory for other database-specific
    object implementations including ExecutionContext, Compiled, DefaultGenerator,
    and TypeEngine.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据定义、SQL查询生成、执行、结果集处理或其他在数据库之间变化的任何方面都在方言的一般类别下定义。方言充当其他特定于数据库的对象实现的工厂，包括ExecutionContext、Compiled、DefaultGenerator和TypeEngine。
- en: Note
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Third party dialects should not subclass [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") directly. Instead, subclass [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") or descendant class.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方方言不应直接子类化[`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。而应该子类化[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")或后代类。
- en: '**Members**'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[bind_typing](#sqlalchemy.engine.Dialect.bind_typing), [colspecs](#sqlalchemy.engine.Dialect.colspecs),
    [connect()](#sqlalchemy.engine.Dialect.connect), [construct_arguments](#sqlalchemy.engine.Dialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.Dialect.create_connect_args), [create_xid()](#sqlalchemy.engine.Dialect.create_xid),
    [cte_follows_insert](#sqlalchemy.engine.Dialect.cte_follows_insert), [dbapi](#sqlalchemy.engine.Dialect.dbapi),
    [dbapi_exception_translation_map](#sqlalchemy.engine.Dialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.Dialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.Dialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.Dialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.Dialect.default_schema_name), [default_sequence_base](#sqlalchemy.engine.Dialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.Dialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.Dialect.delete_returning), [delete_returning_multifrom](#sqlalchemy.engine.Dialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.Dialect.denormalize_name), [div_is_floordiv](#sqlalchemy.engine.Dialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.Dialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.Dialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.Dialect.do_close), [do_commit()](#sqlalchemy.engine.Dialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.Dialect.do_commit_twophase), [do_execute()](#sqlalchemy.engine.Dialect.do_execute),
    [do_execute_no_params()](#sqlalchemy.engine.Dialect.do_execute_no_params), [do_executemany()](#sqlalchemy.engine.Dialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.Dialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.Dialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.Dialect.do_recover_twophase), [do_release_savepoint()](#sqlalchemy.engine.Dialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.Dialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.Dialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.Dialect.do_rollback_twophase), [do_savepoint()](#sqlalchemy.engine.Dialect.do_savepoint),
    [do_set_input_sizes()](#sqlalchemy.engine.Dialect.do_set_input_sizes), [do_terminate()](#sqlalchemy.engine.Dialect.do_terminate),
    [driver](#sqlalchemy.engine.Dialect.driver), [engine_config_types](#sqlalchemy.engine.Dialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.Dialect.engine_created), [exclude_set_input_sizes](#sqlalchemy.engine.Dialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.Dialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.Dialect.execution_ctx_cls), [favor_returning_over_lastrowid](#sqlalchemy.engine.Dialect.favor_returning_over_lastrowid),
    [get_async_dialect_cls()](#sqlalchemy.engine.Dialect.get_async_dialect_cls), [get_check_constraints()](#sqlalchemy.engine.Dialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.Dialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.Dialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.Dialect.get_dialect_cls), [get_dialect_pool_class()](#sqlalchemy.engine.Dialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.Dialect.get_driver_connection), [get_foreign_keys()](#sqlalchemy.engine.Dialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.Dialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.Dialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.Dialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.Dialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.Dialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.Dialect.get_multi_columns), [get_multi_foreign_keys()](#sqlalchemy.engine.Dialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.Dialect.get_multi_indexes), [get_multi_pk_constraint()](#sqlalchemy.engine.Dialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.Dialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.Dialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.Dialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.Dialect.get_pk_constraint), [get_schema_names()](#sqlalchemy.engine.Dialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.Dialect.get_sequence_names), [get_table_comment()](#sqlalchemy.engine.Dialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.Dialect.get_table_names), [get_table_options()](#sqlalchemy.engine.Dialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.Dialect.get_temp_table_names), [get_temp_view_names()](#sqlalchemy.engine.Dialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.Dialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.Dialect.get_view_definition), [get_view_names()](#sqlalchemy.engine.Dialect.get_view_names),
    [has_index()](#sqlalchemy.engine.Dialect.has_index), [has_schema()](#sqlalchemy.engine.Dialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.Dialect.has_sequence), [has_table()](#sqlalchemy.engine.Dialect.has_table),
    [has_terminate](#sqlalchemy.engine.Dialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.Dialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.Dialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.Dialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.Dialect.initialize), [inline_comments](#sqlalchemy.engine.Dialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.Dialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.Dialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.Dialect.insert_returning), [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.Dialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.Dialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.Dialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.Dialect.is_async), [is_disconnect()](#sqlalchemy.engine.Dialect.is_disconnect),
    [label_length](#sqlalchemy.engine.Dialect.label_length), [load_provisioning()](#sqlalchemy.engine.Dialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.Dialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.Dialect.max_identifier_length),
    [name](#sqlalchemy.engine.Dialect.name), [normalize_name()](#sqlalchemy.engine.Dialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.Dialect.on_connect), [on_connect_url()](#sqlalchemy.engine.Dialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.Dialect.paramstyle), [positional](#sqlalchemy.engine.Dialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.Dialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.Dialect.preparer), [reflection_options](#sqlalchemy.engine.Dialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.Dialect.reset_isolation_level), [returns_native_bytes](#sqlalchemy.engine.Dialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.Dialect.sequences_optional), [server_side_cursors](#sqlalchemy.engine.Dialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.Dialect.server_version_info), [set_connection_execution_options()](#sqlalchemy.engine.Dialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.Dialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.Dialect.set_isolation_level), [statement_compiler](#sqlalchemy.engine.Dialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.Dialect.supports_alter), [supports_comments](#sqlalchemy.engine.Dialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.Dialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.Dialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.Dialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.Dialect.supports_empty_insert), [supports_identity_columns](#sqlalchemy.engine.Dialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.Dialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.Dialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.Dialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.Dialect.supports_native_enum), [supports_native_uuid](#sqlalchemy.engine.Dialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.Dialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.Dialect.supports_sane_rowcount), [supports_sequences](#sqlalchemy.engine.Dialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.Dialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.Dialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.Dialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.Dialect.tuple_in_values), [type_compiler](#sqlalchemy.engine.Dialect.type_compiler),
    [type_compiler_cls](#sqlalchemy.engine.Dialect.type_compiler_cls), [type_compiler_instance](#sqlalchemy.engine.Dialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.Dialect.type_descriptor), [update_executemany_returning](#sqlalchemy.engine.Dialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.Dialect.update_returning), [update_returning_multifrom](#sqlalchemy.engine.Dialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.Dialect.use_insertmanyvalues), [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.Dialect.use_insertmanyvalues_wo_returning)'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '[bind_typing](#sqlalchemy.engine.Dialect.bind_typing), [colspecs](#sqlalchemy.engine.Dialect.colspecs),
    [connect()](#sqlalchemy.engine.Dialect.connect), [construct_arguments](#sqlalchemy.engine.Dialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.Dialect.create_connect_args), [create_xid()](#sqlalchemy.engine.Dialect.create_xid),
    [cte_follows_insert](#sqlalchemy.engine.Dialect.cte_follows_insert), [dbapi](#sqlalchemy.engine.Dialect.dbapi),
    [dbapi_exception_translation_map](#sqlalchemy.engine.Dialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.Dialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.Dialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.Dialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.Dialect.default_schema_name), [default_sequence_base](#sqlalchemy.engine.Dialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.Dialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.Dialect.delete_returning), [delete_returning_multifrom](#sqlalchemy.engine.Dialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.Dialect.denormalize_name), [div_is_floordiv](#sqlalchemy.engine.Dialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.Dialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.Dialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.Dialect.do_close), [do_commit()](#sqlalchemy.engine.Dialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.Dialect.do_commit_twophase), [do_execute()](#sqlalchemy.engine.Dialect.do_execute),
    [do_execute_no_params()](#sqlalchemy.engine.Dialect.do_execute_no_params), [do_executemany()](#sqlalchemy.engine.Dialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.Dialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.Dialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.Dialect.do_recover_twophase), [do_release_savepoint()](#sqlalchemy.engine.Dialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.Dialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.Dialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.Dialect.do_rollback_twophase), [do_savepoint()](#sqlalchemy.engine.Dialect.do_savepoint),
    [do_set_input_sizes()](#sqlalchemy.engine.Dialect.do_set_input_sizes), [do_terminate()](#sqlalchemy.engine.Dialect.do_terminate),
    [driver](#sqlalchemy.engine.Dialect.driver), [engine_config_types](#sqlalchemy.engine.Dialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.Dialect.engine_created), [exclude_set_input_sizes](#sqlalchemy.engine.Dialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.Dialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.Dialect.execution_ctx_cls), [favor_returning_over_lastrowid](#sqlalchemy.engine.Dialect.favor_returning_over_lastrowid),
    [get_async_dialect_cls()](#sqlalchemy.engine.Dialect.get_async_dialect_cls), [get_check_constraints()](#sqlalchemy.engine.Dialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.Dialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.Dialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.Dialect.get_dialect_cls), [get_dialect_pool_class()](#sqlalchemy.engine.Dialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.Dialect.get_driver_connection), [get_foreign_keys()](#sqlalchemy.engine.Dialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.Dialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.Dialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.Dialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.Dialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.Dialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.Dialect.get_multi_columns), [get_multi_foreign_keys()](#sqlalchemy.engine.Dialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.Dialect.get_multi_indexes), [get_multi_pk_constraint()](#sqlalchemy.engine.Dialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.Dialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.Dialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.Dialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.Dialect.get_pk_constraint), [get_schema_names()](#sqlalchemy.engine.Dialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.Dialect.get_sequence_names), [get_table_comment()](#sqlalchemy.engine.Dialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.Dialect.get_table_names), [get_table_options()](#sqlalchemy.engine.Dialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.Dialect.get_temp_table_names), [get_temp_view_names()](#sqlalchemy.engine.Dialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.Dialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.Dialect.get_view_definition), [get_view_names()](#sqlalchemy.engine.Dialect.get_view_names),
    [has_index()](#sqlalchemy.engine.Dialect.has_index), [has_schema()](#sqlalchemy.engine.Dialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.Dialect.has_sequence), [has_table()](#sqlalchemy.engine.Dialect.has_table),
    [has_terminate](#sqlalchemy.engine.Dialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.Dialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.Dialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.Dialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.Dialect.initialize), [inline_comments](#sqlalchemy.engine.Dialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.Dialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.Dialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.Dialect.insert_returning), [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.Dialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.Dialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.Dialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.Dialect.is_async), [is_disconnect()](#sqlalchemy.engine.Dialect.is_disconnect),
    [label_length](#sqlalchemy.engine.Dialect.label_length), [load_provisioning()](#sqlalchemy.engine.Dialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.Dialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.Dialect.max_identifier_length),
    [name](#sqlalchemy.engine.Dialect.name), [normalize_name()](#sqlalchemy.engine.Dialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.Dialect.on_connect), [on_connect_url()](#sqlalchemy.engine.Dialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.Dialect.paramstyle), [positional](#sqlalchemy.engine.Dialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.Dialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.Dialect.preparer), [reflection_options](#sqlalchemy.engine.Dialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.Dialect.reset_isolation_level), [returns_native_bytes](#sqlalchemy.engine.Dialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.Dialect.sequences_optional), [server_side_cursors](#sqlalchemy.engine.Dialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.Dialect.server_version_info), [set_connection_execution_options()](#sqlalchemy.engine.Dialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.Dialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.Dialect.set_isolation_level), [statement_compiler](#sqlalchemy.engine.Dialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.Dialect.supports_alter), [supports_comments](#sqlalchemy.engine.Dialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.Dialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.Dialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.Dialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.Dialect.supports_empty_insert), [supports_identity_columns](#sqlalchemy.engine.Dialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.Dialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.Dialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.Dialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.Dialect.supports_native_enum), [supports_native_uuid](#sqlalchemy.engine.Dialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.Dialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.Dialect.supports_sane_rowcount), [supports_sequences](#sqlalchemy.engine.Dialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.Dialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.Dialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.Dialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.Dialect.tuple_in_values), [type_compiler](#sqlalchemy.engine.Dialect.type_compiler),
    [type_compiler_cls](#sqlalchemy.engine.Dialect.type_compiler_cls), [type_compiler_instance](#sqlalchemy.engine.Dialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.Dialect.type_descriptor), [update_executemany_returning](#sqlalchemy.engine.Dialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.Dialect.update_returning), [update_returning_multifrom](#sqlalchemy.engine.Dialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.Dialect.use_insertmanyvalues), [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.Dialect.use_insertmanyvalues_wo_returning)'
- en: '**Class signature**'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    (`sqlalchemy.event.registry.EventTarget`)
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")（`sqlalchemy.event.registry.EventTarget`）
- en: '[PRE205]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: define a means of passing typing information to the database and/or driver for
    bound parameters.
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一种将类型信息传递给数据库和/或驱动程序以用于绑定参数的方法。
- en: See [`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    for values.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")以获取值。
- en: New in version 2.0.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '[PRE206]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: A dictionary of TypeEngine classes from sqlalchemy.types mapped to subclasses
    that are specific to the dialect class. This dictionary is class-level only and
    is not accessed from the dialect instance itself.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 从sqlalchemy.types映射到特定于方言类的子类的TypeEngine类的字典。此字典仅在类级别上存在，不从方言实例本身访问。
- en: '[PRE207]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Establish a connection using this dialect’s DBAPI.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方言的DBAPI建立连接。
- en: 'The default implementation of this method is:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的默认实现是：
- en: '[PRE208]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The `*cargs, **cparams` parameters are generated directly from this dialect’s
    [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '`*cargs, **cparams`参数直接从此方言的[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")方法生成。'
- en: This method may be used for dialects that need to perform programmatic per-connection
    steps when a new connection is procured from the DBAPI.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要在从DBAPI获取新连接时执行程序化的每个连接步骤时，可以使用此方法进行方言处理。
- en: 'Parameters:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cargs` – positional parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method'
  id: totrans-824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cargs` – 从[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")方法返回的位置参数'
- en: '`**cparams` – keyword parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**cparams` – 从[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")方法返回的关键字参数。'
- en: 'Returns:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a DBAPI connection, typically from the [**PEP 249**](https://peps.python.org/pep-0249/)
    module level `.connect()` function.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 一个DBAPI连接，通常来自[**PEP 249**](https://peps.python.org/pep-0249/)模块级别的`.connect()`函数。
- en: See also
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
- en: '[PRE209]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Optional set of argument specifiers for various SQLAlchemy constructs, typically
    schema items.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 各种SQLAlchemy构造的可选参数说明，通常是模式项。
- en: 'To implement, establish as a series of tuples, as in:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现，建立为一系列元组，如下所示：
- en: '[PRE210]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: If the above construct is established on the PostgreSQL dialect, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will now accept the keyword arguments `postgresql_using`,
    `postgresql_where`, nad `postgresql_ops`. Any other argument specified to the
    constructor of [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    which is prefixed with `postgresql_` will raise [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上述构造在PostgreSQL方言上建立，则[`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")构造现在将接受关键字参数`postgresql_using`、`postgresql_where`和`postgresql_ops`。任何其他指定给[`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造函数的以`postgresql_`为前缀的参数都将引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: A dialect which does not include a `construct_arguments` member will not participate
    in the argument validation system. For such a dialect, any argument name is accepted
    by all participating constructs, within the namespace of arguments prefixed with
    that dialect name. The rationale here is so that third-party dialects that haven’t
    yet implemented this feature continue to function in the old way.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 不包括`construct_arguments`成员的方言将不参与参数验证系统。对于这样的方言，所有参与构造的命名空间中以该方言名称为前缀的参数名称都被所有参与构造接受。这里的理由是，尚未实现此功能的第三方方言将继续以旧方式运行。
- en: See also
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - implementing base class which consumes [`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - 实现基类，消耗[`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
- en: '[PRE211]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Build DB-API compatible connection arguments.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 构建与DB-API兼容的连接参数。
- en: Given a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object, returns a tuple consisting of a `(*args, **kwargs)` suitable to send directly
    to the dbapi’s connect function. The arguments are sent to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method which then runs the DBAPI-level `connect()`
    function.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象，返回一个元组，包含一个适合直接发送到dbapi的connect函数的`(*args,
    **kwargs)`。这些参数将发送到[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")方法，然后运行DBAPI级别的`connect()`函数。
- en: The method typically makes use of the [`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args") method in order to generate a
    dictionary of options.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通常使用[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")方法来生成一个选项字典。
- en: 'The default implementation is:'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 默认实现为：
- en: '[PRE212]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Parameters:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '**url** – 一个[`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象'
- en: 'Returns:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a tuple of `(*args, **kwargs)` which will be passed to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`(*args, **kwargs)`元组，将传递给[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect")方法。
- en: See also
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
- en: '[PRE213]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Create a two-phase transaction ID.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个两阶段事务ID。
- en: This id will be passed to do_begin_twophase(), do_rollback_twophase(), do_commit_twophase().
    Its format is unspecified.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 此ID将传递给do_begin_twophase()、do_rollback_twophase()、do_commit_twophase()。其格式未指定。
- en: '[PRE214]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: target database, when given a CTE with an INSERT statement, needs the CTE to
    be below the INSERT
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库，在给定带有INSERT语句的CTE时，需要CTE位于INSERT语句下方。
- en: '[PRE215]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: A reference to the DBAPI module object itself.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 对DBAPI模块对象本身的引用。
- en: SQLAlchemy dialects import DBAPI modules using the classmethod [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi"). The rationale is so that any dialect
    module can be imported and used to generate SQL statements without the need for
    the actual DBAPI driver to be installed. Only when an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is constructed using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") does the DBAPI get imported; at that point, the creation
    process will assign the DBAPI module to this attribute.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy方言使用类方法[`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi")导入DBAPI模块。其原理是任何方言模块都可以被导入并用于生成SQL语句，而无需安装实际的DBAPI驱动程序。只有在使用[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")构造[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")时才会导入DBAPI；在那时，创建过程将把DBAPI模块分配给此属性。
- en: Dialects should therefore implement [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") which will import the necessary module
    and return it, and then refer to `self.dbapi` in dialect code in order to refer
    to the DBAPI module contents.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，方言应该实现[`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi")方法，该方法将导入必要的模块并返回它，然后在方言代码中引用`self.dbapi`以引用DBAPI模块内容。
- en: 'Changed in version The: [`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi
    "sqlalchemy.engine.Dialect.dbapi") attribute is exclusively used as the per-[`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")-instance reference to the DBAPI module. The previous
    not-fully-documented `.Dialect.dbapi()` classmethod is deprecated and replaced
    by [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi "sqlalchemy.engine.Dialect.import_dbapi").'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本更改：[`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi "sqlalchemy.engine.Dialect.dbapi")属性是作为每个[`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")实例对DBAPI模块的引用。以前未完全记录的`.Dialect.dbapi()`类方法已被弃用，并由[`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi")替换。
- en: '[PRE216]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: A dictionary of names that will contain as values the names of pep-249 exceptions
    (“IntegrityError”, “OperationalError”, etc) keyed to alternate class names, to
    support the case where a DBAPI has exception classes that aren’t named as they
    are referred to (e.g. IntegrityError = MyException). In the vast majority of cases
    this dictionary is empty.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名称字典，其值将包含pep-249异常的名称（“IntegrityError”，“OperationalError”等），键为备用类名，以支持DBAPI具有未按其引用命名的异常类的情况（例如，`IntegrityError
    = MyException`）。在绝大多数情况下，此字典为空。
- en: '[PRE217]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile DDL statements
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译DDL语句的[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")类。
- en: '[PRE218]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: the isolation that is implicitly present on new connections
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 在新连接上隐式存在的隔离性。
- en: '[PRE219]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: for INSERT… VALUES (DEFAULT) syntax, the token to put in the parenthesis.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 对于INSERT… VALUES (DEFAULT)语法，放在括号中的标记。
- en: E.g. for SQLite this is the keyword “NULL”.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于SQLite，这是关键字“NULL”。
- en: '[PRE220]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: the name of the default schema. This value is only available for supporting
    dialects, and is typically populated during the initial connection to the database.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 默认模式的名称。此值仅适用于支持方言，并且通常在与数据库的初始连接期间填充。
- en: '[PRE221]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: the default value that will be rendered as the “START WITH” portion of a CREATE
    SEQUENCE DDL statement.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 将默认值转换为CREATE SEQUENCE DDL语句的“START WITH”部分。
- en: '[PRE222]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: dialect supports DELETE..RETURNING with executemany.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 支持使用`executemany`的`DELETE..RETURNING`方言。
- en: '[PRE223]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: if the dialect supports RETURNING with DELETE
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持带`DELETE`的`RETURNING`。
- en: New in version 2.0.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0开始新增。
- en: '[PRE224]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: if the dialect supports RETURNING with DELETE..FROM
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持`DELETE..FROM`带`RETURNING`。
- en: New in version 2.0.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0开始新增。
- en: '[PRE225]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: convert the given name to a case insensitive identifier for the backend if it
    is an all-lowercase name.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 如果名称为全小写，则将给定名称转换为后端的不区分大小写的标识符。
- en: This method is only used if the dialect defines requires_name_normalize=True.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当方言定义了`requires_name_normalize=True`时才会使用此方法。
- en: '[PRE226]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: target database treats the / division operator as “floor division”
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库将`/`运算符视为“floor division”。
- en: '[PRE227]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Provide an implementation of `connection.begin()`, given a DB-API connection.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给定DB-API连接的`connection.begin()`的实现。
- en: The DBAPI has no dedicated “begin” method and it is expected that transactions
    are implicit. This hook is provided for those DBAPIs that might need additional
    help in this area.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: DBAPI没有专用的“begin”方法，并且预计事务是隐式的。为那些可能需要在此区域提供额外帮助的DBAPI提供此挂钩。
- en: 'Parameters:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个DBAPI连接，通常在`ConnectionFairy`内代理。'
- en: '[PRE228]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Begin a two phase transaction on the given connection.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上开始一个两阶段事务。
- en: 'Parameters:'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '[PRE229]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Provide an implementation of `connection.close()`, given a DBAPI connection.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给定DBAPI连接的`connection.close()`的实现。
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection has been detached from the pool, or is being returned beyond
    the normal capacity of the pool.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接已从池中分离或超出池的正常容量返回时，[`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")将调用此挂钩。
- en: '[PRE230]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Provide an implementation of `connection.commit()`, given a DB-API connection.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给定DB-API连接的`connection.commit()`的实现。
- en: 'Parameters:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个DBAPI连接，通常在`ConnectionFairy`内代理。'
- en: '[PRE231]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: Commit a two phase transaction on the given connection.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上提交一个两阶段事务。
- en: 'Parameters:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 是否调用了[`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '`recover` – if the recover flag was passed.'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recover` – 如果传递了 recover 标志。'
- en: '[PRE232]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Provide an implementation of `cursor.execute(statement, parameters)`.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.execute(statement, parameters)` 的实现。
- en: '[PRE233]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Provide an implementation of `cursor.execute(statement)`.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.execute(statement)` 的实现。
- en: The parameter collection should not be sent.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 不应发送参数集合。
- en: '[PRE234]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Provide an implementation of `cursor.executemany(statement, parameters)`.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 提供 `cursor.executemany(statement, parameters)` 的实现。
- en: '[PRE235]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: ping the DBAPI connection and return True if the connection is usable.
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 DBAPI 连接并在连接可用时返回 True。
- en: '[PRE236]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Prepare a two phase transaction on the given connection.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的连接上准备两阶段事务。
- en: 'Parameters:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '[PRE237]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Recover list of uncommitted prepared two phase transaction identifiers on the
    given connection.
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复在给定连接上未提交的准备好的两阶段事务标识符列表。
- en: 'Parameters:'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**connection** – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: '**connection** – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '[PRE238]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Release the named savepoint on a connection.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接上释放指定的保存点。
- en: 'Parameters:'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE239]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: Provide an implementation of `connection.rollback()`, given a DB-API connection.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 DB-API 连接，提供 `connection.rollback()` 的实现。
- en: 'Parameters:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '**dbapi_connection** – 一个 DBAPI 连接，通常在 `ConnectionFairy` 中被代理。'
- en: '[PRE240]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Rollback a connection to the named savepoint.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 将连接回滚到指定的保存点。
- en: 'Parameters:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE241]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Rollback a two phase transaction on the given connection.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定连接上回滚两阶段事务。
- en: 'Parameters:'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`xid` – xid'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xid` – xid'
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_prepared` – 是否调用了[`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")。'
- en: '`recover` – if the recover flag was passed.'
  id: totrans-949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recover` – 如果传递了 recover 标志。'
- en: '[PRE242]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Create a savepoint with the given name.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定名称创建保存点。
- en: 'Parameters:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connection` – 一个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。'
- en: '`name` – savepoint name.'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 保存点名称。'
- en: '[PRE243]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: invoke the cursor.setinputsizes() method with appropriate arguments
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 cursor.setinputsizes() 方法并传递适当的参数。
- en: This hook is called if the [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") attribute is set to the [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") value. Parameter data is passed
    in a list of tuples (paramname, dbtype, sqltype), where `paramname` is the key
    of the parameter in the statement, `dbtype` is the DBAPI datatype and `sqltype`
    is the SQLAlchemy type. The order of tuples is in the correct parameter order.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing "sqlalchemy.engine.Dialect.bind_typing")
    属性设置为 [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") 值，则调用此挂钩。参数数据以元组列表形式传递（paramname、dbtype、sqltype），其中
    `paramname` 是语句中参数的键，`dbtype` 是 DBAPI 数据类型，`sqltype` 是 SQLAlchemy 类型。元组的顺序是正确的参数顺序。
- en: New in version 1.4.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: 'Changed in version 2.0: - setinputsizes mode is now enabled by setting [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") to [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES"). Dialects which accept a `use_setinputsizes`
    parameter should set this value appropriately.'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的更改：- 通过将 [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") 设置为 [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") 来启用 setinputsizes 模式。接受 `use_setinputsizes`
    参数的方言应适当设置此值。
- en: '[PRE244]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: Provide an implementation of `connection.close()` that tries as much as possible
    to not block, given a DBAPI connection.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个实现 `connection.close()` 的方法，尽可能地避免阻塞，给定一个 DBAPI 连接。
- en: In the vast majority of cases this just calls .close(), however for some asyncio
    dialects may call upon different API features.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 在绝大多数情况下，这只是调用了 .close()，但对于一些 asyncio 方言可能调用了不同的 API 特性。
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection is being recycled or has been invalidated.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接正在被回收利用或已被废弃时，该钩子由 [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    调用。
- en: New in version 1.4.41.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.41 中新增。
- en: '[PRE245]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: identifying name for the dialect’s DBAPI
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 方言的 DBAPI 的标识名称
- en: '[PRE246]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: a mapping of string keys that can be in an engine config linked to type conversion
    functions.
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符串键的映射，可以在引擎配置中链接到类型转换函数。
- en: '[PRE247]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: A convenience hook called before returning the final [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 在返回最终 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    之前调用的一个方便的钩子。
- en: If the dialect returned a different class from the [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method, then the hook is called on
    both classes, first on the dialect class returned by the [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method and then on the class on which
    the method was called.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言从 [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")
    方法返回了一个不同的类，则该钩子将在两个类上调用，首先在由 [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") 方法返回的方言类上调用，然后在调用该方法的类上调用。
- en: The hook should be used by dialects and/or wrappers to apply special events
    to the engine or its components. In particular, it allows a dialect-wrapping class
    to apply dialect-level events.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 该钩子应该由方言和/或包装器使用，以应用特殊事件到引擎或其组件。特别是，它允许方言包装类应用方言级别的事件。
- en: '[PRE248]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: set of DBAPI type objects that should be excluded in automatic cursor.setinputsizes()
    calls.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动 cursor.setinputsizes() 调用中应该排除的一组 DBAPI 类型对象。
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在 bind_typing 为 BindTyping.SET_INPUT_SIZES 时使用。
- en: '[PRE249]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: either the ‘tuple’ or ‘list’ type, depending on what cursor.execute() accepts
    for the second argument (they vary).
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 要么是 ‘tuple’ 类型，要么是 ‘list’ 类型，取决于 cursor.execute() 对于第二个参数接受的是什么（它们会变化）。
- en: '[PRE250]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: a [`ExecutionContext`](#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    class used to handle statement execution
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 用于处理语句执行的 [`ExecutionContext`](#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    类。
- en: '[PRE251]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: for backends that support both a lastrowid and a RETURNING insert strategy,
    favor RETURNING for simple single-int pk inserts.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同时支持 lastrowid 和 RETURNING 插入策略的后端，优先考虑 RETURNING 用于简单的单整数主键插入。
- en: cursor.lastrowid tends to be more performant on most backends.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: cursor.lastrowid 在大多数后端上性能更好。
- en: '[PRE252]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used by an async engine.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 URL，返回将由异步引擎使用的 [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: By default this is an alias of [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and just returns the cls. It may
    be used if a dialect provides both a sync and async version under the same name,
    like the `psycopg` driver.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这是 [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") 的别名，并且只是返回 cls。如果方言提供了同名的同步和异步版本，如
    `psycopg` 驱动程序，则可能会使用它。
- en: New in version 2.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2 中新增。
- en: See also
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
- en: '[PRE253]'
  id: totrans-989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Return information about check constraints in `table_name`.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `table_name` 中检查约束的信息。
- en: Given a string `table_name` and an optional string `schema`, return check constraint
    information as a list of dicts corresponding to the [`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") dictionary.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串`schema`，返回检查约束信息，作为与[`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint")字典对应的字典列表。
- en: This is an internal dialect method. Applications should use [`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints").
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种内部方言方法。应用程序应该使用[`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints")。
- en: '[PRE254]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Return information about columns in `table_name`.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的列信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return column information
    as a list of dictionaries corresponding to the [`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") dictionary.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")，一个字符串`table_name`和一个可选的字符串`schema`，返回列信息，作为与[`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn")字典对应的字典列表。
- en: This is an internal dialect method. Applications should use [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns").
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种内部方言方法。应用程序应该使用[`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns")。
- en: '[PRE255]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Given a DBAPI connection, return its isolation level, or a default isolation
    level if one cannot be retrieved.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，返回其隔离级别，或者如果无法检索到隔离级别，则返回默认隔离级别。
- en: This method may only raise NotImplementedError and **must not raise any other
    exception**, as it is used implicitly upon first connect.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法只能引发NotImplementedError，并且**不能引发任何其他异常**，因为它在第一次连接时隐式使用。
- en: The method **must return a value** for a dialect that supports isolation level
    settings, as this level is what will be reverted towards when a per-connection
    isolation level change is made.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法**必须返回一个值**，以便于支持隔离级别设置的方言，因为这个级别是在进行每个连接隔离级别更改时将要回滚到的级别。
- en: The method defaults to using the [`Dialect.get_isolation_level()`](#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level") method unless overridden by a
    dialect.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法默认使用[`Dialect.get_isolation_level()`](#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level")方法，除非被方言覆盖。
- en: New in version 1.3.22.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.3.22版本中新增。
- en: '[PRE256]'
  id: totrans-1003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个URL，返回将要使用的[`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")。
- en: This is a hook that allows an external plugin to provide functionality around
    an existing dialect, by allowing the plugin to be loaded from the url based on
    an entrypoint, and then the plugin returns the actual dialect to be used.
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个钩子，允许外部插件围绕现有方言提供功能，通过允许根据入口点从URL加载插件，然后插件返回实际要使用的方言。
- en: By default this just returns the cls.
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这只是返回cls。
- en: '[PRE257]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: return a Pool class to use for a given URL
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用于给定URL的Pool类。
- en: '[PRE258]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: Returns the connection object as returned by the external driver package.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由外部驱动程序包返回的连接对象。
- en: For normal dialects that use a DBAPI compliant driver this call will just return
    the `connection` passed as argument. For dialects that instead adapt a non DBAPI
    compliant driver, like when adapting an asyncio driver, this call will return
    the connection-like object as returned by the driver.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用DBAPI兼容驱动程序的普通方言，此调用将只返回作为参数传递的`connection`。 对于代替适配非DBAPI兼容驱动程序的方言，例如在适配异步驱动程序时，此调用将返回驱动程序返回的类似连接的对象。
- en: New in version 1.4.24.
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4.24版本中新增。
- en: '[PRE259]'
  id: totrans-1013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Return information about foreign_keys in `table_name`.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中的foreign_keys信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return foreign key information
    as a list of dicts corresponding to the [`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") dictionary.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、一个字符串`table_name`和一个可选的字符串`schema`，返回外键信息，作为与[`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint")字典对应的字典列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_foreign_keys()`.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_foreign_keys()`。
- en: '[PRE260]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Return information about indexes in `table_name`.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中索引的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name` and an optional string `schema`, return index information
    as a list of dictionaries corresponding to the [`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") dictionary.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、一个字符串`table_name`和一个可选的字符串`schema`，返回索引信息，作为与[`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex")字典对应的字典列表。
- en: This is an internal dialect method. Applications should use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes")。
- en: '[PRE261]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Given a DBAPI connection, return its isolation level.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，返回其隔离级别。
- en: When working with a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, the corresponding DBAPI connection may
    be procured using the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象时，可以使用[`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection")访问器获取相应的DBAPI连接。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个方言级别的方法，用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")隔离级别功能实现的一部分；这些API应该优先用于大多数典型用例。
- en: See also
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[PRE262]'
  id: totrans-1030
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: return a sequence of string isolation level names that are accepted by this
    dialect.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个由此方言接受的字符串隔离级别名称序列。
- en: 'The available names should use the following conventions:'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的名称应遵循以下约定：
- en: use UPPERCASE names. isolation level methods will accept lowercase names but
    these are normalized into UPPERCASE before being passed along to the dialect.
  id: totrans-1033
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大写名称。隔离级别方法将接受小写名称，但在传递给方言之前将其规范化为大写。
- en: separate words should be separated by spaces, not underscores, e.g. `REPEATABLE
    READ`. isolation level names will have underscores converted to spaces before
    being passed along to the dialect.
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应将分隔的单词用空格分隔，而不是下划线，例如`REPEATABLE READ`。隔离级别名称在传递给方言之前将下划线转换为空格。
- en: The names for the four standard isolation names to the extent that they are
    supported by the backend should be `READ UNCOMMITTED` `READ COMMITTED`, `REPEATABLE
    READ`, `SERIALIZABLE`
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 四个标准隔离级别名称的名称，以它们受到后端支持的程度来说应该是`READ UNCOMMITTED` `READ COMMITTED`、`REPEATABLE
    READ`、`SERIALIZABLE`
- en: if the dialect supports an autocommit option it should be provided using the
    isolation level name `AUTOCOMMIT`.
  id: totrans-1036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果方言支持自动提交选项，则应使用隔离级别名称`AUTOCOMMIT`。
- en: Other isolation modes may also be present, provided that they are named in UPPERCASE
    and use spaces not underscores.
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他隔离模式也可能存在，只要它们以大写命名，并使用空格而不是下划线。
- en: This function is used so that the default dialect can check that a given isolation
    level parameter is valid, else raises an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于默认方言检查给定的隔离级别参数是否有效，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。
- en: A DBAPI connection is passed to the method, in the unlikely event that the dialect
    needs to interrogate the connection itself to determine this list, however it
    is expected that most backends will return a hardcoded list of values. If the
    dialect supports “AUTOCOMMIT”, that value should also be present in the sequence
    returned.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 DBAPI 连接被传递给该方法，在极少情况下，方言需要询问连接本身以确定此列表，但预计大多数后端将返回一个硬编码的值列表。如果方言支持“AUTOCOMMIT”，则该值也应该出现在返回的序列中。
- en: The method raises `NotImplementedError` by default. If a dialect does not implement
    this method, then the default dialect will not perform any checking on a given
    isolation level value before passing it onto the [`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level") method. This is to allow backwards-compatibility
    with third party dialects that may not yet be implementing this method.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法默认引发`NotImplementedError`。如果方言未实现此方法，则默认方言将不会在传递给[`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level")方法之前对给定的隔离级别值执行任何检查。这是为了与可能尚未实现此方法的第三方方言保持向后兼容性。
- en: New in version 2.0.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中。
- en: '[PRE263]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Return a list of all materialized view names available in the database.
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有可用的物化视图名称列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_materialized_view_names()`.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_materialized_view_names()`。
- en: 'Parameters:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** –'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式** -'
- en: schema name to query, if not the default schema.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 要查询的模式名称，如果不是默认模式。
- en: New in version 2.0.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中。
- en: '[PRE264]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Return information about check constraints in all tables in the given `schema`.
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的检查约束的信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints").
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用[`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints")。
- en: Note
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，将对由 [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") 或 [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") 返回的每个对象调用单个表方法，取决于提供的
    `kind`。希望支持更快实现的方言应该实现此方法。'
- en: New in version 2.0.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: '[PRE265]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Return information about columns in all tables in the given `schema`.
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表中列的信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 [`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns")。
- en: Note
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，将对由 [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") 或 [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") 返回的每个对象调用单个表方法，取决于提供的
    `kind`。希望支持更快实现的方言应该实现此方法。'
- en: New in version 2.0.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: '[PRE266]'
  id: totrans-1061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Return information about foreign_keys in all tables in the given `schema`.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表中外键的信息。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_foreign_keys()`.
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 `Inspector.get_multi_foreign_keys()`。
- en: Note
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect` 提供了一个默认实现，将对由 [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") 或 [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") 返回的每个对象调用单个表方法，取决于提供的
    `kind`。希望支持更快实现的方言应该实现此方法。'
- en: New in version 2.0.
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始。
- en: '[PRE267]'
  id: totrans-1067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: Return information about indexes in in all tables in the given `schema`.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定 `schema` 中所有表中索引的信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes").
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用 [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes")。
- en: Note
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用[`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names")或[`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names")中的每个对象的单表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE268]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Return information about primary key constraints in all tables in the given
    `schema`.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的主键约束信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint").
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint")。
- en: Note
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用[`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names")或[`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names")中的每个对象的单表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE269]'
  id: totrans-1079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Return information about the table comment in all tables in the given `schema`.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的表注释信息。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_comment()`.
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_multi_table_comment()`。
- en: Note
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用[`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names")或[`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names")中的每个对象的单表方法。希望支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE270]'
  id: totrans-1085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 返回在创建给定`schema`中的表时指定的选项字典。
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_options()`.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_multi_table_options()`。
- en: Note
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用每个对象的单表方法[`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names")或[`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names")。想要支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中引入。
- en: '[PRE271]'
  id: totrans-1091
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Return information about unique constraints in all tables in the given `schema`.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定`schema`中所有表的唯一约束信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints").
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints")。
- en: Note
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '`DefaultDialect`提供了一个默认实现，将根据提供的`kind`调用每个对象的单表方法[`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names")、[`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names")或[`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names")。想要支持更快实现的方言应该实现这个方法。'
- en: New in version 2.0.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中引入。
- en: '[PRE272]'
  id: totrans-1097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Return information about the primary key constraint on table_name`.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`表上主键约束的信息。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return primary key information
    as a dictionary corresponding to the [`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") dictionary.
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")、一个字符串`table_name`和一个可选的字符串`schema`，返回作为字典对应于[`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint")字典的主键信息。
- en: This is an internal dialect method. Applications should use [`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint").
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用[`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint")。
- en: '[PRE273]'
  id: totrans-1101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Return a list of all schema names available in the database.
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有模式名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_schema_names()`.
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_schema_names()`。
- en: '[PRE274]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Return a list of all sequence names available in the database.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有序列名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_sequence_names()`.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.get_sequence_names()`。
- en: 'Parameters:'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name to query, if not the default schema.'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** - 要查询的模式名称，如果不是默认模式。'
- en: New in version 1.4.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中引入。
- en: '[PRE275]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Return the “comment” for the table identified by `table_name`.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由`table_name`标识的表的“注释”。
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a dictionary corresponding to the [`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") dictionary.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串`schema`，返回一个对应于[`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment")字典的表注释信息字典。
- en: This is an internal dialect method. Applications should use [`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment").
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用[`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment")。
- en: 'Raise:'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 引发：
- en: '`NotImplementedError` for dialects that don’t support comments.'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不支持注释的方言，抛出`NotImplementedError`。
- en: New in version 1.2.
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: '[PRE276]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Return a list of table names for `schema`.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`schema`的表名称列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_table_names()`.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_table_names()`。
- en: '[PRE277]'
  id: totrans-1120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Return a dictionary of options specified when `table_name` was created.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 返回创建`table_name`时指定的选项字典。
- en: This is an internal dialect method. Applications should use `Inspector.get_table_options()`.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_table_options()`。
- en: '[PRE278]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: Return a list of temporary table names on the given connection, if supported
    by the underlying backend.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定连接上的临时表名称列表（如果底层后端支持）。
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_table_names()`.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_temp_table_names()`。
- en: '[PRE279]'
  id: totrans-1126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Return a list of temporary view names on the given connection, if supported
    by the underlying backend.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定连接上的临时视图名称列表（如果底层后端支持）。
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_view_names()`.
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_temp_view_names()`。
- en: '[PRE280]'
  id: totrans-1129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: Return information about unique constraints in `table_name`.
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`table_name`中关于唯一约束的信息。
- en: Given a string `table_name` and an optional string `schema`, return unique constraint
    information as a list of dicts corresponding to the [`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") dictionary.
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串`table_name`和一个可选的字符串`schema`，返回一个对应于[`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint")字典的唯一约束信息列表。
- en: This is an internal dialect method. Applications should use [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints").
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用[`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")。
- en: '[PRE281]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: Return plain or materialized view definition.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 返回普通或物化视图定义。
- en: This is an internal dialect method. Applications should use `Inspector.get_view_definition()`.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_view_definition()`。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `view_name`, and an optional string `schema`, return the view definition.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，一个字符串`view_name`和一个可选的字符串`schema`，返回视图定义。
- en: '[PRE282]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Return a list of all non-materialized view names available in the database.
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回数据库中所有非物化视图名称的列表。
- en: This is an internal dialect method. Applications should use `Inspector.get_view_names()`.
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应使用`Inspector.get_view_names()`。
- en: 'Parameters:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**schema** – schema name to query, if not the default schema.'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: '**schema** – 查询的模式名称，如果不是默认模式。'
- en: '[PRE283]'
  id: totrans-1142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: Check the existence of a particular index name in the database.
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定索引名称的存在。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `table_name` and string index name, return `True` if an index
    of the given name on the given table exists, `False` otherwise.
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，一个字符串`table_name`和字符串索引名称，如果给定表上存在给定名称的索引，则返回`True`，否则返回`False`。
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this in terms of the [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") and [`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes
    "sqlalchemy.engine.Dialect.get_indexes") methods, however dialects can implement
    a more performant version.
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")根据[`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table")和[`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes
    "sqlalchemy.engine.Dialect.get_indexes")方法实现此功能，但是方言可以实现更高效的版本。'
- en: This is an internal dialect method. Applications should use `Inspector.has_index()`.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.has_index()`。
- en: New in version 1.4.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE284]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: Check the existence of a particular schema name in the database.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定模式名称的存在。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `schema_name`, return `True` if a schema of the given exists,
    `False` otherwise.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象和一个字符串`schema_name`，如果给定的架构存在，则返回`True`，否则返回`False`。
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this by checking the presence of `schema_name` among the schemas returned
    by [`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names"), however dialects can implement
    a more performant version.
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")通过检查[`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names")返回的模式中是否存在`schema_name`来实现此功能，但是方言可以实现更高效的版本。'
- en: This is an internal dialect method. Applications should use `Inspector.has_schema()`.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.has_schema()`。
- en: New in version 2.0.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE285]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: Check the existence of a particular sequence in the database.
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 检查数据库中特定序列的存在。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and a string sequence_name, return `True` if the given sequence exists
    in the database, `False` otherwise.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象和一个字符串`sequence_name`，如果数据库中存在给定的序列，则返回`True`，否则返回`False`。
- en: This is an internal dialect method. Applications should use `Inspector.has_sequence()`.
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部方言方法。应用程序应该使用`Inspector.has_sequence()`。
- en: '[PRE286]'
  id: totrans-1158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: For internal dialect use, check the existence of a particular table or view
    in the database.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 对内部方言使用，检查数据库中特定表或视图的存在。
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string table_name and optional schema name, return True if the given
    table exists in the database, False otherwise.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")对象，一个字符串`table_name`和可选的模式名称，如果数据库中存在给定的表，则返回`True`，否则返回`False`。
- en: This method serves as the underlying implementation of the public facing [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method, and is also used internally
    to implement the “checkfirst” behavior for methods like [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法作为公共面向用户的[`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法的基础实现，并且还在内部用于实现像[`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create")和[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")等方法的“checkfirst”行为。
- en: Note
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method is used internally by SQLAlchemy, and is published so that third-party
    dialects may provide an implementation. It is **not** the public API for checking
    for table presence. Please use the [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在SQLAlchemy内部使用，并公开以便第三方方言可以提供实现。这**不是**用于检查表存在的公共API。请使用[`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法。
- en: 'Changed in version 2.0::: [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") now formally supports checking for additional
    table-like objects:'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table "sqlalchemy.engine.Dialect.has_table")现在正式支持检查其他类似表的对象：
- en: any type of views (plain or materialized)
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的视图（普通或材料化）
- en: temporary tables of any kind
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何类型的临时表
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types, and dialects to the degree that the backing database
    supports views or temporary tables should seek to support locating these objects
    for full compliance.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，这两个检查没有正式规定，不同的方言在行为上会有所不同。方言测试套件现在包括对所有这些对象类型的测试，以及在支持视图或临时表的程度上应该寻求支持定位这些对象以实现完全的兼容性。
- en: '[PRE287]'
  id: totrans-1168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: Whether or not this dialect has a separate “terminate” implementation that does
    not block or require awaiting.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言是否具有单独的“终止”实现，不会阻塞或需要等待。
- en: '[PRE288]'
  id: totrans-1170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: This element will refer to an instance of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") once a [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") has been constructed.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")的实例，此元素将引用一个[`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer")的实例。
- en: '[PRE289]'
  id: totrans-1172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: Import the DBAPI module that is used by this dialect.
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 导入此方言使用的DBAPI模块。
- en: The Python module object returned here will be assigned as an instance variable
    to a constructed dialect under the name `.dbapi`.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 此处返回的Python模块对象将分配为构建的方言的一个实例变量，名称为`.dbapi`。
- en: 'Changed in version 2.0: The [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") class method is renamed from the previous
    method `.Dialect.dbapi()`, which would be replaced at dialect instantiation time
    by the DBAPI module itself, thus using the same name in two different ways. If
    a `.Dialect.dbapi()` classmethod is present on a third-party dialect, it will
    be used and a deprecation warning will be emitted.'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：[`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi")类方法从先前的方法`.Dialect.dbapi()`重命名，该方法将在方言实例化时由DBAPI模块本身替换，因此以两种不同的方式使用相同的名称。如果第三方方言上存在`.Dialect.dbapi()`类方法，将使用它并发出弃用警告。
- en: '[PRE290]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: set of DBAPI type objects that should be included in automatic cursor.setinputsizes()
    calls.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 应包括在自动cursor.setinputsizes()调用中的一组���该包含的DBAPI类型对象。
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 仅在bind_typing为BindTyping.SET_INPUT_SIZES时使用。
- en: '[PRE291]'
  id: totrans-1179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: Called during strategized creation of the dialect with a connection.
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接的策略化创建期间调用与连接一起的方言。
- en: Allows dialects to configure options based on server version info or other properties.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 允许方言根据服务器版本信息或其他属性配置选项。
- en: The connection passed here is a SQLAlchemy Connection object, with full capabilities.
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 此处传递的连接是一个完全具备功能的SQLAlchemy Connection对象。
- en: The initialize() method of the base dialect should be called via super().
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 应通过super()调用基本方言的initialize()方法。
- en: Note
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: as of SQLAlchemy 1.4, this method is called **before** any [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hooks are called.
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，此方法在调用任何[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")钩子之前被调用。
- en: '[PRE292]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: Indicates the dialect supports comment DDL that’s inline with the definition
    of a Table or Column. If False, this implies that ALTER must be used to set table
    and column comments.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言支持与表或列的定义相一致的内联注释DDL。如果为False，则意味着必须使用ALTER来设置表和列的注释。
- en: '[PRE293]'
  id: totrans-1188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`dialect.do_executemany()`时，方言/驱动程序/数据库支持某种方式提供INSERT…RETURNING支持。
- en: '[PRE294]'
  id: totrans-1190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used along with the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter being set.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")参数设置时，方言/驱动程序/数据库支持某种方式提供INSERT…RETURNING支持，同时使用`dialect.do_executemany()`。
- en: '[PRE295]'
  id: totrans-1192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: if the dialect supports RETURNING with INSERT
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持INSERT时的RETURNING
- en: New in version 2.0.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '[PRE296]'
  id: totrans-1195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: Options indicating the database supports a form of bulk INSERT where the autoincrement
    integer primary key can be reliably used as an ordering for INSERTed rows.
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 表示数据库支持一种形式的批量插入，其中自增整数主键可可靠用作插入行的排序。
- en: New in version 2.0.10.
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.10版本中的新功能。
- en: See also
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '[将RETURNING行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)'
- en: '[PRE297]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Alternate to insertmanyvalues_page_size, will additionally limit page size based
    on number of parameters total in the statement.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: insertmanyvalues_page_size的替代方案，还将基于语句中参数的总数限制页面大小。
- en: '[PRE298]'
  id: totrans-1202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: Number of rows to render into an individual INSERT..VALUES() statement for `ExecuteStyle.INSERTMANYVALUES`
    executions.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`ExecuteStyle.INSERTMANYVALUES`执行中渲染为单独的INSERT..VALUES()语句的行数。
- en: The default dialect defaults this to 1000.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方言将此默认值设置为1000。
- en: New in version 2.0.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: See also
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - execution option available
    on [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    statements'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - 在[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上可用的执行选项，语句'
- en: '[PRE299]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Whether or not this dialect is intended for asyncio use.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 此方言是否用于asyncio使用。
- en: '[PRE300]'
  id: totrans-1210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: Return True if the given DB-API error indicates an invalid connection
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的DB-API错误指示无效连接，则返回True
- en: '[PRE301]'
  id: totrans-1212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: optional user-defined max length for SQL labels
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: SQL标签的可选用户定义的最大长度
- en: '[PRE302]'
  id: totrans-1214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: set up the provision.py module for this dialect.
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 为此方言设置provision.py模块。
- en: For dialects that include a provision.py module that sets up provisioning followers,
    this method should initiate that process.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含设置提供程序跟随者的provision.py模块的方言，此方法应启动该过程。
- en: 'A typical implementation would be:'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的实现方式可能是：
- en: '[PRE303]'
  id: totrans-1218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'The default method assumes a module named `provision.py` inside the owning
    package of the current dialect, based on the `__module__` attribute:'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方法假定当前方言所属包内有一个名为`provision.py`的模块，基于`__module__`属性：
- en: '[PRE304]'
  id: totrans-1220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: New in version 1.3.14.
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3.14版本中的新功能。
- en: '[PRE305]'
  id: totrans-1222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: same as .dbapi, but is never None; will raise an error if no DBAPI was set up.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 与.dbapi相同，但永远不会是None；如果没有设置DBAPI，将会引发错误。
- en: New in version 2.0.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版本中的新功能。
- en: '[PRE306]'
  id: totrans-1225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: The maximum length of identifier names.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 标识符名称的最大长度。
- en: '[PRE307]'
  id: totrans-1227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: identifying name for the dialect from a DBAPI-neutral point of view (i.e. ‘sqlite’)
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 从DBAPI中立的角度确定方言的标识名称（即‘sqlite’）
- en: '[PRE308]'
  id: totrans-1229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: convert the given name to lowercase if it is detected as case insensitive.
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到名称不区分大小写，则将给定名称转换为小写。
- en: This method is only used if the dialect defines requires_name_normalize=True.
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
  zh: 仅当方言定义requires_name_normalize=True时才使用此方法。
- en: '[PRE309]'
  id: totrans-1232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: return a callable which sets up a newly created DBAPI connection.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，用于设置新创建的DBAPI连接。
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 可调用对象应接受一个名为“conn”的参数，即DBAPI连接本身。内部可调用对象没有返回值。
- en: 'E.g.:'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE310]'
  id: totrans-1236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置方言范围内的每个连接选项，如隔离模式、Unicode模式等。
- en: The “do_on_connect” callable is invoked by using the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook, then unwrapping the DBAPI
    connection and passing it into the callable.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect")事件钩子调用“do_on_connect”可调用对象，然后解包DBAPI连接并将其传递给可调用对象。
- en: 'Changed in version 1.4: the on_connect hook is no longer called twice for the
    first connection of a dialect. The on_connect hook is still called before the
    [`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize "sqlalchemy.engine.Dialect.initialize")
    method however.'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的更改：对于方言的第一个连接，不再两次调用on_connect挂钩。但是，在调用[`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize
    "sqlalchemy.engine.Dialect.initialize")方法之前仍会调用on_connect挂钩。
- en: 'Changed in version 1.4.3: the on_connect hook is invoked from a new method
    on_connect_url that passes the URL that was used to create the connect args. Dialects
    can implement on_connect_url instead of on_connect if they need the URL object
    that was used for the connection in order to get additional context.'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.3中更改：从一个新方法on_connect_url调用on_connect挂钩，传递用于创建连接参数的URL。如果方言需要用于连接的URL对象以获取其他上下文，则方言可以实现on_connect_url而不是on_connect。
- en: If None is returned, no event listener is generated.
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回None，则不会生成事件监听器。
- en: 'Returns:'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可接受单个DBAPI连接作为参数的可调用对象，或者为None。
- en: See also
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - allows the DBAPI `connect()` sequence itself to be controlled.'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - 允许控制DBAPI `connect()`序列本身。'
- en: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - supersedes [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    to also receive the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object in context.'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - 取代[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")以在上下文中还接收[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象。'
- en: '[PRE311]'
  id: totrans-1247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: return a callable which sets up a newly created DBAPI connection.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个可调用对象，该对象设置新创建的DBAPI连接。
- en: This method is a new hook that supersedes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method when implemented by a dialect.
    When not implemented by a dialect, it invokes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method directly to maintain compatibility
    with existing dialects. There is no deprecation for [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") expected.
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是一种新的钩子，它在方言实现时取代了[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")方法。当方言没有实现时，它会直接调用[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")方法，以保持与现有方言的兼容性。不会有对[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")的弃用预期。
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 可调用对象应接受一个名为“conn”的参数，该参数是DBAPI连接本身。内部可调用对象没有返回值。
- en: 'E.g.:'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE312]'
  id: totrans-1252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于设置方言范围内的每个连接选项，如隔离模式、Unicode 模式等。
- en: This method differs from [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") in that it is passed the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object that’s relevant to the connect args. Normally
    the only way to get this is from the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hook is to look on the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") itself, however this URL object may have been replaced
    by plugins.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")不同之处在于，它接收与连接参数相关的[`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象。通常从[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")挂钩获取此对象的唯一方法是查看[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")本身，但此URL对象可能已被插件替换。
- en: Note
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The default implementation of [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") is to invoke the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method. Therefore if a dialect implements
    this method, the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method **will not be called** unless the
    overriding dialect calls it directly from here.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")的默认实现是调用[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")方法。因此，如果一个方言实现了这个方法，[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")方法 **将不会被调用**，除非覆盖方言从此处直接调用它。'
- en: 'New in version 1.4.3: added [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") which normally calls into [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect").'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.3 中新添加的 [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") 通常调用 [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect")。
- en: 'Parameters:'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object representing the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    that was passed to the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '**url** – 一个表示传递给 [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") 方法的 [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象。'
- en: 'Returns:'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 一个接受单个 DBAPI 连接作为参数的可调用对象，或者为 None。
- en: See also
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
- en: '[PRE313]'
  id: totrans-1264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: the paramstyle to be used (some DB-APIs support multiple paramstyles).
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的 paramstyle（一些 DB-API 支持多种 paramstyles）。
- en: '[PRE314]'
  id: totrans-1266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: True if the paramstyle for this Dialect is positional.
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 Dialect 的 paramstyle 是按位置的，则为 True。
- en: '[PRE315]'
  id: totrans-1268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: True if ‘implicit’ primary key functions must be executed separately in order
    to get their value, if RETURNING is not used.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果‘implicit’主键函数必须单独执行以获取它们的值，如果未使用 RETURNING，则为真。
- en: This is currently oriented towards PostgreSQL when the `implicit_returning=False`
    parameter is used on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `implicit_returning=False` 参数用于 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象时，当前面向 PostgreSQL。
- en: '[PRE316]'
  id: totrans-1271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: a [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer "sqlalchemy.sql.compiler.IdentifierPreparer")
    class used to quote identifiers.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于引用标识符的 [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") 类。
- en: '[PRE317]'
  id: totrans-1273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: Sequence of string names indicating keyword arguments that can be established
    on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object which will be passed as “reflection options” when using [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table").
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 表示可以在使用 [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 时作为“反射选项”传递给 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的关键字参数名称的字符串名称序列。
- en: Current example is “oracle_resolve_synonyms” in the Oracle dialect.
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Oracle dialect 中使用“oracle_resolve_synonyms”时，当前示例为真。
- en: '[PRE318]'
  id: totrans-1276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: Given a DBAPI connection, revert its isolation to the default.
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 DBAPI 连接，将其隔离恢复为默认值。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一种方言级别的方法，作为 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 和 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 隔离级别功能实现的一部分使用；对于大多数典型用例，应优先使用这些 API。
- en: See also
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[PRE319]'
  id: totrans-1284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: indicates if Python bytes() objects are returned natively by the driver for
    SQL “binary” datatypes.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 指示Python的bytes()对象是否由驱动程序原生返回SQL“binary”数据类型。
- en: New in version 2.0.11.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.11中的新功能。
- en: '[PRE320]'
  id: totrans-1287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: If True, indicates if the [`Sequence.optional`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter on the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct should signal to not generate a CREATE
    SEQUENCE. Applies only to dialects that support sequences. Currently used only
    to allow PostgreSQL SERIAL to be used on a column that specifies Sequence() for
    usage on other backends.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则指示[`Sequence`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence")构造中的[`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")参数是否应该表示不生成CREATE SEQUENCE。仅适用于支持序列的方言。目前仅用于允许在指定Sequence()用于其他后端的列上使用PostgreSQL
    SERIAL。
- en: '[PRE321]'
  id: totrans-1289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: deprecated; indicates if the dialect should attempt to use server side cursors
    by default
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 已弃用；指示方言是否应尝试默认使用服务器端游标
- en: '[PRE322]'
  id: totrans-1291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: a tuple containing a version number for the DB backend in use.
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: 包含正在使用的DB后端的版本号的元组。
- en: This value is only available for supporting dialects, and is typically populated
    during the initial connection to the database.
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: 此值仅适用于支持的方言，并且通常在与数据库的初始连接期间填充。
- en: '[PRE323]'
  id: totrans-1294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: Establish execution options for a given connection.
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定连接建立执行选项。
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") in order to implement the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option. Dialects can
    intercept various execution options which may need to modify state on a particular
    DBAPI connection.
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")实现的，以实现[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")执行选项。方言可以拦截各种执行选项，这些选项可能需要修改特定DBAPI连接上的状态。
- en: New in version 1.4.
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE324]'
  id: totrans-1298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: Establish execution options for a given engine.
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定引擎建立执行选项。
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") to establish event hooks for new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created by the given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will then invoke the [`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options") method for that
    connection.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")实现的，用于为给定[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")创建的新[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")实例建立事件钩子，然后将为该连接调用[`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options")方法。
- en: '[PRE325]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: Given a DBAPI connection, set its isolation level.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个DBAPI连接，设置其隔离级别。
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是一个方言级方法，用作[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")隔离级别功能的实现的一部分；这些API应该优先用于大多数典型用例。
- en: If the dialect also implements the [`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values") method, then the given
    level is guaranteed to be one of the string names within that sequence, and the
    method will not need to anticipate a lookup failure.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言还实现了[`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values")方法，则给定级别将保证是该序列中的字符串名称之一，并且该方法不需要预期查找失败。
- en: See also
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - 查看当前级别'
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - 查看默认级别'
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - 设置每个[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的隔离级别'
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - 设置每个[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的隔离级别'
- en: '[PRE326]'
  id: totrans-1310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile SQL statements
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译SQL语句的[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")类
- en: '[PRE327]'
  id: totrans-1312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '`True` if the database supports `ALTER TABLE` - used only for generating foreign
    key constraints in certain circumstances'
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库支持`ALTER TABLE`，则为`True` - 仅在某些情况下用于生成外键约束
- en: '[PRE328]'
  id: totrans-1314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: Indicates the dialect supports comment DDL on tables and columns.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持对表和列的DDL注释。
- en: '[PRE329]'
  id: totrans-1316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Indicates if the dialect supports comment DDL on constraints.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持对约束的DDL注释。
- en: '[PRE330]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: dialect supports INSERT…(col) VALUES (DEFAULT) syntax.
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT…(col) VALUES (DEFAULT)语法。
- en: Most databases support this in some way, e.g. SQLite supports it using `VALUES
    (NULL)`. MS SQL Server supports the syntax also however is the only included dialect
    where we have this disabled, as MSSQL does not support the field for the IDENTITY
    column, which is usually where we like to make use of the feature.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库都以某种方式支持此功能，例如SQLite使用`VALUES (NULL)`支持它。 MS SQL Server也支持该语法，但它是唯一一个包含在内的方言，我们在其中禁用了此功能，因为MSSQL不支持IDENTITY列的字段，而通常我们喜欢利用该功能。
- en: '[PRE331]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: dialect supports INSERT… DEFAULT VALUES syntax
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT… DEFAULT VALUES语法。
- en: '[PRE332]'
  id: totrans-1323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: dialect supports INSERT () VALUES (), i.e. a plain INSERT with no columns in
    it.
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持INSERT () VALUES ()，即没有列的普通INSERT。
- en: This is not usually supported; an “empty” insert is typically suited using either
    “INSERT..DEFAULT VALUES” or “INSERT … (col) VALUES (DEFAULT)”.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常不受支持；“空”插入通常使用“INSERT..DEFAULT VALUES”或“INSERT … (col) VALUES (DEFAULT)”来适用。
- en: '[PRE333]'
  id: totrans-1326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: target database supports IDENTITY
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持IDENTITY
- en: '[PRE334]'
  id: totrans-1328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Target database supports INSERT…VALUES with multiple value sets, i.e. INSERT
    INTO table (cols) VALUES (…), (…), (…), …
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持带有多个值集的INSERT…VALUES，即INSERT INTO table (cols) VALUES (…), (…), (…),
    …
- en: '[PRE335]'
  id: totrans-1330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: Indicates if the dialect supports a native boolean construct. This will prevent
    [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    from generating a CHECK constraint when that type is used.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持原生布尔值构造。当使用该类型时，这将防止[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")生成CHECK约束。
- en: '[PRE336]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: indicates if Decimal objects are handled and returned for precision numeric
    types, or if floats are returned
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 表示是否处理和返回十进制对象以获取精度数值类型，或者是否返回浮点数
- en: '[PRE337]'
  id: totrans-1334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: Indicates if the dialect supports a native ENUM construct. This will prevent
    [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") from
    generating a CHECK constraint when that type is used in “native” mode.
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持原生ENUM构造。当以“本地”模式使用该类型时，这将防止[`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")生成CHECK约束。
- en: '[PRE338]'
  id: totrans-1336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: indicates if Python UUID() objects are handled natively by the driver for SQL
    UUID datatypes.
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: 指示Python的UUID()对象是否由驱动程序本地处理以用于SQL UUID数据类型。
- en: New in version 2.0.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '[PRE339]'
  id: totrans-1339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements when executed via executemany.
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言在通过executemany执行UPDATE和DELETE语句时是否正确实现了rowcount。
- en: '[PRE340]'
  id: totrans-1341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements.
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: 指示方言在执行`UPDATE`和`DELETE`语句时是否正确实现了rowcount。
- en: '[PRE341]'
  id: totrans-1343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: Indicates if the dialect supports CREATE SEQUENCE or similar.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持CREATE SEQUENCE或类似功能。
- en: '[PRE342]'
  id: totrans-1345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: indicates if the dialect supports server side cursors
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 表示方言是否支持服务器端游标。
- en: '[PRE343]'
  id: totrans-1347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: target database supports ORDER BY <labelname>, where <labelname> refers to a
    label in the columns clause of the SELECT
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库支持ORDER BY <labelname>，其中<labelname>指的是SELECT中列子句中的标签。
- en: '[PRE344]'
  id: totrans-1349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: indicates if this dialect supports caching.
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此方言是否支持缓存。
- en: All dialects that are compatible with statement caching should set this flag
    to True directly on each dialect class and subclass that supports it. SQLAlchemy
    tests that this flag is locally present on each dialect subclass before it will
    use statement caching. This is to provide safety for legacy or new dialects that
    are not yet fully tested to be compliant with SQL statement caching.
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 所有兼容语句缓存的方言都应直接在每个支持的方言类和子类上将此标志设置为True。SQLAlchemy在使用语句缓存之前会测试每个方言子类上是否存在此标志。这是为了对尚未完全测试以符合SQL语句缓存的旧版或新版方言提供安全性。
- en: New in version 1.4.5.
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.5中新增。
- en: See also
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三方方言的缓存](connections.html#engine-thirdparty-caching)'
- en: '[PRE345]'
  id: totrans-1355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: target database supports tuple IN, i.e. (x, y) IN ((q, p), (r, z))
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库是否支持元组IN，即(x, y) IN ((q, p), (r, z))。
- en: '[PRE346]'
  id: totrans-1357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: legacy; this is a TypeCompiler class at the class level, a TypeCompiler instance
    at the instance level.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的；这是一个TypeCompiler类在类级别，一个TypeCompiler实例在实例级别。
- en: Refer to type_compiler_instance instead.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅type_compiler_instance。
- en: '[PRE347]'
  id: totrans-1360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile SQL type objects
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编译SQL类型对象的[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")类。
- en: New in version 2.0.
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '[PRE348]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: instance of a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    class used to compile SQL type objects
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")类的实例用于编译SQL类型对象。'
- en: New in version 2.0.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '[PRE349]'
  id: totrans-1366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: Transform a generic type to a dialect-specific type.
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 将通用类型转换为特定于方言的类型。
- en: Dialect classes will usually use the `adapt_type()` function in the types module
    to accomplish this.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 方言类通常会使用类型模块中的`adapt_type()`函数来完成此操作。
- en: The returned result is cached *per dialect class* so can contain no dialect-instance
    state.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的结果被缓存*每个方言类*，因此可能不包含方言实例状态。
- en: '[PRE350]'
  id: totrans-1370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: dialect supports UPDATE..RETURNING with executemany.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 方言支持具有`executemany`的UPDATE..RETURNING。
- en: '[PRE351]'
  id: totrans-1372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: if the dialect supports RETURNING with UPDATE
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持带有UPDATE的RETURNING。
- en: New in version 2.0.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '[PRE352]'
  id: totrans-1375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: if the dialect supports RETURNING with UPDATE..FROM
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果方言支持带有UPDATE..FROM的RETURNING。
- en: New in version 2.0.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: '[PRE353]'
  id: totrans-1378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: if True, indicates “insertmanyvalues” functionality should be used to allow
    for `insert_executemany_returning` behavior, if possible.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则表示应使用“insertmanyvalues”功能，以允许`insert_executemany_returning`行为，如果可能的话。
- en: 'In practice, setting this to True means:'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，将此设置为True意味着：
- en: if `supports_multivalues_insert`, `insert_returning` and `use_insertmanyvalues`
    are all True, the SQL compiler will produce an INSERT that will be interpreted
    by the [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    as an `ExecuteStyle.INSERTMANYVALUES` execution that allows for INSERT of many
    rows with RETURNING by rewriting a single-row INSERT statement to have multiple
    VALUES clauses, also executing the statement multiple times for a series of batches
    when large numbers of rows are given.
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`supports_multivalues_insert`、`insert_returning`和`use_insertmanyvalues`都为True，则SQL编译器将生成一个INSERT，该INSERT将由[`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")解释为`ExecuteStyle.INSERTMANYVALUES`执行，通过重新编写单行INSERT语句以具有多个VALUES子句，当给定大量行时，还会多次执行该语句以进行一系列批处理。
- en: The parameter is False for the default dialect, and is set to True for SQLAlchemy
    internal dialects SQLite, MySQL/MariaDB, PostgreSQL, SQL Server. It remains at
    False for Oracle, which provides native “executemany with RETURNING” support and
    also does not support `supports_multivalues_insert`. For MySQL/MariaDB, those
    MySQL dialects that don’t support RETURNING will not report `insert_executemany_returning`
    as True.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 该参数对于默认方言为False，并且对于SQLAlchemy内部方言SQLite、MySQL/MariaDB、PostgreSQL、SQL Server设置为True。对于提供原生“带RETURNING的executemany”支持且不支持`supports_multivalues_insert`的Oracle，它保持为False。对于MySQL/MariaDB，那些不支持RETURNING的MySQL方言将不会将`insert_executemany_returning`报告为True。
- en: New in version 2.0.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT语句的“插入多个值”行为](connections.html#engine-insertmanyvalues)'
- en: '[PRE354]'
  id: totrans-1386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: if True, and use_insertmanyvalues is also True, INSERT statements that don’t
    include RETURNING will also use “insertmanyvalues”.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，并且use_insertmanyvalues也为True，则不包括RETURNING的INSERT语句也将使用“insertmanyvalues”。
- en: New in version 2.0.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT语句的“插入多个值”行为](connections.html#engine-insertmanyvalues)'
- en: '[PRE355]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '**Members**'
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[compiled](#sqlalchemy.engine.default.DefaultExecutionContext.compiled), [connection](#sqlalchemy.engine.default.DefaultExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.default.DefaultExecutionContext.create_cursor),
    [current_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters),
    [cursor](#sqlalchemy.engine.default.DefaultExecutionContext.cursor), [dialect](#sqlalchemy.engine.default.DefaultExecutionContext.dialect),
    [engine](#sqlalchemy.engine.default.DefaultExecutionContext.engine), [execute_style](#sqlalchemy.engine.default.DefaultExecutionContext.execute_style),
    [executemany](#sqlalchemy.engine.default.DefaultExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.default.DefaultExecutionContext.execution_options),
    [fetchall_for_returning()](#sqlalchemy.engine.default.DefaultExecutionContext.fetchall_for_returning),
    [get_current_parameters()](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters),
    [get_lastrowid()](#sqlalchemy.engine.default.DefaultExecutionContext.get_lastrowid),
    [get_out_parameter_values()](#sqlalchemy.engine.default.DefaultExecutionContext.get_out_parameter_values),
    [get_result_processor()](#sqlalchemy.engine.default.DefaultExecutionContext.get_result_processor),
    [handle_dbapi_exception()](#sqlalchemy.engine.default.DefaultExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.default.DefaultExecutionContext.invoked_statement),
    [isinsert](#sqlalchemy.engine.default.DefaultExecutionContext.isinsert), [isupdate](#sqlalchemy.engine.default.DefaultExecutionContext.isupdate),
    [lastrow_has_defaults()](#sqlalchemy.engine.default.DefaultExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.no_parameters),
    [parameters](#sqlalchemy.engine.default.DefaultExecutionContext.parameters), [post_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.post_exec),
    [postfetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.default.DefaultExecutionContext.root_connection)'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: '[编译](#sqlalchemy.engine.default.DefaultExecutionContext.compiled), [连接](#sqlalchemy.engine.default.DefaultExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.default.DefaultExecutionContext.create_cursor),
    [current_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters),
    [cursor](#sqlalchemy.engine.default.DefaultExecutionContext.cursor), [dialect](#sqlalchemy.engine.default.DefaultExecutionContext.dialect),
    [engine](#sqlalchemy.engine.default.DefaultExecutionContext.engine), [execute_style](#sqlalchemy.engine.default.DefaultExecutionContext.execute_style),
    [executemany](#sqlalchemy.engine.default.DefaultExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.default.DefaultExecutionContext.execution_options),
    [fetchall_for_returning()](#sqlalchemy.engine.default.DefaultExecutionContext.fetchall_for_returning),
    [get_current_parameters()](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters),
    [get_lastrowid()](#sqlalchemy.engine.default.DefaultExecutionContext.get_lastrowid),
    [get_out_parameter_values()](#sqlalchemy.engine.default.DefaultExecutionContext.get_out_parameter_values),
    [get_result_processor()](#sqlalchemy.engine.default.DefaultExecutionContext.get_result_processor),
    [handle_dbapi_exception()](#sqlalchemy.engine.default.DefaultExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.default.DefaultExecutionContext.invoked_statement),
    [isinsert](#sqlalchemy.engine.default.DefaultExecutionContext.isinsert), [isupdate](#sqlalchemy.engine.default.DefaultExecutionContext.isupdate),
    [lastrow_has_defaults()](#sqlalchemy.engine.default.DefaultExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.no_parameters),
    [parameters](#sqlalchemy.engine.default.DefaultExecutionContext.parameters), [post_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.post_exec),
    [postfetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.default.DefaultExecutionContext.root_connection)'
- en: '**Class signature**'
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.engine.default.DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") ([`sqlalchemy.engine.interfaces.ExecutionContext`](#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.interfaces.ExecutionContext"))
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.engine.default.DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") ([`sqlalchemy.engine.interfaces.ExecutionContext`](#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.interfaces.ExecutionContext"))
- en: '[PRE356]'
  id: totrans-1396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: if passed to constructor, sqlalchemy.engine.base.Compiled object being executed
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给构造函数，表示正在执行的sqlalchemy.engine.base.Compiled对象
- en: '[PRE357]'
  id: totrans-1398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: Connection object which can be freely used by default value generators to execute
    SQL. This Connection should reference the same underlying connection/transactional
    resources of root_connection.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被默认值生成器自由使用以执行SQL的连接对象。此连接应引用与root_connection相同的底层连接/事务资源。
- en: '[PRE358]'
  id: totrans-1400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: Return a new cursor generated from this ExecutionContext’s connection.
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 从此ExecutionContext的连接生成一个新的游��。
- en: Some dialects may wish to change the behavior of connection.cursor(), such as
    postgresql which may return a PG “server side” cursor.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方言可能希望更改 connection.cursor() 的行为，例如 postgresql 可能会返回一个 PG 的“服务器端”游标。
- en: '[PRE359]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: A dictionary of parameters applied to the current row.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于当前行的参数字典。
- en: This attribute is only available in the context of a user-defined default generation
    function, e.g. as described at [Context-Sensitive Default Functions](defaults.html#context-default-functions).
    It consists of a dictionary which includes entries for each column/value pair
    that is to be part of the INSERT or UPDATE statement. The keys of the dictionary
    will be the key value of each [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is usually synonymous with the name.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性仅在用户定义的默认生成函数的上下文中可用，例如在 [上下文敏感的默认函数](defaults.html#context-default-functions)
    中描述的那样。它由一个字典组成，该字典包含要包含在 INSERT 或 UPDATE 语句中的每个列/值对的条目。字典的键将是每个 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的键值，这通常与名称同义。
- en: Note that the [`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    does not accommodate for the “multi-values” feature of the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method. The [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") method
    should be preferred.
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性不适用于
    [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values "sqlalchemy.sql.expression.Insert.values")
    方法的“多值”特性。应优先使用 [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") 方法。
- en: See also
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")'
- en: '[Context-Sensitive Default Functions](defaults.html#context-default-functions)'
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
  zh: '[上下文敏感的默认函数](defaults.html#context-default-functions)'
- en: '[PRE360]'
  id: totrans-1410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: DB-API cursor procured from the connection
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接获取的 DB-API 游标
- en: '[PRE361]'
  id: totrans-1412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: dialect which created this ExecutionContext.
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此执行上下文的方言。
- en: '[PRE362]'
  id: totrans-1414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: engine which the Connection is associated with
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 与连接关联的引擎
- en: '[PRE363]'
  id: totrans-1416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: the style of DBAPI cursor method that will be used to execute a statement.
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 将用于执行语句的 DBAPI 游标方法的风格。
- en: New in version 2.0.
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE364]'
  id: totrans-1419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: True if the context has a list of more than one parameter set.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上下文有多个参数集的列表，则为 True。
- en: Historically this attribute links to whether `cursor.execute()` or `cursor.executemany()`
    will be used. It also can now mean that “insertmanyvalues” may be used which indicates
    one or more `cursor.execute()` calls.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，此属性链接到是否将使用 `cursor.execute()` 还是 `cursor.executemany()`。现在它还可以表示“insertmanyvalues”可能被使用，这表示一个或多个
    `cursor.execute()` 调用。
- en: '[PRE365]'
  id: totrans-1422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: Execution options associated with the current statement execution
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 与当前语句执行关联的执行选项
- en: '[PRE366]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: For a RETURNING result, deliver cursor.fetchall() from the DBAPI cursor.
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 RETURNING 结果，请从 DBAPI 游标传递 `cursor.fetchall()`。
- en: This is a dialect-specific hook for dialects that have special considerations
    when calling upon the rows delivered for a “RETURNING” statement. Default implementation
    is `cursor.fetchall()`.
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个方言特定的钩子，用于调用“RETURNING”语句交付的行时有特殊考虑的方言。默认实现是 `cursor.fetchall()`。
- en: This hook is currently used only by the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature. Dialects that don’t set `use_insertmanyvalues=True` don’t need to consider
    this hook.
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 此钩子目前仅由 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能使用。不设置
    `use_insertmanyvalues=True` 的方言不需要考虑此钩子。
- en: New in version 2.0.10.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.10 中新增。
- en: '[PRE367]'
  id: totrans-1429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: Return a dictionary of parameters applied to the current row.
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: 返回应用于当前行的参数字典。
- en: This method can only be used in the context of a user-defined default generation
    function, e.g. as described at [Context-Sensitive Default Functions](defaults.html#context-default-functions).
    When invoked, a dictionary is returned which includes entries for each column/value
    pair that is part of the INSERT or UPDATE statement. The keys of the dictionary
    will be the key value of each [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is usually synonymous with the name.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法只能在用户定义的默认生成函数的上下文中使用，例如在 [上下文敏感的默认函数](defaults.html#context-default-functions)
    中描述的方式。调用时，将返回一个字典，该字典包含 INSERT 或 UPDATE 语句的每个列/值对的条目。字典的键将是每个 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的键值，通常与名称同义。
- en: 'Parameters:'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**isolate_multiinsert_groups=True** – indicates that multi-valued INSERT constructs
    created using [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") should be handled by returning only
    the subset of parameters that are local to the current column default invocation.
    When `False`, the raw parameters of the statement are returned including the naming
    convention used in the case of multi-valued INSERT.'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '**isolate_multiinsert_groups=True** – 表示应通过仅返回与当前列默认调用相关的参数子集来处理使用 [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 创建的多值 INSERT 构造。当为 `False` 时，返回语句的原始参数，包括在多值
    INSERT 情况下使用的命名约定。'
- en: 'New in version 1.2: added [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") which
    provides more functionality over the existing [`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute.'
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增了 [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") 方法，提供了比现有
    [`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") 属性更多的功能。
- en: See also
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters")'
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters")'
- en: '[Context-Sensitive Default Functions](defaults.html#context-default-functions)'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '[上下文敏感的默认函数](defaults.html#context-default-functions)'
- en: '[PRE368]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: return self.cursor.lastrowid, or equivalent, after an INSERT.
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 在 INSERT 之后返回 self.cursor.lastrowid 或其等价值。
- en: This may involve calling special cursor functions, issuing a new SELECT on the
    cursor (or a new one), or returning a stored value that was calculated within
    post_exec().
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能涉及调用特殊的游标函数，在游标上发出新的 SELECT（或新的 SELECT），或者返回在 post_exec() 内计算的存储值。
- en: This function will only be called for dialects which support “implicit” primary
    key generation, keep preexecute_autoincrement_sequences set to False, and when
    no explicit id value was bound to the statement.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数仅对支持“隐式”主键生成的方言调用，并且保持 preexecute_autoincrement_sequences 设置为 False，并且没有将显式
    id 值绑定到语句时才会被调用。
- en: The function is called once for an INSERT statement that would need to return
    the last inserted primary key for those dialects that make use of the lastrowid
    concept. In these cases, it is called directly after [`ExecutionContext.post_exec()`](#sqlalchemy.engine.ExecutionContext.post_exec
    "sqlalchemy.engine.ExecutionContext.post_exec").
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些使用 lastrowid 概念的方言，此函数在需要返回最后插入的主键的 INSERT 语句中被调用一次。在这些情况下，它会在 [`ExecutionContext.post_exec()`](#sqlalchemy.engine.ExecutionContext.post_exec
    "sqlalchemy.engine.ExecutionContext.post_exec") 之后直接被调用。
- en: '[PRE369]'
  id: totrans-1443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: Return a sequence of OUT parameter values from a cursor.
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 从游标返回 OUT 参数值的序列。
- en: For dialects that support OUT parameters, this method will be called when there
    is a [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object which has the [`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters") flag set. This flag
    in turn will be set to True if the statement itself has [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects that have the `.isoutparam`
    flag set which are consumed by the `SQLCompiler.visit_bindparam()` method. If
    the dialect compiler produces [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with `.isoutparam` set which
    are not handled by `SQLCompiler.visit_bindparam()`, it should set this flag explicitly.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持OUT参数的方言，当存在一个[`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")对象，并且该对象的[`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters")标志被设置时，将调用此方法。反过来，如果语句本身具有[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象，并且这些对象的`.isoutparam`标志被`SQLCompiler.visit_bindparam()`方法使用，则此标志将设置为True。如果方言编译器生成具有`.isoutparam`设置的[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象，但`SQLCompiler.visit_bindparam()`未处理，它应显式设置此标志。
- en: The list of names that were rendered for each bound parameter is passed to the
    method. The method should then return a sequence of values corresponding to the
    list of parameter objects. Unlike in previous SQLAlchemy versions, the values
    can be the **raw values** from the DBAPI; the execution context will apply the
    appropriate type handler based on what’s present in self.compiled.binds and update
    the values. The processed dictionary will then be made available via the `.out_parameters`
    collection on the result object. Note that SQLAlchemy 1.4 has multiple kinds of
    result object as part of the 2.0 transition.
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个绑定参数呈现的名称列表传递给该方法。然后，该方法应返回与参数对象列表对应的值序列。与以前的SQLAlchemy版本不同，这些值可以是来自DBAPI的**原始值**；执行上下文将根据self.compiled.binds中的内容应用适当的类型处理程序并更新值。处理后的字典将通过结果对象上的`.out_parameters`集合提供。请注意，SQLAlchemy
    1.4作为2.0过渡的一部分具有多种结果对象。
- en: 'New in version 1.4: - added [`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values"), which is invoked
    automatically by the [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") when there are [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with the `.isoutparam` flag
    set. This replaces the practice of setting out parameters within the now-removed
    `get_result_proxy()` method.'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增：- 添加[`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values")，当存在具有`.isoutparam`标志的[`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")对象时，将自动由[`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")调用。这取代了在现在已删除的`get_result_proxy()`方法中设置输出参数的做法。
- en: '[PRE370]'
  id: totrans-1448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: Return a ‘result processor’ for a given type as present in cursor.description.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 为游标描述中存在的给定类型返回一个‘结果处理器’。
- en: This has a default implementation that dialects can override for context-sensitive
    result type handling.
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个默认实现，方言可以为上下文敏感的结果类型处理覆盖。
- en: '[PRE371]'
  id: totrans-1451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: Receive a DBAPI exception which occurred upon execute, result fetch, etc.
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 接收在执��、结果获取等过程中发生的DBAPI异常。
- en: '[PRE372]'
  id: totrans-1453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: The Executable statement object that was given in the first place.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 最初给定的可执行语句对象。
- en: This should be structurally equivalent to compiled.statement, but not necessarily
    the same object as in a caching scenario the compiled form will have been extracted
    from the cache.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 结构上等同于compiled.statement，但在缓存场景中，编译形式可能不是同一个对象。
- en: '[PRE373]'
  id: totrans-1456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: True if the statement is an INSERT.
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句是一个INSERT，则返回True。
- en: '[PRE374]'
  id: totrans-1458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: True if the statement is an UPDATE.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句是一个UPDATE，则返回True。
- en: '[PRE375]'
  id: totrans-1460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: Return True if the last INSERT or UPDATE row contained inlined or database-side
    defaults.
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最后一个INSERT或UPDATE行包含内联或数据库端默认值，则返回True。
- en: '[PRE376]'
  id: totrans-1462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: True if the execution style does not use parameters
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行方式不使用参数，则返回True。
- en: '[PRE377]'
  id: totrans-1464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: bind parameters passed to the execute() or exec_driver_sql() methods.
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给execute()或exec_driver_sql()方法的绑定参数。
- en: These are always stored as a list of parameter entries. A single-element list
    corresponds to a `cursor.execute()` call and a multiple-element list corresponds
    to `cursor.executemany()`, except in the case of `ExecuteStyle.INSERTMANYVALUES`
    which will use `cursor.execute()` one or more times.
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 这些始终被存储为参数条目的列表。单个元素列表对应于`cursor.execute()`调用，多个元素列表对应于`cursor.executemany()`，除非在`ExecuteStyle.INSERTMANYVALUES`的情况下将使用一个或多个`cursor.execute()`。
- en: '[PRE378]'
  id: totrans-1467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Called after the execution of a compiled statement.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译语句执行后调用。
- en: If a compiled statement was passed to this ExecutionContext, the last_insert_ids,
    last_inserted_params, etc. datamembers should be available after this method completes.
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已编译的语句被传递给此ExecutionContext，则在此方法完成后应该可以使用last_insert_ids、last_inserted_params等数据成员。
- en: '[PRE379]'
  id: totrans-1470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: a list of Column objects for which a server-side default or inline SQL expression
    value was fired off. Applies to inserts and updates.
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，其中包含为其触发了服务器端默认值或内联SQL表达式值的Column对象。适用于插入和更新。
- en: '[PRE380]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: Called before an execution of a compiled statement.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译语句执行前调用。
- en: If a compiled statement was passed to this ExecutionContext, the statement and
    parameters datamembers must be initialized after this statement is complete.
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已编译的语句被传递给此ExecutionContext，则在此语句完成后必须初始化语句和参数数据成员。
- en: '[PRE381]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: a list of Column objects for which a client-side default was fired off. Applies
    to inserts and updates.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Column对象列表，其中为其触发了客户端默认值。适用于插入和更新。
- en: '[PRE382]'
  id: totrans-1477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: Connection object which is the source of this ExecutionContext.
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 是此ExecutionContext的源的Connection对象。
- en: '[PRE383]'
  id: totrans-1479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '**Members**'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[compiled](#sqlalchemy.engine.ExecutionContext.compiled), [connection](#sqlalchemy.engine.ExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.ExecutionContext.create_cursor), [cursor](#sqlalchemy.engine.ExecutionContext.cursor),
    [dialect](#sqlalchemy.engine.ExecutionContext.dialect), [engine](#sqlalchemy.engine.ExecutionContext.engine),
    [execute_style](#sqlalchemy.engine.ExecutionContext.execute_style), [executemany](#sqlalchemy.engine.ExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.ExecutionContext.execution_options), [fetchall_for_returning()](#sqlalchemy.engine.ExecutionContext.fetchall_for_returning),
    [fire_sequence()](#sqlalchemy.engine.ExecutionContext.fire_sequence), [get_out_parameter_values()](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values),
    [get_rowcount()](#sqlalchemy.engine.ExecutionContext.get_rowcount), [handle_dbapi_exception()](#sqlalchemy.engine.ExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.ExecutionContext.invoked_statement), [isinsert](#sqlalchemy.engine.ExecutionContext.isinsert),
    [isupdate](#sqlalchemy.engine.ExecutionContext.isupdate), [lastrow_has_defaults()](#sqlalchemy.engine.ExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.ExecutionContext.no_parameters), [parameters](#sqlalchemy.engine.ExecutionContext.parameters),
    [post_exec()](#sqlalchemy.engine.ExecutionContext.post_exec), [postfetch_cols](#sqlalchemy.engine.ExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.ExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.ExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.ExecutionContext.root_connection), [statement](#sqlalchemy.engine.ExecutionContext.statement)'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '[compiled](#sqlalchemy.engine.ExecutionContext.compiled), [connection](#sqlalchemy.engine.ExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.ExecutionContext.create_cursor), [cursor](#sqlalchemy.engine.ExecutionContext.cursor),
    [dialect](#sqlalchemy.engine.ExecutionContext.dialect), [engine](#sqlalchemy.engine.ExecutionContext.engine),
    [execute_style](#sqlalchemy.engine.ExecutionContext.execute_style), [executemany](#sqlalchemy.engine.ExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.ExecutionContext.execution_options), [fetchall_for_returning()](#sqlalchemy.engine.ExecutionContext.fetchall_for_returning),
    [fire_sequence()](#sqlalchemy.engine.ExecutionContext.fire_sequence), [get_out_parameter_values()](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values),
    [get_rowcount()](#sqlalchemy.engine.ExecutionContext.get_rowcount), [handle_dbapi_exception()](#sqlalchemy.engine.ExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.ExecutionContext.invoked_statement), [isinsert](#sqlalchemy.engine.ExecutionContext.isinsert),
    [isupdate](#sqlalchemy.engine.ExecutionContext.isupdate), [lastrow_has_defaults()](#sqlalchemy.engine.ExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.ExecutionContext.no_parameters), [parameters](#sqlalchemy.engine.ExecutionContext.parameters),
    [post_exec()](#sqlalchemy.engine.ExecutionContext.post_exec), [postfetch_cols](#sqlalchemy.engine.ExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.ExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.ExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.ExecutionContext.root_connection), [statement](#sqlalchemy.engine.ExecutionContext.statement)'
- en: A messenger object for a Dialect that corresponds to a single execution.
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个执行对应的Dialect的信使对象。
- en: '[PRE384]'
  id: totrans-1483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: if passed to constructor, sqlalchemy.engine.base.Compiled object being executed
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 如果传递给构造函数，则执行中的sqlalchemy.engine.base.Compiled对象
- en: '[PRE385]'
  id: totrans-1485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Connection object which can be freely used by default value generators to execute
    SQL. This Connection should reference the same underlying connection/transactional
    resources of root_connection.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
  zh: 连接对象，可由默认值生成器自由使用以执行 SQL。此连接应引用与 root_connection 相同的基础连接/事务资源。
- en: '[PRE386]'
  id: totrans-1487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: Return a new cursor generated from this ExecutionContext’s connection.
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 从此 ExecutionContext 的连接生成新游标。
- en: Some dialects may wish to change the behavior of connection.cursor(), such as
    postgresql which may return a PG “server side” cursor.
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方言可能希望更改 connection.cursor() 的行为，例如可能返回 PG “服务器端”游标的 postgresql。
- en: '[PRE387]'
  id: totrans-1490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: DB-API cursor procured from the connection
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 从连接获取的 DB-API 游标
- en: '[PRE388]'
  id: totrans-1492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: dialect which created this ExecutionContext.
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此 ExecutionContext 的方言。
- en: '[PRE389]'
  id: totrans-1494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: engine which the Connection is associated with
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Connection 关联的引擎
- en: '[PRE390]'
  id: totrans-1496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: the style of DBAPI cursor method that will be used to execute a statement.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 将用于执行语句的 DBAPI 游标方法的样式。
- en: New in version 2.0.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE391]'
  id: totrans-1499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: True if the context has a list of more than one parameter set.
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上下文具有超过一个参数集的列表，则为 True。
- en: Historically this attribute links to whether `cursor.execute()` or `cursor.executemany()`
    will be used. It also can now mean that “insertmanyvalues” may be used which indicates
    one or more `cursor.execute()` calls.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，此属性与是否将使用 `cursor.execute()` 或 `cursor.executemany()` 相关联。现在它也可能意味着“insertmanyvalues”可能被使用，这表明一个或多个
    `cursor.execute()` 调用。
- en: '[PRE392]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: Execution options associated with the current statement execution
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 与当前语句执行相关联的执行选项
- en: '[PRE393]'
  id: totrans-1504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: For a RETURNING result, deliver cursor.fetchall() from the DBAPI cursor.
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 RETURNING 结果，从 DBAPI 游标传递 cursor.fetchall()。
- en: This is a dialect-specific hook for dialects that have special considerations
    when calling upon the rows delivered for a “RETURNING” statement. Default implementation
    is `cursor.fetchall()`.
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: 这是特定于方言的钩子，用于在调用“RETURNING”语句的交付行时具有特殊考虑因素的方言。默认实现是 `cursor.fetchall()`。
- en: This hook is currently used only by the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature. Dialects that don’t set `use_insertmanyvalues=True` don’t need to consider
    this hook.
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
  zh: 此钩子目前仅由 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能使用。不设置
    `use_insertmanyvalues=True` 的方言不需要考虑此钩子。
- en: New in version 2.0.10.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.10 中的新功能。
- en: '[PRE394]'
  id: totrans-1509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    invoke it and return the next int value
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")，调用它并返回下一个
    int 值。
- en: '[PRE395]'
  id: totrans-1511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: Return a sequence of OUT parameter values from a cursor.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 从游标返回一系列 OUT 参数值。
- en: For dialects that support OUT parameters, this method will be called when there
    is a [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object which has the [`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters") flag set. This flag
    in turn will be set to True if the statement itself has [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects that have the `.isoutparam`
    flag set which are consumed by the `SQLCompiler.visit_bindparam()` method. If
    the dialect compiler produces [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with `.isoutparam` set which
    are not handled by `SQLCompiler.visit_bindparam()`, it should set this flag explicitly.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 对于支持 OUT 参数的方言，当存在具有设置了 [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 对象的 [`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters") 标志的 [`SQLCompiler`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象时，将调用此方法。反过来，如果语句本身具有 `.isoutparam`
    标志设置的 [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象，并且这些对象由 `SQLCompiler.visit_bindparam()`
    方法消耗，则将设置此标志为 True。如果方言编译器生成具有 `.isoutparam` 设置的 [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 对象，并且不由 `SQLCompiler.visit_bindparam()`
    处理，则应显式设置此标志。
- en: The list of names that were rendered for each bound parameter is passed to the
    method. The method should then return a sequence of values corresponding to the
    list of parameter objects. Unlike in previous SQLAlchemy versions, the values
    can be the **raw values** from the DBAPI; the execution context will apply the
    appropriate type handler based on what’s present in self.compiled.binds and update
    the values. The processed dictionary will then be made available via the `.out_parameters`
    collection on the result object. Note that SQLAlchemy 1.4 has multiple kinds of
    result object as part of the 2.0 transition.
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个绑定参数的渲染名称列表传递给该方法。然后该方法应返回与参数对象列表对应的值序列。与之前的 SQLAlchemy 版本不同，这些值可以是来自 DBAPI
    的**原始值**；执行上下文将根据self.compiled.binds中存在的内容应用适当的类型处理程序，并更新这些值。然后处理后的字典将通过结果对象上的`.out_parameters`集合提供。请注意，SQLAlchemy
    1.4 在 2.0 过渡的一部分中有多种结果对象。
- en: 'New in version 1.4: - added [`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values"), which is invoked
    automatically by the [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") when there are [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with the `.isoutparam` flag
    set. This replaces the practice of setting out parameters within the now-removed
    `get_result_proxy()` method.'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增：- 添加了 [`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values")，当存在设置了`.isoutparam`标志的
    [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    对象时，将自动调用该方法。这取代了在现已删除的`get_result_proxy()`方法中设置输出参数的做法。
- en: '[PRE396]'
  id: totrans-1516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: Return the DBAPI `cursor.rowcount` value, or in some cases an interpreted value.
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 DBAPI `cursor.rowcount` 值，或在某些情况下返回解释值。
- en: See [`CursorResult.rowcount`](connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") for details on this.
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此内容的详细信息，请参阅 [`CursorResult.rowcount`](connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: '[PRE397]'
  id: totrans-1519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: Receive a DBAPI exception which occurred upon execute, result fetch, etc.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 接收在执行、结果获取等过程中发生的 DBAPI 异常。
- en: '[PRE398]'
  id: totrans-1521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: The Executable statement object that was given in the first place.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 首次给定的可执行语句对象。
- en: This should be structurally equivalent to compiled.statement, but not necessarily
    the same object as in a caching scenario the compiled form will have been extracted
    from the cache.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在结构上等同于compiled.statement，但在缓存场景中不一定是相同的对象，因为编译形式将从缓存中提取出来。
- en: '[PRE399]'
  id: totrans-1524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: True if the statement is an INSERT.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句是 INSERT，则返回 True。
- en: '[PRE400]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: True if the statement is an UPDATE.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 如果语句是 UPDATE，则返回 True。
- en: '[PRE401]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: Return True if the last INSERT or UPDATE row contained inlined or database-side
    defaults.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最后一个 INSERT 或 UPDATE 行包含内联或数据库端默认值，则返回 True。
- en: '[PRE402]'
  id: totrans-1530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: True if the execution style does not use parameters
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行样式不使用参数，则返回 True。
- en: '[PRE403]'
  id: totrans-1532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: bind parameters passed to the execute() or exec_driver_sql() methods.
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 execute() 或 exec_driver_sql() 方法的绑定参数。
- en: These are always stored as a list of parameter entries. A single-element list
    corresponds to a `cursor.execute()` call and a multiple-element list corresponds
    to `cursor.executemany()`, except in the case of `ExecuteStyle.INSERTMANYVALUES`
    which will use `cursor.execute()` one or more times.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 这些始终存储为参数条目的列表。单个元素列表对应于 `cursor.execute()` 调用，多个元素列表对应于 `cursor.executemany()`，除了在使用
    `ExecuteStyle.INSERTMANYVALUES` 的情况下，它将一次或多次使用 `cursor.execute()`。
- en: '[PRE404]'
  id: totrans-1535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: Called after the execution of a compiled statement.
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译语句执行后调用。
- en: If a compiled statement was passed to this ExecutionContext, the last_insert_ids,
    last_inserted_params, etc. datamembers should be available after this method completes.
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已将编译的语句传递给此执行上下文，则在此方法完成后，last_insert_ids、last_inserted_params等数据成员应该可用。
- en: '[PRE405]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: a list of Column objects for which a server-side default or inline SQL expression
    value was fired off. Applies to inserts and updates.
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 一组列对象，为其触发了服务器端默认值或内联 SQL 表达式值。适用于插入和更新操作。
- en: '[PRE406]'
  id: totrans-1540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: Called before an execution of a compiled statement.
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译语句执行之前调用。
- en: If a compiled statement was passed to this ExecutionContext, the statement and
    parameters datamembers must be initialized after this statement is complete.
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已将编译的语句传递给此执行上下文，则在此语句完成后，必须初始化语句和参数数据成员。
- en: '[PRE407]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: a list of Column objects for which a client-side default was fired off. Applies
    to inserts and updates.
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 为客户端端触发了默认值的Column对象列表。适用于插入和更新。
- en: '[PRE408]'
  id: totrans-1545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: Connection object which is the source of this ExecutionContext.
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 是此ExecutionContext来源的Connection对象。
- en: '[PRE409]'
  id: totrans-1547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: string version of the statement to be executed. Is either passed to the constructor,
    or must be created from the sql.Compiled object by the time pre_exec() has completed.
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行的语句的字符串版本。要么传递给构造函数，要么必须在pre_exec()完成时从sql.Compiled对象创建。
- en: '[PRE410]'
  id: totrans-1549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: represents state to use when producing “expanded” and “post compile” bound parameters
    for a statement.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: 表示在为语句生成“扩展”和“编译后”绑定参数时使用的状态。
- en: “expanded” parameters are parameters that are generated at statement execution
    time to suit a number of parameters passed, the most prominent example being the
    individual elements inside of an IN expression.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: “扩展”参数是在语句执行时生成的参数，以适应传递的参数数量，最突出的例子是IN表达式中的各个元素。
- en: “post compile” parameters are parameters where the SQL literal value will be
    rendered into the SQL statement at execution time, rather than being passed as
    separate parameters to the driver.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: “编译后”参数是在执行时将SQL文本值呈现到SQL语句中，而不是作为单独的参数传递给驱动程序的参数。
- en: To create an [`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")
    instance, use the [`SQLCompiler.construct_expanded_state()`](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state") method on any
    [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    instance.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个[`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")实例，请在任何[`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")实例上使用[`SQLCompiler.construct_expanded_state()`](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state")方法。
- en: '**Members**'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[additional_parameters](#sqlalchemy.sql.compiler.ExpandedState.additional_parameters),
    [parameter_expansion](#sqlalchemy.sql.compiler.ExpandedState.parameter_expansion),
    [parameters](#sqlalchemy.sql.compiler.ExpandedState.parameters), [positional_parameters](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters),
    [positiontup](#sqlalchemy.sql.compiler.ExpandedState.positiontup), [processors](#sqlalchemy.sql.compiler.ExpandedState.processors),
    [statement](#sqlalchemy.sql.compiler.ExpandedState.statement)'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: '[additional_parameters](#sqlalchemy.sql.compiler.ExpandedState.additional_parameters),
    [parameter_expansion](#sqlalchemy.sql.compiler.ExpandedState.parameter_expansion),
    [parameters](#sqlalchemy.sql.compiler.ExpandedState.parameters), [positional_parameters](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters),
    [positiontup](#sqlalchemy.sql.compiler.ExpandedState.positiontup), [processors](#sqlalchemy.sql.compiler.ExpandedState.processors),
    [statement](#sqlalchemy.sql.compiler.ExpandedState.statement)'
- en: '**Class signature**'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.compiler.ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") (`builtins.tuple`)
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.compiler.ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState")（`builtins.tuple`）
- en: '[PRE411]'
  id: totrans-1558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: synonym for [`ExpandedState.parameters`](#sqlalchemy.sql.compiler.ExpandedState.parameters
    "sqlalchemy.sql.compiler.ExpandedState.parameters").
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ExpandedState.parameters`](#sqlalchemy.sql.compiler.ExpandedState.parameters
    "sqlalchemy.sql.compiler.ExpandedState.parameters")的同义词。'
- en: '[PRE412]'
  id: totrans-1560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: Mapping representing the intermediary link from original parameter name to list
    of “expanded” parameter names, for those parameters that were expanded.
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 表示从原始参数名称到“扩展”参数名称列表的中间链接的映射，用于那些已扩展的参数。
- en: '[PRE413]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: Parameter dictionary with parameters fully expanded.
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 参数字典，参数已完全展开。
- en: For a statement that uses named parameters, this dictionary will map exactly
    to the names in the statement. For a statement that uses positional parameters,
    the [`ExpandedState.positional_parameters`](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters
    "sqlalchemy.sql.compiler.ExpandedState.positional_parameters") will yield a tuple
    with the positional parameter set.
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用命名参数的语句，此字典将与语句中的名称完全匹配。对于使用位置参数的语句，[`ExpandedState.positional_parameters`](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters
    "sqlalchemy.sql.compiler.ExpandedState.positional_parameters")将生成一个具有位置参数集的元组。
- en: '[PRE414]'
  id: totrans-1565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: Tuple of positional parameters, for statements that were compiled using a positional
    paramstyle.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 用于使用位置参数样式编译的语句的位置参数元组。
- en: '[PRE415]'
  id: totrans-1567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: Sequence of string names indicating the order of positional parameters
  id: totrans-1568
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指示位置参数顺序的字符串名称序列
- en: '[PRE416]'
  id: totrans-1569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: mapping of bound value processors
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定值处理器的映射
- en: '[PRE417]'
  id: totrans-1571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: String SQL statement with parameters fully expanded
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串SQL语句，参数已完全展开
- en: '[PRE418]'
  id: totrans-1573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '**Members**'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ensure_kwarg](#sqlalchemy.sql.compiler.GenericTypeCompiler.ensure_kwarg)'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: '[ensure_kwarg](#sqlalchemy.sql.compiler.GenericTypeCompiler.ensure_kwarg)'
- en: '**Class signature**'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.compiler.GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler") (`sqlalchemy.sql.compiler.TypeCompiler`)
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.compiler.GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")（`sqlalchemy.sql.compiler.TypeCompiler`）
- en: '[PRE419]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '*inherited from the* `TypeCompiler.ensure_kwarg` *attribute of* `TypeCompiler`'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `TypeCompiler` *的* `TypeCompiler.ensure_kwarg` *属性*'
- en: a regular expression that indicates method names for which the method should
    accept `**kw` arguments.
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 一个指示方法名称的正则表达式，该方法应接受`**kw`参数。
- en: The class will scan for methods matching the name template and decorate them
    if necessary to ensure `**kw` parameters are accepted.
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 该类将扫描与名称模板匹配的方法，并在必要时装饰它们，以确保接受`**kw`参数。
- en: '[PRE420]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-1583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '**Members**'
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.compiler.IdentifierPreparer.__init__), [format_column()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_column),
    [format_label_name()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_label_name),
    [format_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_schema),
    [format_table()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table), [format_table_seq()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table_seq),
    [quote()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote), [quote_identifier()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_identifier),
    [quote_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema), [schema_for_object](#sqlalchemy.sql.compiler.IdentifierPreparer.schema_for_object),
    [unformat_identifiers()](#sqlalchemy.sql.compiler.IdentifierPreparer.unformat_identifiers),
    [validate_sql_phrase()](#sqlalchemy.sql.compiler.IdentifierPreparer.validate_sql_phrase)'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.compiler.IdentifierPreparer.__init__), [format_column()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_column),
    [format_label_name()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_label_name),
    [format_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_schema),
    [format_table()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table), [format_table_seq()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table_seq),
    [quote()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote), [quote_identifier()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_identifier),
    [quote_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema), [schema_for_object](#sqlalchemy.sql.compiler.IdentifierPreparer.schema_for_object),
    [unformat_identifiers()](#sqlalchemy.sql.compiler.IdentifierPreparer.unformat_identifiers),
    [validate_sql_phrase()](#sqlalchemy.sql.compiler.IdentifierPreparer.validate_sql_phrase)'
- en: Handle quoting and case-folding of identifiers based on options.
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 根据选项处理标识符的引用和大小写折叠。
- en: '[PRE422]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: Construct a new `IdentifierPreparer` object.
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的`IdentifierPreparer`对象。
- en: initial_quote
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 初始引号
- en: Character that begins a delimited identifier.
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 开始定界标识符的字符。
- en: final_quote
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 最终引号
- en: Character that ends a delimited identifier. Defaults to initial_quote.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: 结束定界标识符的字符。默认为初始引号。
- en: omit_schema
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 省略模式
- en: Prevent prepending schema name. Useful for databases that do not support schemae.
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 防止添加模式名。适用于不支持模式的数据库。
- en: '[PRE423]'
  id: totrans-1595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: Prepare a quoted column name.
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个带引号的列名。
- en: '[PRE424]'
  id: totrans-1597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Prepare a quoted column name.
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个带引号的列名。
- en: '[PRE425]'
  id: totrans-1599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: Prepare a quoted schema name.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个带引号的模式名。
- en: '[PRE426]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: Prepare a quoted table and schema name.
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个带引号的表名和模式名。
- en: '[PRE427]'
  id: totrans-1603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: Format table name and schema as a tuple.
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 将表名和模式格式化为元组。
- en: '[PRE428]'
  id: totrans-1605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: Conditionally quote an identifier.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 有条件地引用标识符。
- en: The identifier is quoted if it is a reserved word, contains quote-necessary
    characters, or is an instance of [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") which includes `quote` set to `True`.
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标识符是保留字、包含引号必要字符或是一个包含`quote`设置为`True`的[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")的实例，则对标识符进行引用。
- en: Subclasses can override this to provide database-dependent quoting behavior
    for identifier names.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 子类可以重写此方法，为标识符名称提供依赖于数据库的引用行为。
- en: 'Parameters:'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`ident` – string identifier'
  id: totrans-1610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ident` – 字符串标识符'
- en: '`force` –'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force` –'
- en: unused
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未使用
- en: 'Deprecated since version 0.9: The [`IdentifierPreparer.quote.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") parameter is deprecated and
    will be removed in a future release. This flag has no effect on the behavior of
    the [`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") method; please refer to [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本0.9开始弃用：[`IdentifierPreparer.quote.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") 参数已弃用，并将在将来的版本中移除。此标志对[`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote")方法的行为没有影响；请参考[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。
- en: '[PRE429]'
  id: totrans-1614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: Quote an identifier.
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 引用标识符。
- en: Subclasses should override this to provide database-dependent quoting behavior.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 子类应重写此方法以提供特定于数据库的引号行为。
- en: '[PRE430]'
  id: totrans-1617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: Conditionally quote a schema name.
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 有条件地引用模式名称。
- en: The name is quoted if it is a reserved word, contains quote-necessary characters,
    or is an instance of [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") which includes `quote` set to `True`.
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: 如果名称是保留字，包含引号必要字符，或是包含`quote`设置为`True`的[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")的实例，则对名称进行引用。
- en: Subclasses can override this to provide database-dependent quoting behavior
    for schema names.
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 子类可以重写此方法以提供特定于数据库的模式名称引用行为。
- en: 'Parameters:'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`schema` – string schema name'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schema` – 字符串模式名称'
- en: '`force` –'
  id: totrans-1623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force` –'
- en: unused
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 未使用
- en: 'Deprecated since version 0.9: The [`IdentifierPreparer.quote_schema.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema") parameter is deprecated
    and will be removed in a future release. This flag has no effect on the behavior
    of the [`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") method; please refer to [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本0.9开始弃用：[`IdentifierPreparer.quote_schema.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema") 参数已弃用，并将在将来的版本中移除。此标志对[`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote")方法的行为没有影响；请参考[`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")。
- en: '[PRE431]'
  id: totrans-1626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: Return the .schema attribute for an object.
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象的.schema属性。
- en: For the default IdentifierPreparer, the schema for an object is always the value
    of the “.schema” attribute. if the preparer is replaced with one that has a non-empty
    schema_translate_map, the value of the “.schema” attribute is rendered a symbol
    that will be converted to a real schema name from the mapping post-compile.
  id: totrans-1628
  prefs: []
  type: TYPE_NORMAL
  zh: 对于默认的IdentifierPreparer，对象的模式始终是“.schema”属性的值。如果准备器被替换为具有非空schema_translate_map的准备器，则“.schema”属性的值将被呈现为一个符号，该符号将在编译后从映射转换为真实模式名称。
- en: '[PRE432]'
  id: totrans-1629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Unpack ‘schema.table.column’-like strings into components.
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 将类似‘schema.table.column’的字符串解包成组件。
- en: '[PRE433]'
  id: totrans-1631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: keyword sequence filter.
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字序列过滤器。
- en: a filter for elements that are intended to represent keyword sequences, such
    as “INITIALLY”, “INITIALLY DEFERRED”, etc. no special characters should be present.
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示关键字序列的元素的过滤器，例如“INITIALLY”，“INITIALLY DEFERRED”等。不应包含任何特殊字符。
- en: New in version 1.3.
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: '[PRE434]'
  id: totrans-1635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: Default implementation of [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled").
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")的默认实现。'
- en: Compiles [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects into SQL strings.
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")对象编译成SQL字符串。
- en: '**Members**'
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.sql.compiler.SQLCompiler.__init__), [ansi_bind_rules](#sqlalchemy.sql.compiler.SQLCompiler.ansi_bind_rules),
    [bind_names](#sqlalchemy.sql.compiler.SQLCompiler.bind_names), [bindname_escape_characters](#sqlalchemy.sql.compiler.SQLCompiler.bindname_escape_characters),
    [binds](#sqlalchemy.sql.compiler.SQLCompiler.binds), [bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.bindtemplate),
    [compilation_bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.compilation_bindtemplate),
    [construct_expanded_state()](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state),
    [construct_params()](#sqlalchemy.sql.compiler.SQLCompiler.construct_params), [current_executable](#sqlalchemy.sql.compiler.SQLCompiler.current_executable),
    [default_from()](#sqlalchemy.sql.compiler.SQLCompiler.default_from), [delete_extra_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.delete_extra_from_clause),
    [effective_returning](#sqlalchemy.sql.compiler.SQLCompiler.effective_returning),
    [escaped_bind_names](#sqlalchemy.sql.compiler.SQLCompiler.escaped_bind_names),
    [get_select_precolumns()](#sqlalchemy.sql.compiler.SQLCompiler.get_select_precolumns),
    [group_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause), [has_out_parameters](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters),
    [implicit_returning](#sqlalchemy.sql.compiler.SQLCompiler.implicit_returning),
    [insert_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.insert_prefetch), [insert_single_values_expr](#sqlalchemy.sql.compiler.SQLCompiler.insert_single_values_expr),
    [isupdate](#sqlalchemy.sql.compiler.SQLCompiler.isupdate), [literal_execute_params](#sqlalchemy.sql.compiler.SQLCompiler.literal_execute_params),
    [order_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause), [params](#sqlalchemy.sql.compiler.SQLCompiler.params),
    [positiontup](#sqlalchemy.sql.compiler.SQLCompiler.positiontup), [post_compile_params](#sqlalchemy.sql.compiler.SQLCompiler.post_compile_params),
    [postfetch](#sqlalchemy.sql.compiler.SQLCompiler.postfetch), [postfetch_lastrowid](#sqlalchemy.sql.compiler.SQLCompiler.postfetch_lastrowid),
    [render_literal_value()](#sqlalchemy.sql.compiler.SQLCompiler.render_literal_value),
    [render_table_with_column_in_update_from](#sqlalchemy.sql.compiler.SQLCompiler.render_table_with_column_in_update_from),
    [returning](#sqlalchemy.sql.compiler.SQLCompiler.returning), [returning_precedes_values](#sqlalchemy.sql.compiler.SQLCompiler.returning_precedes_values),
    [sql_compiler](#sqlalchemy.sql.compiler.SQLCompiler.sql_compiler), [stack](#sqlalchemy.sql.compiler.SQLCompiler.stack),
    [translate_select_structure](#sqlalchemy.sql.compiler.SQLCompiler.translate_select_structure),
    [update_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_from_clause),
    [update_limit_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_limit_clause),
    [update_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.update_prefetch), [update_tables_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_tables_clause),
    [visit_override_binds()](#sqlalchemy.sql.compiler.SQLCompiler.visit_override_binds)'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.sql.compiler.SQLCompiler.__init__), [ansi_bind_rules](#sqlalchemy.sql.compiler.SQLCompiler.ansi_bind_rules),
    [bind_names](#sqlalchemy.sql.compiler.SQLCompiler.bind_names), [bindname_escape_characters](#sqlalchemy.sql.compiler.SQLCompiler.bindname_escape_characters),
    [binds](#sqlalchemy.sql.compiler.SQLCompiler.binds), [bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.bindtemplate),
    [compilation_bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.compilation_bindtemplate),
    [construct_expanded_state()](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state),
    [construct_params()](#sqlalchemy.sql.compiler.SQLCompiler.construct_params), [current_executable](#sqlalchemy.sql.compiler.SQLCompiler.current_executable),
    [default_from()](#sqlalchemy.sql.compiler.SQLCompiler.default_from), [delete_extra_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.delete_extra_from_clause),
    [effective_returning](#sqlalchemy.sql.compiler.SQLCompiler.effective_returning),
    [escaped_bind_names](#sqlalchemy.sql.compiler.SQLCompiler.escaped_bind_names),
    [get_select_precolumns()](#sqlalchemy.sql.compiler.SQLCompiler.get_select_precolumns),
    [group_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause), [has_out_parameters](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters),
    [implicit_returning](#sqlalchemy.sql.compiler.SQLCompiler.implicit_returning),
    [insert_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.insert_prefetch), [insert_single_values_expr](#sqlalchemy.sql.compiler.SQLCompiler.insert_single_values_expr),
    [isupdate](#sqlalchemy.sql.compiler.SQLCompiler.isupdate), [literal_execute_params](#sqlalchemy.sql.compiler.SQLCompiler.literal_execute_params),
    [order_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause), [params](#sqlalchemy.sql.compiler.SQLCompiler.params),
    [positiontup](#sqlalchemy.sql.compiler.SQLCompiler.positiontup), [post_compile_params](#sqlalchemy.sql.compiler.SQLCompiler.post_compile_params),
    [postfetch](#sqlalchemy.sql.compiler.SQLCompiler.postfetch), [postfetch_lastrowid](#sqlalchemy.sql.compiler.SQLCompiler.postfetch_lastrowid),
    [render_literal_value()](#sqlalchemy.sql.compiler.SQLCompiler.render_literal_value),
    [render_table_with_column_in_update_from](#sqlalchemy.sql.compiler.SQLCompiler.render_table_with_column_in_update_from),
    [returning](#sqlalchemy.sql.compiler.SQLCompiler.returning), [returning_precedes_values](#sqlalchemy.sql.compiler.SQLCompiler.returning_precedes_values),
    [sql_compiler](#sqlalchemy.sql.compiler.SQLCompiler.sql_compiler), [stack](#sqlalchemy.sql.compiler.SQLCompiler.stack),
    [translate_select_structure](#sqlalchemy.sql.compiler.SQLCompiler.translate_select_structure),
    [update_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_from_clause),
    [update_limit_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_limit_clause),
    [update_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.update_prefetch), [update_tables_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_tables_clause),
    [visit_override_binds()](#sqlalchemy.sql.compiler.SQLCompiler.visit_override_binds)'
- en: '**Class signature**'
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") ([`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled"))
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")（[`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")）
- en: '[PRE435]'
  id: totrans-1642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: Construct a new [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object.
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")对象。
- en: 'Parameters:'
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to be used'
  id: totrans-1645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 要使用的[`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")'
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled'
  id: totrans-1646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 要编译的[`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")'
- en: '`column_keys` – a list of column names to be compiled into an INSERT or UPDATE
    statement.'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_keys` – 一个列名列表，将被编译成一个INSERT或UPDATE语句。'
- en: '`for_executemany` – whether INSERT / UPDATE statements should expect that they
    are to be invoked in an “executemany” style, which may impact how the statement
    will be expected to return the values of defaults and autoincrement / sequences
    and similar. Depending on the backend and driver in use, support for retrieving
    these values may be disabled which means SQL expressions may be rendered inline,
    RETURNING may not be rendered, etc.'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for_executemany` – INSERT / UPDATE语句是否应该期望以“executemany”样式调用，这可能会影响语句如何期望返回默认值和自增/序列等的值。根据使用的后端和驱动程序，检索这些值的支持可能已禁用，这意味着SQL表达式可能会被内联渲染，RETURNING可能不会被渲染等。'
- en: '`kwargs` – additional keyword arguments to be consumed by the superclass.'
  id: totrans-1649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` – 要被超类消耗的额外关键字参数。'
- en: '[PRE436]'
  id: totrans-1650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: SQL 92 doesn’t allow bind parameters to be used in the columns clause of a SELECT,
    nor does it allow ambiguous expressions like “? = ?”. A compiler subclass can
    set this flag to False if the target driver/DB enforces this
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 92不允许在SELECT的列子句中使用绑定参数，也不允许模糊表达式如“? = ?”。如果目标驱动程序/数据库强制执行此规则，编译器子类可以将此标志设置为False
- en: '[PRE437]'
  id: totrans-1652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: a dictionary of BindParameter instances to “compiled” names that are actually
    present in the generated SQL
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含“编译”名称的BindParameter实例字典，这些名称实际上出现在生成的SQL中
- en: '[PRE438]'
  id: totrans-1654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: A mapping (e.g. dict or similar) containing a lookup of characters keyed to
    replacement characters which will be applied to all ‘bind names’ used in SQL statements
    as a form of ‘escaping’; the given characters are replaced entirely with the ‘replacement’
    character when rendered in the SQL statement, and a similar translation is performed
    on the incoming names used in parameter dictionaries passed to methods like [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 一个映射（例如字典或类似结构），包含一个字符查找表，键为替换字符，这些字符将被应用于所有SQL语句中使用的“绑定名称”作为一种“转义”；当在SQL语句中呈现时，给定字符将完全替换为“替换”字符，并且对传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")等方法的参数字典中使用的传入名称执行类似的转换。
- en: This allows bound parameter names used in [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") and other constructs to have any arbitrary
    characters present without any concern for characters that aren’t allowed at all
    on the target database.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许在[`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")和其他构造中使用的绑定参数名称具有任意字符，而不必担心目标数据库上根本不允许的字符。
- en: Third party dialects can establish their own dictionary here to replace the
    default mapping, which will ensure that the particular characters in the mapping
    will never appear in a bound parameter name.
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方方言可以在此处建立自己的字典以替换默认映射，这将确保映射中的特定字符永远不会出现在绑定参数名称中。
- en: The dictionary is evaluated at **class creation time**, so cannot be modified
    at runtime; it must be present on the class when the class is first declared.
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在**类创建时**进行评估，因此不能在运行时修改；在类首次声明时，必须存在于类上。
- en: Note that for dialects that have additional bound parameter rules such as additional
    restrictions on leading characters, the `SQLCompiler.bindparam_string()` method
    may need to be augmented. See the cx_Oracle compiler for an example of this.
  id: totrans-1659
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于具有额外绑定参数规则的方言，例如对前导字符有额外限制的方言，可能需要增强`SQLCompiler.bindparam_string()`方法。请参考cx_Oracle编译器的示例。
- en: New in version 2.0.0rc1.
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.0rc1中新增。
- en: '[PRE439]'
  id: totrans-1661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: a dictionary of bind parameter keys to BindParameter instances.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将绑定参数键与BindParameter实例关联的字典。
- en: '[PRE440]'
  id: totrans-1663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: template to render bound parameters based on paramstyle.
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 根据paramstyle渲染绑定参数的模板。
- en: '[PRE441]'
  id: totrans-1665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: template used by compiler to render parameters before positional paramstyle
    application
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器在应用位置参数样式之前渲染参数时使用的模板。
- en: '[PRE442]'
  id: totrans-1667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: Return a new [`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")
    for a given parameter set.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定参数集返回一个新的[`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")。
- en: For queries that use “expanding” or other late-rendered parameters, this method
    will provide for both the finalized SQL string as well as the parameters that
    would be used for a particular parameter set.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“扩展”或其他晚期渲染参数的查询，此方法将提供特定参数集的最终SQL字符串以及将用于该特定参数集的参数。
- en: New in version 2.0.0rc1.
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0.0rc1起新增。
- en: '[PRE443]'
  id: totrans-1671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: return a dictionary of bind parameter keys and values
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个绑定参数键和值的字典。
- en: '[PRE444]'
  id: totrans-1673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: Return the current ‘executable’ that is being compiled.
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在编译的“可执行”。
- en: This is currently the [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`CompoundSelect`](selectable.html#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") object that is being compiled. Specifically
    it’s assigned to the `self.stack` list of elements.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: 当前正在编译的是[`Select`](selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")、[`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")、[`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")、[`CompoundSelect`](selectable.html#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect")对象。具体来说，它被分配给`self.stack`元素列表。
- en: When a statement like the above is being compiled, it normally is also assigned
    to the `.statement` attribute of the `Compiler` object. However, all SQL constructs
    are ultimately nestable, and this attribute should never be consulted by a `visit_`
    method, as it is not guaranteed to be assigned nor guaranteed to correspond to
    the current statement being compiled.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译类似上述语句时，通常也会分配给`Compiler`对象的`.statement`属性。然而，所有SQL构造最终都是可嵌套的，`visit_`方法永远不应该查询此属性，因为不能保证已分配，也不能保证与当前正在编译的语句对应。
- en: 'New in version 1.3.21: For compatibility with previous versions, use the following
    recipe:'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3.21起新增：为了与旧版本兼容，请使用以下方法：
- en: '[PRE445]'
  id: totrans-1678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: For versions 1.4 and above, ensure only .current_executable is used; the format
    of “self.stack” may change.
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1.4及以上版本，请确保仅使用`.current_executable`；“self.stack”的格式可能会更改。
- en: '[PRE446]'
  id: totrans-1680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: Called when a SELECT statement has no froms, and no FROM clause is to be appended.
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 当SELECT语句没有froms，并且不需要附加FROM子句时调用。
- en: Gives Oracle a chance to tack on a `FROM DUAL` to the string output.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: 给Oracle一个机会将`FROM DUAL`附加到字符串输出中。
- en: '[PRE447]'
  id: totrans-1683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: Provide a hook to override the generation of an DELETE..FROM clause.
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个钩子来覆盖生成DELETE..FROM子句。
- en: This can be used to implement DELETE..USING for example.
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来实现DELETE..USING等。
- en: MySQL and MSSQL override this.
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL和MSSQL会覆盖此方法。
- en: '[PRE448]'
  id: totrans-1687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: The effective “returning” columns for INSERT, UPDATE or DELETE.
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT、UPDATE或DELETE的有效“返回”列。
- en: This is either the so-called “implicit returning” columns which are calculated
    by the compiler on the fly, or those present based on what’s present in `self.statement._returning`
    (expanded into individual columns using the `._all_selected_columns` attribute)
    i.e. those set explicitly using the [`UpdateBase.returning()`](dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所谓的“隐式返回”列，编译器根据需要在运行时计算的列，或者基于`self.statement._returning`中存在的列（使用`._all_selected_columns`属性展开为单独的列），即使用[`UpdateBase.returning()`](dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")方法明确设置的列。
- en: New in version 2.0.
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0起新增。
- en: '[PRE449]'
  id: totrans-1691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: Late escaping of bound parameter names that has to be converted to the original
    name when looking in the parameter dictionary.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 晚期转义绑定参数名称，必须在查看参数字典时转换为原始名称。
- en: '[PRE450]'
  id: totrans-1693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Called when building a `SELECT` statement, position is just before column list.
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建`SELECT`语句时调用，位置位于列列表之前。
- en: '[PRE451]'
  id: totrans-1695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: allow dialects to customize how GROUP BY is rendered.
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 允许方言自定义如何渲染GROUP BY。
- en: '[PRE452]'
  id: totrans-1697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: if True, there are bindparam() objects that have the isoutparam flag set.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则存在具有 isoutparam 标志设置的 bindparam() 对象。
- en: '[PRE453]'
  id: totrans-1699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: list of “implicit” returning columns for a toplevel INSERT or UPDATE statement,
    used to receive newly generated values of columns.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 用于顶级 INSERT 或 UPDATE 语句的“隐式”返回列的列表，用于接收新生成的列值。
- en: 'New in version 2.0: `implicit_returning` replaces the previous `returning`
    collection, which was not a generalized RETURNING collection and instead was in
    fact specific to the “implicit returning” feature.'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始：`implicit_returning` 替换了先前的 `returning` 集合，后者不是一个通用的 RETURNING 集合，而实际上是特定于“隐式返回”功能的。
- en: '[PRE454]'
  id: totrans-1702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: list of columns for which default values should be evaluated before an INSERT
    takes place
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，应在执行 INSERT 之前评估默认值的列。
- en: '[PRE455]'
  id: totrans-1704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: When an INSERT is compiled with a single set of parameters inside a VALUES expression,
    the string is assigned here, where it can be used for insert batching schemes
    to rewrite the VALUES expression.
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: 当 INSERT 与一个参数集合编译到一个 VALUES 表达式内时，该字符串被分配在此处，可以在插入批处理方案中用于重写 VALUES 表达式。
- en: New in version 1.3.8.
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.3.8 开始。
- en: 'Changed in version 2.0: This collection is no longer used by SQLAlchemy’s built-in
    dialects, in favor of the currently internal `_insertmanyvalues` collection that
    is used only by [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler").'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：此集合不再由 SQLAlchemy 内置方言使用，而是使用仅由 [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 内部当前使用的 `_insertmanyvalues` 集合。
- en: '[PRE456]'
  id: totrans-1708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: class-level defaults which can be set at the instance level to define if this
    Compiled instance represents INSERT/UPDATE/DELETE
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 类级别的默认值，可以在实例级别设置以定义此 Compiled 实例是否表示 INSERT/UPDATE/DELETE。
- en: '[PRE457]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: bindparameter objects that are rendered as literal values at statement execution
    time.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句执行时将渲染为文字值的 bindparameter 对象。
- en: '[PRE458]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: allow dialects to customize how ORDER BY is rendered.
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 允许方言定制如何呈现 ORDER BY。
- en: '[PRE459]'
  id: totrans-1714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: Return the bind param dictionary embedded into this compiled object, for those
    values that are present.
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 返回嵌入到此编译对象中的绑定参数字典，用于那些存在的值。
- en: See also
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string) - includes a usage
    example for debugging use cases.'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)
    - 包含用于调试用例的用法示例。'
- en: '[PRE460]'
  id: totrans-1718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: for a compiled construct that uses a positional paramstyle, will be a sequence
    of strings, indicating the names of bound parameters in order.
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用位置参数风格的已编译构造，将是一个字符串序列，指示按顺序绑定参数的名称。
- en: This is used in order to render bound parameters in their correct order, and
    is combined with the `Compiled.params` dictionary to render parameters.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 用于以正确顺序呈现绑定参数，并与 `Compiled.params` 字典结合使用以呈现参数。
- en: This sequence always contains the unescaped name of the parameters.
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 此序列始终包含参数的未转义名称。
- en: See also
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string) - includes a usage
    example for debugging use cases.'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式呈现为字符串，可能包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)
    - 包含用于调试用例的用法示例。'
- en: '[PRE461]'
  id: totrans-1724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: bindparameter objects that are rendered as bound parameter placeholders at statement
    execution time.
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句执行时将呈现为绑定参数占位符的 bindparameter 对象。
- en: '[PRE462]'
  id: totrans-1726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: list of columns that can be post-fetched after INSERT or UPDATE to receive server-updated
    values
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，可在 INSERT 或 UPDATE 后进行后提取以接收服务器更新的值。
- en: '[PRE463]'
  id: totrans-1728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: if True, and this in insert, use cursor.lastrowid to populate result.inserted_primary_key.
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，并且这是插入操作，则使用 cursor.lastrowid 来填充 result.inserted_primary_key。
- en: '[PRE464]'
  id: totrans-1730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Render the value of a bind parameter as a quoted literal.
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 将绑定参数的值呈现为带引号的文字。
- en: This is used for statement sections that do not accept bind parameters on the
    target driver/database.
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于目标驱动程序/数据库上不接受绑定参数的语句部分。
- en: This should be implemented by subclasses using the quoting services of the DBAPI.
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: 应由子类使用 DBAPI 的引用服务来实现此功能。
- en: '[PRE465]'
  id: totrans-1734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: set to True classwide to indicate the SET clause in a multi-table UPDATE statement
    should qualify columns with the table name (i.e. MySQL only)
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 True 可以类别地表示多表 UPDATE 语句中的 SET 子句应该使用表名限定列（即仅适用于 MySQL）。
- en: '[PRE466]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: backwards compatibility; returns the effective_returning collection.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 向后兼容性；返回有效的返回集合。
- en: '[PRE467]'
  id: totrans-1738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: set to True classwide to generate RETURNING clauses before the VALUES or WHERE
    clause (i.e. MSSQL)
  id: totrans-1739
  prefs: []
  type: TYPE_NORMAL
  zh: 设置为 True 可以类别地在 VALUES 或 WHERE 子句之前生成 RETURNING 子句（即 MSSQL）。
- en: '[PRE468]'
  id: totrans-1740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-1741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: major statements such as SELECT, INSERT, UPDATE, DELETE are tracked in this
    stack using an entry format.
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 如 SELECT、INSERT、UPDATE、DELETE 等主要语句使用条目格式在此堆栈中进行跟踪。
- en: '[PRE470]'
  id: totrans-1743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: if not `None`, should be a callable which accepts `(select_stmt, **kw)` and
    returns a select object. this is used for structural changes mostly to accommodate
    for LIMIT/OFFSET schemes
  id: totrans-1744
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是 `None`，应该是一个可调用对象，接受 `(select_stmt, **kw)` 并返回一个 select 对象。这主要用于结构性变更，主要是为了适应
    LIMIT/OFFSET 方案。
- en: '[PRE471]'
  id: totrans-1745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Provide a hook to override the generation of an UPDATE..FROM clause.
  id: totrans-1746
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个钩子来覆盖生成 UPDATE..FROM 子句。
- en: MySQL and MSSQL override this.
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MSSQL 覆盖此项。
- en: '[PRE472]'
  id: totrans-1748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: Provide a hook for MySQL to add LIMIT to the UPDATE
  id: totrans-1749
  prefs: []
  type: TYPE_NORMAL
  zh: 为 MySQL 提供一个钩子以在 UPDATE 中添加 LIMIT
- en: '[PRE473]'
  id: totrans-1750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: list of columns for which onupdate default values should be evaluated before
    an UPDATE takes place
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UPDATE 发生之前应评估 onupdate 默认值的列列表
- en: '[PRE474]'
  id: totrans-1752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: Provide a hook to override the initial table clause in an UPDATE statement.
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个钩子来覆盖 UPDATE 语句中的初始表子句。
- en: MySQL overrides this.
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 覆盖此项。
- en: '[PRE475]'
  id: totrans-1755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: SQL compile the nested element of an _OverrideBinds with bindparams swapped
    out.
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 编译 OverrideBinds 的嵌套元素，并交换绑定参数。
- en: The _OverrideBinds is not normally expected to be compiled; it is meant to be
    used when an already cached statement is to be used, the compilation was already
    performed, and only the bound params should be swapped in at execution time.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: OverrideBinds 通常不会被编译；它的使用是指当已经缓存的语句要被使用时，编译已经执行过，只需在执行时交换绑定参数。
- en: 'However, there are test cases that exericise this object, and additionally
    the ORM subquery loader is known to feed in expressions which include this construct
    into new queries (discovered in #11173), so it has to do the right thing at compile
    time as well.'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，有测试用例会使用这个对象，而且 ORM 子查询加载器已知会在新查询中添加包含此结构的表达式（在 #11173 中发现），所以它也必须在编译时做正确的事情。'
- en: '[PRE476]'
  id: totrans-1759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: A [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    subclass which allows a small selection of non-standard SQL features to render
    into a string value.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    的一个子类，允许一小部分非标准 SQL 功能渲染为字符串值。'
- en: The [`StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler "sqlalchemy.sql.compiler.StrSQLCompiler")
    is invoked whenever a Core expression element is directly stringified without
    calling upon the [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") method. It can render a limited
    set of non-standard SQL constructs to assist in basic stringification, however
    for more substantial custom or dialect-specific SQL constructs, it will be necessary
    to make use of [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") directly.
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Core 表达式元素直接字符串化而不调用 [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") 方法时，将调用 [`StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler
    "sqlalchemy.sql.compiler.StrSQLCompiler")。它可以渲染一组有限的非标准 SQL 构造以协助基本字符串化，但是对于更重要的自定义或方言特定的
    SQL 构造，需要直接使用 [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile")。
- en: See also
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  id: totrans-1763
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何将 SQL 表达式呈现为字符串，可能还包含内联的绑定参数？](../faq/sqlexpressions.html#faq-sql-expression-string)'
- en: '**Members**'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[delete_extra_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.delete_extra_from_clause),
    [update_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.update_from_clause)'
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: '[delete_extra_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.delete_extra_from_clause)，[update_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.update_from_clause)'
- en: '**Class signature**'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.compiler.StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler
    "sqlalchemy.sql.compiler.StrSQLCompiler") ([`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler"))
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.compiler.StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler
    "sqlalchemy.sql.compiler.StrSQLCompiler")（[`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")）。
- en: '[PRE477]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: Provide a hook to override the generation of an DELETE..FROM clause.
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个钩子来覆盖生成 DELETE..FROM 子句。
- en: This can be used to implement DELETE..USING for example.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 这可用于实现 DELETE..USING 等。
- en: MySQL and MSSQL override this.
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MSSQL 覆盖此项。
- en: '[PRE478]'
  id: totrans-1772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: Provide a hook to override the generation of an UPDATE..FROM clause.
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个钩子来覆盖生成 UPDATE..FROM 子句。
- en: MySQL and MSSQL override this.
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 和 MSSQL 覆盖此项。
- en: '[PRE479]'
  id: totrans-1775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: Interface of an adapted connection object to support the DBAPI protocol.
  id: totrans-1776
  prefs: []
  type: TYPE_NORMAL
  zh: 支持 DBAPI 协议的适配连接对象的接口。
- en: Used by asyncio dialects to provide a sync-style pep-249 facade on top of the
    asyncio connection/cursor API provided by the driver.
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 asyncio 方言，以在驱动程序提供的 asyncio 连接/游标 API 之上提供同步风格的 pep-249 门面。
- en: '**Members**'
  id: totrans-1778
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[driver_connection](#sqlalchemy.engine.AdaptedConnection.driver_connection),
    [run_async()](#sqlalchemy.engine.AdaptedConnection.run_async)'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: '[driver_connection](#sqlalchemy.engine.AdaptedConnection.driver_connection),
    [run_async()](#sqlalchemy.engine.AdaptedConnection.run_async)'
- en: New in version 1.4.24.
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中的新功能。
- en: '[PRE480]'
  id: totrans-1781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: The connection object as returned by the driver after a connect.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: 连接对象是驱动程序在连接后返回的对象。
- en: '[PRE481]'
  id: totrans-1783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: Run the awaitable returned by the given function, which is passed the raw asyncio
    driver connection.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 运行给定函数返回的可等待对象，该函数接收原始的 asyncio 驱动程序连接。
- en: This is used to invoke awaitable-only methods on the driver connection within
    the context of a “synchronous” method, like a connection pool event handler.
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 用于在“同步”方法的上下文中调用驱动程序连接上的仅可等待方法，例如连接池事件处理程序。
- en: 'E.g.:'
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE482]'
  id: totrans-1787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: New in version 1.4.30.
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.30 中的新功能。
- en: See also
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using awaitable-only driver methods in connection pool and other events](../orm/extensions/asyncio.html#asyncio-events-run-async)'
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接池和其他事件中使用仅可等待的驱动程序方法](../orm/extensions/asyncio.html#asyncio-events-run-async)'
