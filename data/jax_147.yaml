- en: jax.experimental.sparse module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.experimental.sparse 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.experimental.sparse.html`](https://jax.readthedocs.io/en/latest/jax.experimental.sparse.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[jax.readthedocs.io/en/latest/jax.experimental.sparse.html](https://jax.readthedocs.io/en/latest/jax.experimental.sparse.html)'
- en: The `jax.experimental.sparse` module includes experimental support for sparse
    matrix operations in JAX. It is under active development, and the API is subject
    to change. The primary interfaces made available are the `BCOO` sparse array type,
    and the `sparsify()` transform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.experimental.sparse` 模块包括对 JAX 中稀疏矩阵操作的实验性支持。它正在积极开发中，API 可能会更改。主要提供的接口是
    `BCOO` 稀疏数组类型和 `sparsify()` 变换。'
- en: Batched-coordinate (BCOO) sparse matrices
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 批量坐标（BCOO）稀疏矩阵
- en: The main high-level sparse object currently available in JAX is the `BCOO`,
    or *batched coordinate* sparse array, which offers a compressed storage format
    compatible with JAX transformations, in particular JIT (e.g. `jax.jit()`), batching
    (e.g. `jax.vmap()`) and autodiff (e.g. `jax.grad()`).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 中目前主要的高级稀疏对象是 `BCOO`，或者 *批量坐标* 稀疏数组，它提供与 JAX 变换兼容的压缩存储格式，特别是 JIT（例如 `jax.jit()`）、批处理（例如
    `jax.vmap()`）和自动微分（例如 `jax.grad()`）。
- en: 'Here is an example of creating a sparse array from a dense array:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个从稠密数组创建稀疏数组的例子：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Convert back to a dense array with the `todense()` method:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `todense()` 方法转换回稠密数组：
- en: '[PRE4]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The BCOO format is a somewhat modified version of the standard COO format,
    and the dense representation can be seen in the `data` and `indices` attributes:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: BCOO 格式是标准 COO 格式的一种略微修改版本，密集表示可以在 `data` 和 `indices` 属性中看到：
- en: '[PRE5]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'BCOO objects have familiar array-like attributes, as well as sparse-specific
    attributes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: BCOO 对象具有类似数组的属性，以及稀疏特定的属性：
- en: '[PRE7]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'BCOO objects also implement a number of array-like methods, to allow you to
    use them directly within jax programs. For example, here we compute the transposed
    matrix-vector product:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: BCOO 对象还实现了许多类数组的方法，允许您直接在 jax 程序中使用它们。例如，在这里我们计算转置矩阵向量乘积：
- en: '[PRE11]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'BCOO objects are designed to be compatible with JAX transforms, including `jax.jit()`,
    `jax.vmap()`, `jax.grad()`, and others. For example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: BCOO 对象设计成与 JAX 变换兼容，包括 `jax.jit()`、`jax.vmap()`、`jax.grad()` 等。例如：
- en: '[PRE14]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note, however, that under normal circumstances `jax.numpy` and `jax.lax` functions
    do not know how to handle sparse matrices, so attempting to compute things like
    `jnp.dot(M_sp.T, y)` will result in an error (however, see the next section).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，正常情况下，`jax.numpy` 和 `jax.lax` 函数不知道如何处理稀疏矩阵，因此尝试计算诸如 `jnp.dot(M_sp.T, y)`
    的东西将导致错误（但请参见下一节）。
- en: Sparsify transform
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏化变换
- en: An overarching goal of the JAX sparse implementation is to provide a means to
    switch from dense to sparse computation seamlessly, without having to modify the
    dense implementation. This sparse experiment accomplishes this through the `sparsify()`
    transform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 稀疏实现的一个主要目标是提供一种无缝从密集到稀疏计算切换的方法，而无需修改密集实现。这个稀疏实验通过 `sparsify()` 变换实现了这一目标。
- en: 'Consider this function, which computes a more complicated result from a matrix
    and a vector input:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个函数，它从矩阵和向量输入计算更复杂的结果：
- en: '[PRE16]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Were we to pass a sparse matrix to this directly, it would result in an error,
    because `jnp` functions do not recognize sparse inputs. However, with `sparsify()`,
    we get a version of this function that does accept sparse matrices:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们直接传递稀疏矩阵到这个函数，将会导致错误，因为 `jnp` 函数不识别稀疏输入。然而，使用 `sparsify()`，我们得到一个接受稀疏矩阵的函数版本：
- en: '[PRE17]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Support for `sparsify()` includes a large number of the most common primitives,
    including:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`sparsify()` 支持包括许多最常见的原语，例如：'
- en: generalized (batched) matrix products & einstein summations (`dot_general_p`)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 广义（批量）矩阵乘积和爱因斯坦求和（`dot_general_p`）
- en: zero-preserving elementwise binary operations (e.g. `add_p`, `mul_p`, etc.)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持零的逐元素二元操作（例如 `add_p`、`mul_p` 等）
- en: zero-preserving elementwise unary operations (e.g. `abs_p`, `jax.lax.neg_p`,
    etc.)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持零的逐元素一元操作（例如 `abs_p`、`jax.lax.neg_p` 等）
- en: summation reductions (`reduce_sum_p`)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 求和约简（`reduce_sum_p`）
- en: general indexing operations (`slice_p`, lax.dynamic_slice_p, lax.gather_p)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用索引操作（`slice_p`、`lax.dynamic_slice_p`、`lax.gather_p`）
- en: concatenation and stacking (`concatenate_p`)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接和堆叠（`concatenate_p`）
- en: transposition & reshaping ((`transpose_p`, `reshape_p`, `squeeze_p`, `broadcast_in_dim_p`)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转置和重塑（`transpose_p`、`reshape_p`、`squeeze_p`、`broadcast_in_dim_p`）
- en: some higher-order functions (`cond_p`, `while_p`, `scan_p`)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些高阶函数（`cond_p`、`while_p`、`scan_p`）
- en: some simple 1D convolutions (`conv_general_dilated_p`)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些简单的 1D 卷积（`conv_general_dilated_p`）
- en: Nearly any `jax.numpy` function that lowers to these supported primitives can
    be used within a sparsify transform to operate on sparse arrays. This set of primitives
    is enough to enable relatively sophisticated sparse workflows, as the next section
    will show.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎任何 `jax.numpy` 函数在 `sparsify` 转换中都可以使用，以操作稀疏数组。这组基元足以支持相对复杂的稀疏工作流程，如下一节所示。
- en: 'Example: sparse logistic regression'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：稀疏逻辑回归
- en: 'As an example of a more complicated sparse workflow, let’s consider a simple
    logistic regression implemented in JAX. Notice that the following implementation
    has no reference to sparsity:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为更复杂稀疏工作流的示例，让我们考虑在 JAX 中实现的简单逻辑回归。请注意，以下实现与稀疏性无关：
- en: '[PRE19]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This returns the best-fit parameters of a dense logistic regression problem.
    To fit the same model on sparse data, we can apply the `sparsify()` transform:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这会返回密集逻辑回归问题的最佳拟合参数。要在稀疏数据上拟合相同的模型，我们可以应用`sparsify()`转换：
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Sparse API Reference
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏 API 参考
- en: '| `sparsify`(f[, use_tracer]) | Experimental sparsification transform. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `sparsify`(f[, use_tracer]) | 实验性稀疏化转换。 |'
- en: '| `grad`(fun[, argnums, has_aux]) | Sparse-aware version of `jax.grad()` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `grad`(fun[, argnums, has_aux]) | `jax.grad()` 的稀疏版本 |'
- en: '| `value_and_grad`(fun[, argnums, has_aux]) | Sparse-aware version of `jax.value_and_grad()`
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `value_and_grad`(fun[, argnums, has_aux]) | `jax.value_and_grad()` 的稀疏版本
    |'
- en: '| `empty`(shape[, dtype, index_dtype, sparse_format]) | Create an empty sparse
    array. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `empty`(shape[, dtype, index_dtype, sparse_format]) | 创建空稀疏数组。 |'
- en: '| `eye`(N[, M, k, dtype, index_dtype, sparse_format]) | Create 2D sparse identity
    matrix. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `eye`(N[, M, k, dtype, index_dtype, sparse_format]) | 创建二维稀疏单位矩阵。 |'
- en: '| `todense`(arr) | Convert input to a dense matrix. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `todense`(arr) | 将输入转换为密集矩阵。 |'
- en: '| `random_bcoo`(key, shape, *[, dtype, ...]) | Generate a random BCOO matrix.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `random_bcoo`(key, shape, *[, dtype, ...]) | 生成随机 BCOO 矩阵。 |'
- en: '| `JAXSparse`(args, *, shape) | Base class for high-level JAX sparse objects.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `JAXSparse`(args, *, shape) | 高级 JAX 稀疏对象的基类。 |'
- en: BCOO Data Structure
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BCOO 数据结构
- en: '`BCOO` is the *Batched COO format*, and is the main sparse data structure implemented
    in `jax.experimental.sparse`. Its operations are compatible with JAX’s core transformations,
    including batching (e.g. `jax.vmap()`) and autodiff (e.g. `jax.grad()`).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`BCOO` 是 *Batched COO format*，是在 `jax.experimental.sparse` 中实现的主要稀疏数据结构。其操作与
    JAX 的核心转换兼容，包括批处理（例如 `jax.vmap()`）和自动微分（例如 `jax.grad()`）。'
- en: '| `BCOO`(args, *, shape[, indices_sorted, ...]) | Experimental batched COO
    matrix implemented in JAX |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `BCOO`(args, *, shape[, indices_sorted, ...]) | 在 JAX 中实现的实验性批量 COO 矩阵 |'
- en: '| `bcoo_broadcast_in_dim`(mat, *, shape, ...) | Expand the size and rank of
    a BCOO array by duplicating the data. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_broadcast_in_dim`(mat, *, shape, ...) | 通过复制数据来扩展 BCOO 数组的大小和秩。 |'
- en: '| `bcoo_concatenate`(operands, *, dimension) | Sparse implementation of `jax.lax.concatenate()`
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_concatenate`(operands, *, dimension) | `jax.lax.concatenate()` 的稀疏实现
    |'
- en: '| `bcoo_dot_general`(lhs, rhs, *, dimension_numbers) | A general contraction
    operation. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_dot_general`(lhs, rhs, *, dimension_numbers) | 一般的收缩操作。 |'
- en: '| `bcoo_dot_general_sampled`(A, B, indices, *, ...) | A contraction operation
    with output computed at given sparse indices. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_dot_general_sampled`(A, B, indices, *, ...) | 在给定稀疏索引处计算输出的收缩操作。 |'
- en: '| `bcoo_dynamic_slice`(mat, start_indices, ...) | Sparse implementation of
    {func}`jax.lax.dynamic_slice`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_dynamic_slice`(mat, start_indices, ...) | `jax.lax.dynamic_slice` 的稀疏实现。
    |'
- en: '| `bcoo_extract`(sparr, arr, *[, assume_unique]) | Extract values from a dense
    array according to the sparse array''s indices. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_extract`(sparr, arr, *[, assume_unique]) | 根据稀疏数组的索引从密集数组中提取值。 |'
- en: '| `bcoo_fromdense`(mat, *[, nse, n_batch, ...]) | Create BCOO-format sparse
    matrix from a dense matrix. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_fromdense`(mat, *[, nse, n_batch, ...]) | 从密集矩阵创建 BCOO 格式的稀疏矩阵。 |'
- en: '| `bcoo_gather`(operand, start_indices, ...[, ...]) | BCOO version of lax.gather.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_gather`(operand, start_indices, ...[, ...]) | lax.gather 的 BCOO 版本。
    |'
- en: '| `bcoo_multiply_dense`(sp_mat, v) | An element-wise multiplication between
    a sparse and a dense array. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_multiply_dense`(sp_mat, v) | 稀疏数组和密集数组的逐元素乘法。 |'
- en: '| `bcoo_multiply_sparse`(lhs, rhs) | An element-wise multiplication of two
    sparse arrays. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_multiply_sparse`(lhs, rhs) | 两个稀疏数组的逐元素乘法。 |'
- en: '| `bcoo_update_layout`(mat, *[, n_batch, ...]) | Update the storage layout
    (i.e. n_batch & n_dense) of a BCOO matrix. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_update_layout`(mat, *[, n_batch, ...]) | 更新 BCOO 矩阵的存储布局（即 n_batch
    和 n_dense）。 |'
- en: '| `bcoo_reduce_sum`(mat, *, axes) | Sum array element over given axes. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_reduce_sum`(mat, *, axes) | 在给定轴上对数组元素求和。 |'
- en: '| `bcoo_reshape`(mat, *, new_sizes[, dimensions]) | Sparse implementation of
    {func}`jax.lax.reshape`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_reshape`(mat, *, new_sizes[, dimensions]) | {func}`jax.lax.reshape`的稀疏实现。
    |'
- en: '| `bcoo_slice`(mat, *, start_indices, limit_indices) | Sparse implementation
    of {func}`jax.lax.slice`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_slice`(mat, *, start_indices, limit_indices) | {func}`jax.lax.slice`的稀疏实现。
    |'
- en: '| `bcoo_sort_indices`(mat) | Sort indices of a BCOO array. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_sort_indices`(mat) | 对BCOO数组的索引进行排序。 |'
- en: '| `bcoo_squeeze`(arr, *, dimensions) | Sparse implementation of {func}`jax.lax.squeeze`.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_squeeze`(arr, *, dimensions) | {func}`jax.lax.squeeze`的稀疏实现。 |'
- en: '| `bcoo_sum_duplicates`(mat[, nse]) | Sums duplicate indices within a BCOO
    array, returning an array with sorted indices. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_sum_duplicates`(mat[, nse]) | 对BCOO数组中的重复索引求和，返回一个排序后的索引数组。 |'
- en: '| `bcoo_todense`(mat) | Convert batched sparse matrix to a dense matrix. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_todense`(mat) | 将批量稀疏矩阵转换为密集矩阵。 |'
- en: '| `bcoo_transpose`(mat, *, permutation) | Transpose a BCOO-format array. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `bcoo_transpose`(mat, *, permutation) | 转置BCOO格式的数组。 |'
- en: BCSR Data Structure
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: BCSR数据结构
- en: '`BCSR` is the *Batched Compressed Sparse Row* format, and is under development.
    Its operations are compatible with JAX’s core transformations, including batching
    (e.g. `jax.vmap()`) and autodiff (e.g. `jax.grad()`).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`BCSR`是*批量压缩稀疏行*格式，正在开发中。其操作与JAX的核心转换兼容，包括批处理（如`jax.vmap()`）和自动微分（如`jax.grad()`）。'
- en: '| `BCSR`(args, *, shape[, indices_sorted, ...]) | Experimental batched CSR
    matrix implemented in JAX. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `BCSR`(args, *, shape[, indices_sorted, ...]) | 在JAX中实现的实验性批量CSR矩阵。 |'
- en: '| `bcsr_dot_general`(lhs, rhs, *, dimension_numbers) | A general contraction
    operation. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `bcsr_dot_general`(lhs, rhs, *, dimension_numbers) | 通用收缩运算。 |'
- en: '| `bcsr_extract`(indices, indptr, mat) | Extract values from a dense matrix
    at given BCSR (indices, indptr). |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `bcsr_extract`(indices, indptr, mat) | 从给定的BCSR（indices, indptr）处的密集矩阵中提取值。
    |'
- en: '| `bcsr_fromdense`(mat, *[, nse, n_batch, ...]) | Create BCSR-format sparse
    matrix from a dense matrix. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `bcsr_fromdense`(mat, *[, nse, n_batch, ...]) | 从密集矩阵创建BCSR格式的稀疏矩阵。 |'
- en: '| `bcsr_todense`(mat) | Convert batched sparse matrix to a dense matrix. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `bcsr_todense`(mat) | 将批量稀疏矩阵转换为密集矩阵。 |'
- en: Other Sparse Data Structures
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他稀疏数据结构
- en: Other sparse data structures include `COO`, `CSR`, and `CSC`. These are reference
    implementations of simple sparse structures with a few core operations implemented.
    Their operations are generally compatible with autodiff transformations such as
    `jax.grad()`, but not with batching transforms like `jax.vmap()`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其他稀疏数据结构包括`COO`、`CSR`和`CSC`。这些是简单稀疏结构的参考实现，具有少数核心操作。它们的操作通常与自动微分转换（如`jax.grad()`）兼容，但不与批处理转换（如`jax.vmap()`）兼容。
- en: '| `COO`(args, *, shape[, rows_sorted, cols_sorted]) | Experimental COO matrix
    implemented in JAX. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `COO`(args, *, shape[, rows_sorted, cols_sorted]) | 在JAX中实现的实验性COO矩阵。 |'
- en: '| `CSC`(args, *, shape) | Experimental CSC matrix implemented in JAX; API subject
    to change. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `CSC`(args, *, shape) | 在JAX中实现的实验性CSC矩阵；API可能会更改。 |'
- en: '| `CSR`(args, *, shape) | Experimental CSR matrix implemented in JAX. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `CSR`(args, *, shape) | 在JAX中实现的实验性CSR矩阵。 |'
- en: '| `coo_fromdense`(mat, *[, nse, index_dtype]) | Create a COO-format sparse
    matrix from a dense matrix. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `coo_fromdense`(mat, *[, nse, index_dtype]) | 从密集矩阵创建COO格式的稀疏矩阵。 |'
- en: '| `coo_matmat`(mat, B, *[, transpose]) | Product of COO sparse matrix and a
    dense matrix. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `coo_matmat`(mat, B, *[, transpose]) | COO稀疏矩阵与密集矩阵的乘积。 |'
- en: '| `coo_matvec`(mat, v[, transpose]) | Product of COO sparse matrix and a dense
    vector. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `coo_matvec`(mat, v[, transpose]) | COO稀疏矩阵与密集向量的乘积。 |'
- en: '| `coo_todense`(mat) | Convert a COO-format sparse matrix to a dense matrix.
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `coo_todense`(mat) | 将COO格式的稀疏矩阵转换为密集矩阵。 |'
- en: '| `csr_fromdense`(mat, *[, nse, index_dtype]) | Create a CSR-format sparse
    matrix from a dense matrix. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `csr_fromdense`(mat, *[, nse, index_dtype]) | 从密集矩阵创建CSR格式的稀疏矩阵。 |'
- en: '| `csr_matmat`(mat, B, *[, transpose]) | Product of CSR sparse matrix and a
    dense matrix. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `csr_matmat`(mat, B, *[, transpose]) | CSR稀疏矩阵与密集矩阵的乘积。 |'
- en: '| `csr_matvec`(mat, v[, transpose]) | Product of CSR sparse matrix and a dense
    vector. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `csr_matvec`(mat, v[, transpose]) | CSR稀疏矩阵与密集向量的乘积。 |'
- en: '| `csr_todense`(mat) | Convert a CSR-format sparse matrix to a dense matrix.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `csr_todense`(mat) | 将CSR格式的稀疏矩阵转换为密集矩阵。 |'
- en: '### `jax.experimental.sparse.linalg`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '### `jax.experimental.sparse.linalg`'
- en: Sparse linear algebra routines.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 稀疏线性代数例程。
- en: '| `spsolve`(data, indices, indptr, b[, tol, reorder]) | A sparse direct solver
    using QR factorization. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `spsolve`(data, indices, indptr, b[, tol, reorder]) | 使用QR分解的稀疏直接求解器。 |'
- en: '| `lobpcg_standard`(A, X[, m, tol]) | Compute the top-k standard eigenvalues
    using the LOBPCG routine. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `lobpcg_standard`(A, X[, m, tol]) | 使用LOBPCG例程计算前k个标准特征值。 |'
