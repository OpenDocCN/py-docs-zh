- en: 0.9 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.9 变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_09.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_09.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_09.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_09.html)
- en: 0.9.10
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.10
- en: 'Released: July 22, 2015'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年7月22���
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")返回的字典中添加了一个新条目`"entity"`。这指的是由表达式引用的主
    ORM 映射类或别名类。与现有的`"type"`条目相比，它将始终是一个映射实体，即使从列表达式中提取，或者如果给定的表达式是纯核心表达式，则为`None`。另请参见[#3403](https://www.sqlalchemy.org/trac/ticket/3403)，该修复了此功能中的一个回归，该回归在0.9.10中未发布，但在1.0版本中发布。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [bug]**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, a warning is emitted. As
    of 1.0.0b5 this will raise an error.'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")不支持连接、子查询或特殊的 FROM 子句；如果已调用类似[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")或[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")的方法，而不是静默地忽略这些字段，将发出警告。从1.0.0b5开始，这将引发错误。
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个嵌套的[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")操作中状态跟踪失败的 bug，导致在内部保存点中更新的对象的“脏”标志无法传播，因此如果外部保存点被回滚，该对象将不会成为过期状态的一部分，因此将恢复到其数据库状态。
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: engine
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数中，作为`None`的同义词，以便所有设置都可以使用字符串值，从而允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")这样的实用程序可以无问题地使用。
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方支持了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")内部 SELECT 中使用的 CTE。此行为在 0.9.9 版本之前意外生效，当时由于与
    [#3248](https://www.sqlalchemy.org/trac/ticket/3248) 的无关更改而不再生效。请注意，这是 INSERT
    之后、SELECT 之前 WITH 子句的呈现方式；在 INSERT、UPDATE、DELETE 的顶层呈现 CTE 的完整功能是一个后续版本的新功能。
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: '**[sql] [bug]**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用命名约定的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象将无法正确与 pickle 一起工作。由于跳过了该属性，如果使用反序列化的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象来基于其他表，则会导致不一致和失败。
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的错误，即在 psycopg2 方言中与非 ASCII 值和 `native_enum=False` 结合使用时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型无法正确解码返回结果。这源于 PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型曾经是一个独立的类型，没有“非本机”选项。
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mysql
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用“executemany”操作并带有 unicode 参数时，修复了 PyMySQL 的 Unicode 支持。SQLAlchemy 现在将语句和绑定参数都作为
    Unicode 对象传递，因为 PyMySQL 通常在内部使用字符串插值来生成最终语句，在 executemany 情况下仅对最终语句执行“encode”步骤。
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Py3K 上未正确使用 `ord()` 函数的 [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT") 类型。感谢 David Marin 的拉取请求。
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: sqlite
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 方言中的一个错误，即不会反映包含非字母字符（如点或空格）的唯一约束的反射问题。
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: tests
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，阻止了“pypy setup.py test”的正确工作。
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用扩展属性仪器系统时的错误，当使用 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 调用无效输入（同时也不是弱引用可引用的）时，不会引发正确的异常，例如整数。
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: '**[bug] [ext]**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression from 0.9.9 where the [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") symbol was removed from the `sqlalchemy.ext.declarative`
    namespace.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.9.9 开始的回归，其中 [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") 符号从 `sqlalchemy.ext.declarative` 命名空间中移除。
- en: 'References: [#3324](https://www.sqlalchemy.org/trac/ticket/3324)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3324](https://www.sqlalchemy.org/trac/ticket/3324)
- en: 0.9.9
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.9
- en: 'Released: March 10, 2015'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015 年 3 月 10 日
- en: orm
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的参数 [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可以在事务开始之前，当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 第一次被检出时设置执行选项。这用于在事务开始之前在连接上设置诸如隔离级别等选项。
- en: See also
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新文档部分，详细介绍了使用会话设置事务隔离的最佳实践。'
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法 [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，功能类似于 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")，但还会在所有连接上调用 [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，确保它们不会返回到连接池。在某些情况下很有用，比如处理 gevent
    超时时，不能进一步使用连接，即使是回滚也不安全。
- en: '**[orm] [bug]**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 对象比较中的错误，当比较多对一 `!= None` 时，如果源是别名类，或者查询需要对表达式应用特殊别名处理，例如由于别名连接或多态查询导致，比较将失败；还修复了当将多对一与对象状态进行比较时，如果查询需要对别名连接或多态查询应用特殊别名处理，比较将失败的情况。
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的`after_rollback()`处理程序错误地在处理程序内向该[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")添加状态时，内部断言将失败，并且尝试继续的任务警告和删除此状态（由[#2389](https://www.sqlalchemy.org/trac/ticket/2389)建立）。
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用未知的kw参数调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")时会引发TypeError，由于格式错误导致其自身引发TypeError。感谢Malthe Borch的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了懒加载SQL构造中的bug，其中一个复杂的primaryjoin在“指向自身的列”的自引用连接样式中多次引用相同的“本地”列时，在所有情况下都不会被替换。这里确定替换的逻辑已经重新制定为更加开放式。
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，以覆盖未明确提及的所有属性，现在考虑到给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，因此即使设置了load_only()，子类型的多态加载仍将正常工作。
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")在获取结果之前抛出异常时，特别是当无法形成行处理器时，游标会保持打开状态，结果仍在等待中，实际上并未关闭。这通常只在像PyPy这样的解释器上出现问题，其中游标不会立即被GC回收，并且在某些情况下可能导致事务/锁定的持续时间超过所需时间。
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个泄漏问题，该问题会在不支持且极不推荐的情况下发生，即多次替换固定映射类上的关系，引用任意增长的目标映射器数量。当替换旧关系时会发出警告，但是如果映射已用于查询，则旧关系仍将在某些注册表中被引用。
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式变异可能表现为在使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")从多个匿名列实体中选择时出现“无法找到列”错误的bug，当针对SQLite查询时，作为SQLite方言使用的“join
    rewriting”功能的副作用。
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用`of_type()`将单继承子类连接到[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")和[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")的ON子句时，如果设置了`from_joinpoint=True`标志，则不会在ON子句中呈现“单表条件”的bug。
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: examples
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例，使映射列重新映射以匹配列名称以及列的分组；特别是，这允许在同一列命名的连接继承场景中明确分组的列在历史映射中以相同的方式映射，避免了0.9系列中关于此模式的警告，并允许属��键的相同视图。
- en: '**[examples] [bug]**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例/generic_associations/discriminator_on_association.py中的bug，在这里，AddressAssociation的子类未被映射为“单表继承”，导致在尝试进一步使用映射时出现问题。
- en: engine
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于查看事务隔离级别的新用户空间访问器；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")，[`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")。
- en: '**[engine] [bug]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和池中的bug，当使用`isolation_level`参数与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")一起使用时，[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法或由于数据库断开连接而导致的失效会失败；重置隔离级别的“finalizer”将在不再打开的连接上调用。
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 在使用 [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 时，如果使用了 `isolation_level` 参数，则会发出警告；DBAPIs 和/或
    SQLAlchemy 方言（如 psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一个事务中不更改设置，因此这是不安全的。
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: sql
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    的 `__repr__()` 输出中添加了 `native_enum` 标志，当与 Alembic autogenerate 一起使用时，这主要是重要的。贡献者：Dimitris
    Theodorou。
- en: '**[sql] [bug]**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用实现了也是 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 的 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 会在针对使用此类型的对象进行任何类型的 SQL 比较表达式时失败的问题，Python 会报错“Cannot
    create a consistent method resolution order (MRO)”。
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 INSERT 中嵌入 SELECT 时的问题，无论是通过 values 子句还是作为“from select”，当两个语句共享相同名称的列时，将污染由
    RETURNING 子句生成的结果集中使用的列类型，导致检索返回行时可能出现错误或错误适应。
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: schema
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug in 0.9’s foreign key setup system, such that the logic used to link
    a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    to its parent could fail when the foreign key used “link_to_name=True” in conjunction
    with a target [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would not receive its parent column until later, such as within a reflection
    + “useexisting” scenario, if the target column in fact had a key value different
    from its name, as would occur in reflection if column reflect events were used
    to alter the .key of reflected [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects so that the link_to_name becomes significant.
    Also repaired support for column type via FK transmission in a similar way when
    target columns had a different key and were referenced using link_to_name.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.9 版本中外键设置系统中的错误，即当外键与父级链接时，如果外键在稍后才会接收到其父级列，例如在反射 + “useexisting” 场景中，如果目标列实际上具有不同于其名称的键值，则使用了“link_to_name=True”的外键可能会失败，因为在反射中如果使用了列反射事件来更改反映的
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的 .key，使 link_to_name 变得重要。同样，在目标列具有不同键并且使用 link_to_name 引用时，也以类似的方式修复了通过 FK
    传输列类型的支持。
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)
- en: postgresql
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 索引使用 `CONCURRENTLY` 关键字的支持，使用 `postgresql_concurrently` 建立。感谢
    Iuri de Silvio 的拉取请求。
- en: See also
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[并发索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: '**[postgresql] [bug]**'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 psycopg2 时支持 PostgreSQL UUID 类型与 ARRAY 类型的问题。现在 psycopg2 方言使用 psycopg2.extras.register_uuid()
    钩子，以便始终将 UUID 值作为 UUID() 对象传递到/从 DBAPI。[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") 标志仍然受到尊重，但在 psycopg2 中，当禁用此标志时，我们需要将返回的 UUID 对象转换回字符串。
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 psycopg2 2.5.4 或更高版本使用 `postgresql.JSONB` 数据类型的支持，该版本具有 JSONB 数据的本机转换，因此必须禁用
    SQLAlchemy 的转换器；此外，新添加的 psycopg2 扩展 `extras.register_default_jsonb` 用于通过 `json_deserializer`
    参数传递给方言的 JSON 反序列化器。还修复了实际上未循环传输 JSONB 类型而不是 JSON 类型的 PostgreSQL 集成测试。感谢 Mateusz
    Susik 的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版本 psycopg2 < 2.4.3 时注册 HSTORE 类型时使用“array_oid”标志的问题，该版本不支持此标志，以及在使用
    psycopg2 版本 < 2.5 时使用本机 json 序列化器钩子“register_default_json”与用户定义的`json_deserializer`时，该版本不包括本机
    json。
- en: '**[postgresql] [bug]**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 中未能呈现表绑定列的表达式的 bug；通常当一个 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造是索引中的表达式之一时；或者如果其中一个或多个是这样的表达式，则可能会误解表达式列表。
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: mysql
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [change]**'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms` 方言不再必要，并发出弃用警告。Google 现在建议直接使用 MySQLdb 方言。'
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQLdb 方言周围添加了一个版本检查，用于检查‘utf8_bin’排序规则，因为这在 MySQL 服务器 < 5.0 上失败。
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: sqlite
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 SQLite 上部分索引（例如带有 WHERE 子句）的支持。感谢 Kai Groner 的拉取请求。
- en: See also
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: '**[sqlite] [feature]**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的SQLite后端用于SQLCipher后端。该后端使用pysqlcipher Python驱动程序提供加密的SQLite数据库，该驱动程序与pysqlite驱动程序非常相似。
- en: See also
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: misc
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext] [py3k]**'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Py3K下关联代理列表类无法正确解释切片的bug。感谢Gilles Dartiguelongue提供的拉取请求。
- en: 0.9.8
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.8
- en: 'Released: October 13, 2014'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年10月13日
- en: orm
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [engine]**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响与[#3199](https://www.sqlalchemy.org/trac/ticket/3199)相同类别事件的bug，当使用`named=True`参数时会出现问题。一些事件无法注册，其他事件无法正确调用事件参数，通常在事件被“包装”以适应其他方式时。已重新排列“named”机制，以不干扰内部包装函数期望的参数签名。
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响许多事件类的bug，特别是ORM事件，但也包括引擎事件，在这些事件中，“去重复”一个冗余调用[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")的常规逻辑失败，对于那些监听器函数被包装的事件。在registry.py中会触发一个断言。现在这个断言已经整合到去重复检查中，另外还有一个更简单的检查去重复的方法。
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个警告，当一个复杂的自引用主连接包含函数时会发出警告，同时指定了remote_side；警告会建议设置“remote side”。现在只有在remote_side不存在时才会发出警告。
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: orm declarative
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")与声明`__abstract__`的子类时修复了“‘NoneType’
    object has no attribute ‘concrete’”错误。
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: engine
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")或[`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options")传递给[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项不会传递给在“第一次连接”事件中初始化方言的特殊[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且不应应用任何当前可用的选项。特别是，“autocommit”选项导致在此初始连接中尝试自动提交，由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的非标准状态而导致AttributeError失败。
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定INSERT或UPDATE影响的列的字符串键现在在它们对“compiled cache”缓存键的贡献时排序。这些键之前没有确定性地排序，这意味着相同的语句可能会基于等效键多次被缓存，这既会在内存方面带来成本，也会在性能方面带来成本。
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: sql
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在sql包中有相当数量的SQL元素无法成功执行`__repr__()`的bug，因为缺少`description`属性，这将导致一个内部AttributeError再次调用`__repr__()`时递归溢出。
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整表/索引反射，如果索引报告的列在表中未找到，则发出警告并跳过该列。这可能会发生在一些特殊的系统列情况下，如在Oracle中观察到的情况。
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE中的bug，其中当一个CTE引用语句中的另一个别名CTE时，`literal_binds`编译器参数将不会始终正确传播。
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9.7版本的退化，由[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起，结合一个命名错误的单元测试，以至于所谓的“schema”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被pickle化。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: postgresql
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用pg8000驱动程序添加了对“合理的多行计数”的支持，这主要适用于在ORM中使用版本控制时。该功能基于使用pg8000 1.9.14或更高版本进行版本检测。感谢Tony
    Locke的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '重新访问了首次在0.9.5中修补的此问题，显然psycopg2的`.closed`访问器并不像我们假设的那样可靠，因此我们已添加了对异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”进行显式检查，以检测到断开连接的情况。我们将继续将psycopg2的connection.closed作为首次检查。'
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL JSON类型无法持久化或以其他方式呈现SQL NULL列值，而不是JSON编码的`'null'`的错误。为支持此情况，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以指定值[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致结果语句中的NULL值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新参数[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当为True时表示Python的`None`值应该持久化为SQL NULL，而不是JSON编码的`'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于除了psycopg2之外的其他DBAPI，如pg8000，将NULL检索为None也已修复。
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，DBAPI错误的异常包装系统可以适应非标准的DBAPI异常，例如psycopg2的TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，在TransactionRollbackError的情况下，使用`sqlalchemy.exc.OperationalError`。
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象中的错误，其中与普通的Python列表进行比较会导致使用不正确的数组构造函数。感谢Andrew的拉取请求。
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为函数添加了支持的[`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")方法，例如`func`构造。先前，此方法的行为是未定义的。当前行为模仿了0.9.4之前的行为，即将函数转换为具有给定别名的单列FROM子句，其中列本身是匿名命名的。
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: mysql
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始的 Mysqlconnector，可能是由于 Python 3 合并的副作用，现在不再期望百分号（例如作为模数运算符等）被加倍，即使使用“pyformat”绑定参数格式（Mysqlconnector
    没有记录此更改）。 方言现在在检测模数运算符是否应该呈现为`%%`或`%`时，会检查 py2k 和 mysqlconnector 小于版本 2.0。
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQLconnector 版本 2.0 及以上现在会传递 Unicode SQL；对于 Py2k 和 MySQL < 2.0，字符串会被编码。
- en: sqlite
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用附加数据库文件从 UNION 进行选择时，pysqlite 驱动器在 cursor.description 中报告列名为‘dbname.tablename.colname’，而不是正常情况下的‘tablename.colname’（请注意，对于
    UNION，它应该是‘colname’，但我们对此进行了处理）。 此处的列翻译逻辑已调整为检索最右侧的标记，而不是第二个标记，因此在两种情况下都有效。 解决方法由Tony
    Roberts提供。
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: mssql
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 方言中版本字符串检测的问题，以便与 Microsoft SQL Azure 一起工作，后者将“SQL Server”更改为“SQL
    Azure”。
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: oracle
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中长期存在的 bug，即以数字开头的绑定参数名不会被引用，因为 Oracle 不喜欢绑定参数名中的数字。
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: misc
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些特殊的终端用户设置中观察到的不太可能的竞争条件，其中在声明性检查“重复类名”时会遇到未完全清理的弱引用，与其他被移除的类相关联；此处的检查现在确保在进一步调用之前弱引用仍然引用对象。
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了排序列表中的 bug，在集合替换事件期间，如果 reorder_on_append 标志设置为 True，则项目的顺序会被打乱。 修复确保排序列表仅影响显式与对象相关联的列表。
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")中未能实现`update()`字典方法的错误，因此未捕获更改。 拉请求由Matt
    Chisholm提供。
- en: '**[bug] [ext]**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的自定义子类在“强制”操作中不会显示，并且会返回一个普通的[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")。感谢Matt Chisholm的拉取请求。
- en: '**[bug] [pool]**'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志记录中的错误，即如果使用`logging.setLevel()`设置日志记录而不是使用`echo_pool`标志，则“连接已检出”调试日志消息将不会发出。已添加用于断言此日志记录的测试。这是在0.9.0中引入的回归。
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: 0.9.7
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.7
- en: 'Released: July 22, 2014'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年7月22日
- en: orm
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [eagerloading]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由0.9.4发布的[#2976](https://www.sqlalchemy.org/trac/ticket/2976)引起的回归，其中沿着一系列连接的急加载的“外连接”传播会错误地将兄弟连接路径上的“内连接”也转换为外连接，当只有后代路径应该接收“外连接”传播时；另外，修复了相关问题，即“嵌套”连接传播会不适当地发生在两个兄弟连接路径之间。
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#2736](https://www.sqlalchemy.org/trac/ticket/2736)导致的0.9.0的回归已修复，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法不再正确设置[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的“from entity”，因此随后的[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")或[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用将无法在按字符串名称搜索属性时检查适当的“from”实体。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)，[#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    a warning is now emitted. In 1.0 this will be promoted to a full exception.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于query.update()/delete()的“评估器”不适用于多表更新，并且需要设置为synchronize_session=False或synchronize_session='fetch'；现在会发出警告。在1.0版本中，这将升级为完整的异常。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [bug]**'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在保存点块内持久化、删除或主键更改的项目在外部事务回滚后不参与恢复到其先前状态（不在会话中，在会话中，先前的PK）的错误。
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载与[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")一起使用时的错误，子查询加载中实体和列的定位对于这种类型的实体和其他实体更加准确。
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving dynamic attributes, that was again a regression of [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    from version 0.9.5\. A self-referential relationship with lazy=’dynamic’ would
    raise a TypeError within a flush operation.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及动态属性的错误，这是从版本 0.9.5 中的[#3060](https://www.sqlalchemy.org/trac/ticket/3060)再次出现的回归。具有`lazy='dynamic'`的自引用关系在刷新操作中会引发
    TypeError。
- en: 'References: [#3099](https://www.sqlalchemy.org/trac/ticket/3099)'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3099](https://www.sqlalchemy.org/trac/ticket/3099)
- en: engine
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件`ConnectionEvents.handle_error()`，这是`ConnectionEvents.dbapi_error()`的更全面和全面的替代品。
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: sql
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类中的错误，直接将类型与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联会导致在[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上发���事件（如创建事件）时挂起。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义操作符加[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的错误，当与变体一起使用[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")时，使用比较运算符会导致 MRO 错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定功能中的错误，其中使用包含`constraint_name`的检查约定会强制所有[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型也需要名称，因为这些隐式创建约束，即使最终目标后端不需要生成约束，比如 PostgreSQL。这些特定约束的命名约定机制已经重新组织，使得命名确定在
    DDL 编译时完成，而不是在约束/表构建时完成。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式中的错误，当CTE在某些方式中嵌套时，位置绑定参数可能以错误的最终顺序表达。
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造中的错误，使得对于字面SQL表达式给定的第一个值之外的后续值条目未能检查。
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Python版本< 2.6.5中，为dialect_kwargs迭代添加了一个“str()”步骤，解决了“无unicode关键字参数”错误，因为这些参数在某些反射过程中作为关键字参数传递。
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方��现在将接受一个类型类作为参数，内部将其转换为实例，使用了其他构造（如[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")）长期建立的相同约定。'
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: postgresql
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`postgresql_regconfig`参数到[`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")操作符，允许指定“reg config”参数到`to_tsquery()`函数中。感谢Jonathan
    Vanasco的拉取请求。
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB")添加了对PostgreSQL JSONB的支持。感谢Damian Dimmich的拉取请求。
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9.5版本中由新的pg8000隔离级别功能引入的错误，其中引擎级别的隔离级别参数在连接时会引发错误。
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: mysql
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL错误2014“commands out of sync”似乎在现代MySQL-Python版本中被提升为ProgrammingError，而不是OperationalError；现在所有被测试为“is
    disconnect”的MySQL错误代码都在OperationalError和ProgrammingError中进行检查。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: sqlite
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite连接重写问题，其中作为标量子查询嵌入的子查询（例如在IN中）会从包含查询中接收不适当的替换，如果相同的表在子查询中存在，并且在包含查询中也存在，例如在连接继承场景中。
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: mssql
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [功能]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server 2008启用了“多值插入”。感谢Albert Cervin的拉取请求。还扩展了“IDENTITY INSERT”模式的检查，以包括当标识键出现在语句的VALUEs子句中时。
- en: '**[mssql] [bug]**'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将语句编码添加到“SET IDENTITY_INSERT”语句中，当显式插入插入到IDENTITY列时，以支持像pyodbc + unix + py2k这样不支持unicode语句的驱动程序上的非ascii表标识符。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server pyodbc方言中，修复了`description_encoding`方言参数的实现，当未明确设置时，会导致无法正确解析包含不同编码名称的结果集的cursor.description。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed a regression from 0.9.5 caused by [#3025](https://www.sqlalchemy.org/trac/ticket/3025)
    where the query used to determine “default schema” is invalid in SQL Server 2000.
    For SQL Server 2000 we go back to defaulting to the “schema name” parameter of
    the dialect, which is configurable but defaults to ‘dbo’.
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.9.5引起的回归，由[#3025](https://www.sqlalchemy.org/trac/ticket/3025)引起，其中用于确定“默认模式”的查询在SQL
    Server 2000中无效。对于SQL Server 2000，我们回到默认的“模式名称”参数，该参数是可配置的，但默认为'dbo'。
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [tests]**'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误] [测试]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了oracle方言测试套件中的错误，其中在一个测试中，假定‘用户名’在数据库URL中，即使这可能并非事实。 '
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: tests
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“python setup.py test”未正确调用distutils的错误，导致在测试套件结束时会发出错误。
- en: misc
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [声明性]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明性`__abstract__`标志未被区分为实际值`False`时的错误。`__abstract__`标志需要在被测试的级别上实际评估为True值。
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: 0.9.6
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.6
- en: 'Released: June 23, 2014'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年6月23日
- en: orm
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Reverted the change for [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    - this is a unit of work fix that is updated more comprehensively in 1.0 via [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
    The fix in [#3060](https://www.sqlalchemy.org/trac/ticket/3060) unfortunately
    produces a new issue whereby an eager load of a many-to-one attribute can produce
    an event that is interpreted into an attribute change.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 撤销了[#3060](https://www.sqlalchemy.org/trac/ticket/3060)的更改 - 这是一个在1.0中更全面更新的工作单元修复，通过[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。[#3060](https://www.sqlalchemy.org/trac/ticket/3060)中的修复不幸地产生了一个新问题，即对多对一属性的急加载可能会产生被解释为属性更改的事件。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: 0.9.5
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.5
- en: 'Released: June 23, 2014'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年6月23日
- en: orm
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型已经进一步扩展，允许严格从单个列到自身的连接条件，通过某种SQL函数或表达式进行转换。这有点实验性质，但第一个概念验证是“材料化路径”连接条件，其中路径字符串使用“like”与自身进行比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 操作符也已添加到可在primaryjoin条件中使用的有效操作符列表中。
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为就像它们从会话中加载然后分离的对象。不存在的属性被标记为过期，并且对象可以添加到一个会话中，它将表现得像一个持久对象。
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [bug]**'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的错误，当跨多态子类边界的长链急加载与多态加载一起使用时，会无法定位链中的子类链接，导致在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出现缺少属性名称的错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的bug，[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 函数会掩盖应该在映射器配置期间由于用户错误而引发的AttributeErrors或KeyErrors。对于属性/键错误的捕获已经更具体，不包括配置步骤。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加额外的检查，用于处理继承映射器隐式组合其基于列的属性之一与父级属性的情况，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；然而，这个新检查只发出警告，而不是异常，以允许依赖于现有行为的应用程序。
- en: See also
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“隐式组合列X在属性Y下”的警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") 的行为，使得主键列始终被添加到“未延迟加载”列的列表中；否则，ORM 无法加载行的标识。显然，可以延迟映射的主键，ORM
    将失败，这一点没有改变。但是，由于 load_only 本质上是说“除了 X 之外都延迟加载”，因此 PK 列不参与此延迟加载更为关键。
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在所谓的“行切换”场景中出现的一些边缘情况，其中 INSERT/DELETE 可以转换为 UPDATE。在这种情况下，将多对一关系设置为 None，或在某些情况下将标量属性设置为
    None，可能不会被检测为值的净变化，因此 UPDATE 不会重置前一行上的内容。这是由于属性历史的一些尚未解决的副作用，这些副作用涉及隐式假定 None
    对于先前未设置的属性实际上不是“变化”。另请参见 [#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改已在 0.9.6 版本中**撤销**。完整的修复将在 SQLAlchemy 的 1.0 版本中实现。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联到 [#3060](https://www.sqlalchemy.org/trac/ticket/3060)，对工作单元进行了调整，以便在要删除的自引用对象图中，加载相关的多对一对象更为积极；加载相关对象有助于确定删除顺序的正确顺序，如果未设置
    passive_deletes。
- en: '**[orm] [bug]**'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 连接重写中的错误，其中由于重复导致的匿名列名在子查询中不会被正确重写。这会影响带有任何类型子查询 + 连接的 SELECT 查询。
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [#2804](https://www.sqlalchemy.org/trac/ticket/2804) 中新增的布尔强制转换的问题，新规则对于“where”和“having”在“whereclause”和“having”
    kw 参数上不会生效，这也是 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造函数使用的内容，因此在 ORM 中也无法正常工作。
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: examples
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新示例，演示了使用最新关系特性的物化路径。示例由 Jack Zhou 提供。
- en: engine
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当引擎首次连接并进行初始检查时发生 DBAPI 异常，异常不是断开连接异常，但是当我们尝试关闭光标时光标引发错误。在这种情况下，真正的异常将被压制，因为我们试图通过连接池记录光标关闭异常并失败，因为我们试图以不适合这种非常特定情况的方式访问池的记录器。
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 检测到一些“双重无效”情况，其中连接无效可能发生在已经关键的部分内，比如连接关闭(); 最终，这些条件是由于[#2907](https://www.sqlalchemy.org/trac/ticket/2907)中的更改引起的，因为“返回时重置”功能调用
    Connection/Transaction 来处理它，其中可能会捕获“断开检测”。然而，最近在[#2985](https://www.sqlalchemy.org/trac/ticket/2985)中的更改使得这种情况更有可能被视为“连接无效”操作更快，因为在
    0.9.4 上更容易复现这个问题，而在 0.9.3 上更难。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在可能发生无效的任何部分都添加了检查，以阻止在无效连接上发生进一步的不允许操作。这包括两个修复，一个在引擎级别，一个在池级别。虽然这个问题在高并发的
    gevent 情况下被观察到，但理论上在任何发生断开连接的情况下都可能发生，这发生在连接关闭操作中。
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: sql
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的合同中稍微放宽了一点，你可以指定一个[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式作为目标；如果要手动将索引添加到表中，那么索引不再需要存在绑定表列，可以通过内联声明或通过[`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")添加。
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新标志[`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为 True 时呈现“BETWEEN SYMMETRIC”。还添加了一个新的否定运算符“notbetween_op”，现在允许像`~col.between(x,
    y)`这样的表达式呈现为“col NOT BETWEEN x AND y”，而不是一个带括号的 NOT 字符串。
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [bug]**'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 INSERT..FROM SELECT 结构中的 bug，在从 UNION 中选择时，会将 UNION 包装在一个匿名（例如未标记）子查询中。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")或[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")会生成空的WHERE子句的错误。现在这与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在表的显式[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中引用该[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")标志隐式设置为`False`。此行为现在与当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身的[`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column")标志设置为`True`时的行为相匹配，这意味着这是一个完全等价的情况。
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__")和[`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__")运算符重载方法无法在自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")实现中被覆盖的错误。
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法中的错误，其中为以前未包含任何特殊参数的构造添加参数将失败。
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本引入的回归问题，即新的“ORDER BY <labelname>”功能从[#1068](https://www.sqlalchemy.org/trac/ticket/1068)中不会对标签名称应用引用规则，如在ORDER
    BY中呈现的那样。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")的导入到`sqlalchemy.sql.expression`导入命名空间，这在0.9版本开始时被移除。
- en: postgresql
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pg8000 DBAPI时，添加了对AUTOCOMMIT隔离级别的支持。拉取请求由Tony Locke提供。
- en: '**[postgresql] [feature]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型添加了一个新标志[`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为`True`时，将在传递给数据库之前将所有数组索引值加一，从而在Python风格的零基索引和PostgreSQL基索引之间实现更好的互操作性。拉取请求由Alexey
    Terentev提供。
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [bug]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型中添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表时跳过尝试对ORM映射的HSTORE列进行“哈希”操作。补丁由Gunnlaugur
    Þór Briem提供。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的SSL有关。拉取请求由Antti Haapala提供。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在确定异常是否为“断开连接”错误时会咨询psycopg2的`.closed`访问器；理想情况下，这应该消除对异常消息的任何其他检查以检测断开连接的需要，但我们将保留这些现有消息作为备用。这应该能够处理新的情况，如“SSL
    EOF”条件。拉取请求由Dirk Mueller提供。
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [enhancement]**'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [enhancement]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向PostgreSQL方言添加了一个新类型[`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是PG内部的私有类型，在现代版本中不会公开，但在一些PG用例中（如大对象支持）可能会公开这些类型，以及在一些用户报告的模式反射用例中可能会公开。
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在索引的`mysql_length`参数上添加列名时，需要对带引号的名称使用相同的引号才能被识别的错误。修复使引号变为可选，但也为那些使用解决方法的人提供了旧的行为，以便与向后兼容。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了支持，以使用等号包含KEY_BLOCK_SIZE的索引来反映表。Pull请求由Sean McGivern提供。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: mssql
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修订了用于确定当前默认模式名称的查询，使用`database_principal_id()`函数与`sys.database_principals`视图结合使用，以便我们可以独立于正在进行的登录类型（例如，SQL
    Server，Windows等）确定默认模式。 '
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: tests
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了运行测试时涉及`imp`模块和Python 3.3或更高版本的一些弃用警告。Pull请求由Matt Chisholm提供。
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问时，`__mapper_args__`字典从声明性mixin或抽象类中复制，以便声明性本身对此字典所做的修改不会与其他映射发生冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误，其中[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未对`setdefault()`字典操作报告更改事件。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")未返回现有值或新值的错误（此错误未在任何0.8版本中发布）。Pull请求由Thomas
    Hervé提供。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [testsuite]**'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [testsuite]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，从不太受支持的`Text`改为使用`String(40)`在`StringTest.test_literal_backslashes`中。Pullreq由Jan提供。
- en: '**[bug] [firebird]**'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug where the combination of “limit” rendering as “SELECT FIRST n ROWS”
    using a bound parameter (only firebird has both), combined with column-level subqueries
    which also feature “limit” as well as “positional” bound parameters (e.g. qmark
    style) would erroneously assign the subquery-level positions before that of the
    enclosing SELECT, thus returning parameters which are out of order.
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在绑定参数（只有firebird同时具有“limit”渲染为“SELECT FIRST n ROWS”的情况）中“limit”与列级子查询组合的情况下，“limit”以及“位置”绑定参数（例如qmark样式），将错误地在外围SELECT之前分配子查询级别的位置，从而返回顺序不正确的参数。
- en: 'References: [#3038](https://www.sqlalchemy.org/trac/ticket/3038)'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3038](https://www.sqlalchemy.org/trac/ticket/3038)
- en: 0.9.4
  id: totrans-464
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.4
- en: 'Released: March 28, 2014'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年3月28日
- en: general
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general] [feature]**'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [feature]**'
- en: Support has been added for pytest to run tests. This runner is currently being
    supported in addition to nose, and will likely be preferred to nose going forward.
    The nose plugin system used by SQLAlchemy has been split out so that it works
    under pytest as well. There are no plans to drop support for nose at the moment
    and we hope that the test suite itself can continue to remain as agnostic of testing
    platform as possible. See the file README.unittests.rst for updated information
    on running tests with pytest.
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对pytest的支持以运行测试。该运行器当前在nose之外也得到了支持，并且将来可能会更倾向于使用pytest。SQLAlchemy使用的nose插件系统已拆分出来，以便它也可以在pytest下运行。目前没有计划放弃对nose的支持，我们希望测试套件本身可以继续保持尽可能与测试平台无关。有关使用pytest运行测试的更新信息，请参阅README.unittests.rst文件。
- en: The test plugin system has also been enhanced to support running tests against
    multiple database URLs at once, by specifying the `--db` and/or `--dburi` flags
    multiple times. This does not run the entire test suite for each database, but
    instead allows test cases that are specific to certain backends make use of that
    backend as the test is run. When using pytest as the test runner, the system will
    also run specific test suites multiple times, once for each database, particularly
    those tests within the “dialect suite”. The plan is that the enhanced system will
    also be used by Alembic, and allow Alembic to run migration operation tests against
    multiple backends in one run, including third-party backends not included within
    Alembic itself. Third party dialects and extensions are also encouraged to standardize
    on SQLAlchemy’s test suite as a basis; see the file README.dialects.rst for background
    on building out from SQLAlchemy’s test platform.
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还增强了测试插件系统，以支持一次针对多个数据库URL运行测试，方法是多次指定`--db`和/或`--dburi`标志。这不会对每个数据库运行整个测试套件，而是允许特定于某些后端的测试用例在运行测试时使用该后端。当将pytest作为测试运行器时，该系统还将多次运行特定的测试套件，每个数据库运行一次，特别是“dialect
    suite”中的那些测试。计划增强的系统还将被Alembic使用，并允许Alembic在一次运行中针对多个后端运行迁移操作测试，包括Alembic本身未包含的第三方后端。还鼓励第三方方言和扩展标准化为SQLAlchemy的测试套件作为基础；请参阅README.dialects.rst文件，了解从SQLAlchemy的测试平台构建的背景。
- en: '**[general] [bug]**'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`setup.py`文件，以支持将来可能从setuptools中移除`setuptools.Feature`扩展。如果不存在此关键字，则设置仍将成功使用setuptools而不是回退到distutils。现在还可以通过设置DISABLE_SQLALCHEMY_CEXT环境变量来禁用C扩展构建。无论setuptools是否可用，此变量都起作用。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被迁移到了**：0.8.6
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: '**[general] [bug]**'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Fixed some test/feature failures occurring in Python 3.4, in particular the
    logic used to wrap “column default” callables wouldn’t work properly for Python
    built-ins.
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些在Python 3.4中发生的测试/功能失败，特别是用于包装“column default”可调用对象的逻辑不会对Python内置函数起作用。
- en: 'References: [#2979](https://www.sqlalchemy.org/trac/ticket/2979)'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2979](https://www.sqlalchemy.org/trac/ticket/2979)
- en: orm
  id: totrans-477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter `mapper.confirm_deleted_rows`. Defaults to True, indicates
    that a series of DELETE statements should confirm that the cursor rowcount matches
    the number of primary keys that should have matched; this behavior had been taken
    off in most cases (except when version_id is used) to support the unusual edge
    case of self-referential ON DELETE CASCADE; to accommodate this, the message is
    now just a warning, not an exception, and the flag can be used to indicate a mapping
    that expects self-referential cascaded deletes of this nature. See also [#2403](https://www.sqlalchemy.org/trac/ticket/2403)
    for background on the original change.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数`mapper.confirm_deleted_rows`。默认为True，表示一系列DELETE语句应确认游标行数与应匹配的主键数量相匹配；这种行为在大多数情况下已被取消（除非使用version_id），以支持自引用ON
    DELETE CASCADE的不寻常边缘情况；为了适应这一点，消息现在只是一个警告，而不是异常，并且可以使用该标志指示期望这种自引用级联删除的映射。另请参见[#2403](https://www.sqlalchemy.org/trac/ticket/2403)以了解原始更改的背景。
- en: 'References: [#3007](https://www.sqlalchemy.org/trac/ticket/3007)'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3007](https://www.sqlalchemy.org/trac/ticket/3007)
- en: '**[orm] [feature]**'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A warning is emitted if the [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") events are applied to a specific
    mapper or mapped class, as the events are only invoked for the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") target at the general level.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")或[`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件应用于特定的映射器或映射类，则会发出警告，因为这些事件仅对一般级别的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")目标调用。
- en: '**[orm] [feature]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new keyword argument `once=True` to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"). This is a convenience feature which will wrap
    the given listener such that it is only invoked once.
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的关键字参数`once=True`到[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")和[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")。这是一个方便的功能，它将包装给定的监听器，以便只调用一次。
- en: '**[orm] [feature]**'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new option to [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") which is to specify the string `"nested"`. When
    set to `"nested"` as opposed to `True`, the “chaining” of joins will parenthesize
    the inner join on the right side of an existing outer join, instead of chaining
    as a string of outer joins. This possibly should have been the default behavior
    when 0.9 was released, as we introduced the feature of right-nested joins in the
    ORM, however we are keeping it as a non-default for now to avoid further surprises.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新选项到[`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")，即指定字符串`"nested"`。当设置为`"nested"`而不是`True`时，连接的“链式”将在现有外连接的右侧括号内连接，而不是作为一系列外连接的字符串连接。当0.9发布时，这可能应该是默认行为，因为我们在ORM中引入了右嵌套连接的功能，但是为了避免进一步的意外，我们目前将其保留为非默认行为。
- en: See also
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Right-nested inner joins available in joined eager loads](migration_09.html#feature-2976)'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[右嵌套内连接可用于连接的急加载](migration_09.html#feature-2976)'
- en: 'References: [#2976](https://www.sqlalchemy.org/trac/ticket/2976)'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2976](https://www.sqlalchemy.org/trac/ticket/2976)
- en: '**[orm] [bug]**'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，即更改对象的主键，然后将其标记为DELETE将无法定位正确的DELETE行。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.8.3回归的错误，作为结果[#2818](https://www.sqlalchemy.org/trac/ticket/2818)，其中[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")不会在仅具有[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")条目但没有其他实体的查询上工作。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.6
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，如果对非可选择性（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")）进行了查询()，然后尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")使得“左”侧被确定为`None`，然后失败。现在明确检测到这种情况。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.6
- en: '**[orm] [bug]**'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`sqlalchemy.orm.interfaces.__all__`中删除陈旧的名称，并用当前名称刷新，以便再次从该模块进行`import *`。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.6
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: '**[orm] [bug]**'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a very old behavior where the lazy load emitted for a one-to-many could
    inappropriately pull in the parent table, and also return results inconsistent
    based on what’s in the parent table, when the primaryjoin includes some kind of
    discriminator against the parent table, such as `and_(parent.id == child.parent_id,
    parent.deleted == False)`. While this primaryjoin doesn’t make that much sense
    for a one-to-many, it is slightly more common when applied to the many-to-one
    side, and the one-to-many comes as a result of a backref. Loading rows from `child`
    in this case would keep `parent.deleted == False` as is within the query, thereby
    yanking it into the FROM clause and doing a cartesian product. The new behavior
    will now substitute the value of the local “parent.deleted” for that parameter
    as is appropriate. Though typically, a real-world app probably wants to use a
    different primaryjoin for the o2m side in any case.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常古老的行为，其中对于一对多的惰性加载可能不当地拉入父表，并且基于父表中的内容返回不一致的结果，当primaryjoin包含针对父表的某种鉴别器时，例如`and_(parent.id
    == child.parent_id, parent.deleted == False)`。虽然这种primaryjoin对于一对多来说没有太多意义，但当应用于多对一的一侧时略微更常见，并且一对多作为backref的结果而出现。在这种情况下加载来自`child`的行将保持查询中的`parent.deleted
    == False`，从而将其拉入FROM子句并执行笛卡尔积。新的行为现在将适当地替换本地“parent.deleted”的值为该参数。尽管通常，真实世界的应用程序可能希望在任何情况下都为o2m侧使用不同的primaryjoin。
- en: 'References: [#2948](https://www.sqlalchemy.org/trac/ticket/2948)'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2948](https://www.sqlalchemy.org/trac/ticket/2948)
- en: '**[orm] [bug]**'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the check for “how to join from A to B” such that when a table has
    multiple, composite foreign keys targeting a parent table, the [`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") argument will be properly interpreted in order
    to resolve the ambiguity; previously this condition would raise that there were
    multiple FK paths when in fact the foreign_keys argument should be establishing
    which one is expected.
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“如何从A连接到B”的检查，以便当一个表具有多个，针对父表的复合外键时，[`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship")参数将被正确解释以解决歧义; 以前，当事实上foreign_keys参数应该确定哪一个是预期的时，此条件将引发存在多个FK路径。
- en: 'References: [#2965](https://www.sqlalchemy.org/trac/ticket/2965)'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2965](https://www.sqlalchemy.org/trac/ticket/2965)
- en: '**[orm] [bug]**'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for the not-quite-yet-documented `insert=True` flag for [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") to work with mapper / instance events.
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对尚未完全记录的 `insert=True` 标志的支持，以便与 mapper / 实例事件一起使用 [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")。
- en: '**[orm] [bug] [engine]**'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [bug] [引擎]**'
- en: Fixed bug where events set to listen at the class level (e.g. on the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") or [`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") level, as opposed to on an individual mapped class,
    and also on [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")) that also made use of internal argument conversion
    (which is most within those categories) would fail to be removable.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即设置在类级别监听事件（例如在 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 或 [`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") 等级上，而不是在单个映射类上，还有在 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上，同时还使用了内部参数转换（在这些类别中大多数情况下）的事件将无法被移除。
- en: 'References: [#2973](https://www.sqlalchemy.org/trac/ticket/2973)'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2973](https://www.sqlalchemy.org/trac/ticket/2973)
- en: '**[orm] [bug]**'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [bug]**'
- en: Fixed regression from 0.8 where using an option like [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") with the “wildcard” expression, e.g. `"*"`, would raise
    an assertion error in the case where the query didn’t contain any actual entities.
    This assertion is meant for other cases and was catching this one inadvertently.
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.8 版本中的一个回归 bug，即在使用类似 [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") 这样的选项与“通配符”表达式，例如 `"*"`，在查询中不包含任何实际实体时会引发断言错误的情况。此断言是为其他情况而设计的，却无意中捕捉到了这种情况。
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [bug] [sqlite]**'
- en: More fixes to SQLite “join rewriting”; the fix from [#2967](https://www.sqlalchemy.org/trac/ticket/2967)
    implemented right before the release of 0.9.3 affected the case where a UNION
    contained nested joins in it. “Join rewriting” is a feature with a wide range
    of possibilities and is the first intricate “SQL rewriting” feature we’ve introduced
    in years, so we’re sort of going through a lot of iterations with it (not unlike
    eager loading back in the 0.2/0.3 series, polymorphic loading in 0.4/0.5). We
    should be there soon so thanks for bearing with us :).
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQLite 的“连接重写”进行了更多修复；在 0.9.3 版本发布之前实施的修复影响了 UNION 中包含嵌套连接的情况。“连接重写”是一个具有广泛可能性的功能，并且是多年来我们引入的第一个复杂的“SQL
    重写”功能，因此我们正在进行许多迭代（就像在 0.2/0.3 系列中的急加载，0.4/0.5 中的多态加载）。我们很快就会完成，感谢您的耐心等待 :).
- en: 'References: [#2969](https://www.sqlalchemy.org/trac/ticket/2969)'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2969](https://www.sqlalchemy.org/trac/ticket/2969)
- en: examples
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [bug]**'
- en: Fixed bug in the versioned_history example where column-level INSERT defaults
    would prevent history values of NULL from being written.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本化历史示例中的一个 bug，其中列级的 INSERT 默认值会阻止写入 NULL 的历史值。
- en: engine
  id: totrans-524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added some new event mechanics for dialect-level events; the initial implementation
    allows an event handler to redefine the specific mechanics by which an arbitrary
    dialect invokes execute() or executemany() on a DBAPI cursor. The new events,
    at this point semi-public and experimental, are in support of some upcoming transaction-related
    extensions.
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为方言级事件添加了一些新的事件机制；初始实现允许事件处理程序重新定义任意方言在 DBAPI 游标上调用 execute() 或 executemany()
    的具体机制。这些新事件，目前是半公开和实验性的，是为了支持即将推出的一些与事务相关的扩展。
- en: '**[engine] [feature]**'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: An event listener can now be associated with a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), after one or more [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects have been created (such as by an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or via explicit connect) and the listener will pick
    up events from those connections. Previously, performance concerns pushed the
    event transfer from [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") at init-time only, but we’ve inlined a bunch of
    conditional checks to make this possible without any additional function calls.
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以将事件监听器与[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")关联，之后一个或多个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象已创建（例如通过orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或通过显式连接），监听器将从这些连接中接收事件。以前，性能问题导致事件传输从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")仅在初始化时转移到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，但我们内联了一堆条件检查，使得这种操作在没有任何额外函数调用的情况下成为可能。
- en: 'References: [#2978](https://www.sqlalchemy.org/trac/ticket/2978)'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2978](https://www.sqlalchemy.org/trac/ticket/2978)
- en: '**[engine] [bug]**'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A major improvement made to the mechanics by which the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") recycles the connection pool when a “disconnect” condition
    is detected; instead of discarding the pool and explicitly closing out connections,
    the pool is retained and a “generational” timestamp is updated to reflect the
    current time, thereby causing all existing connections to be recycled when they
    are next checked out. This greatly simplifies the recycle process, removes the
    need for “waking up” connect attempts waiting on the old pool and eliminates the
    race condition that many immediately-discarded “pool” objects could be created
    during the recycle operation.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")在检测到“断开”条件时重新使用连接池的机制进行了重大改进；现在不再丢弃池并显式关闭连接，而是保留池并更新“生成”时间戳以反映当前时间，从而导致在下次检出时重新使用所有现有连接。这极大地简化了回收过程，消除了等待旧池的“唤醒”连接尝试的需要，并消除了在回收操作期间可能创建许多立即丢弃的“池”对象的竞争条件。
- en: 'References: [#2985](https://www.sqlalchemy.org/trac/ticket/2985)'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2985](https://www.sqlalchemy.org/trac/ticket/2985)
- en: '**[engine] [bug]**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") event is now emitted
    for the “_cursor_execute()” method of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); this is the “quick” executor that is used for
    things like when a sequence is executed ahead of an INSERT statement, as well
    as for dialect startup checks like unicode returns, charset, etc. the [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event was already
    invoked here. The “executemany” flag is now always set to False here, as this
    event always corresponds to a single execution. Previously the flag could be True
    if we were acting on behalf of an executemany INSERT statement.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") 事件现在针对[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“_cursor_execute()”方法发出；这是用于诸如在INSERT语句之前执行序列等快速执行器，以及用于方言启动检查（如unicode返回、字符集等）的事件。[`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 事件已在此处调用。此处“executemany”标志现在始终设置为False，因为此事件始终对应于单个执行。以前，如果我们代表executemany
    INSERT语句执行操作，该标志可能为True。'
- en: sql
  id: totrans-535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for literal rendering of boolean values, e.g. “true” / “false”
    or “1” / “0”.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对布尔值的文字呈现支持，例如“true” / “false”或“1” / “0”。
- en: '**[sql] [feature]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new feature [`conv()`](../core/constraints.html#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv"), the purpose of which is to mark a constraint name as
    already having had a naming convention applied. This token will be used by Alembic
    migrations as of Alembic 0.6.4 in order to render constraints in migration scripts
    with names marked as already having been subject to a naming convention.
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能[`conv()`](../core/constraints.html#sqlalchemy.schema.conv "sqlalchemy.schema.conv")，其目的是标记约束名称已经应用了命名约定。这个标记将在
    Alembic 0.6.4 中被 Alembic 迁移使用，以便在迁移脚本中呈现已经标记为已经应用了命名约定的约束。
- en: '**[sql] [feature]**'
  id: totrans-540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The new dialect-level keyword argument system for schema-level constructs has
    been enhanced in order to assist with existing schemes that rely upon addition
    of ad-hoc keyword arguments to constructs.
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助依赖于向构造添加临时关键字参数的现有方案，已经增强了模式级构造的新方言级关键字参数系统。
- en: 'E.g., a construct such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") will again accept ad-hoc keyword arguments within the
    [`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs "sqlalchemy.schema.Index.kwargs")
    collection, after construction:'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，类似[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")这样的构造在构建后将再次接受[`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs
    "sqlalchemy.schema.Index.kwargs")集合中的临时关键字参数：
- en: '[PRE0]'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To suit the use case of allowing custom arguments at construction time, the
    [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method now allows this registration:'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应允许在构造时使用自定义参数的用例，[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法现在允许这种注册：
- en: '[PRE1]'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: See also
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866), [#2962](https://www.sqlalchemy.org/trac/ticket/2962)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866)，[#2962](https://www.sqlalchemy.org/trac/ticket/2962)
- en: '**[sql] [bug]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")构造中的错误，其中实质上第一个
    SQL 表达式的“类型”会被应用为与比较的元组值的“比较类型”；在某些情况下，这会导致不恰当的“类型强制转换”发生，例如当一个包含字符串和二进制值混合的元组错误地将目标值强制转换为二进制，即使左侧并不是二进制。[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")现在期望其值列表中存在异构类型。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.6
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: '**[sql] [bug]**'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an 0.9 regression where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that failed to reflect correctly wouldn’t be removed
    from the parent [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), even though in an invalid state. Pullreq courtesy
    Roman Podoliaka.
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.9 中的一个回归问题，即未能正确反映的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")不会从父[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中移除，即使处于无效状态。感谢 Roman Podoliaka 的 Pullreq。
- en: 'References: [#2988](https://www.sqlalchemy.org/trac/ticket/2988)'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2988](https://www.sqlalchemy.org/trac/ticket/2988)
- en: '**[sql] [bug]**'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature will now also apply to [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects that are associated directly with
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    instead of just on the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 功能现在也将应用于直接与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")关联的[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")对象，而不仅仅是[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上的。'
- en: '**[sql] [bug]**'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature where the name of a check constraint making
    use of the “%(constraint_name)s” token would get doubled up for the constraint
    generated by a boolean or enum type, and overall duplicate events would cause
    the “%(constraint_name)s” token to keep compounding itself.
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")功能中的错误，其中使用“%(constraint_name)s”标记的检查约束的名称会在布尔或枚举类型生成的约束中重复，而整体重复事件会导致“%(constraint_name)s”标记不断累积。
- en: 'References: [#2991](https://www.sqlalchemy.org/trac/ticket/2991)'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2991](https://www.sqlalchemy.org/trac/ticket/2991)
- en: '**[sql] [bug]**'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the logic which applies names to the .c collection when a no-name [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is received, e.g. via [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") or similar; the “key” of the bind param is
    used as the key within .c. rather than the rendered name. Since these binds have
    “anonymous” names in any case, this allows individual bound parameters to have
    their own name within a selectable if they are otherwise unlabeled.
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了将名称应用于 .c 集合时的逻辑，当接收到无名称的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时，例如通过[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")或类似方式；绑定参数的“key”被用作 .c 中的键，而不是渲染名称。由于这些绑定在任何情况下都具有“匿名”名称，这允许单独的绑定参数在可选择的情况下具有自己的名称，如果它们没有被标记。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Some changes to how the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection behaves when presented with
    duplicate columns. The behavior of emitting a warning and replacing the old column
    with the same name still remains to some degree; the replacement in particular
    is to maintain backwards compatibility. However, the replaced column still remains
    associated with the `c` collection now in a collection `._all_columns`, which
    is used by constructs such as aliases and unions, to deal with the set of columns
    in `c` more towards what is actually in the list of columns rather than the unique
    set of key names. This helps with situations where SELECT statements with same-named
    columns are used in unions and such, so that the union can match the columns up
    positionally and also there’s some chance of `FromClause.corresponding_column()`
    still being usable here (it can now return a column that is only in selectable.c._all_columns
    and not otherwise named). The new collection is underscored as we still need to
    decide where this list might end up. Theoretically it would become the result
    of iter(selectable.c), however this would mean that the length of the iteration
    would no longer match the length of keys(), and that behavior needs to be checked
    out.
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合的行为进行了一些更改，当遇到重复的列时。发出警告并替换具有相同名称的旧列的行为仍然在某种程度上保留；特别是替换是为了保持向后兼容性。但是，替换的列现在仍然与`c`集合关联在一起，现在在集合`._all_columns`中（用于处理诸如别名和联合之类的结构中的`c`列集合中的列集合），以更多地处理`c`中的列列表而不是唯一的键名称集合。这有助于处理在联合等情况下使用具有相同命名列的SELECT语句的情况，以便联合可以按位置匹配列，并且在这里仍然有一些机会使用`FromClause.corresponding_column()`（它现在可以返回仅在selectable.c._all_columns中而不以其他方式命名的列）。新集合是有下划线的，因为我们仍然需要决定这个列表最终可能会到哪里。从理论上讲，它将成为iter(selectable.c)的结果，但是这意味着迭代的长度将不再与keys()的长度匹配，需要检查该行为。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in new [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method where the ordering of columns
    given positionally would not be preserved. This could have potential impact in
    positional situations such as applying the resulting `TextAsFrom` object to a
    union.
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法中的问题，其中给定位置的列的顺序不会被保留。这可能会在诸如将生成的`TextAsFrom`对象应用于联合等位置情况下产生潜在影响。
- en: postgresql
  id: totrans-569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2 DBAPI启用了“理智的多行计数”检查，因为截至psycopg2 2.0.9似乎支持这一点。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯到**：0.8.6
- en: '**[postgresql] [bug]**'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由版本0.8.5 / 0.9.3的兼容性增强引起的回归错误已修复，在只针对8.1、8.2系列的PostgreSQL版本上反射索引时再次出现了问题，涉及到永远问题的int2vector类型。虽然int2vector从8.1开始支持数组操作，但显然它从8.3开始只支持CAST到varchar。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯到**：0.8.6
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: mysql
  id: totrans-577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Tweaked the settings for mysql-connector-python; in Py2K, the “supports unicode
    statements” flag is now False, so that SQLAlchemy will encode the *SQL string*
    (note: *not* the parameters) to bytes before sending to the database. This seems
    to allow all unicode-related tests to pass for mysql-connector, including those
    that use non-ascii table/column names, as well as some tests for the TEXT type
    using unicode under cursor.executemany().'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了mysql-connector-python的设置；在Py2K中，“supports unicode statements”标志现在为False，因此SQLAlchemy将在发送到数据库之前将*SQL字符串*（注意：*不是*参数）编码为字节。这似乎允许mysql-connector的所有与Unicode相关的测试通过，包括那些使用非ASCII表/列名称以及使用unicode在cursor.executemany()下的TEXT类型的一些测试。
- en: oracle
  id: totrans-580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new engine option `coerce_to_unicode=True` to the cx_Oracle dialect,
    which restores the cx_Oracle outputtypehandler approach to Python unicode conversion
    under Python 2, which was removed in 0.9.2 as a result of [#2911](https://www.sqlalchemy.org/trac/ticket/2911).
    Some use cases would prefer that unicode coercion is unconditional for all string
    values, despite performance concerns. Pull request courtesy Christoph Zwerschke.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 cx_Oracle 方言中添加了一个新的引擎选项 `coerce_to_unicode=True`，这恢复了在 Python 2 中 cx_Oracle
    输出类型处理方法到 Python Unicode 转换的方式，该方法在 0.9.2 中因 [#2911](https://www.sqlalchemy.org/trac/ticket/2911)
    被移除。一些使用情况可能会希望对所有字符串值进行 unicode 强制转换，尽管存在性能问题。补丁由 Christoph Zwerschke 提供。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: '**[oracle] [bug]**'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added new datatype [`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE
    "sqlalchemy.dialects.oracle.DATE"), which is a subclass of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). As Oracle has no “datetime” type per se, it instead
    has only `DATE`, it is appropriate here that the `DATE` type as present in the
    Oracle dialect be an instance of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). This issue doesn’t change anything as far as the
    behavior of the type, as data conversion is handled by the DBAPI in any case,
    however the improved subclass layout will help the use cases of inspecting types
    for cross-database compatibility. Also removed uppercase `DATETIME` from the Oracle
    dialect as this type isn’t functional in that context.
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的数据类型 [`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE "sqlalchemy.dialects.oracle.DATE")，它是
    [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime "sqlalchemy.types.DateTime")
    的子类。由于 Oracle 没有“datetime”类型，而只有 `DATE`，因此在 Oracle 方言中，`DATE` 类型作为 [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime") 的实例是合适的。这个问题并不改变类型的行为，因为数据转换无论如何都是由 DBAPI 处理的，但改进的子类布局将有助于跨数据库兼容性的检查类型的使用情况。此外，从
    Oracle 方言中删除了大写的 `DATETIME`，因为这种类型在该上下文中无法使用。
- en: 'References: [#2987](https://www.sqlalchemy.org/trac/ticket/2987)'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2987](https://www.sqlalchemy.org/trac/ticket/2987)
- en: tests
  id: totrans-587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [bug]**'
- en: Fixed a few errant `u''` strings that would prevent tests from passing in Py3.2\.
    Patch courtesy Arfrever Frehtes Taifersar Arahesis.
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些在 Py3.2 中会导致测试失败的 errant `u''` 字符串。补丁由 Arfrever Frehtes Taifersar Arahesis
    提供。
- en: 'References: [#2980](https://www.sqlalchemy.org/trac/ticket/2980)'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2980](https://www.sqlalchemy.org/trac/ticket/2980)
- en: misc
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mutable extension 和 [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") 中的一个 bug，即如果属性被重新分配为自身，则更改事件将不会传播。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：0.8.6
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: '**[bug] [automap] [ext]**'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [automap] [ext]**'
- en: Added support to automap for the case where a relationship should not be created
    between two classes that are in a joined inheritance relationship, for those foreign
    keys that link the subclass back to the superclass.
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 automap 添加了对两个处于联合继承关系的类之间不应创建关系的支持，用于将子类链接回父类的那些外键。
- en: 'References: [#3004](https://www.sqlalchemy.org/trac/ticket/3004)'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3004](https://www.sqlalchemy.org/trac/ticket/3004)
- en: '**[bug] [pool]**'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [池]**'
- en: Fixed small issue in [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") where the current connection to be returned
    might get inadvertently cleaned out during the “cleanup” process. Patch courtesy
    jd23.
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") 中的一个小问题，即在“清理”过程中可能会无意间清除要返回的当前连接。补丁由 jd23
    提供。
- en: '**[bug] [ext] [py3k]**'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [扩展] [py3k]**'
- en: Fixed bug in association proxy where assigning an empty slice (e.g. `x[:] =
    [...]`) would fail on Py3k.
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中的一个 bug，在 Py3k 上，分配一个空切片（例如 `x[:] = [...]`）将会失败。
- en: '**[bug] [ext]**'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a regression in association proxy caused by [#2810](https://www.sqlalchemy.org/trac/ticket/2810)
    which caused a user-provided “getter” to no longer receive values of `None` when
    fetching scalar values from a target that is non-present. The check for None introduced
    by this change is now moved into the default getter, so a user-provided getter
    will also again receive values of None.
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中由[#2810](https://www.sqlalchemy.org/trac/ticket/2810)引起的回归问题，该问题导致当从不存在的目标中获取标量值时，用户提供的“getter”不再接收`None`值。此更改引入的
    None 检查现在已移至默认 getter 中，因此用户提供的 getter 也将再次接收到 None 值。
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: 0.9.3
  id: totrans-606
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.3
- en: 'Released: February 19, 2014'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年2月19日
- en: orm
  id: totrans-608
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event which allows an event at
    the start of [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers"), as well as `__declare_first__()` hook within
    declarative to complement `__declare_last__()`.
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件，允许在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")开始时触发事件，以及在声明式中配合`__declare_last__()`的`__declare_first__()`钩子。
- en: '**[orm] [bug]**'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")在具有现有条件的查询上调用时，如果给定的标识已经存在于标识映射中，则无法始终引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")的错误的 bug。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回移**到了：0.8.5
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug in SQLite “join rewriting” where usage of an exists() construct would
    fail to be rewritten properly, such as when the exists is mapped to a column_property
    in an intricate nested-join scenario. Also fixed a somewhat related issue where
    join rewriting would fail on the columns clause of the SELECT statement if the
    targets were aliased tables, as opposed to individual aliased columns.
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite “join rewriting” 中的一个 bug，即使用 exists() 构造时无法正确重写的问题，例如，当 exists 被映射到一个复杂的嵌套连接场景中的
    column_property 时。还修复了一个有些相关的问题，即当目标是别名表而不是单独的别名列时，如果 SELECT 语句的 columns 子句的目标是别名表，则连接重写将在失败。
- en: 'References: [#2967](https://www.sqlalchemy.org/trac/ticket/2967)'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2967](https://www.sqlalchemy.org/trac/ticket/2967)
- en: '**[orm] [bug]**'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an 0.9 regression where ORM instance or mapper events applied to a base
    class such as a declarative base with the propagate=True flag would fail to apply
    to existing mapped classes which also used inheritance due to an assertion. Additionally,
    repaired an attribute error which could occur during removal of such an event,
    depending on how it was first assigned.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 0.9 版本的回归问题，即应用于基类（例如使用了传播标志的声明式基类）的 ORM 实例或映射器事件将无法应用于还使用了继承的现有映射类的情况，因为存在一个断言。另外，修复了在移除这种事件时可能出现的属性错误，具体取决于首次分配的方式。
- en: 'References: [#2949](https://www.sqlalchemy.org/trac/ticket/2949)'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2949](https://www.sqlalchemy.org/trac/ticket/2949)
- en: '**[orm] [bug]**'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the initialization logic of composite attributes such that calling
    `MyClass.attribute` will not require that the configure mappers step has occurred,
    e.g. it will just work without throwing any error.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了复合属性的初始化逻辑，使得调用`MyClass.attribute`不再需要配置映射器步骤，例如，它将在不抛出任何错误的情况下正常工作。
- en: 'References: [#2935](https://www.sqlalchemy.org/trac/ticket/2935)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2935](https://www.sqlalchemy.org/trac/ticket/2935)
- en: '**[orm] [bug]**'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: More issues with [ticket:2932] first resolved in 0.9.2 where using a column
    key of the form `<tablename>_<columnname>` matching that of an aliased column
    in the text would still not match at the ORM level, which is ultimately due to
    a core column-matching issue. Additional rules have been added so that the column
    `_label` is taken into account when working with a `TextAsFrom` construct or with
    literal columns.
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于[ticket:2932]的问题首次在0.9.2中解决，其中使用形式为`<tablename>_<columnname>`的列键与文本中的别名列仍然不匹配，这最终是由于核心列匹配问题。已添加额外规则，以便在使用`TextAsFrom`构造或文字列时考虑列`_label`。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: orm declarative
  id: totrans-627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") would fail to be fully usable
    within declarative relationship configuration, as its string classname would not
    be available in the registry of classnames at mapper configuration time. The class
    now explicitly adds itself to the class registry, and additionally both [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") as well as [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") set themselves up *before* mappers
    are configured within the [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") setup, using the new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event.
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")在声明性关系配置中无法完全使用，因为其字符串类名在映射器配置时不可用。该类现在明确将自己添加到类注册表中，并且[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")以及[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")在映射器配置之前*之前*设置自己，在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")设置中，使用新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件。
- en: 'References: [#2950](https://www.sqlalchemy.org/trac/ticket/2950)'
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2950](https://www.sqlalchemy.org/trac/ticket/2950)
- en: examples
  id: totrans-631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [feature]**'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Added optional “changed” column to the versioned rows example, as well as support
    for when the versioned [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has an explicit [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument. Pull request courtesy jplaverdure.
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本化行示例中添加了可选的“changed”列，以及当版本化的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")具有显式的[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数时的支持。感谢jplaverdure的拉取请求。
- en: engine
  id: totrans-634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug] [pool]**'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键回归，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，从而在即使是最小并发情况下也导致方言配置错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)，[#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")时使用空列表或元组会引发IndexError的bug。现在它会产生一个空的插入构造，就像使用空字典的情况一样。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了如果错误地传递了包含`__getitem __()`方法的列表达式的比较器的[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")会进入无限循环的错误，例如使用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型的列。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已经**反向移植**到：0.8.5
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in new “naming convention” feature where conventions would
    fail if the referred table in a foreign key contained a schema name. Pull request
    courtesy Thomas Farvour.
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“命名约定”功能中的回归，如果外键中的引用表包含模式名称，则约定会失败。Pull request来自Thomas Farvour。
- en: '**[sql] [bug]**'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where so-called “literal render” of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs would fail if the bind were
    constructed with a callable, rather than a direct value. This prevented ORM expressions
    from being rendered with the “literal_binds” compiler flag.
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了所谓的“字面渲染”[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造的bug，如果绑定是用可调用的方式构造而不是直接值，则会失败。这阻止了使用“literal_binds”编译器标志渲染ORM表达式。
- en: postgresql
  id: totrans-652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added the [`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type") convenience accessor onto the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type. Pull request courtesy Alexey Terentev.
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型上添加了[`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type")的便利访问器。Pull request来自Alexey Terentev。
- en: '**[postgresql] [bug]**'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向psycopg2断开连接检测添加了一个额外的消息，“无法将数据发送到服务器”，这补充了现有的“无法从服务器接收数据”，并已被用户观察到。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已经**反向移植**到：0.8.5
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-660
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于非常旧的（8.1之前）版本的PostgreSQL以及可能的其他PG引擎（假设Redshift报告版本小于8.1），已改进了对PostgreSQL反射行为的支持。
    “索引”和“主键”的查询依赖于检查所谓的“int2vector”数据类型，该数据类型在8.1之前的版本中拒绝转换为数组，导致查询中使用的“ANY（）”运算符失败。通过广泛的搜索找到了非常巧妙但由PG核心开发人员推荐使用的查询，用于在使用PG版本<8.1时，索引和主键约束反射现在可以在这些版本上工作。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已经**反向移植**到：0.8.5
- en: '**[postgresql] [bug]**'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了这个非常老的问题，其中PostgreSQL的“获取主键”反射查询已更新以考虑已重命名的主键约束；新的查询在旧版本的PostgreSQL上失败，如版本7，因此在检测到server_version_info
    <(8, 0)的情况下，在这些情况下恢复旧的查询。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已经**反向移植**到：0.8.5
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql] [bug]**'
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added server version detection to the newly added dialect startup query for
    “show standard_conforming_strings”; as this variable was added as of PG 8.2, we
    skip the query for PG versions who report a version string earlier than that.
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新添加的方言启动查询中添加了服务器版本检测，用于“show standard_conforming_strings”; 由于此变量是从 PG 8.2
    开始添加的，我们会跳过对报告早于该版本的 PG 版本的查询。
- en: 'References: [#2946](https://www.sqlalchemy.org/trac/ticket/2946)'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2946](https://www.sqlalchemy.org/trac/ticket/2946)
- en: mysql
  id: totrans-669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括分数秒支持；还为 [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") 添加了分数秒支持。 DBAPI 支持有限，尽管 MySQL Connector/Python
    已知支持分数秒。 补丁由 Geert JM Vanderkelen 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 `PARTITION BY` 和 `PARTITIONS` MySQL 表关键字的支持，指定为 `mysql_partition_by='value'`
    和 `mysql_partitions='value'` 到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。 拉取请求由 Marcus McCurdy 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 阻止了基于 MySQLdb 的方言（例如 pymysql）在 Py3K 中工作，因为“connection charset”的检查会由于
    Py3K 更严格的值比较规则而失败。 在任何情况下，该调用都没有考虑数据库版本，因为服务器版本在那时仍然为 None，因此该方法已经简化为依赖于 connection.character_set_name()。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug] [cymysql]**'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [cymysql]**'
- en: Fixed bug in cymysql dialect where a version string such as `'33a-MariaDB'`
    would fail to parse properly. Pull request courtesy Matt Schmidt.
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cymysql 方言中的一个 bug，其中类似 `'33a-MariaDB'` 的版本字符串无法正确解析。 拉取请求由 Matt Schmidt
    提供。
- en: 'References: [#2934](https://www.sqlalchemy.org/trac/ticket/2934)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2934](https://www.sqlalchemy.org/trac/ticket/2934)
- en: sqlite
  id: totrans-685
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: The SQLite dialect will now skip unsupported arguments when reflecting types;
    such as if it encounters a string like `INTEGER(5)`, the [`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") type will be instantiated without the “5” being included,
    based on detecting a `TypeError` on the first attempt.
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在在反射类型时会跳过不支持的参数；例如，如果遇到类似 `INTEGER(5)` 的字符串，将实例化 [`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") 类型时不包括“5”，基于在第一次尝试时检测到 `TypeError`。
- en: '**[sqlite] [bug]**'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Support has been added to SQLite type reflection to fully support the “type
    affinity” contract specified at [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html).
    In this scheme, keywords like `INT`, `CHAR`, `BLOB` or `REAL` located in the type
    name generically associate the type with one of five affinities. Pull request
    courtesy Erich Blume.
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已向 SQLite 类型反射添加了对完全支持“类型亲和性”契约的支持，该契约在 [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html)
    中指定。 在此方案中，类型名称中的关键字如 `INT`、`CHAR`、`BLOB` 或 `REAL` 通常将类型与五种亲和性之一关联起来。 拉取请求由 Erich
    Blume 提供。
- en: See also
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Type Reflection](../dialects/sqlite.html#sqlite-type-reflection)'
  id: totrans-691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[类型反射](../dialects/sqlite.html#sqlite-type-reflection)'
- en: misc
  id: totrans-692
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") class of the new automap extension would
    fail if classes were pre-arranged in single or potentially joined inheritance
    patterns. The repaired joined inheritance issue could also potentially apply when
    using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") as well.
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当类在单个或潜在的联合继承模式中预先排列时，新的自动映射扩展的 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 类会失败的 bug。修复的联合继承问题也可能适用于使用 [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") 时。
- en: 0.9.2
  id: totrans-695
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.2
- en: 'Released: February 2, 2014'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年2月2日
- en: orm
  id: totrans-697
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new parameter [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op"). This flag allows a custom op from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") to be considered as a “comparison” operator,
    thus usable for custom [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") conditions.
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的参数 [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")。此标志允许将来自 [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 的自定义操作视为“比较”操作符，因此可用于自定义 [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") 条件。
- en: See also
  id: totrans-700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '**[orm] [feature]**'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Support is improved for supplying a [`join()`](../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") construct as the target of [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") for the purposes of creating very complex [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") join conditions. The change includes adjustments
    to query joining, joined eager loading to not render a SELECT subquery, changes
    to lazy loading such that the “secondary” target is properly included in the SELECT,
    and changes to declarative to better support specification of a join() object
    with classes as targets.
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于以 [`join()`](../core/selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")
    构造作为 [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") 目标以创建非常复杂的 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 连接条件的目的，支持得到了改善。此更改包括查询连接、连接的及时加载以不生成 SELECT 子查询、延迟加载的更改以使“secondary”目标正确包含在
    SELECT 中，以及声明性的更改以更好地支持将 join() 对象与类作为目标的指定。
- en: The new use case is somewhat experimental, but a new documentation section has
    been added.
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的用例有些实验性，但已添加了一个新的文档部分。
- en: See also
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Composite “Secondary” Joins](../orm/join_conditions.html#composite-secondary-join)'
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[组合“Secondary”连接](../orm/join_conditions.html#composite-secondary-join)'
- en: '**[orm] [bug]**'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当将迭代器对象传递给 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 或类似函数时的错误消息，其中错误会在字符串格式化时失败的 bug。来自 Kyle Stark
    的 Pullreq。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被 **回溯** 到：0.8.5
- en: '**[orm] [bug]**'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new `TextAsFrom` construct where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")- oriented row lookups were not matching up to the
    ad-hoc [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects that `TextAsFrom` generates,
    thereby making it not usable as a target in [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement"). Also fixed [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement") mechanics to not mistake a `TextAsFrom`
    for a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct. This bug is also an 0.9 regression as the [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method is called to accommodate
    the [`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text") argument.
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的`TextAsFrom`构造中的错误，在此构造中，[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")-定向行查找未能与`TextAsFrom`生成的临时[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")对象匹配，因此不能在[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")中使用。还修复了[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")的机制，以免误将`TextAsFrom`误认为是[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造。该错误也是 0.9 的退化，因为调用了[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法以适应[`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text")参数。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: '**[orm] [bug]**'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new directive used within the scope of an attribute “set” operation
    to disable autoflush, in the case that the attribute needs to lazy-load the “old”
    value, as in when replacing one-to-one values or some kinds of many-to-one. A
    flush at this point otherwise occurs at the point that the attribute is None and
    can cause NULL violations.
  id: totrans-714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在属性“set”操作的范围内添加了一个新的指令，用于禁用自动刷新，在属性需要延迟加载“旧”值的情况下使用，例如在替换一对一值或某些类型的一对多值时。否则，在属性为
    None 时会发生刷新，并可能导致 NULL 违规。
- en: 'References: [#2921](https://www.sqlalchemy.org/trac/ticket/2921)'
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2921](https://www.sqlalchemy.org/trac/ticket/2921)
- en: '**[orm] [bug]**'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an 0.9 regression where the automatic aliasing applied by [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") and in other situations where selects or joins were aliased
    (such as joined table inheritance) could fail if a user-defined [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") subclass were used in the expression. In this case,
    the subclass would fail to propagate ORM-specific “annotations” along needed by
    the adaptation. The “expression annotations” system has been corrected to account
    for this case.
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 0.9 退化，即当由[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")自动应用别名时，以及在其他情况下选择或连接被别名化时（例如联接表继承），如果在表达式中使用了用户定义的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")子类，则可能失败。在这种情况下，子类将无法传播 ORM 特定的“注解”，而这些注解对适应是必需的。已根据这种情况纠正了“表达式注解”系统。
- en: 'References: [#2918](https://www.sqlalchemy.org/trac/ticket/2918)'
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2918](https://www.sqlalchemy.org/trac/ticket/2918)
- en: '**[orm] [bug]**'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug involving the new flattened JOIN structures which are used with
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") (thereby causing a regression in joined eager loading)
    as well as [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    in conjunction with the `flat=True` flag and joined-table inheritance; basically
    multiple joins across a “parent JOIN sub” entity using different paths to get
    to a target class wouldn’t form the correct ON conditions. An adjustment / simplification
    made in the mechanics of figuring out the “left side” of the join in the case
    of an aliased, joined-inh class repairs the issue.
  id: totrans-720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，涉及与新的扁平化JOIN结构一起使用的[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")（从而导致连接式贪婪加载的回归）以及与`flat=True`标志和连接表继承一起使用的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")；基本上，通过不同路径跨越“父JOIN子”实体进行多个连接以到达目标类的情况下，不会形成正确的ON条件。
    在处理一个别名的，连接继承类的“左侧”加入的机制中进行的调整/简化修复了该问题。
- en: 'References: [#2908](https://www.sqlalchemy.org/trac/ticket/2908)'
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#2908](https://www.sqlalchemy.org/trac/ticket/2908)'
- en: examples
  id: totrans-722
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误修复]**'
- en: Added a tweak to the “history_meta” example where the check for “history” on
    a relationship-bound attribute will now no longer emit any SQL if the relationship
    is unloaded.
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“history_meta”示例中添加了一个调整，其中对于关系绑定属性上的“history”检查如果关系未加载，则不再发出任何SQL。
- en: engine
  id: totrans-725
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature] [pool]**'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能] [池]**'
- en: Added a new pool event [`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate"). Called when a DBAPI connection is
    to be marked as “invalidated” and discarded from the pool.
  id: totrans-727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的池事件[`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")。 当要将DBAPI连接标记为“无效”并从池中丢弃时调用。
- en: sql
  id: totrans-728
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added [`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect") to support dialect-level reflection options
    for all [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects reflected.
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect") 以支持对所有[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象进行反射的方言级反射选项。
- en: '**[sql] [feature]**'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a new feature which allows automated naming conventions to be applied
    to [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects. Based on a recipe in the wiki, the new feature uses schema-events to
    set up names as various schema objects are associated with each other. The events
    then expose a configuration system through a new argument [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This system allows production of both simple and
    custom naming schemes for constraints and indexes on a per-[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") basis.
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能，允许将自动命名约定应用于[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象。 基于wiki中的一个配方，新功能使用模式事件来设置各个模式对象关联时的名称。 然后，事件通过一个新的参数[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")暴露了一个配置系统。 该系统允许在每个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")基础上生成简单和自定义的约束和索引命名方案。
- en: See also
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](../core/constraints.html#constraint-naming-conventions)'
- en: 'References: [#2923](https://www.sqlalchemy.org/trac/ticket/2923)'
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#2923](https://www.sqlalchemy.org/trac/ticket/2923)'
- en: '**[sql] [feature]**'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Options can now be specified on a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object independently of the specification
    of columns in the table with the `primary_key=True` flag; use a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object with no columns in it to achieve
    this result.
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在不涉及表中的列规范的情况下独立于`primary_key=True`标志指定[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象上的选项；使用一个不包含列的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象来实现此结果。
- en: Previously, an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") would have the effect of those columns
    marked as `primary_key=True` being ignored; since this is no longer the case,
    the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") will now assert that either one style
    or the other is used to specify the columns, or if both are present, that the
    column lists match exactly. If an inconsistent set of columns in the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") and within the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") marked as `primary_key=True` are present, a warning
    is emitted, and the list of columns is taken only from the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") alone as was the case in previous releases.
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前，显式的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")会导致那些标记为`primary_key=True`的列被忽略；由于现在不再是这样，[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")现在将确保使用一种风格或另一种风格来指定列，或者如果两者都存在，则列列表完全匹配。如果在[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中存在不一致的列集，并且在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")内标记为`primary_key=True`的列，则会发出警告，并且列的列表仅来自先前发布中的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")本身，就像以前的情况一样。
- en: See also
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")'
- en: 'References: [#2910](https://www.sqlalchemy.org/trac/ticket/2910)'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2910](https://www.sqlalchemy.org/trac/ticket/2910)
- en: '**[sql] [feature]**'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The system by which schema constructs and certain SQL constructs accept dialect-specific
    keyword arguments has been enhanced. This system includes commonly the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") constructs, which accept a wide variety of dialect-specific
    arguments such as `mysql_engine` and `postgresql_where`, as well as the constructs
    [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), and also newly added kwarg capability to
    [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"). The change is that participating dialects can
    now specify acceptable argument lists for these constructs, allowing an argument
    error to be raised if an invalid keyword is specified for a particular dialect.
    If the dialect portion of the keyword is unrecognized, a warning is emitted only;
    while the system will actually make use of setuptools entrypoints in order to
    locate non-local dialects, the use case where certain dialect-specific arguments
    are used in an environment where that third-party dialect is uninstalled remains
    supported. Dialects also have to explicitly opt-in to this system, so that external
    dialects which aren’t making use of this system will remain unaffected.
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 架构构造和某些 SQL 构造接受方言特定关键字参数的系统已得到加强。该系统通常包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，它们接受各种各样的方言特定参数，如`mysql_engine`和`postgresql_where`，以及构造[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")，并且还新增了对[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")的关键字参数能力。变化在于参与的方言现在可以指定这些构造的可接受参数列表，允许在为特定方言指定无效关键字时引发参数错误。如果关键字的方言部分未被识别，仅发出警告；虽然系统实际上将使用
    setuptools 入口点来定位非本地方言，但在某些方言特定参数在未安装第三方方言的环境中使用的用例仍然受支持。方言还必须显式地选择加入此系统，以便未使用此系统的外部方言不受影响。
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866)'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866)
- en: '**[sql] [bug]**'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") has been adjusted such that the schema target
    of a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    will not be changed unless that schema matches that of the parent table. That
    is, if a table “schema_a.user” has a foreign key to “schema_b.order.id”, the “schema_b”
    target will be maintained whether or not the “schema” argument is passed to [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata"). However if a table “schema_a.user” refers
    to “schema_a.order.id”, the presence of “schema_a” will be updated on both the
    parent and referred tables. This is a behavioral change hence isn’t likely to
    be backported to 0.8; it is assumed that the previous behavior is pretty buggy
    however and that it’s unlikely anyone was relying upon it.
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法的行为已经调整，使得[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 的模式目标不会改变，除非该模式与父表的模式匹配。也就是说，如果一个表“schema_a.user”有一个指向“schema_b.order.id”的外键，无论是否将“schema”参数传递给[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")，都将保持“schema_b”目标不变。然而，如果一个表“schema_a.user”引用“schema_a.order.id”，则“schema_a”
    的存在将在父表和被引用的表上更新。这是一个行为变更，因此不太可能被回溯到0.8版本；假设以前的行为相当错误，而且很少有人依赖它。'
- en: Additionally, a new parameter has been added [`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata"). This refers to a callable function which
    will be used to determine the new referred schema for any [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") encountered in the tometadata operation.
    This callable can be used to revert to the previous behavior or to customize how
    referred schemas are treated on a per-constraint basis.
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，新增了一个参数[`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata")。这是指一个可调用函数，用于确定在tometadata操作中遇到的任何[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的新被引用模式。这个可调用函数可以用于恢复到以前的行为或自定义如何处理每个约束的被引用模式。
- en: 'References: [#2913](https://www.sqlalchemy.org/trac/ticket/2913)'
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2913](https://www.sqlalchemy.org/trac/ticket/2913)
- en: '**[sql] [bug]**'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby binary type would fail in some cases if used with a “test”
    dialect, such as a DefaultDialect or other dialect with no DBAPI.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在某些情况下，如果与“test”方言一起使用二进制类型，例如DefaultDialect或其他没有DBAPI的方言，二进制类型会失败。
- en: '**[sql] [bug] [py3k]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Fixed bug where “literal binds” wouldn’t work with a bound parameter that’s
    a binary type. A similar, but different, issue is fixed in 0.8.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“literal binds”无法与绑定参数为二进制类型的bug。0.8版本中修复了一个类似但不同的问题。
- en: '**[sql] [bug]**'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression whereby the “annotation” system used by the ORM was leaking
    into the names used by standard functions in `sqlalchemy.sql.functions`, such
    as `func.coalesce()` and `func.max()`. Using these functions in ORM attributes
    and thus producing annotated versions of them could corrupt the actual function
    name rendered in the SQL.
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，即ORM使用的“注释”系统泄漏到`sqlalchemy.sql.functions` 中标准函数的名称中，例如`func.coalesce()`
    和 `func.max()`。在ORM属性中使用这些函数，从而生成它们的带注释版本，可能会破坏在SQL中呈现的实际函数名称。
- en: 'References: [#2927](https://www.sqlalchemy.org/trac/ticket/2927)'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2927](https://www.sqlalchemy.org/trac/ticket/2927)
- en: '**[sql] [bug]**'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9 regression where the new sortable support for `RowProxy` would lead
    to `TypeError` when compared to non-tuple types as it attempted to apply tuple()
    to the “other” object unconditionally. The full range of Python comparison operators
    have now been implemented on `RowProxy`, using an approach that guarantees a comparison
    system that is equivalent to that of a tuple, and the “other” object is only coerced
    if it’s an instance of RowProxy.
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中的回归问题，即`RowProxy` 的新可排序支持在与非元组类型进行比较时会导致`TypeError`，因为它试图无条件地应用tuple()到“other”对象。现在在`RowProxy`
    上实现了完整的Python比较运算符范围，使用一种保证等效于元组的比较系统的方法，只有在“other”对象是RowProxy的实例时才会强制转换该对象。
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)
- en: '**[sql] [bug]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") created inline with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has no columns within it will be skipped. Pullreq
    courtesy Derek Harland.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在没有列的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    内联创建的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 将被跳过。感谢 Derek Harland 提供了 Pullreq。
- en: '**[sql] [bug] [orm]**'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: Fixed the multiple-table “UPDATE..FROM” construct, only usable on MySQL, to
    correctly render the SET clause among multiple columns with the same name across
    tables. This also changes the name used for the bound parameter in the SET clause
    to “<tablename>_<colname>” for the non-primary table only; as this parameter is
    typically specified using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly this should not have an impact on
    applications. The fix takes effect for both [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") as well as [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") in the ORM.
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多表“UPDATE..FROM”构造，在 MySQL 上可用，以正确渲染 SET 子句中跨表具有相同名称的多列。这还更改了仅针对非主表的 SET
    子句中使用的绑定参数的名称为“<tablename>_<colname>”；由于此参数通常是直接使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象指定的，这不应对应用程序产生影响。该修复对 ORM 中的 [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") 和 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 均生效。
- en: 'References: [#2912](https://www.sqlalchemy.org/trac/ticket/2912)'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2912](https://www.sqlalchemy.org/trac/ticket/2912)
- en: schema
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Restored `sqlalchemy.schema.SchemaVisitor` to the `.schema` module. Pullreq
    courtesy Sean Dague.
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `sqlalchemy.schema.SchemaVisitor` 恢复到 `.schema` 模块中。感谢 Sean Dague 提供了 Pullreq。
- en: postgresql
  id: totrans-767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new dialect-level argument `postgresql_ignore_search_path`; this argument
    is accepted by both the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor as well as by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method. When in use against PostgreSQL,
    a foreign-key referenced table which specifies a remote schema name will retain
    that schema name even if the name is present in the `search_path`; the default
    behavior since 0.7.3 has been that schemas present in `search_path` would not
    be copied to reflected [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects. The documentation has been updated to
    describe in detail the behavior of the `pg_get_constraintdef()` function and how
    the `postgresql_ignore_search_path` feature essentially determines if we will
    honor the schema qualification reported by this function or not.
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方言级参数 `postgresql_ignore_search_path`；此参数被 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造函数和 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法接受。在对 PostgreSQL 使用时，指定了远程模式名称的外键引用表将保留该模式名称，即使该名称存在于
    `search_path` 中；自 0.7.3 版以来的默认行为是，`search_path` 中存在的模式不会复制到反射的 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象中。文档已更新以详细描述 `pg_get_constraintdef()` 函数的行为，以及
    `postgresql_ignore_search_path` 功能如何确定我们是否将遵守此函数报告的模式限定。
- en: See also
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[远程模式表内省和 PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
- en: 'References: [#2922](https://www.sqlalchemy.org/trac/ticket/2922)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2922](https://www.sqlalchemy.org/trac/ticket/2922)
- en: mysql
  id: totrans-773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 cymysql 方言添加了一些缺失的方法，包括 _get_server_version_info() 和 _detect_charset()。感谢
    Hajime Nakagami 提供了 Pullreq。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[mysql] [bug] [sql]**'
  id: totrans-777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [sql]**'
- en: Added new test coverage for so-called “down adaptions” of SQL types, where a
    more specific type is adapted to a more generic one - this use case is needed
    by some third party tools such as `sqlacodegen`. The specific cases that needed
    repair within this test suite were that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM") being downcast into a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and that of SQLite date types being cast into generic
    date types. The `adapt()` method needed to become more specific here to counteract
    the removal of a “catch all” `**kwargs` collection on the base [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class that was removed in 0.9.
  id: totrans-778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所谓的SQL类型“向下适应”添加了新的测试覆盖，其中更具体的类型被适应为更通用的类型 - 这种用例被一些第三方工具（如`sqlacodegen`）所需。在此测试套件中需要修复的特定情况包括将[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM")降级为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")，以及将SQLite日期类型转换为通用日期类型。`adapt()`方法在这里需要变得更具体，以抵消在0.9中删除的基本[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类上的“捕获所有”`**kwargs`集合的移除。
- en: 'References: [#2917](https://www.sqlalchemy.org/trac/ticket/2917)'
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2917](https://www.sqlalchemy.org/trac/ticket/2917)
- en: '**[mysql] [bug]**'
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL CAST compilation now takes into account aspects of a string type such
    as “charset” and “collation”. While MySQL wants all character- based CAST calls
    to use the CHAR type, we now create a real CHAR object at CAST time and copy over
    all the parameters it has, so that an expression like `cast(x, mysql.TEXT(charset='utf8'))`
    will render `CAST(t.col AS CHAR CHARACTER SET utf8)`.
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在MySQL CAST编译考虑了字符串类型的“字符集”和“排序”。虽然MySQL希望所有基于字符的CAST调用都使用CHAR类型，但我们现在在CAST时创建一个真正的CHAR对象，并复制它具有的所有参数，因此像`cast(x,
    mysql.TEXT(charset='utf8'))`这样的表达式将呈现为`CAST(t.col AS CHAR CHARACTER SET utf8)`。
- en: '**[mysql] [bug]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new “unicode returns” detection to the MySQL dialect and to the default
    dialect system overall, such that any dialect can add extra “tests” to the on-first-connect
    “does this DBAPI return unicode directly?” detection. In this case, we are adding
    a check specifically against the “utf8” encoding with an explicit “utf8_bin” collation
    type (after checking that this collation is available) to test for some buggy
    unicode behavior observed with MySQLdb version 1.2.3\. While MySQLdb has resolved
    this issue as of 1.2.4, the check here should guard against regressions. The change
    also allows the “unicode” checks to log in the engine logs, which was not previously
    the case.
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对MySQL方言和默认方言系统整体添加了新的“unicode返回”检测，以便任何方言都可以在首次连接时添加额外的“测试”来检测DBAPI是否直接返回unicode。在这种情况下，我们特别针对“utf8”编码添加了一个检查，使用显式的“utf8_bin”排序类型（在检查此排序是否可用后），以测试观察到的MySQLdb版本1.2.3存在的一些错误的unicode行为。虽然MySQLdb在1.2.4中已解决了此问题，但此处的检查应该防止出现退化。此更改还允许“unicode”检查记录在引擎日志中，这以前是不可能的。
- en: 'References: [#2906](https://www.sqlalchemy.org/trac/ticket/2906)'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2906](https://www.sqlalchemy.org/trac/ticket/2906)
- en: '**[mysql] [bug] [engine] [pool]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [engine] [pool]**'
- en: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now associates a new [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") or [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") with its immediate [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") as a “reset handler” for the span of that
    transaction, which takes over the task of calling commit() or rollback() for the
    “reset on return” behavior of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") if the transaction was not otherwise completed. This resolves
    the issue that a picky transaction like that of MySQL two-phase will be properly
    closed out when the connection is closed without an explicit rollback or commit
    (e.g. no longer raises “XAER_RMFAIL” in this case - note this only shows up in
    logging as the exception is not propagated within pool reset). This issue would
    arise e.g. when using an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with `twophase` set, and then [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") is called without an explicit rollback or commit.
    The change also has the effect that you will now see an explicit “ROLLBACK” in
    the logs when using a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object in non-autocommit mode regardless of how that
    session was discarded. Thanks to Jeff Dairiki and Laurence Rowe for isolating
    the issue here.'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在将一个新的 [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") 或 [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") 与其直接的 [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") 关联为该事务的“重置处理程序”，在该事务的范围内接管调用 commit() 或 rollback()
    以实现“返回时重置”的行为，如果事务未被完成。这解决了当连接在没有显式回滚或提交的情况下关闭时，像 MySQL 两阶段那样挑剔的事务将被正确关闭的问题（例如，在此情况下不再引发“XAER_RMFAIL”
    - 请注意，此异常仅在日志中显示，因为异常未在池重置中传播）。例如，当使用设置了 `twophase` 的 orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，然后在没有显式回滚或提交的情况下调用 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 时，将出现此问题。此更改还具有效果，即在非自动提交模式下使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象时，无论如何丢弃该会话，您现在都将在日志中看到明确的“ROLLBACK”。感谢 Jeff Dairiki
    和 Laurence Rowe 在此处隔离问题。'
- en: 'References: [#2907](https://www.sqlalchemy.org/trac/ticket/2907)'
  id: totrans-787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2907](https://www.sqlalchemy.org/trac/ticket/2907)
- en: sqlite
  id: totrans-788
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug whereby SQLite compiler failed to propagate compiler arguments such
    as “literal binds” into a CAST expression.
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 编译器未能将编译器参数（如“literal binds”）传播到 CAST 表达式中的 bug。
- en: mssql
  id: totrans-791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added an option `mssql_clustered` to the [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") constructs; on SQL Server, this adds
    the `CLUSTERED` keyword to the constraint construct within DDL. Pullreq courtesy
    Derek Harland.
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")构造中添加了一个选项`mssql_clustered`；在 SQL Server
    上，这将在 DDL 中的约束构造中添加`CLUSTERED`关键字。感谢 Derek Harland 提交的 Pullreq。
- en: oracle
  id: totrans-794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: It’s been observed that the usage of a cx_Oracle “outputtypehandler” in Python
    2.xx in order to coerce string values to Unicode is inordinately expensive; even
    though cx_Oracle is written in C, when you pass the Python `unicode` primitive
    to cursor.var() and associate with an output handler, the library counts every
    conversion as a Python function call with all the requisite overhead being recorded;
    this *despite* the fact when running in Python 3, all strings are also unconditionally
    coerced to unicode but it does *not* incur this overhead, meaning that cx_Oracle
    is failing to use performant techniques in Py2K. As SQLAlchemy cannot easily select
    for this style of type handler on a per-column basis, the handler was assembled
    unconditionally thereby adding the overhead to all string access.
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已经观察到，在 Python 2.xx 中使用 cx_Oracle 的“outputtypehandler”来将字符串值强制转换为 Unicode 是非常昂贵的；即使
    cx_Oracle 是用 C 编写的，当你将 Python `unicode` 原语传递给 cursor.var() 并与输出处理程序关联时，该库会将每次转换都计为
    Python 函数调用，并记录所有必要的开销；尽管在 Python 3 中运行时，所有字符串也都被无条件地转换为 Unicode，但它不会产生这种开销，这意味着
    cx_Oracle 在 Py2K 中未能使用高效的技术。由于 SQLAlchemy 不能轻松地针对每列选择此类类型处理程序，因此处理程序被无条件地组装，从而将开销添加到所有字符串访问中。
- en: So this logic has been replaced with SQLAlchemy’s own unicode conversion system,
    which now only takes effect in Py2K for columns that are requested as unicode.
    When C extensions are used, SQLAlchemy’s system appears to be 2-3x faster than
    cx_Oracle’s. Additionally, SQLAlchemy’s unicode conversion has been enhanced such
    that when the “conditional” converter is required (now needed for the Oracle backend),
    the check for “already unicode” is now performed in C and no longer introduces
    significant overhead.
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，这个逻辑已经被 SQLAlchemy 自己的 Unicode 转换系统取代，在 Py2K 中仅对请求为 Unicode 的列生效。当使用 C 扩展时，SQLAlchemy
    的系统似乎比 cx_Oracle 的系统快 2-3 倍。此外，SQLAlchemy 的 Unicode 转换已经得到增强，以便在需要“条件”转换器（现在在
    Oracle 后端需要）时，在 C 中执行“已经是 Unicode”的检查，不再引入显着的开销。
- en: This change has two impacts on the cx_Oracle backend. One is that string values
    in Py2K which aren’t specifically requested with the Unicode type or convert_unicode=True
    will now come back as `str`, not `unicode` - this behavior is similar to a backend
    such as MySQL. Additionally, when unicode values are requested with the cx_Oracle
    backend, if the C extensions are *not* used, there is now an additional overhead
    of an isinstance() check per column. This tradeoff has been made as it can be
    worked around and no longer places a performance burden on the likely majority
    of Oracle result columns that are non-unicode strings.
  id: totrans-798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变化对 cx_Oracle 后端有两个影响。一个是在 Py2K 中，未明确请求 Unicode 类型或 convert_unicode=True 的字符串值现在将返回`str`，而不是`unicode`
    - 这种行为类似于诸如 MySQL 的后端。此外，当使用 cx_Oracle 后端请求 Unicode 值时，如果未使用 C 扩展，现在每列都有一个 isinstance()
    检查的额外开销。这种权衡已经被做出，因为可以解决它，并且不再对可能是非 Unicode 字符串的大多数 Oracle 结果列施加性能负担。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: misc
  id: totrans-800
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [pool]**'
  id: totrans-801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: The argument names for the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event have been renamed to `dbapi_connection`
    and `connection_record` in order to maintain consistency with all the other pool
    events. It is expected that any existing listeners for this relatively new and
    seldom-used event are using positional style to receive arguments in any case.
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件的参数名已更改为 `dbapi_connection` 和 `connection_record`，以保持与所有其他池事件的一致性。预计任何现有的侦听器都在任何情况下都使用位置样式来接收参数。'
- en: '**[bug] [cextensions] [py3k]**'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [cextensions] [py3k]**'
- en: Fixed an issue where the C extensions in Py3K are using the wrong API to specify
    the top-level module function, which breaks in Python 3.4b2\. Py3.4b2 changes
    PyMODINIT_FUNC to return “void” instead of `PyObject *`, so we now make sure to
    use “PyMODINIT_FUNC” instead of `PyObject *` directly. Pull request courtesy cgohlke.
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Py3K 中 C 扩展使用错误的 API 来指定顶级模块函数的问题，这在 Python 3.4b2 中会出错。Py3.4b2 将 PyMODINIT_FUNC
    更改为返回“void”而不是`PyObject *`，因此现在我们确保直接使用“PyMODINIT_FUNC”而不是`PyObject *`。拉取请求由 cgohlke
    提供。
- en: 0.9.1
  id: totrans-805
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.1
- en: 'Released: January 5, 2014'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014 年 1 月 5 日
- en: orm
  id: totrans-807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [events]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [events]**'
- en: Fixed regression where using a `functools.partial()` with the event system would
    cause a recursion overflow due to usage of inspect.getargspec() on it in order
    to detect a legacy calling signature for certain events, and apparently there’s
    no way to do this with a partial object. Instead we skip the legacy check and
    assume the modern style; the check itself now only occurs for the SessionEvents.after_bulk_update
    and SessionEvents.after_bulk_delete events. Those two events will require the
    new signature style if assigned to a “partial” event listener.
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，使用`functools.partial()`与事件系统会因为在其上使用inspect.getargspec()来检测某些事件的传统调用签名而导致递归溢出，显然无法在部分对象上执行此操作。我们现在跳过传统检查，假设采用现代风格；现在检查仅在SessionEvents.after_bulk_update和SessionEvents.after_bulk_delete事件中发生。如果分配给“partial”事件侦听器，则这两个事件将需要新的签名样式。
- en: 'References: [#2905](https://www.sqlalchemy.org/trac/ticket/2905)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2905](https://www.sqlalchemy.org/trac/ticket/2905)
- en: '**[orm] [bug]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute would fail if the `.info` argument were
    only passed to the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") creation call but not to the object itself. Courtesy
    Robin Schoonover.
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，使用新的[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")属性会失败，如果`.info`参数仅传递给[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")创建调用，而不传递给对象本身。感谢Robin Schoonover。
- en: '**[orm] [bug]**'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where we don’t check the given name against the correct string
    class when setting up a backref based on a name, therefore causing the error “too
    many values to unpack”. This was related to the Py3k conversion.
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，当根据名称设置基于名称的backref时，我们不检查给定名称与正确的字符串类是否匹配，因此导致错误“too many values
    to unpack”。这与Py3k转换有关。
- en: 'References: [#2901](https://www.sqlalchemy.org/trac/ticket/2901)'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2901](https://www.sqlalchemy.org/trac/ticket/2901)
- en: '**[orm] [bug]**'
  id: totrans-816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where we apparently still create an implicit alias when saying
    query(B).join(B.cs), where “C” is a joined inh class; however, this implicit alias
    was created only considering the immediate left side, and not a longer chain of
    joins along different joined-inh subclasses of the same base. As long as we’re
    still implicitly aliasing in this case, the behavior is dialed back a bit so that
    it will alias the right side in a wider variety of cases.
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，当说query(B).join(B.cs)时，我们显然仍然创建一个隐式别名，其中“C”是一个连接的继承类；然而，这个隐式别名仅考虑了直接左侧，而没有考虑同一基类的不同连接继承子类的更长链的连接。只要我们在这种情况下仍然隐式别名，行为就会有所减弱，以便在更广泛的情况下别名右侧。
- en: 'References: [#2903](https://www.sqlalchemy.org/trac/ticket/2903)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2903](https://www.sqlalchemy.org/trac/ticket/2903)
- en: orm declarative
  id: totrans-819
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed an extremely unlikely memory issue where when using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") to define classes pending for
    reflection, if some subset of those classes were discarded before the [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") method were called to
    reflect and map the class, a strong reference to the class would remain held within
    the declarative internals. This internal collection of “classes to map” now uses
    weak references against the classes themselves.
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个极不可能的内存问题，当使用[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")定义待反射的类时，如果在调用[`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")方法之前丢弃了其中一些类的子集，那么在映射和映射类时，将保留对类的强引用。这个内部的“要映射的类”集合现在使用对类本身的弱引用。
- en: '**[orm] [declarative] [bug]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A quasi-regression where apparently in 0.8 you can set a class-level attribute
    on declarative to simply refer directly to an [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") on a superclass or on the class itself,
    and it acts more or less like a synonym; in 0.9, this fails to set up enough bookkeeping
    to keep up with the more liberalized backref logic from [#2789](https://www.sqlalchemy.org/trac/ticket/2789).
    Even though this use case was never directly considered, it is now detected by
    declarative at the “setattr()” level as well as when setting up a subclass, and
    the mirrored/renamed attribute is now set up as a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead.
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.8版本中，似乎可以在声明性上设置一个类级属性，直接引用超类或类本身的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")，它更多地充当同义词；在0.9版本中，这种设置未能设置足够的记录来跟上更自由化的反向引用逻辑，来源于[#2789](https://www.sqlalchemy.org/trac/ticket/2789)。即使这种用例从未直接考虑过，现在在“setattr()”级别以及设置子类时，声明性也会检测到，并且镜像/重命名属性现在设置为[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")。
- en: 'References: [#2900](https://www.sqlalchemy.org/trac/ticket/2900)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2900](https://www.sqlalchemy.org/trac/ticket/2900)
- en: orm extensions
  id: totrans-825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [扩展] [特性]**'
- en: A new, **experimental** extension [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") is added. This extension expands upon the functionality
    of Declarative as well as the [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class to produce a base class
    which automatically generates mapped classes *and relationships* based on table
    metadata.
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '添加了一个新的、**实验性的**扩展[`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")。该扩展扩展了声明性的功能，以及[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")类，生成一个基类，根据表元数据自动生成映射类和*关系*。 '
- en: See also
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Automap Extension](migration_09.html#feature-automap)'
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自动映射扩展](migration_09.html#feature-automap)'
- en: '[Automap](../orm/extensions/automap.html)'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[自动映射](../orm/extensions/automap.html)'
- en: sql
  id: totrans-831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: 'Conjunctions like [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") can now accept Python generators as a single
    argument, e.g.:'
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")和[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")这样的连接词现在可以接受Python生成器作为单个参数，例如：
- en: '[PRE2]'
  id: totrans-834
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The logic here looks for a single argument `*args` where the first element is
    an instance of `types.GeneratorType`.
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的逻辑查找一个单个参数`*args`，其中第一个元素是`types.GeneratorType`的实例。
- en: schema
  id: totrans-836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: The [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") and [`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table") parameters are now available on the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")和[`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")参数现在可用于[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法。'
- en: 0.9.0
  id: totrans-839
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.0
- en: 'Released: December 30, 2013'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年12月30日
- en: orm
  id: totrans-841
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: The [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") or DBAPI-related subclass now can accommodate
    additional information about the “reason” for the exception; the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now adds some detail to it when the exception occurs
    within an autoflush. This approach is taken as opposed to combining [`FlushError`](../orm/exceptions.html#sqlalchemy.orm.exc.FlushError
    "sqlalchemy.orm.exc.FlushError") with a Python 3 style “chained exception” approach
    so as to maintain compatibility both with Py2K code as well as code that already
    catches `IntegrityError` or similar.
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")或与DBAPI相关的子类现在可以容纳有关异常“原因”的其他信息；当异常发生在自动刷新中时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")现在会为其添加一些细节。采用这种方法是为了与Python 3风格的“链接异常”方法相反，以保持与Py2K代码以及已经捕获`IntegrityError`或类似异常的代码的兼容性。'
- en: '**[orm] [feature] [backrefs]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [backrefs]**'
- en: Added new argument `include_backrefs=True` to the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function; when set to False, a validation event will
    not be triggered if the event was initiated as a backref to an attribute operation
    from the other side.
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")函数添加了新参数`include_backrefs=True`；当设置为False时，如果事件是从另一侧的属性操作的反向引用发起的，则不会触发验证事件。
- en: See also
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[include_backrefs=False option for @validates](migration_09.html#feature-1535)'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[@validates的include_backrefs=False选项](migration_09.html#feature-1535)'
- en: 'References: [#1535](https://www.sqlalchemy.org/trac/ticket/1535)'
  id: totrans-848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1535](https://www.sqlalchemy.org/trac/ticket/1535)
- en: '**[orm] [feature]**'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method, to complement the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. Pull request
    courtesy Mario Lassnig.
  id: totrans-850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于指定`SELECT`的`FOR UPDATE`子句的新API，通过新的[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")方法，以补充新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在select()，Query()上新增FOR UPDATE支持](migration_09.html#feature-github-42)'
- en: '**[orm] [bug]**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略进行了调整，确保查询在加载过程开始后运行；这样，subqueryload优先于其他加载器运行，这些加载器可能由于其他错误的时机导致命中相同属性。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从表到基表的联接表继承时，PK列名称不同的bug；持久性系统将无法将主键值从基表复制到继承表中进行INSERT。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）不解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；以前引发一个未绑定的本地错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：0.8.5
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: '**[orm] [bug]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2818](https://www.sqlalchemy.org/trac/ticket/2818)引入的回归，其中生成的EXISTS查询会为具有两个同名列的语句产生“正在替换列”的警告，因为内部SELECT不会设置use_labels。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：0.8.4
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug] [collections] [py3k]**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [collections] [py3k]**'
- en: Added support for the Python 3 method `list.clear()` within the ORM collection
    instrumentation system; pull request courtesy Eduardo Schettino.
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM集合仪器化系统中添加了对Python 3方法`list.clear()`的支持；感谢Eduardo Schettino的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Some refinements to the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct with regards to descriptors, like
    hybrids, synonyms, composites, user-defined descriptors, etc. The attribute adaptation
    which goes on has been made more robust, such that if a descriptor returns another
    instrumented attribute, rather than a compound SQL expression element, the operation
    will still proceed. Additionally, the “adapted” operator will retain its class;
    previously, a change in class from `InstrumentedAttribute` to `QueryableAttribute`
    (a superclass) would interact with Python’s operator system such that an expression
    like `aliased(MyClass.x) > MyClass.x` would reverse itself to read `myclass.x
    < myclass_1.x`. The adapted attribute will also refer to the new [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as its parent which was not always the case
    before.
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造进行了一些改进，涉及到描述符，如混合体、同义词、复合体、用户定义的描述符等。进行的属性适配更加健壮，这样，如果一个描述符返回另一个被仪器化的属性，而不是一个复合SQL表达式元素，则操作仍将进行。此外，“适配”的运算符将保留其类；以前，从`InstrumentedAttribute`到`QueryableAttribute`（一个超类）的类的更改会与Python的运算符系统进行交互，例如`aliased(MyClass.x)
    > MyClass.x`表达式将反转为`myclass.x < myclass_1.x`。适配的属性还将引用新的[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为其父类，而以前并不总是这样。
- en: 'References: [#2872](https://www.sqlalchemy.org/trac/ticket/2872)'
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2872](https://www.sqlalchemy.org/trac/ticket/2872)
- en: '**[orm] [bug]**'
  id: totrans-874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `viewonly` flag on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will now prevent attribute history from being written
    on behalf of the target attribute. This has the effect of the object not being
    written to the Session.dirty list if it is mutated. Previously, the object would
    be present in Session.dirty, but no change would take place on behalf of the modified
    attribute during flush. The attribute still emits events such as backref events
    and user-defined events and will still receive mutations from backrefs.
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的`viewonly`标志现在将防止为目标属性代表写入属性历史记录。这导致在对象发生变化时不会将其写入到Session.dirty列表中。以前，对象会出现在Session.dirty中，但在flush期间不会代表修改的属性进行任何更改。属性仍然会发出事件，如反向引用事件和用户定义的事件，并且仍将从反向引用接收变化。'
- en: See also
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[viewonly=True on relationship() prevents history from taking effect](migration_09.html#migration-2833)'
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关系（relationship()）上使用`viewonly=True`会防止历史记录生效[migration_09.html#migration-2833](migration_09.html#migration-2833)。
- en: 'References: [#2833](https://www.sqlalchemy.org/trac/ticket/2833)'
  id: totrans-878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2833](https://www.sqlalchemy.org/trac/ticket/2833)
- en: '**[orm] [bug]**'
  id: totrans-879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session "sqlalchemy.orm.scoped_session")添加了对新[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")属性的支持。
- en: '**[orm] [bug]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object would cause the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute to fail.
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用新的[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")对象将导致[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")属性失败的错误。
- en: '**[orm] [bug] [sql] [sqlite]**'
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql] [sqlite]**'
- en: Fixed a regression introduced by the join rewriting feature of [#2369](https://www.sqlalchemy.org/trac/ticket/2369)
    and [#2587](https://www.sqlalchemy.org/trac/ticket/2587) where a nested join with
    one side already an aliased select would fail to translate the ON clause on the
    outside correctly; in the ORM this could be seen when using a SELECT statement
    as a “secondary” table.
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2369](https://www.sqlalchemy.org/trac/ticket/2369)和[#2587](https://www.sqlalchemy.org/trac/ticket/2587)的连接重写功能引入的回归，其中一个嵌套连接的一侧已经是一个别名选择，将无法正确地转换外部的ON子句；在ORM中，当使用SELECT语句作为“次要”表时，可以看到这种情况。
- en: 'References: [#2858](https://www.sqlalchemy.org/trac/ticket/2858)'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2858](https://www.sqlalchemy.org/trac/ticket/2858)
- en: orm declarative
  id: totrans-886
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Declarative does an extra check to detect if the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is mapped multiple times under different properties
    (which typically should be a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead) or if two or more [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are given the same name, raising a warning
    if this condition is detected.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative额外进行了检查，以检测是否将相同的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")多次映射到不同的属性下（通常应该是一个[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")），或者是否给两个或更多[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象赋予了相同的名称，在检测到这种情况时会引发警告。
- en: 'References: [#2828](https://www.sqlalchemy.org/trac/ticket/2828)'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2828](https://www.sqlalchemy.org/trac/ticket/2828)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: The [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class has been enhanced to provide
    automatic reflection support for the “secondary” table referred to by a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). “secondary”, when specified either as a string
    table name, or as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object with only a name and [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object will also be included in the reflection process
    when [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") is called.
  id: totrans-891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")类已增强，以提供对由[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")引用的“次要”表的自动反射支持。“次要”，当指定为字符串表名或只有名称和[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象时，在调用[`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")时，也将包括在反射过程中。'
- en: 'References: [#2865](https://www.sqlalchemy.org/trac/ticket/2865)'
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2865](https://www.sqlalchemy.org/trac/ticket/2865)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Py2K中不接受Unicode字面量作为声明中使用[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的类或其他参数的字符串名称的bug。
- en: examples
  id: totrans-895
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed bug which prevented history_meta recipe from working with joined inheritance
    schemes more than one level deep.
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止history_meta配方与超过一级深度的联合继承方案一起使用的错误。
- en: engine
  id: totrans-898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function has been improved so that we will be
    able to parse dialect-specific arguments from string configuration dictionaries.
    Dialect classes can now provide their own list of parameter types and string-conversion
    routines. The feature is not yet used by the built-in dialects, however.
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")函数已经改进，以便我们能够从字符串配置字典中解析特定于方言的参数。方言类现在可以提供自己的参数类型列表和字符串转换例程。然而，这个功能目前尚未被内置方言使用。'
- en: 'References: [#2875](https://www.sqlalchemy.org/trac/ticket/2875)'
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2875](https://www.sqlalchemy.org/trac/ticket/2875)
- en: '**[engine] [bug]**'
  id: totrans-902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`connect()`方法引发一个不是`dbapi.Error`子类（比如`TypeError`、`NotImplementedError`等）的错误时，DBAPI将不加修改地传播异常。之前，`connect()`方法特定的错误处理会不恰当地通过方言的[`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect")方法运行异常，并将其包装在一个[`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")中。现在，异常将以与执行过程中相同的方式不加修改地传播。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")已经得到增强，当现有连接尝试阻塞时，不会阻止新的连接尝试。之前，新连接的生成在监视溢出的块内串行化；现在，溢出计数器在连接过程之外的自己的关键部分中被改变。'
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待可用连接的逻辑进行了轻微调整，对于未指定超时的连接池，每隔半秒就会中断等待以检查所谓的“中止”标志，这允许等待者在整个连接池被释放的情况下中断；通常情况下，等待者应该由`notify_all()`中断，但在极少数情况下可能会错过这个`notify_all()`。这是在0.8.0中首次引入的逻辑的扩展，该问题只在压力测试中偶尔观察到。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在预 DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") 在 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 中引发时，SQL 语句会被错误地 ASCII 编码，导致非 ASCII 语句的编码错误。现在字符串化仍然保持在
    Python unicode 中，从而避免编码错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: '**[engine] [bug]**'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    routine and the related [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function no longer considers the `+` sign to be
    a space within the password field. The parsing in this area has been adjusted
    to match more closely to how RFC 1738 handles these tokens, in that both `username`
    and `password` expect only `:`, `@`, and `/` to be encoded.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    例程和相关的 [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    函数不再将 `+` 符号视为密码字段中的空格。在这个区域的解析已经调整得更接近 RFC 1738 处理这些标记的方式，即 `username` 和 `password`
    都只期望 `:`、`@` 和 `/` 被编码。'
- en: See also
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The “password” portion of a create_engine() no longer considers the + sign
    as an encoded space](migration_09.html#migration-2873)'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine()` 的“密码”部分不再将 + 号视为编码空格](migration_09.html#migration-2873)'
- en: 'References: [#2873](https://www.sqlalchemy.org/trac/ticket/2873)'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2873](https://www.sqlalchemy.org/trac/ticket/2873)
- en: '**[engine] [bug]**'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The `RowProxy` object is now sortable in Python as a regular tuple is; this
    is accomplished via ensuring tuple() conversion on both sides within the `__eq__()`
    method as well as the addition of a `__lt__()` method.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RowProxy` 对象现在在 Python 中可排序，就像普通元组一样；这是通过在 `__eq__()` 方法中确保在两侧都进行 tuple()
    转换以及添加 `__lt__()` 方法来实现的。'
- en: See also
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[RowProxy now has tuple-sorting behavior](migration_09.html#migration-2848)'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RowProxy 现在具有元组排序行为](migration_09.html#migration-2848)'
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848)'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848)
- en: sql
  id: totrans-928
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New improvements to the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, including more flexible ways to set
    up bound parameters and return types; in particular, a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") can now be turned into a full FROM-object, embeddable
    in other statements as an alias or CTE using the new method [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns"). The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct can also render “inline” bound parameters
    when the construct is compiled in a “literal bound” context.
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造的新改进，包括更灵活的设置绑定参数和返回类型的方式；特别是，现在可以将 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 转换为完整的 FROM 对象，在其他语句中作为别名或 CTE 嵌入，使用新方法 [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")。当构造在“文字绑定”上下文中编译时，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造也可以呈现“内联”绑定参数。'
- en: See also
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New text() Capabilities](migration_09.html#feature-2877)'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 text() 功能](migration_09.html#feature-2877)'
- en: 'References: [#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)'
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)
- en: '**[sql] [feature]**'
  id: totrans-934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. This method
    supports a more straightforward system of setting dialect-specific options compared
    to the `for_update` keyword argument of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and also includes support for the SQL standard
    `FOR UPDATE OF` clause. The ORM also includes a new corresponding method [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Pull request courtesy Mario Lassnig.
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法添加了指定`SELECT`的`FOR
    UPDATE`子句的新API。与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的`for_update`关键字参数相比，该方法支持更直观的设置方言特定选项的系统，并且还包括对SQL标准`FOR
    UPDATE OF`子句的支持。ORM还包括一个新的对应方法[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在select()、Query()上新增FOR UPDATE支持](migration_09.html#feature-github-42)'
- en: '**[sql] [feature]**'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The precision used when coercing a returned floating point value to Python `Decimal`
    via string is now configurable. The flag `decimal_return_scale` is now supported
    by all [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    and [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    types, which will ensure this many digits are taken from the native floating point
    value when it is converted to string. If not present, the type will make use of
    the value of `.scale`, if the type supports this setting and it is non-None. Otherwise
    the original default length of 10 is used.
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当通过字符串将返回的浮点数值强制转换为Python `Decimal` 时使用的精度现在是可配置的。标志`decimal_return_scale`现在由所有[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")和[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")类型支持，它将确保从原生浮点值中取出这么多位数字时，它被转换为字符串。如果不存在，类型将使用`.scale`的值（如果类型支持此设置且不为None）。否则，将使用原始默认长度10。
- en: See also
  id: totrans-940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Floating Point String-Conversion Precision Configurable for Native Floating
    Point Types](migration_09.html#feature-2867)'
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[浮点数字符串转换精度可配置为原生浮点数类型](migration_09.html#feature-2867)'
- en: 'References: [#2867](https://www.sqlalchemy.org/trac/ticket/2867)'
  id: totrans-942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2867](https://www.sqlalchemy.org/trac/ticket/2867)
- en: '**[sql] [bug]**'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题：如果主键列上有一个序列，但列不是“自动增量”列，可能是因为它有一个外键约束或设置了`autoincrement=False`，则对于不支持序列的后端，在插入缺少主键值的INSERT时，会尝试触发序列。这将在非序列后端（如SQLite、MySQL）上发生。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法的错误，其中给定名称的顺序在生成INSERT语句时不会被考虑，因此与给定SELECT语句中的列名不匹配。还注意到，[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")暗示不能使用Python端的插入默认值，因为语句没有VALUES子句。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [bug]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function, when given a plain literal value, will now apply the given type to the
    given literal value on the bind parameter side according to the type given to
    the cast, in the same manner as that of the [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") function. However unlike [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce"), this only takes effect if a non-clauseelement
    value is passed to [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast"); an existing typed construct will retain its
    type.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定普通文字值时，[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") 函数现在将根据给定的类型将给定的文字值应用于绑定参数侧，与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 函数的方式相同。然而，与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") 不同的是，只有在将非clauseelement值传递给[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") 时才会生效；现有的已经有类型的构造将保留其类型。
- en: '**[sql] [bug]**'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    class more aggressively checks the given column argument. If not a string, it
    checks that the object is at least a [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), or an object that resolves to one,
    and that the `.table` attribute, if present, refers to a [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") or subclass, and not something like an
    [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias").
    Otherwise, a [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is raised.
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    类更积极地检查给定的列参数。如果不是字符串，则检查对象至少是一个[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")，或者一个解析为一个的对象，如果`.table` 属性存在，则它引用一个[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 或子类，而不是像[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 这样的东西。否则，将引发一个[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。'
- en: 'References: [#2883](https://www.sqlalchemy.org/trac/ticket/2883)'
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2883](https://www.sqlalchemy.org/trac/ticket/2883)
- en: '**[sql] [bug]**'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The precedence rules for the [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") operator have been modified,
    such that the COLLATE operator is now of lower precedence than the comparison
    operators. This has the effect that a COLLATE applied to a comparison will not
    render parenthesis around the comparison, which is not parsed by backends such
    as MSSQL. The change is backwards incompatible for those setups that were working
    around the issue by applying `Operators.collate()` to an individual element of
    the comparison expression, rather than the comparison expression as a whole.
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") 操作符的优先规则已修改，使得 COLLATE 操作符现在比比较操作符的优先级低。这样做的效果是，应用于比较的
    COLLATE 不会在比较周围生成括号，这对于 MSSQL 等后端不解析括号的情况是不兼容的。对于那些通过将 `Operators.collate()` 应用于比较表达式的单个元素而不是整个比较表达式来解决该问题的设置而言，该更改是向后不兼容的。'
- en: See also
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[The precedence rules for COLLATE have been changed](migration_09.html#migration-2879)'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[COLLATE 的优先规则已更改](migration_09.html#migration-2879)'
- en: 'References: [#2879](https://www.sqlalchemy.org/trac/ticket/2879)'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2879](https://www.sqlalchemy.org/trac/ticket/2879)
- en: '**[sql] [enhancement]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [enhancement]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编译的语句中存在一个[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") 而没有值时引发的异常现在在错误消息中包括绑定参数的键名。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到：0.8.5
- en: schema
  id: totrans-964
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed a regression caused by [#2812](https://www.sqlalchemy.org/trac/ticket/2812)
    where the repr() for table and column names would fail if the name contained non-ascii
    characters.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 [#2812](https://www.sqlalchemy.org/trac/ticket/2812) 引起的回归 bug，如果名称包含非 ASCII
    字符，则表名和列名的 repr() 将失败。
- en: 'References: [#2868](https://www.sqlalchemy.org/trac/ticket/2868)'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2868](https://www.sqlalchemy.org/trac/ticket/2868)
- en: postgresql
  id: totrans-968
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Support for PostgreSQL JSON has been added, using the new [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type. Huge thanks to Nathan Rice for implementing and
    testing this.
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL JSON 的支持，使用新的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型。非常感谢 Nathan Rice 实现和测试。
- en: 'References: [#2581](https://www.sqlalchemy.org/trac/ticket/2581)'
  id: totrans-971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2581](https://www.sqlalchemy.org/trac/ticket/2581)
- en: '**[postgresql] [feature]**'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for PostgreSQL TSVECTOR via the [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") type. Pull request courtesy Noufal
    Ibrahim.
  id: totrans-973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") 类型添加了对 PostgreSQL TSVECTOR 的支持。感谢 Noufal
    Ibrahim 的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pypostgresql 适配器时索引反射会错误解释 indkey 值的 bug，该适配器将这些值作为列表返回，而不是 psycopg2 的字符串返回类型。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.4
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: '**[postgresql] [bug]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Now using psycopg2 UNICODEARRAY extension for handling unicode arrays with psycopg2
    + normal “native unicode” mode, in the same way the UNICODE extension is used.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 psycopg2 UNICODEARRAY 扩展来处理带有 psycopg2 + 普通“本地unicode”模式的 unicode 数组，与使用
    UNICODE 扩展的方式相同。
- en: '**[postgresql] [bug]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where values within an ENUM weren’t escaped for single quote signs.
    Note that this is backwards-incompatible for existing workarounds that manually
    escape the single quotes.
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ENUM 中的值未对单引号符号进行转义的 bug。请注意，对于手动转义单引号的现有解决方法来说，这是不兼容的。
- en: See also
  id: totrans-982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL CREATE TYPE <x> AS ENUM now applies quoting to values](migration_09.html#migration-2878)'
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL CREATE TYPE <x> AS ENUM 现在对值应用引号](migration_09.html#migration-2878)'
- en: 'References: [#2878](https://www.sqlalchemy.org/trac/ticket/2878)'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2878](https://www.sqlalchemy.org/trac/ticket/2878)
- en: mysql
  id: totrans-985
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Improvements to the system by which SQL types generate within `__repr__()`,
    particularly with regards to the MySQL integer/numeric/ character types which
    feature a wide variety of keyword arguments. The `__repr__()` is important for
    use with Alembic autogenerate for when Python code is rendered in a migration
    script.
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SQL 类型在 `__repr__()` 中生成的系统，特别是关于 MySQL 整数/数字/字符类型，这些类型具有各种关键字参数。`__repr__()`
    对于 Alembic autogenerate 很重要，用于在迁移脚本中呈现 Python 代码时使用。
- en: 'References: [#2893](https://www.sqlalchemy.org/trac/ticket/2893)'
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2893](https://www.sqlalchemy.org/trac/ticket/2893)
- en: mssql
  id: totrans-989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型一起使用的“asdecimal”标志现在也适用于 Firebird 以及 mssql+pyodbc 方言；以前未发生十进制转换。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“Net-Lib error during Connection reset by peer”消息添加到 pymssql 方言中检查的“断开”消息列表中。感谢
    John Anderson。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: '**[mssql] [bug]**'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.8.0 中引入的 bug，如果索引位于备用模式中，则 MSSQL 中的 `DROP INDEX` 语句会错误渲染；模式名/表名将被颠倒。格式也已经修订以匹配当前的
    MSSQL 文档。感谢 Derek Harland。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: oracle
  id: totrans-999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 ORA-02396 “最大空闲时间”错误代码添加到具有 cx_oracle 的“is disconnect”代码列表中。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 中给定没有长度的 `VARCHAR` 类型（例如用于 `CAST` 或类似操作）会错误地呈现为 `None CHAR` 或类似情况的
    bug。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-1008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [firebird]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: firebird 方言将引用以下划线开头的标识符。感谢 Treeve Jelbert。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-1013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Firebird 索引反射中列在索引内部没有正确排序的 bug；现在按照 RDB$FIELD_POSITION 的顺序排序。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[bug] [declarative]**'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当发送给 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的字符串参数不能解析为类或映射器时，错误消息已更正为与接收非字符串参数时相同的方式，指示配置错误的关系名称。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: '**[bug] [ext]**'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `serializer` 扩展无法正确处理包含非 ASCII 字符的表或列名称的 bug。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: '**[bug] [firebird]**'
  id: totrans-1024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Changed the queries used by Firebird to list table and view names to query from
    the `rdb$relations` view instead of the `rdb$relation_fields` and `rdb$view_relations`
    views. Variants of both the old and new queries are mentioned on many FAQ and
    blogs, however the new queries are taken straight from the “Firebird FAQ” which
    appears to be the most official source of info.
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 Firebird 用于列出表和视图名称的查询，现在从 `rdb$relations` 视图而不是 `rdb$relation_fields` 和
    `rdb$view_relations` 视图查询。许多 FAQ 和博客中提到了新旧查询的变体，但新查询直接来自“Firebird FAQ”，这似乎是最官方的信息来源。
- en: 'References: [#2898](https://www.sqlalchemy.org/trac/ticket/2898)'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2898](https://www.sqlalchemy.org/trac/ticket/2898)
- en: '**[removed]**'
  id: totrans-1027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除]**'
- en: The “informix” and “informixdb” dialects have been removed; the code is now
    available as a separate repository on Bitbucket. The IBM-DB project has provided
    production-level Informix support since the informixdb dialect was first added.
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “informix” 和 “informixdb” 方言已被移除；该代码现在作为一个独立的存储库在 Bitbucket 上提供。自从第一次添加 informixdb
    方言以来，IBM-DB 项目提供了生产级的 Informix 支持。
- en: 0.9.0b1
  id: totrans-1029
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.0b1
- en: 'Released: October 26, 2013'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年10月26日
- en: general
  id: totrans-1031
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [feature] [py3k]**'
  id: totrans-1032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [特性] [py3k]**'
- en: The C extensions are ported to Python 3 and will build under any supported CPython
    2 or 3 environment.
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C 扩展已移植到 Python 3，并将在任何支持的 CPython 2 或 3 环境下构建。
- en: 'References: [#2161](https://www.sqlalchemy.org/trac/ticket/2161)'
  id: totrans-1034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2161](https://www.sqlalchemy.org/trac/ticket/2161)
- en: '**[general] [feature] [py3k]**'
  id: totrans-1035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [特性] [py3k]**'
- en: The codebase is now “in-place” for Python 2 and 3, the need to run 2to3 has
    been removed. Compatibility is now against Python 2.6 on forward.
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码现在对 Python 2 和 3 “原地”运行，不再需要运行 2to3。兼容性现在针对 Python 2.6 及更高版本。
- en: 'References: [#2671](https://www.sqlalchemy.org/trac/ticket/2671)'
  id: totrans-1037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2671](https://www.sqlalchemy.org/trac/ticket/2671)
- en: '**[general]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: A large refactoring of packages has reorganized the import structure of many
    Core modules as well as some aspects of the ORM modules. In particular `sqlalchemy.sql`
    has been broken out into several more modules than before so that the very large
    size of `sqlalchemy.sql.expression` is now pared down. The effort has focused
    on a large reduction in import cycles. Additionally, the system of API functions
    in `sqlalchemy.sql.expression` and `sqlalchemy.orm` has been reorganized to eliminate
    redundancy in documentation between the functions vs. the objects they produce.
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大规模的包重构已经重新组织了许多核心模块的导入结构以及一些ORM模块的方面。特别是`sqlalchemy.sql`已经被拆分成比以前更多的模块，以便将`sqlalchemy.sql.expression`的非常庞大的大小削减下来。这一努力主要集中在大幅减少导入循环上。此外，`sqlalchemy.sql.expression`和`sqlalchemy.orm`中的API函数系统已经重新组织，以消除函数与它们产生的对象之间文档中的冗余。
- en: orm
  id: totrans-1040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新选项[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`。这使得子查询预加载策略可以对最内部的SELECT子查询应用DISTINCT，以帮助解决内部查询生成重复行的情况（尚无解决子查询预加载中重复行问题的通用解决方案，但是当最内部子查询之外的连接产生重复行时）。当标志设置为`True`时，DISTINCT被无条件渲染，当设置为`None`时，如果最内部关系目标列不包括完整的主键，则渲染DISTINCT。该选项在0.8中默认为False（例如，在所有情况下默认关闭），在0.9中默认为None（例如，默认情况下自动）。感谢Alexander
    Koval对此的帮助。
- en: See also
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询预加载将对某些查询的最内部SELECT应用DISTINCT](migration_09.html#change-2836)'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [feature]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The association proxy now returns `None` when fetching a scalar attribute off
    of a scalar relationship, where the scalar relationship itself points to `None`,
    instead of raising an `AttributeError`.
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当从标量关系中获取标量属性时，关联代理会返回`None`，而不是引发`AttributeError`。
- en: See also
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Association Proxy Missing Scalar returns None](migration_09.html#migration-2810)'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理缺失标量返回None](migration_09.html#migration-2810)'
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: '**[orm] [feature]**'
  id: totrans-1052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history"), works like [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") but also fires loader callables.
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history")，类似于[`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")但也触发加载器可调用。
- en: See also
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history()如果值不存在将默认从数据库查询](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [feature]**'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new load option [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). This allows a series of column names to be specified
    as loading “only” those attributes, deferring the rest.
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的加载选项[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。这允许指定一系列列名仅加载这些属性，推迟其余属性的加载。
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-1060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The system of loader options has been entirely rearchitected to build upon a
    much more comprehensive base, the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object. This base allows any common loader option like
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"), etc. to be used in a “chained” style for the purpose
    of specifying options down a path, such as `joinedload("foo").subqueryload("bar")`.
    The new system supersedes the usage of dot-separated path names, multiple attributes
    within options, and the usage of `_all()` options.
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在加载器选项系统已完全重构，建立在更加全面的基础上，即[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")对象。该基础允许任何常见的加载器选项，如[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")、[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")等，以“链式”样式用于沿着路径指定选项，例如`joinedload("foo").subqueryload("bar")`。新系统取代了点分隔路径名的使用、选项中的多个属性以及使用`_all()`选项的用法。
- en: See also
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Query Options API; load_only() option](migration_09.html#feature-1418)'
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新查询选项 API；load_only() 选项](migration_09.html#feature-1418)'
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    construct now maintains the return object when used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), rather than expanding out into individual columns. This
    makes use of the new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") feature internally. This behavior is backwards incompatible;
    to select from a composite column which will expand out, use `MyClass.some_composite.clauses`.
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在基于列的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")中使用时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")构造现在会保持返回对象，而不是展开为单独的列。这利用了内部的新[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")功能。此行为是向后不兼容的；要从一个会展开的组合列中进行选择，请使用`MyClass.some_composite.clauses`。
- en: See also
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[组合属性现在在按属性查询时作为它们的对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new construct [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is added, which allows for specification of groups of
    column expressions to a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct. The group of columns are returned as a single
    tuple by default. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be overridden however to provide any sort of result
    processing to the returned row. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is also embedded into composite attributes now when they
    are used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的构造[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")，它允许对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")构造中的一组列表达式进行规范。默认情况下，这组列作为单个元组返回。然而，可以覆盖[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")的行为，以提供对返回行进行任何类型的结果处理。当组合属性在基于列的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中使用时，[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")的行为也已嵌入其中。
- en: See also
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Bundles for ORM queries](migration_09.html#change-2824)'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 查询的列束](migration_09.html#change-2824)'
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-1074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[组合属性现在在按属性查询时作为它们的对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-1076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The `version_id_generator` parameter of `Mapper` can now be specified to rely
    upon server generated version identifiers, using triggers or other database-provided
    versioning features, or via an optional programmatic value, by setting `version_id_generator=False`.
    When using a server-generated version identifier, the ORM will use RETURNING when
    available to immediately load the new version value, else it will emit a second
    SELECT.
  id: totrans-1077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Mapper`的`version_id_generator`参数现在可以指定依赖于服务器生成的版本标识符，使用触发器或其他数据库提供的版本控制功能，或通过设置`version_id_generator=False`来使用可选的程序值。当使用服务器生成的版本标识符时，ORM将在可用时使用RETURNING立即加载新的版本值，否则将发出第二个SELECT。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-1079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `eager_defaults` flag of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will now allow the newly generated default values to
    be fetched using an inline RETURNING clause, rather than a second SELECT statement,
    for backends that support RETURNING.
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的`eager_defaults`标志现在将允许使用内联RETURNING子句获取新���成的默认值，而不是使用第二个SELECT语句，对于支持RETURNING的后端。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-1081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new attribute [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") to [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"); this is a dictionary where applications can store arbitrary
    data local to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The contents of [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") can be also be initialized using the `info` argument
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  id: totrans-1083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的属性[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")；这是一个字典，应用程序可以将任意数据存储在与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关的本地数据中。[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")的内容也可以使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")的`info`参数进行初始化。
- en: '**[orm] [feature]**'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Removal of event listeners is now implemented. The feature is provided via the
    [`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")
    function.
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在已实现事件监听器的移除。该功能通过[`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")函数提供。
- en: See also
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Event Removal API](migration_09.html#feature-2268)'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事件移除API](migration_09.html#feature-2268)'
- en: 'References: [#2268](https://www.sqlalchemy.org/trac/ticket/2268)'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2268](https://www.sqlalchemy.org/trac/ticket/2268)
- en: '**[orm] [feature]**'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The mechanism by which attribute events pass along an `AttributeImpl` as an
    “initiator” token has been changed; the object is now an event-specific object
    called `Event`. Additionally, the attribute system no longer halts events based
    on a matching “initiator” token; this logic has been moved to be specific to ORM
    backref event handlers, which are the typical source of the re-propagation of
    an attribute event onto subsequent append/set/remove operations. End user code
    which emulates the behavior of backrefs must now ensure that recursive event propagation
    schemes are halted, if the scheme does not use the backref handlers. Using this
    new system, backref handlers can now perform a “two-hop” operation when an object
    is appended to a collection, associated with a new many-to-one, de-associated
    with the previous many-to-one, and then removed from a previous collection. Before
    this change, the last step of removal from the previous collection would not occur.
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性事件通过`AttributeImpl`传递的机制已更改为一个“initiator”标记，现在对象是一个名为`Event`的特定于事件的对象。此外，属性系统不再根据匹配的“initiator”标记停止事件；这一逻辑已移至特定于ORM反向引用事件处理程序的地方，这些处理程序是重新传播属性事件到后续附加/设置/移除操作的典型来源。模拟反向引用处理程序行为的最终用户代码现在必须确保递归事件传播方案被停止，如果该方案不使用反向引用处理程序。使用这个新系统，当对象被附加到集合中，与新的多对一关联，与之前的多对一解除关联，然后从之前的集合中移除时，反向引用处理程序现在可以执行“两跳”操作。在这个改变之前，从之前的集合中移除的最后一步将不会发生。
- en: See also
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Backref handlers can now propagate more than one level deep](migration_09.html#migration-2789)'
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反向引用处理程序现在可以传播多个级别](migration_09.html#migration-2789)'
- en: 'References: [#2789](https://www.sqlalchemy.org/trac/ticket/2789)'
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2789](https://www.sqlalchemy.org/trac/ticket/2789)
- en: '**[orm] [feature]**'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A major change regarding how the ORM constructs joins where the right side is
    itself a join or left outer join. The ORM is now configured to allow simple nesting
    of joins of the form `a JOIN (b JOIN c ON b.id=c.id) ON a.id=b.id`, rather than
    forcing the right side into a `SELECT` subquery. This should allow significant
    performance improvements on most backends, most particularly MySQL. The one database
    backend that has for many years held back this change, SQLite, is now addressed
    by moving the production of the `SELECT` subquery from the ORM to the SQL compiler;
    so that a right-nested join on SQLite will still ultimately render with a `SELECT`,
    while all other backends are no longer impacted by this workaround.
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于ORM如何构建右侧本身是JOIN或LEFT OUTER JOIN的连接的重大变更。ORM现在配置为允许形式为`a JOIN (b JOIN c ON
    b.id=c.id) ON a.id=b.id`的连接的简单嵌套，而不是强制右侧成为`SELECT`子查询。这应该允许大多数后端实现显着的性能改进，尤其是MySQL。多年来一直阻碍此更改的一个数据库后端，SQLite，现在通过将`SELECT`子查询的生成从ORM移动到SQL编译器来解决；因此，在SQLite上的右侧嵌套连接最终仍将以`SELECT`呈现，而所有其他后端不再受此解决方法的影响。
- en: As part of this change, a new argument `flat=True` has been added to the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"), `Join.alias()`, and [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") functions, which allows an “alias” of a JOIN
    to be produced which applies an anonymous alias to each component table within
    the join, rather than producing a subquery.
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")、`Join.alias()`和[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数中添加了一个新参数`flat=True`，允许生成一个JOIN的“别名”，该别名对加入的每个组件表应用匿名别名，而不是生成子查询。
- en: See also
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多JOIN和LEFT OUTER JOIN表达式将不再被包装在(SELECT * FROM ..) AS ANON_1中](migration_09.html#feature-joins-09)'
- en: 'References: [#2587](https://www.sqlalchemy.org/trac/ticket/2587)'
  id: totrans-1099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2587](https://www.sqlalchemy.org/trac/ticket/2587)
- en: '**[orm] [bug]**'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`无法正确表示`[0:0]`的切片的错误，特别是在使用关联代理时可能发生。由于Python集合中的某些怪癖，该问题在Python
    3中更有可能发生。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-1104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote "sqlalchemy.orm.remote")或[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")等注释在与父[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联之前可能会产生与父表在连接中未呈现相关的问题的错误，这是由注释执行的固有复制操作引起的。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-1108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在没有任何WHERE条件的情况下无法正常工作的错误。感谢Vladimir Magamedov。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-1112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-1113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 使用的有序序列实现中的潜在问题，该问题用于迭代映射器层次结构；在 Jython 解释器下，即使 cPython 和 PyPy 保持了排序，该实现也没有排序。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.3
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-1116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 级别事件注册中的错误，其中在某些“未映射的基类”配置中，“原始”或“传播”标志可能会被错误配置。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.3
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-1120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与加载映射实体时使用 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    选项相关的性能修复。在加载时将每个对象的延迟可调用函数应用到实例的函数开销明显高于仅从行中加载数据的函数开销（请注意，`defer()` 旨在减少 DB/网络开销，而不一定是函数调用计数）；在所有情况下，函数调用开销现在都小于从列加载数据的开销。每次加载从
    N（结果中的总延迟值）减少到 1（延迟列的总数）的“惰性可调用”对象的数量也有所减少。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.3
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-1124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-1125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了属性历史函数的错误，当我们使用 [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") 函数将对象从“持久”移动到“待定”时，涉及基于集合的反向引用的操作会失败。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.3
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: '**[orm] [bug]**'
  id: totrans-1128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-1129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试刷新继承类的对象时，如果多态识别器已分配给对该类无效的值，则会发出警告。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.2
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-1132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-1133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态 SQL 生成中的错误，在针对相同基类的多个连接继承实体相互连接的情况下，如果连接字符串超过两个实体，则不会独立跟踪基表上的列。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.2
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-1135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-1136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将复合属性发送到 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 会产生一些数据库不接受的带括号的表达式的错误。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **被后移** 到：0.8.2
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。以前，在应用别名时，复合属性在比较操作中无法正常工作。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-1144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")在调用`clear()`时未报告更改事件的错误。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-1148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") when used with a scalar column-mapped
    attribute will now honor the “passive” flag passed to it; as this defaults to
    `PASSIVE_OFF`, the function will by default query the database if the value is
    not present. This is a behavioral change vs. 0.8.'
  id: totrans-1149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与标量列映射属性一起使用时，[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history")现在将遵守传递给它的“被动”标志；由于默认为`PASSIVE_OFF`，如果值不存在，默认情况下该函数将查询数据库。这与0.8相比是一种行为变化。
- en: See also
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history()将默认从数据库查询值不存在的情况](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-1152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [bug] [associationproxy]**'
  id: totrans-1153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [associationproxy]**'
- en: Added additional criterion to the ==, != comparators, used with scalar values,
    for comparisons to None to also take into account the association record itself
    being non-present, in addition to the existing test for the scalar endpoint on
    the association record being NULL. Previously, comparing `Cls.scalar == None`
    would return records for which `Cls.associated` were present and `Cls.associated.scalar`
    is None, but not rows for which `Cls.associated` is non-present. More significantly,
    the inverse operation `Cls.scalar != None` *would* return `Cls` rows for which
    `Cls.associated` was non-present.
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于与标量值一起使用的==，！=比较器，添加了额外的条件，用于将与None进行比较的情况考虑到也要考虑到关联记录本身不存在，除了现有的测试关联记录上的标量端点是否为NULL。以前，比较`Cls.scalar
    == None`将返回`Cls.associated`存在且`Cls.associated.scalar`为None的记录，但不会返回`Cls.associated`不存在的行。更重要的是，相反的操作`Cls.scalar
    != None` *会*返回`Cls`行，其中`Cls.associated`不存在。
- en: The case for `Cls.scalar != 'somevalue'` is also modified to act more like a
    direct SQL comparison; only rows for which `Cls.associated` is present and `Associated.scalar`
    is non-NULL and not equal to `'somevalue'` are returned. Previously, this would
    be a simple `NOT EXISTS`.
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Cls.scalar != ''somevalue''`的情况也修改为更像直接的SQL比较；只返回`Cls.associated`存在且`Associated.scalar`非NULL且不等于`''somevalue''`的行。以前，这将是一个简单的`NOT
    EXISTS`。'
- en: Also added a special use case where you can call `Cls.scalar.has()` with no
    arguments, when `Cls.scalar` is a column-based value - this returns whether or
    not `Cls.associated` has any rows present, regardless of whether or not `Cls.associated.scalar`
    is NULL or not.
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了一个特殊用例，当`Cls.scalar`是基于列的值时，您可以调用`Cls.scalar.has()`而不带参数 - 这将返回`Cls.associated`是否有任何行存在，而不管`Cls.associated.scalar`是否为NULL。
- en: See also
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association Proxy SQL Expression Improvements and Fixes](migration_09.html#migration-2751)'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理SQL表达式改进和修复](migration_09.html#migration-2751)'
- en: 'References: [#2751](https://www.sqlalchemy.org/trac/ticket/2751)'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2751](https://www.sqlalchemy.org/trac/ticket/2751)
- en: '**[orm] [bug]**'
  id: totrans-1160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an obscure bug where the wrong results would be fetched when joining/joinedloading
    across a many-to-many relationship to a single-table-inheriting subclass with
    a specific discriminator value, due to “secondary” rows that would come back.
    The “secondary” and right-side tables are now inner joined inside of parenthesis
    for all ORM joins on many-to-many relationships so that the left->right join can
    accurately filtered. This change was made possible by finally addressing the issue
    with right-nested joins outlined in [#2587](https://www.sqlalchemy.org/trac/ticket/2587).
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个晦涩的错误，当跨越一个具有特定鉴别器值的单表继承子类的多对多关系进行连接/联接加载时，错误的结果会被获取，这是由于“secondary”行的返回。现在，在所有
    ORM 在多对多关系上的连接中，“secondary”和右侧表现在括号内进行内部连接，以便左->右连接可以准确过滤。这个改变是通过最终解决了在 [#2587](https://www.sqlalchemy.org/trac/ticket/2587)
    中概述的右嵌套连接问题而实现的。
- en: See also
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多 JOIN 和 LEFT OUTER JOIN 表达式将不再被包装在 (SELECT * FROM ..) AS ANON_1 中](migration_09.html#feature-joins-09)'
- en: 'References: [#2369](https://www.sqlalchemy.org/trac/ticket/2369)'
  id: totrans-1164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2369](https://www.sqlalchemy.org/trac/ticket/2369)
- en: '**[orm] [bug]**'
  id: totrans-1165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The “auto-aliasing” behavior of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method has been turned off. The specific behavior
    is now available via a new method `Query.select_entity_from()`. The auto-aliasing
    behavior here was never well documented and is generally not what’s desired, as
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has become more oriented towards controlling
    how a JOIN is rendered. `Query.select_entity_from()` will also be made available
    in 0.8 so that applications which rely on the auto-aliasing can shift their applications
    to use this method.
  id: totrans-1166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法的“自动别名”行为已被关闭。现在特定行为可以通过新方法 `Query.select_entity_from()`
    获得。这里的自动别名行为从未有很好的文档记录，并且通常不是所期望的，因为 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 已经更加倾向于控制 JOIN 的渲染方式。`Query.select_entity_from()`
    也将在 0.8 中提供，以便依赖于自动别名的应用程序可以转向使用这种方法。'
- en: See also
  id: totrans-1167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[_query.Query.select_from() no longer applies the clause to corresponding entities](migration_09.html#migration-2736)'
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[_query.Query.select_from() 不再将子句应用于相应的实体](migration_09.html#migration-2736)'
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: orm declarative
  id: totrans-1170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器 [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，它是 [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 的包装器，允许使用一种巧妙的类装饰方法应用现有的基类。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到：0.8.3
- en: '**[orm] [declarative] [feature]**'
  id: totrans-1174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM 描述符，如混合属性，现在可以通过名称在与 `order_by`、`primaryjoin` 或类似的在 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 中使用的字符串参数中引用，除了列绑定属性。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到：0.8.2
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-1178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [feature]**'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [功能]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的示例，包括`discriminator_on_association.py`利用单表继承来处理“鉴别器”的工作。还添加了一个真正的“通用外键”示例，它类似于其他流行框架，使用开放的整数指向任何其他表，放弃传统的引用完整性。虽然我们不推荐这种模式，但信息想要自由。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-1182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-1183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本控制示例中创建的历史表中添加了“autoincrement=False”，因为这个表在任何情况下都不应该具有自增。由Patrick Schmid提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的一个问题，即当存在反向引用时，多对一引用可能会为目标产生一个无意义的版本，即使它没有更改。补丁由Matt Chisholm提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: engine
  id: totrans-1188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-1190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`repr()`现在将使用星号隐藏密码。由Gunnlaugur Þór Briem提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [feature]**'
  id: totrans-1193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'New events added to [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"):'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加到[`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")的新事件：
- en: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
  id: totrans-1195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
- en: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
  id: totrans-1196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
- en: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
  id: totrans-1197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
- en: 'References: [#2770](https://www.sqlalchemy.org/trac/ticket/2770)'
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2770](https://www.sqlalchemy.org/trac/ticket/2770)
- en: '**[engine] [bug]**'
  id: totrans-1199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在解析ipv6地址，例如用括号括起来。'
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，则不会再次调用Dialect.initialize()，这是由于断开连接错误。这修复了Oracle
    8方言中的一个特定问题，但通常情况下，dialect.initialize()阶段应该只执行一次。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-1207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-1208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")在现有池化连接在无效或重新生成事件后无法重新连接时会丢失正确的已检出计数。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: '**[engine] [bug]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即各种[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现中的`reset_on_return`参数在重新生成池时不会传播。感谢Eevee。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: '**[engine] [bug]**'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The method signature of `Dialect.reflecttable()`, which in all known cases is
    provided by [`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect"), has been tightened to expect `include_columns`
    and `exclude_columns` arguments without any kw option, reducing ambiguity - previously
    `exclude_columns` was missing.
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Dialect.reflecttable()`的方法签名，在所有已知情况下由[`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")提供，已经调整为期望`include_columns`和`exclude_columns`参数，不再有任何kw选项，减少了歧义
    - 之前缺少了`exclude_columns`。'
- en: 'References: [#2748](https://www.sqlalchemy.org/trac/ticket/2748)'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2748](https://www.sqlalchemy.org/trac/ticket/2748)
- en: sql
  id: totrans-1217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对“唯一约束”反射的支持，通过[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")方法。感谢Roman Podolyaka的补丁。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.4
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: '**[sql] [feature]**'
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")和[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造现在将ORM实体解释为要操作的目标表，例如：'
- en: '[PRE3]'
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[sql] [feature] [mysql] [postgresql]**'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [mysql] [postgresql]**'
- en: The PostgreSQL and MySQL dialects now support reflection/inspection of foreign
    key options, including ON UPDATE, ON DELETE. PostgreSQL also reflects MATCH, DEFERRABLE,
    and INITIALLY. Courtesy ijl.
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL和MySQL方言现在支持外键选项的反射/检查，包括ON UPDATE、ON DELETE。PostgreSQL还反映了MATCH、DEFERRABLE和INITIALLY。感谢ijl。
- en: 'References: [#2183](https://www.sqlalchemy.org/trac/ticket/2183)'
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2183](https://www.sqlalchemy.org/trac/ticket/2183)
- en: '**[sql] [feature]**'
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct with a “null” type (e.g. no type
    specified) is now copied when used in a typed expression, and the new copy is
    assigned the actual type of the compared column. Previously, this logic would
    occur on the given [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") in place. Additionally, a similar process
    now occurs for [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs passed to [`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") for an [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct, within the compilation phase of
    the construct.
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当在类型化表达式中使用具有“null”类型（例如，未指定类型）的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造时，会复制该构造，并将新副本分配给比较列的实际类型。以前，此逻辑会在给定的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")中发生。此外，现在对于传递给[`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")用于[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")或[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，在构造的编译阶段中也会发生类似的过程。
- en: These are both subtle behavioral changes which may impact some usages.
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两者都是一些微妙的行为变化，可能会影响某些用法。
- en: See also
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[A bindparam() construct with no type gets upgraded via copy when a type is
    available](migration_09.html#migration-2850)'
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当可用类型时，没有类型的`bindparam()`构造通过复制升级](migration_09.html#migration-2850)'
- en: 'References: [#2850](https://www.sqlalchemy.org/trac/ticket/2850)'
  id: totrans-1234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2850](https://www.sqlalchemy.org/trac/ticket/2850)
- en: '**[sql] [feature]**'
  id: totrans-1235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: An overhaul of expression handling for special symbols particularly with conjunctions,
    e.g. `None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false"), including consistency in rendering NULL in
    conjunctions, “short-circuiting” of [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") expressions which contain boolean constants,
    and rendering of boolean constants and expressions as compared to “1” or “0” for
    backends that don’t feature `true`/`false` constants.
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于特殊符号的表达式处理进行了全面改进，特别是连接词，例如`None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")，包括在连接中呈现NULL的一致性，包含布尔常量的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")和[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")表达式的“短路”，以及对布尔常量和表达式的呈现与不支持`true`/`false`常量的后端相比较为“1”或“0”。
- en: See also
  id: totrans-1237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Improved rendering of Boolean constants, NULL constants, conjunctions](migration_09.html#migration-2804)'
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进的布尔常量、NULL常量、连接的呈现](migration_09.html#migration-2804)'
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2804](https://www.sqlalchemy.org/trac/ticket/2804),
    [#2823](https://www.sqlalchemy.org/trac/ticket/2823)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2804](https://www.sqlalchemy.org/trac/ticket/2804),
    [#2823](https://www.sqlalchemy.org/trac/ticket/2823)
- en: '**[sql] [feature]**'
  id: totrans-1240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The typing system now handles the task of rendering “literal bind” values, e.g.
    values that are normally bound parameters but due to context must be rendered
    as strings, typically within DDL constructs such as CHECK constraints and indexes
    (note that “literal bind” values become used by DDL as of [#2742](https://www.sqlalchemy.org/trac/ticket/2742)).
    A new method [`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") serves as the base, and [`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") is added to allow wrapping
    of a native literal rendering method.
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型系统现在处理渲染“字面绑定”值的任务，例如通常绑定参数但由于上下文必须呈现为字符串的值，通常在 DDL 结构中，如 CHECK 约束和索引中（注意，随着
    [#2742](https://www.sqlalchemy.org/trac/ticket/2742)，“字面绑定”值将成为 DDL 使用的）。新方法 [`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") 作为基础，添加了 [`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") 以允许包装本地字面渲染方法。
- en: See also
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[The typing system now handles the task of rendering “literal bind” values](migration_09.html#change-2838)'
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，类型系统处理渲染“字面绑定”值的任务了。（见 [“literal bind” 值的渲染](migration_09.html#change-2838)）
- en: 'References: [#2838](https://www.sqlalchemy.org/trac/ticket/2838)'
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2838](https://www.sqlalchemy.org/trac/ticket/2838)
- en: '**[sql] [feature]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method now produces copies of all [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") dictionaries from all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects within the structure including columns,
    constraints, foreign keys, etc. As these dictionaries are copies, they are independent
    of the original dictionary. Previously, only the `.info` dictionary of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was transferred within this operation, and it was
    only linked in place, not copied.
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 方法现在会复制结构中所有 [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 对象的所有 [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 字典，包括列、约束、外键等。由于这些字典是副本，它们与原始字典独立。以前，此操作仅传输了
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `.info` 字典，并且它仅链接在原地，而不是复制。'
- en: 'References: [#2716](https://www.sqlalchemy.org/trac/ticket/2716)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2716](https://www.sqlalchemy.org/trac/ticket/2716)
- en: '**[sql] [feature]**'
  id: totrans-1248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The `default` argument of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") now accepts a class or object method as an argument,
    in addition to a standalone function; will properly detect if the “context” argument
    is accepted or not.
  id: totrans-1249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的 `default` 参数现在接受类或对象方法作为参数，除了独立函数之外；将正确检测是否接受“上下文”参数。'
- en: '**[sql] [feature]**'
  id: totrans-1250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`. While this feature
    is highlighted as part of 0.9 it is also backported to 0.8.3.
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    构造中添加了新方法 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定一个列列表和一个可选择项，渲染 `INSERT INTO
    (table) (columns) SELECT ..`。虽然此功能作为 0.9 的一部分突出显示，但也已经回溯到了 0.8.3。'
- en: See also
  id: totrans-1252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[INSERT from SELECT](migration_09.html#feature-722)'
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从 SELECT 插入](migration_09.html#feature-722)'
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")提供了一个名为[`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")的新属性，以便更容易控制使用`==`或`!=`与`None`和布尔类型进行比较时如何生成`IS`表达式，或者带有绑定参数的普通相等表达式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [feature]**'
  id: totrans-1258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A [`label()`](../core/sqlelement.html#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    construct will now render as its name alone in an `ORDER BY` clause, if that label
    is also referred to in the columns clause of the select, instead of rewriting
    the full expression. This gives the database a better chance to optimize the evaluation
    of the same expression in two different contexts.
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`ORDER BY`子句中，如果`label()`构造也在select的列子句中引用了该标签，则现在将仅以其名称单独呈现，而不是重写完整表达式。这使得数据库有更好的机会优化在两个不同上下文中评估相同表达式。
- en: See also
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Label constructs can now render as their name alone in an ORDER BY](migration_09.html#migration-1068)'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标签构造现在可以在ORDER BY中仅呈现其名称](migration_09.html#migration-1068)'
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql] [bug]**'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，即如果在多个FROM子句中引用了CTE的名称，则可能无法正确引用。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式系统中的错误，如果CTE仅用作`alias()`构造，则不会使用WITH关键字呈现。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-1271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的错误，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会传播。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-1275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-1276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")在解释具有`__clause_element__()`方法的ORM元素时无法正确处理的错误。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为“非本地”类型生成CHECK约束时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型现在会绕过任何自定义（例如TypeDecorator）类型。这样，自定义类型不会参与CHECK中的表达式，因为此表达式针对“impl”值而不是“decorated”值。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从未指定`unique`（默认为`None`）的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")生成了[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上的`.unique`标志，它可能会被生成为`None`。现在该标志将始终为`True`或`False`。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-1287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-1288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了默认编译器以及postgresql、mysql和mssql的bug，以确保任何字面SQL表达式值在CREATE INDEX语句中直接呈现为字面值，而不是作为绑定参数。这也改变了其他DDL的呈现方案，如约束。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在其FROM子句中引用自身的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，通常通过就地突变，将引发一个信息性错误消息，而不是导致递归溢出。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-1296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，使用`column_reflect`事件来更改传入的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.key`会阻止主键约束、索引和外键约束被正确反映。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-1299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.8版本中添加的[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")运算符现在在针对空集合使用时正确地产生表达式“IN”的否定返回。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-1302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式系统依赖于某些表达式的`str()`形式，当引用`select()`构造上的`.c`集合时，但是`str()`形式不可用，因为元素依赖于特定于方言的编译构造，特别是与PostgreSQL的`ARRAY`元素一起使用的`__getitem__()`运算符。该修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: '**[sql] [bug]**'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造的相关性行为进行了多次修复，首次引入于0.8.0：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-1308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为满足FROM条目应向外相关到包含另一个SELECT的SELECT的用例，然后包含此SELECT，当通过[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")建立显式相关性时，现在当目标SELECT在链中的某处被包含在WHERE/ORDER
    BY/columns子句中时，相关性现在可以跨多个级别工作，而不仅仅是嵌套的FROM子句。这使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")再次更兼容于0.7，同时仍保持新的“智能”相关性。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-1309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未使用显式相关性时，通常的“隐式”相关性将其行为限制在仅限于直接封闭的SELECT，以最大限度地提高与0.7应用程序的兼容性，并且在这种情况下阻止跨嵌套FROM的相关性，保持与0.8.0/0.8.1的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-1310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except")方法未能在所有情况下阻止给定的FROM子句相关性，并且还会导致FROM子句被错误地完全省略（更像是0.7会做的），这已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-1311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用select.correlate_except(None)将按预期将所有FROM子句输入到相关性中。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-1314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即将一个表“A”的select()与多个外键路径连接到表“B”，到表“B”，如果直接将表“A”连接到“B”会导致“模糊连接条件”错误，但是它会产生具有多个条件的连接条件。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-1317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在跨远程模式和本地模式使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")可能会在两个模式都有相同名称的表时产生错误的结果。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基础[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")类中删除了“not implemented” `__iter__()`调用，虽然在0.8.0版本中引入此功能是为了防止在自定义操作符上实现`__getitem__()`方法并在该对象上错误地调用`list()`时出现无限增长的内存循环，但这会导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的解决办法，所以我们遵循Python的最佳实践。在自定义操作符上实现`__getitem__()`时要小心！
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug]**'
  id: totrans-1326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “name” attribute is set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") before the “attach” events are called, so that attachment
    events can be used to dynamically generate a name for the index based on the parent
    table and/or columns.
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“attach”事件之前，将“name”属性设置在[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上，以便可以使用附加事件根据父表和/或列动态生成索引名称。
- en: 'References: [#2835](https://www.sqlalchemy.org/trac/ticket/2835)'
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2835](https://www.sqlalchemy.org/trac/ticket/2835)
- en: '**[sql] [bug]**'
  id: totrans-1329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The erroneous kw arg “schema” has been removed from the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object. this was an accidental commit that did
    nothing; a warning is raised in 0.8.3 when this kw arg is used.
  id: totrans-1330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误的关键字参数“schema”已从[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象中移除。这是一个意外提交，没有任何作用；在使用此关键字参数时，0.8.3版本会发出警告。
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-1332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A rework to the way that “quoted” identifiers are handled, in that instead of
    relying upon various `quote=True` flags being passed around, these flags are converted
    into rich string objects with quoting information included at the point at which
    they are passed to common schema constructs like [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. This solves the issue of various methods that
    don’t correctly honor the “quote” flag such as `Engine.has_table()` and related
    methods. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") object is a string subclass that can
    also be used explicitly if needed; the object will hold onto the quoting preferences
    passed and will also bypass the “name normalization” performed by dialects that
    standardize on uppercase symbols, such as Oracle, Firebird and DB2. The upshot
    is that the “uppercase” backends can now work with force-quoted names, such as
    lowercase-quoted names and new reserved words.
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对处理“引号”标识符的方式进行了重新设计，不再依赖于传递各种`quote=True`标志，而是将这些标志转换为包含引号信息的丰富字符串对象，这些信息包含在它们被传递给像[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")等常见模式构造时。这解决了各种方法不正确地遵守“引号”标志的问题，例如`Engine.has_table()`和相关方法。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")对象是一个字符串子类，如果需要的话也可以显式使用；该对象将保留传递的引号偏好，并且还将绕过标准化为大写符号的方言执行的“名称规范化”。Oracle、Firebird和DB2等标准化为大写符号的后端现在可以使用强制引号名称，例如小写引号名称和新的保留字。
- en: See also
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Schema identifiers now carry along their own quoting information](migration_09.html#change-2812)'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式标识符现在携带自己的引号信息](migration_09.html#change-2812)'
- en: 'References: [#2812](https://www.sqlalchemy.org/trac/ticket/2812)'
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2812](https://www.sqlalchemy.org/trac/ticket/2812)
- en: '**[sql] [bug]**'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The resolution of [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects to their target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") has been reworked to be as immediate as possible,
    based on the moment that the target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as this [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), rather than waiting for the first time a join
    is constructed, or similar. This along with other improvements allows earlier
    detection of some foreign key configuration issues. Also included here is a rework
    of the type-propagation system, so that it should be reliable now to set the type
    as `None` on any [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that refers to another via [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") - the type will be copied from the target column
    as soon as that other column is associated, and now works for composite foreign
    keys as well.
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象到其目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的解析已经重新设计，以尽可能立即地进行，基于目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与与此[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")关联的相同[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的时刻，而不是等待构建第一次连接或类似的时刻。这与其他改进一起，允许更早地检测到一些外键配置问题。此外，这里还包括了对类型传播系统的重新设计，因此现在应该可以可靠地在任何通过[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用另一个列的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上将类型设置为`None` - 该类型将在另一个列关联时立即从目标列复制，并且现在也适用于复合外键。
- en: See also
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns can reliably get their type from a column referred to via ForeignKey](migration_09.html#migration-1765)'
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列现在可以可靠地从通过外键引用的列获取其类型](migration_09.html#migration-1765)'
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765)'
  id: totrans-1341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765)
- en: postgresql
  id: totrans-1342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 9.2 范围类型的支持。目前，不提供类型转换，因此目前直接使用字符串或 psycopg2 2.5 范围扩展类型。补丁由
    Chris Withers 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: '**[postgresql] [feature]**'
  id: totrans-1346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 DBAPI 时，添加了对“AUTOCOMMIT”隔离的支持。该关键字可通过 `isolation_level` 执行选项使用。补丁由
    Roman Podolyaka 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [feature]**'
  id: totrans-1350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for rendering `SMALLSERIAL` when a [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") type is used on a primary key autoincrement column,
    based on server version detection of PostgreSQL version 9.2 or greater.
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在主键自增列上使用 [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") 类型时，基于 PostgreSQL 版本 9.2 或更高版本的服务器版本检测，添加了对 `SMALLSERIAL`
    的渲染支持。
- en: 'References: [#2840](https://www.sqlalchemy.org/trac/ticket/2840)'
  id: totrans-1352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2840](https://www.sqlalchemy.org/trac/ticket/2840)
- en: '**[postgresql] [bug]**'
  id: totrans-1353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了对列的服务器默认值的 128 字符截断；此代码最初来自于 PG 系统视图，用于截断字符串以便阅读。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-1357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 括号将应用于复合 SQL 表达式，如在 CREATE INDEX 语句的列列表中呈现。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-1360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-1361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中在“PostgreSQL”或“EnterpriseDB”之前带有前缀的 PostgreSQL 版本字符串无法解析。感谢 Scott
    Schaefer。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: '**[postgresql] [bug]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 的行为已经简化，不再向给定表达式注入硬编码的 `::timestamp` 或类似的转换，因为这会干扰诸如时区感知日期时间之类的类型，但在现代版本的
    psycopg2 中似乎也不必要。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-1368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-1369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型中包含反斜杠引号的键/值在使用“非本机”（即非-psycopg2）手段转换 HSTORE 数据时无法正确转义的 bug。补丁由
    Ryan Kelly 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-1373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-1374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中多列 PostgreSQL 索引中列的顺序会以错误的顺序反映出来。感谢 Roman Podolyaka。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: mysql
  id: totrans-1377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-1378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-1379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")一起使用的`mysql_length`参数现在可以作为列名/长度的字典传递，用于复合索引。非常感谢Roman
    Podolyaka的补丁。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [feature]**'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The MySQL [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type now features the same auto-quoting behavior as that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM"). Quotes are not required when setting up the
    value, but quotes that are present will be auto-detected along with a warning.
    This also helps with Alembic where the SET type doesn’t render with quotes.
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")类型现在具有与[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM")相同的自动引号行为。设置值时不需要引号，但存在的引号将被自动检测并发出警告。这也有助于Alembic，其中SET类型不带引号。
- en: 'References: [#2817](https://www.sqlalchemy.org/trac/ticket/2817)'
  id: totrans-1384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2817](https://www.sqlalchemy.org/trac/ticket/2817)
- en: '**[mysql] [bug]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新MySQL保留字版本5.5、5.6，感谢Hanno Schlichting。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3, 0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-1389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-1390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[#2721](https://www.sqlalchemy.org/trac/ticket/2721)中的更改是，[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的`deferrable`关键字在MySQL后端上被静默忽略，将在0.9版本中恢复；此关键字现在将再次呈现，在MySQL上引发错误，因为它不被理解
    - 相同的行为也将适用于`initially`关键字。在0.8中，这些关键字将继续被忽略，但会发出警告。此外，`match`关键字现在在0.9上引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在0.8上发出警告；这个关键字不仅被MySQL静默忽略，还会破坏ON UPDATE/ON DELETE选项。'
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-1391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用在MySQL上不呈现或呈现不同的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。文档中已添加了此用法示例，请参阅[MySQL /
    MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL连接器方言现在允许在create_engine查询字符串中设置选项来覆盖连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: '**[mysql] [bug]**'
  id: totrans-1398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用多表UPDATE时的bug，其中一个补充表是带有自己绑定参数的SELECT，绑定参数的位置与使用MySQL的特殊语法时语句本身的位置相反。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-1402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`mysql+gaerdbms`方言中添加了另一个条件，以检测所谓的“开发”模式，在这种模式下，我们应该使用`rdbms_mysqldb` DBAPI。修补程序由Brett
    Slatkin提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")和[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")上的`deferrable`关键字参数不会在MySQL方言上呈现`DEFERRABLE`关键字。很长一段时间以来，我们一直保留这个设置，因为一个非延迟的外键会与一个延迟的外键表现得非常不同，但一些环境只是在MySQL上禁用FKs，所以我们在这里会少些主观意见。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-1410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fix and test parsing of MySQL foreign key options within reflection; this complements
    the work in [#2183](https://www.sqlalchemy.org/trac/ticket/2183) where we begin
    to support reflection of foreign key options such as ON UPDATE/ON DELETE cascade.
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复并测试在反射中解析MySQL外键选项的问题；这补充了[#2183](https://www.sqlalchemy.org/trac/ticket/2183)中的工作，我们开始支持外键选项的反射，如ON
    UPDATE/ON DELETE cascade。
- en: 'References: [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improved support for the cymysql driver, supporting version 0.6.5, courtesy
    Hajime Nakagami.
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对cymysql驱动程序的支持，支持版本0.6.5，由Hajime Nakagami提供。
- en: sqlite
  id: totrans-1415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增的SQLite DATETIME参数storage_format和regexp显然没有完全正确实现；虽然参数被接受，但实际上它们没有任何效果；这个问题已经修复。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: '**[sqlite] [bug]**'
  id: totrans-1420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT")添加到SQLite方言可以反映的类型名称列表中；由Russell Stuart提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-1424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询SQL Server 2000上的信息模式时，删除了在0.8.1中添加的一个CAST调用，以帮助处理驱动程序问题，显然在2000上不兼容。CAST保留在SQL
    Server 2005及更高版本中。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-1429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pyodbc]**'
- en: Fixes to MSSQL with Python 3 + pyodbc, including that statements are passed
    correctly.
  id: totrans-1430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用Python 3 + pyodbc的MSSQL，包括正确传递语句。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: oracle
  id: totrans-1432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [py3k]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能] [py3k]**'
- en: The Oracle unit tests with cx_oracle now pass fully under Python 3.
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 cx_oracle 的 Oracle 单元测试现在在 Python 3 下完全通过。
- en: '**[oracle] [bug]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用同义词进行 Oracle 表反射时出现的错误，如果同义词和表位于不同的远程模式中，则会失败。修复补丁由 Kyle Derr 提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-1438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-1439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新标志`system=True`到[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")，将列标记为数据库自动添加的“系统”列（例如 PostgreSQL 的 `oid` 或 `xmin`）。该列将在`CREATE
    TABLE`语句中被省略，但仍可用于查询。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") 构造可以应用于自定义编译规则，允许跳过列，通过生成返回`None`的规则。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: '**[feature] [firebird]**'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 kinterbasdb 和 fdb 方言添加了新标志`retaining=True`。这控制发送到 DBAPI 连接的`commit()`和`rollback()`方法的`retaining`标志的值。由于历史原因，此标志在
    0.8.2 中默认为`True`，但在 0.9.0b1 中此标志默认为`False`。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[feature] [core]**'
  id: totrans-1447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [核心]**'
- en: Added a new variant to [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") called `ValuesBase.return_defaults()`;
    this allows arbitrary columns to be added to the RETURNING clause of the statement
    without interfering with the compilers usual “implicit returning” feature, which
    is used to efficiently fetch newly generated primary key values. For supporting
    backends, a dictionary of all fetched values is present at `ResultProxy.returned_defaults`.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的变体[`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")，称为`ValuesBase.return_defaults()`；这允许将任意列添加到语句的
    RETURNING 子句中，而不会干扰编译器通常的“隐式返回”功能，该功能用于高效地获取新生成的主键值。对于支持的后端，所有获取的值的字典都存在于`ResultProxy.returned_defaults`中。
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[feature] [pool]**'
  id: totrans-1450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: Added pool logging for “rollback-on-return” and the less used “commit-on-return”.
    This is enabled with the rest of pool “debug” logging.
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“rollback-on-return”和较少使用的“commit-on-return”添加了池记录。这与池“debug”记录一起启用。
- en: 'References: [#2752](https://www.sqlalchemy.org/trac/ticket/2752)'
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2752](https://www.sqlalchemy.org/trac/ticket/2752)
- en: '**[feature] [firebird]**'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: The `fdb` dialect is now the default dialect when specified without a dialect
    qualifier, i.e. `firebird://`, per the Firebird project publishing `fdb` as their
    official Python driver.
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当未指定方言修饰符时，`fdb` 方言现在是默认方言，即 `firebird://`，因为 Firebird 项目将 `fdb` 发布为其官方 Python
    驱动程序。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射 Firebird 类型 LONG 和 INT64 时，��型查找已修复，以便将 LONG 视为 INTEGER，INT64 视为 BIGINT，除非类型具有“精度”，在这种情况下，它将被视为
    NUMERIC。修复补丁由 Russell Stuart 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果使用函数而不是类设置复合类型，则当尝试检查该列是否为[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")时，可变扩展会出错（它不是）。感谢 asldevi。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: '**[requirements]**'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[requirements]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python [mock](https://pypi.org/project/mock) 库现在是运行单元测试套件所必需的。虽然作为 Python 3.3
    的一部分，但之前的 Python 安装需要安装此库才能运行单元测试或使用`sqlalchemy.testing`包来处理外部方言。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 0.9.10
  id: totrans-1466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.10
- en: 'Released: July 22, 2015'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年7月22日
- en: orm
  id: totrans-1468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-1470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")返回的字典中添加了一个新条目`"entity"`。这指的是由表达式引用的主
    ORM 映射类或别名类。与现有的`"type"`条目相比，它始终是一个映射实体，即使从列表达式中提取，或者如果给定表达式是纯核心表达式，则为`None`。另请参见[#3403](https://www.sqlalchemy.org/trac/ticket/3403)，该修复了此功能中的一个回归，该回归在0.9.10中未发布，但在1.0版本中发布。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [bug]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, a warning is emitted. As
    of 1.0.0b5 this will raise an error.'
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")或[`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete")方法时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")不支持连接、子选择或特殊的 FROM 子句；如果调用了像[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")或[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")这样的方法，而不是静默地忽略这些字段，会发出警告。从 1.0.0b5 开始，这将引发错误。
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-1474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个嵌套的[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")操作中，状态跟踪失败传播“脏”标志的错误，导致在内部保存点中更新过的对象在外部保存点回滚时，该对象不会成为过期状态的一部分，因此不会恢复到其数据库状态。
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: engine
  id: totrans-1478
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") 参数中，作为 `None` 的同义词，以便所有设置都可以使用字符串值，允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") 这样的实用程序可以无问题地使用。
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-1482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正式支持在 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select)
    中使用的 SELECT 中存在的 CTE。这种行为在 0.9.9 版本之前偶然起作用，之后由于与 [#3248](https://www.sqlalchemy.org/trac/ticket/3248)
    中的不相关更改而不再起作用。请注意，这是在 INSERT 之后、SELECT 之前渲染 WITH 子句的行为；在后续版本中，将针对 INSERT、UPDATE、DELETE
    的顶层渲染 CTE 的完整功能作为新功能发布。
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: '**[sql] [bug]**'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即使用命名约定的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象在 pickle 中无法正常工作。属性被跳过，导致如果从未拣选的 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 对象基础上创建其他表，则会出现不一致和失败。
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-1489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个长期存在的 bug，即在 psycopg2 方言中与非 ascii 值一起使用时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型与 `native_enum=False` 一起使用时无法正确解码返回结果。这源于 PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 类型曾经是一个独立的类型，没有“非本地”选项。
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mysql
  id: totrans-1493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PyMySQL 在使用“executemany”操作时对 unicode 参数的支持。现在，SQLAlchemy 将语句和绑定参数都作为 unicode
    对象传递，因为 PyMySQL 通常在内部使用字符串插值来生成最终语句，并且在 executemany 情况下仅对最终语句执行“encode”步骤。
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Py3K 上未正确使用 `ord()` 函数的 [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT") 类型。感谢 David Marin 提交的拉取请求。
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: sqlite
  id: totrans-1500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQLite] [错误]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-1502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 方言中的错误，其中包含非字母字符（如点或空格）的唯一约束的反射不会反射其名称。
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: tests
  id: totrans-1504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-1505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，阻止了 “pypy setup.py test” 的正确工作。
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-1508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用扩展属性仪器系统时的错误，在调用 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 时，当使用无效输入（也恰好不是弱引用）时，不会引发正确的异常，例如整数。
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: '**[bug] [ext]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed regression from 0.9.9 where the [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") symbol was removed from the `sqlalchemy.ext.declarative`
    namespace.
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 0.9.9 版中回归的错误，其中 [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") 符号已从 `sqlalchemy.ext.declarative` 命名空间中删除。
- en: 'References: [#3324](https://www.sqlalchemy.org/trac/ticket/3324)'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3324](https://www.sqlalchemy.org/trac/ticket/3324)
- en: orm
  id: totrans-1515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added a new entry `"entity"` to the dictionaries returned by [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions"). This refers to the primary ORM mapped
    class or aliased class that is referred to by the expression. Compared to the
    existing entry for `"type"`, it will always be a mapped entity, even if extracted
    from a column expression, or None if the given expression is a pure core expression.
    See also [#3403](https://www.sqlalchemy.org/trac/ticket/3403) which repaired a
    regression in this feature which was unreleased in 0.9.10 but was released in
    the 1.0 version.
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 返回的字典中添加了一个新条目 `"entity"`。它指的是由表达式引用的主要
    ORM 映射类或别名类。与现有的 `"type"` 条目相比，它始终是一个映射实体，即使从列表达式中提取，或者如果给定的表达式是一个纯核心表达式，则为 None。另请参阅
    [#3403](https://www.sqlalchemy.org/trac/ticket/3403)，修复了该特性的一个回归，该特性未在 0.9.10
    版中发布，但在 1.0 版本中发布了。
- en: 'References: [#3320](https://www.sqlalchemy.org/trac/ticket/3320)'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3320](https://www.sqlalchemy.org/trac/ticket/3320)
- en: '**[orm] [bug]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    doesn’t support joins, subselects, or special FROM clauses when using the [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") or [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") methods; instead of silently ignoring these fields
    if methods like [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") or [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has been called, a warning is emitted. As
    of 1.0.0b5 this will raise an error.'
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    在使用 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 或 [`Query.delete()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.delete
    "sqlalchemy.orm.Query.delete") 方法时，不支持连接、子查询或特殊的 FROM 子句；如果已调用像 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 或 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 这样的方法，而这些字段又不被静默忽略，那么将会发出警告。自 1.0.0b5 版本起，这将会引发错误。'
- en: 'References: [#3349](https://www.sqlalchemy.org/trac/ticket/3349)'
  id: totrans-1521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3349](https://www.sqlalchemy.org/trac/ticket/3349)
- en: '**[orm] [bug]**'
  id: totrans-1522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed bug where the state tracking within multiple, nested [`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") operations would fail to propagate the
    “dirty” flag for an object that had been updated within the inner savepoint, such
    that if the enclosing savepoint were rolled back, the object would not be part
    of the state that was expired and therefore reverted to its database state.
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在多个嵌套的[`Session.begin_nested()`](../orm/session_api.html#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")操作中状态跟踪失败的bug，当对象在内部保存点中被更新时，未能传播“脏”标志，因此如果外部保存点被回滚，则对象不会成为已过期状态的一部分，因此不会恢复到其数据库状态。
- en: 'References: [#3352](https://www.sqlalchemy.org/trac/ticket/3352)'
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3352](https://www.sqlalchemy.org/trac/ticket/3352)
- en: engine
  id: totrans-1525
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added the string value `"none"` to those accepted by the [`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter as a synonym for `None`, so that string values
    can be used for all settings, allowing utilities like [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") to be usable without issue.
  id: totrans-1527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将字符串值`"none"`添加到[`Pool.reset_on_return`](../core/pooling.html#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数接受的值中，作为`None`的同义词，以便所有设置都可以使用字符串值，允许像[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")这样的实用程序可以无问题地使用。
- en: 'References: [#3375](https://www.sqlalchemy.org/trac/ticket/3375)'
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3375](https://www.sqlalchemy.org/trac/ticket/3375)
- en: sql
  id: totrans-1529
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added official support for a CTE used by the SELECT present inside of [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). This behavior worked accidentally
    up until 0.9.9, when it no longer worked due to unrelated changes as part of [#3248](https://www.sqlalchemy.org/trac/ticket/3248).
    Note that this is the rendering of the WITH clause after the INSERT, before the
    SELECT; the full functionality of CTEs rendered at the top level of INSERT, UPDATE,
    DELETE is a new feature targeted for a later release.
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方支持在[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")内部使用的SELECT中使用CTE。此行为在0.9.9之前意外工作，当时由于与[#3248](https://www.sqlalchemy.org/trac/ticket/3248)的不相关更改而不再工作。请注意，这是在INSERT之后，SELECT之前呈现WITH子句的功能；在INSERT、UPDATE、DELETE的顶层呈现CTE的完整功能是一个针对以后版本的新功能。
- en: 'References: [#3418](https://www.sqlalchemy.org/trac/ticket/3418)'
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3418](https://www.sqlalchemy.org/trac/ticket/3418)
- en: '**[sql] [bug]**'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that used a naming convention would not properly
    work with pickle. The attribute was skipped leading to inconsistencies and failures
    if the unpickled [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object were used to base additional tables from.
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用命名约定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")对象在与pickle一起使用时无法正常工作的问题。属性被跳过，导致不一致和失败，如果反序列化的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象用于基于其他表的附加表，则会出现问题。
- en: 'References: [#3362](https://www.sqlalchemy.org/trac/ticket/3362)'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3362](https://www.sqlalchemy.org/trac/ticket/3362)
- en: postgresql
  id: totrans-1536
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed a long-standing bug where the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") type as used with the psycopg2 dialect in conjunction
    with non-ascii values and `native_enum=False` would fail to decode return results
    properly. This stemmed from when the PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") type used to be a standalone type without
    a “non native” option.
  id: totrans-1538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长期存在的bug，即在与psycopg2方言一起使用时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型与非ascii值和`native_enum=False`一起使用时无法正确解码返回结果。这源自于PG [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")类型曾经是一个独立的类型，没有“非本地”选项。
- en: 'References: [#3354](https://www.sqlalchemy.org/trac/ticket/3354)'
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3354](https://www.sqlalchemy.org/trac/ticket/3354)
- en: mysql
  id: totrans-1540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [pymysql]**'
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [pymysql]**'
- en: Fixed unicode support for PyMySQL when using an “executemany” operation with
    unicode parameters. SQLAlchemy now passes both the statement as well as the bound
    parameters as unicode objects, as PyMySQL generally uses string interpolation
    internally to produce the final statement, and in the case of executemany does
    the “encode” step only on the final statement.
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用带有 Unicode 参数的“executemany”操作时 PyMySQL 的 Unicode 支持问题。SQLAlchemy 现在将语句和绑定参数都作为
    Unicode 对象传递，因为 PyMySQL 通常在内部使用字符串插值来生成最终语句，并且在 executemany 情况下仅在最终语句上执行“encode”步骤。
- en: 'References: [#3337](https://www.sqlalchemy.org/trac/ticket/3337)'
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3337](https://www.sqlalchemy.org/trac/ticket/3337)
- en: '**[mysql] [bug] [py3k]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [py3k]**'
- en: Fixed the [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT "sqlalchemy.dialects.mysql.BIT")
    type on Py3K which was not using the `ord()` function correctly. Pull request
    courtesy David Marin.
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Py3K 上未正确使用 `ord()` 函数的 [`BIT`](../dialects/mysql.html#sqlalchemy.dialects.mysql.BIT
    "sqlalchemy.dialects.mysql.BIT") 类型。感谢 David Marin 的拉取请求。
- en: 'References: [#3333](https://www.sqlalchemy.org/trac/ticket/3333)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3333](https://www.sqlalchemy.org/trac/ticket/3333)
- en: sqlite
  id: totrans-1547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug in SQLite dialect where reflection of UNIQUE constraints that included
    non-alphabetic characters in the names, like dots or spaces, would not be reflected
    with their name.
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 方言中的一个 bug，即反射包含非字母字符（如点或空格）的 UNIQUE 约束的名称时，名称不会被反映出来。
- en: 'References: [#3495](https://www.sqlalchemy.org/trac/ticket/3495)'
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3495](https://www.sqlalchemy.org/trac/ticket/3495)
- en: tests
  id: totrans-1551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-1552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed an import that prevented “pypy setup.py test” from working correctly.
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个导入问题，导致“pypy setup.py test”无法正常工作。
- en: 'References: [#3406](https://www.sqlalchemy.org/trac/ticket/3406)'
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3406](https://www.sqlalchemy.org/trac/ticket/3406)
- en: misc
  id: totrans-1555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where when using extended attribute instrumentation system, the correct
    exception would not be raised when [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") were called with an invalid input that also happened
    to not be weak referencable, such as an integer.
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用扩展属性仪器系统时的 bug，当使用 [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") 调用无效输入（也恰好不是弱引用）时，不会引发正确的异常，例如整数。
- en: 'References: [#3408](https://www.sqlalchemy.org/trac/ticket/3408)'
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3408](https://www.sqlalchemy.org/trac/ticket/3408)
- en: '**[bug] [ext]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed regression from 0.9.9 where the [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") symbol was removed from the `sqlalchemy.ext.declarative`
    namespace.
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从 0.9.9 版本开始的回归问题，其中 [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative") 符号从 `sqlalchemy.ext.declarative` 命名空间中移除。
- en: 'References: [#3324](https://www.sqlalchemy.org/trac/ticket/3324)'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3324](https://www.sqlalchemy.org/trac/ticket/3324)
- en: 0.9.9
  id: totrans-1562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.9
- en: 'Released: March 10, 2015'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2015年3月10日
- en: orm
  id: totrans-1564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-1566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可用于在首次检出连接时设置 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 的执行选项，即在事务开始之前。这用于在事务开始之前在连接上设置选项，如隔离级别。
- en: See also
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新的文档部分详细介绍了使用会话设置事务隔离的最佳实践。'
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法 [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，与 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 的功能类似，但还会调用所有连接的 [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 方法，保证它们不会被返回到连接池中。这在处理 gevent 超时等情况时非常有用，当不安全继续使用连接时，甚至用于回滚时。
- en: '**[orm] [bug]**'
  id: totrans-1572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-1573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 对象比较中的 bug，在比较多对一 `!= None` 时，如果源是一个别名类，或者如果查询需要对表达式应用特殊的别名处理，因为别名连接或多态查询;
    还修复了在将多对一与对象状态进行比较时，如果查询需要对别名连接或多态查询应用特殊的别名处理，将失败的情况。
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-1574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-1575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的 `after_rollback()` 处理程序错误地在处理程序内部向 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 添加状态时，内部断言会失败，而警告和删除此状态的任务（由 [#2389](https://www.sqlalchemy.org/trac/ticket/2389)
    设立）试图继续进行时。
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-1578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在使用未知的 kw 参数调用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 时，由于格式错误而导致的 TypeError 异常会引发其自身的 TypeError。感谢 Malthe
    Borch 提供的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了懒加载 SQL 构造中的 bug，其中一个复杂的主键关联在“指向自身的列”的自引用连接中多次引用相同的“本地”列时，在所有情况下都不会被替换。这里确定替换的逻辑已经重新设计，变得更加开放。
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-1583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-1584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，用于覆盖未明确提及的所有属性，现在考虑了给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，因此即使设置了load_only()，子类型的多态加载仍将正常工作。
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-1587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果在获取结果之前[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的开始处抛出异常，特别是当无法形成行处理器时，游标将保持打开状态，结果仍在等待中，并且实际上不会关闭。这通常只在像PyPy这样的解释器上出现问题，其中游标不会立即被GC回收，并且在某些情况下可能导致事务/锁打开的时间比预期的长。
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个泄漏问题，该问题会在不支持且极不推荐的用例中发生，即在固定映射类上多次替换关系，引用任意增长的目标映射器数量。当替换旧关系时会发出警告，但是如果映射已用于查询，则旧关系仍将在某些注册表中被引用。
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于表达式突变的错误，当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")从SQLite中选择多个匿名列实体进行查询时，可能会表现为“找不到列”错误，这是由SQLite方言使用的“连接重写”功能的副作用。
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即当使用`of_type()`将[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")和[`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")连接到单一继承子类时，如果设置了`from_joinpoint=True`标志，则ON子句中不会呈现“单表条件”。
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-1597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: examples
  id: totrans-1598
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-1599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-1600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了[使用历史表进行版本控制](../orm/examples.html#examples-versioned-history)示例，使映射的列重新映射以匹配列名以及列的分组；特别是，这允许在相同列名的联合继承场景中明确分组的列在历史映射中以相同的方式映射，避免了在0.9系列中添加的关于此模式的警告，并允许相同的属性键视图。
- en: '**[examples] [bug]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了示例中的一个错误，即在examples/generic_associations/discriminator_on_association.py示例中，AddressAssociation的子类未被映射为“单表继承”，导致在尝试进一步使用映射时出现问题。
- en: engine
  id: totrans-1603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-1604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的用户空间访问器，用于查看事务隔离级别；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")，[`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")。
- en: '**[engine] [bug]**'
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和池中的错误，即如果使用了[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")的`isolation_level`参数，则[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法，或由于数据库断开连接而导致的失效会失败；将在不再打开的连接上调用重置隔离级别的“finalizer”。
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-1609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在播放[`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction")时使用`isolation_level`参数与[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，则会发出警告；DBAPIs和/或SQLAlchemy方言（如psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一个事务中不更改设置，因此这永远不安全。
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: sql
  id: totrans-1612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-1614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的`__repr__()`输出中添加了`native_enum`标志，当与Alembic
    autogenerate一起使用时，这一点大多很重要。感谢Dimitris Theodorou的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-1616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当使用实现了也是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的类型时，当对使用此类型的对象进行任何类型的SQL比较表达式时，会出现Python的“无法创建一致的方法解析顺序（MRO）”错误。
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当从SELECT嵌入到INSERT中，无论是通过values子句还是作为“from select”，当两个语句的列共享相同的名称时，返回的行中产生的结果集中使用的列类型会受到污染，导致在检索返回的行时可能出现错误或错误适应。
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: schema
  id: totrans-1621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed bug in 0.9’s foreign key setup system, such that the logic used to link
    a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    to its parent could fail when the foreign key used “link_to_name=True” in conjunction
    with a target [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would not receive its parent column until later, such as within a reflection
    + “useexisting” scenario, if the target column in fact had a key value different
    from its name, as would occur in reflection if column reflect events were used
    to alter the .key of reflected [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects so that the link_to_name becomes significant.
    Also repaired support for column type via FK transmission in a similar way when
    target columns had a different key and were referenced using link_to_name.
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本的外键设置系统中的一个bug，即当外键与其父对象进行关联的逻辑在目标[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")稍后才能接收其父列时，如果目标列实际上具有不同于其名称的键值，例如，在反射中使用列反射事件来更改反射的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的.key，以便 link_to_name 变得重要。还修复了当目标列具有不同键并且使用 link_to_name
    引用时通过FK传输列类型的支持。
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)'
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)
- en: postgresql
  id: totrans-1625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对PostgreSQL索引的`CONCURRENTLY`关键字的支持，使用`postgresql_concurrently`建立。感谢Iuri de
    Silvio的拉取请求。
- en: See also
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用CONCURRENTLY的索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: '**[postgresql] [bug]**'
  id: totrans-1630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用psycopg2时，PostgreSQL UUID类型与ARRAY类型一起使用时的支持。psycopg2方言现在使用psycopg2.extras.register_uuid()钩子，以便始终将UUID值传递到/从DBAPI作为UUID()对象。[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")标志仍然受到尊重，除非在psycopg2中我们需要在禁用时将返回的UUID对象转换回字符串。
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-1632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-1633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用psycopg2 2.5.4或更高版本时，添加了对`postgresql.JSONB`数据类型的支持，该版本具有原生的JSONB数据转换，因此必须禁用SQLAlchemy的转换器；此外，新增的psycopg2扩展`extras.register_default_jsonb`用于通过`json_deserializer`参数传递给方言的JSON反序列化器。还修复了实际上未循环传递JSONB类型而不是JSON类型的PostgreSQL集成测试的bug。感谢Mateusz
    Susik的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版本psycopg2 < 2.4.3注册HSTORE类型时使用“array_oid”标志的问题，该版本不支持此标志，以及在psycopg2版本<
    2.5上使用本机json序列化器钩子“register_default_json”与用户定义的`json_deserializer`时的问题，该版本不包括本机json。
- en: '**[postgresql] [bug]**'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")中无法呈现表绑定列的表达式的bug；通常当[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造是索引中的表达式之一时，或者如果其中一个或多个是这样的表达式，则可能会误解表达式列表。
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: mysql
  id: totrans-1640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [change]**'
  id: totrans-1641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms`方言不再必要，并发出弃用警告。Google现在建议直接使用MySQLdb方言。'
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-1644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQLdb方言周围添加了版本检查，用于检查‘utf8_bin’排序规则，因为在MySQL服务器< 5.0上会失败。
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: sqlite
  id: totrans-1647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQLite上添加了对部分索引（例如带有WHERE子句）的支持。感谢Kai Groner的拉取请求。
- en: See also
  id: totrans-1650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: '**[sqlite] [feature]**'
  id: totrans-1652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的SQLite后端，用于SQLCipher后端。该后端提供了使用pysqlcipher Python驱动程序的加密SQLite数据库，该驱动程序与pysqlite驱动程序非常相似。
- en: See also
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: misc
  id: totrans-1656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext] [py3k]**'
  id: totrans-1657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Py3K下关联代理列表类无法正确解释切片的错误。感谢Gilles Dartiguelongue的拉取请求。
- en: orm
  id: totrans-1659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") which may be used to set up execution options
    on a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    when it is first checked out, before the transaction has begun. This is used to
    set up options such as isolation level on the connection before the transaction
    starts.
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")，可用于在首次检出连接时设置连接上的执行选项，事务开始之前。用于在事务开始之前设置连接的选项，如隔离级别。
- en: See also
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - new documentation section detailing best practices for setting transaction isolation
    with sessions.'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](../orm/session_transaction.html#session-transaction-isolation)
    - 新的文档部分详细介绍了使用会话设置事务隔离的最佳实践。'
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: '**[orm] [feature]**'
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate"), functions similarly to [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), except also calls [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") on all connections, guaranteeing that
    they will not be returned to the connection pool. This is useful in situations
    e.g. dealing with gevent timeouts when it is not safe to use the connection further,
    even for rollbacks.
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法 [`Session.invalidate()`](../orm/session_api.html#sqlalchemy.orm.Session.invalidate
    "sqlalchemy.orm.Session.invalidate")，类似于 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")，但还会在所有连接上调用 [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")，确保它们不会返回到连接池。在处理 gevent 超时等情况时非常有用，此时不安全继续使用连接，即使是用于回滚。
- en: '**[orm] [bug]**'
  id: totrans-1667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bugs in ORM object comparisons where comparison of many-to-one `!= None`
    would fail if the source were an aliased class, or if the query needed to apply
    special aliasing to the expression due to aliased joins or polymorphic querying;
    also fixed bug in the case where comparing a many-to-one to an object state would
    fail if the query needed to apply special aliasing due to aliased joins or polymorphic
    querying.
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 对象比较中的 bug，当比较多对一 `!= None` 时，如果源是一个别名类，或者查询需要对表达式应用特殊别名处理，由于别名连接或多态查询而失败；还修复了比较多对一与对象状态时的
    bug，如果查询需要应用特殊别名处理，由于别名连接或多态查询而失败。
- en: 'References: [#3310](https://www.sqlalchemy.org/trac/ticket/3310)'
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3310](https://www.sqlalchemy.org/trac/ticket/3310)
- en: '**[orm] [bug]**'
  id: totrans-1670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where internal assertion would fail in the case where an `after_rollback()`
    handler for a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    incorrectly adds state to that [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") within the handler, and the task to warn and remove
    this state (established by [#2389](https://www.sqlalchemy.org/trac/ticket/2389))
    attempts to proceed.
  id: totrans-1671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在一个 `after_rollback()` 处理程序为一个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 错误地在处理程序内部向该 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 添加状态时，内部断言会失败的情况下，任务警告并移除此状态（由 [#2389](https://www.sqlalchemy.org/trac/ticket/2389)
    确定）尝试继续进行。
- en: 'References: [#3309](https://www.sqlalchemy.org/trac/ticket/3309)'
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3309](https://www.sqlalchemy.org/trac/ticket/3309)
- en: '**[orm] [bug]**'
  id: totrans-1673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where TypeError raised when [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") called with unknown kw arguments would raise its
    own TypeError due to broken formatting. Pull request courtesy Malthe Borch.
  id: totrans-1674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当调用 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 时带有未知的关键字参数会引发 TypeError，由于格式错误会导致自身的 TypeError。感谢
    Malthe Borch 提交的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-1675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in lazy loading SQL construction whereby a complex primaryjoin that
    referred to the same “local” column multiple times in the “column that points
    to itself” style of self-referential join would not be substituted in all cases.
    The logic to determine substitutions here has been reworked to be more open-ended.
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了懒加载SQL构造中的bug，其中复杂的主连接在自引用连接的“指向自身的列”样式中多次引用相同的“本地”列时，在所有情况下都不会被替换。这里确定替换的逻辑已经重新设计为更加开放式。
- en: 'References: [#3300](https://www.sqlalchemy.org/trac/ticket/3300)'
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3300](https://www.sqlalchemy.org/trac/ticket/3300)
- en: '**[orm] [bug]**'
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “wildcard” loader options, in particular the one set up by the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option to cover all attributes not explicitly mentioned,
    now takes into account the superclasses of a given entity, if that entity is mapped
    with inheritance mapping, so that attribute names within the superclasses are
    also omitted from the load. Additionally, the polymorphic discriminator column
    is unconditionally included in the list, just in the same way that primary key
    columns are, so that even with load_only() set up, polymorphic loading of subtypes
    continues to function correctly.
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “通配符”加载器选项，特别是由[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项设置的选项，用于覆盖未明确提及的所有属性，现在考虑到给定实体的超类，如果该实体使用继承映射进行映射，则超类中的属性名称也将从加载中省略。此外，多态鉴别器列无条件地包含在列表中，就像主键列一样，因此即使设置了load_only()，子类型的多态加载仍将正常运行。
- en: 'References: [#3287](https://www.sqlalchemy.org/trac/ticket/3287)'
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3287](https://www.sqlalchemy.org/trac/ticket/3287)
- en: '**[orm] [bug] [pypy]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [pypy]**'
- en: Fixed bug where if an exception were thrown at the start of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") before it fetched results, particularly when row processors
    can’t be formed, the cursor would stay open with results pending and not actually
    be closed. This is typically only an issue on an interpreter like PyPy where the
    cursor isn’t immediately GC’ed, and can in some circumstances lead to transactions/
    locks being open longer than is desirable.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")开始获取结果之前抛出异常，特别是当无法形成行处理器时，游标将保持打开状态，结果仍在等待中，实际上并未关闭。这通常只在像PyPy这样的解释器上出现问题，其中游标不会立即被GC回收，并且在某些情况下可能导致事务/锁定打开时间过长。
- en: 'References: [#3285](https://www.sqlalchemy.org/trac/ticket/3285)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3285](https://www.sqlalchemy.org/trac/ticket/3285)
- en: '**[orm] [bug]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a leak which would occur in the unsupported and highly non-recommended
    use case of replacing a relationship on a fixed mapped class many times, referring
    to an arbitrarily growing number of target mappers. A warning is emitted when
    the old relationship is replaced, however if the mapping were already used for
    querying, the old relationship would still be referenced within some registries.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在不支持且极不推荐的情况下多次替换固定映射类上的关系时可能发生的泄漏，这些关系指向任意增长的目标映射器数量。在替换旧关系时会发出警告，但如果映射已用于查询，则旧关系仍将在某些注册表中被引用。
- en: 'References: [#3251](https://www.sqlalchemy.org/trac/ticket/3251)'
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3251](https://www.sqlalchemy.org/trac/ticket/3251)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-1687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug regarding expression mutations which could express itself as a “Could
    not locate column” error when using [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to select from multiple, anonymous column entities when
    querying against SQLite, as a side effect of the “join rewriting” feature used
    by the SQLite dialect.
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于表达式变异的错误，当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")从SQLite中选择多个匿名列实体进行查询时，可能会表现为“找不到列”错误，这是由SQLite方言使用的“联接重写”功能的副作用。
- en: 'References: [#3241](https://www.sqlalchemy.org/trac/ticket/3241)'
  id: totrans-1689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3241](https://www.sqlalchemy.org/trac/ticket/3241)
- en: '**[orm] [bug]**'
  id: totrans-1690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the ON clause for [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), and [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") to a single-inheritance subclass using `of_type()`
    would not render the “single table criteria” in the ON clause if the `from_joinpoint=True`
    flag were set.
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当使用 `of_type()` 将 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 和 [`Query.outerjoin()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin") 到单一继承子类时，如果设置了 `from_joinpoint=True` 标志，则 ON
    子句中的“单表条件”不会被渲染。
- en: 'References: [#3232](https://www.sqlalchemy.org/trac/ticket/3232)'
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3232](https://www.sqlalchemy.org/trac/ticket/3232)
- en: examples
  id: totrans-1693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [bug]**'
- en: Updated the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    example such that mapped columns are re-mapped to match column names as well as
    grouping of columns; in particular, this allows columns that are explicitly grouped
    in a same-column-named joined inheritance scenario to be mapped in the same way
    in the history mappings, avoiding warnings added in the 0.9 series regarding this
    pattern and allowing the same view of attribute keys.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 [带有历史表的版本控制](../orm/examples.html#examples-versioned-history) 示例，使映射列重新映射以匹配列名以及列的分组；特别是，这允许在同名列的联合继承场景中明确分组的列在历史映射中以相同的方式映射，避免了在
    0.9 系列中关于此模式添加的警告，并允许属性键的相同视图。
- en: '**[examples] [bug]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[例子] [bug]**'
- en: Fixed a bug in the examples/generic_associations/discriminator_on_association.py
    example, where the subclasses of AddressAssociation were not being mapped as “single
    table inheritance”, leading to problems when trying to use the mappings further.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 examples/generic_associations/discriminator_on_association.py 示例中的 bug，其中
    AddressAssociation 的子类未被映射为“单表继承”，导致在进一步使用映射时出现问题。
- en: engine
  id: totrans-1698
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [功能]**'
- en: Added new user-space accessors for viewing transaction isolation levels; [`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level"), [`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level").
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于查看事务隔离级别的新用户空间访问器；[`Connection.get_isolation_level()`](../core/connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level")，[`Connection.default_isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level")。
- en: '**[engine] [bug]**'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Fixed bug in [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and pool where the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method, or an invalidation due to a
    database disconnect, would fail if the `isolation_level` parameter had been used
    with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"); the “finalizer” that resets
    the isolation level would be called on the no longer opened connection.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和池中的 bug，当使用 [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 方法，或由于数据库断开连接而导致失效时，如果使用了 `isolation_level`
    参数与 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") 一起使用，则会失败；重置隔离级别的“finalizer”将在不再打开的连接上调用。
- en: 'References: [#3302](https://www.sqlalchemy.org/trac/ticket/3302)'
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3302](https://www.sqlalchemy.org/trac/ticket/3302)
- en: '**[engine] [bug]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: A warning is emitted if the `isolation_level` parameter is used with [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") when a [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") is in play; DBAPIs and/or SQLAlchemy dialects
    such as psycopg2, MySQLdb may implicitly rollback or commit the transaction, or
    not change the setting til next transaction, so this is never safe.
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在使用 [`Transaction`](../core/connections.html#sqlalchemy.engine.Transaction
    "sqlalchemy.engine.Transaction") 时使用了 `isolation_level` 参数与 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")，则会发出警告；DBAPIs 和/或 SQLAlchemy
    方言（如 psycopg2、MySQLdb）可能会隐式回滚或提交事务，或者在下一个事务中不更改设置，因此这永远不安全。
- en: 'References: [#3296](https://www.sqlalchemy.org/trac/ticket/3296)'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3296](https://www.sqlalchemy.org/trac/ticket/3296)
- en: sql
  id: totrans-1707
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Added the `native_enum` flag to the `__repr__()` output of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), which is mostly important when using it with Alembic
    autogenerate. Pull request courtesy Dimitris Theodorou.
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")的`__repr__()`输出中添加了`native_enum`标志，当与Alembic
    autogenerate一起使用时，这在大多数情况下是重要的。感谢Dimitris Theodorou的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-1710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") that implemented a type that was also a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") would fail with Python’s “Cannot create a consistent
    method resolution order (MRO)” error, when any kind of SQL comparison expression
    were used against an object using this type.
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用实现了也是[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")的类型的[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")会在针对使用此类型的对象使用任何类型的SQL比较表达式时导致Python的“无法创建一致的方法解析顺序（MRO）”错误的错误。
- en: 'References: [#3278](https://www.sqlalchemy.org/trac/ticket/3278)'
  id: totrans-1712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3278](https://www.sqlalchemy.org/trac/ticket/3278)
- en: '**[sql] [bug]**'
  id: totrans-1713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue where the columns from a SELECT embedded in an INSERT, either through
    the values clause or as a “from select”, would pollute the column types used in
    the result set produced by the RETURNING clause when columns from both statements
    shared the same name, leading to potential errors or mis-adaptation when retrieving
    the returning rows.
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在INSERT语句中嵌套的SELECT中的列，无论是通过values子句还是作为“from select”，都会污染由RETURNING子句生成的结果集中使用的列类型的问题，当两个语句的列共享相同名称时，可能导致检索返回行时出现潜在错误或适应不良。
- en: 'References: [#3248](https://www.sqlalchemy.org/trac/ticket/3248)'
  id: totrans-1715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3248](https://www.sqlalchemy.org/trac/ticket/3248)
- en: schema
  id: totrans-1716
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-1717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed bug in 0.9’s foreign key setup system, such that the logic used to link
    a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    to its parent could fail when the foreign key used “link_to_name=True” in conjunction
    with a target [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that would not receive its parent column until later, such as within a reflection
    + “useexisting” scenario, if the target column in fact had a key value different
    from its name, as would occur in reflection if column reflect events were used
    to alter the .key of reflected [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects so that the link_to_name becomes significant.
    Also repaired support for column type via FK transmission in a similar way when
    target columns had a different key and were referenced using link_to_name.
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中外键设置系统中的错误，即当外键与其父表使用“link_to_name=True”关联时，如果目标表直到后来才接收到其父列，例如在反射+“useexisting”场景中，如果目标列实际上具有与其名称不同的键值，那么用于将[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")链接到其父表的逻辑可能会失败，例如在反射中使用列反射事件来更改反射的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的.key，以便link_to_name变得重要。还修复了当目标列具有不同键并且使用link_to_name引用时，通过FK传输支持列类型的方式。
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)'
  id: totrans-1719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765), [#3298](https://www.sqlalchemy.org/trac/ticket/3298)
- en: postgresql
  id: totrans-1720
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for the `CONCURRENTLY` keyword with PostgreSQL indexes, established
    using `postgresql_concurrently`. Pull request courtesy Iuri de Silvio.
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对使用`CONCURRENTLY`关键字在PostgreSQL索引上建立的支持，使用`postgresql_concurrently`进行建立。感谢Iuri
    de Silvio的拉取请求。
- en: See also
  id: totrans-1723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes with CONCURRENTLY](../dialects/postgresql.html#postgresql-index-concurrently)'
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[并发索引](../dialects/postgresql.html#postgresql-index-concurrently)'
- en: '**[postgresql] [bug]**'
  id: totrans-1725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Repaired support for PostgreSQL UUID types in conjunction with the ARRAY type
    when using psycopg2\. The psycopg2 dialect now employs use of the psycopg2.extras.register_uuid()
    hook so that UUID values are always passed to/from the DBAPI as UUID() objects.
    The [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") flag is still honored, except with psycopg2 we need to
    convert returned UUID objects back into strings when this is disabled.
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 psycopg2 时与 ARRAY 类型一起支持 PostgreSQL UUID 类型的问题。现在，psycopg2 方言使用 psycopg2.extras.register_uuid()
    钩子，以便始终将 UUID 值作为 UUID() 对象传递给/从 DBAPI。[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") 标志仍然受到尊重，但是对于 psycopg2，当禁用此标志时，我们需要将返回的 UUID 对象转换回字符串。
- en: 'References: [#2940](https://www.sqlalchemy.org/trac/ticket/2940)'
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2940](https://www.sqlalchemy.org/trac/ticket/2940)
- en: '**[postgresql] [bug]**'
  id: totrans-1728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for the `postgresql.JSONB` datatype when using psycopg2 2.5.4
    or greater, which features native conversion of JSONB data so that SQLAlchemy’s
    converters must be disabled; additionally, the newly added psycopg2 extension
    `extras.register_default_jsonb` is used to establish a JSON deserializer passed
    to the dialect via the `json_deserializer` argument. Also repaired the PostgreSQL
    integration tests which weren’t actually round-tripping the JSONB type as opposed
    to the JSON type. Pull request courtesy Mateusz Susik.
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 2.5.4 或更高版本时，为 `postgresql.JSONB` 数据类型添加了支持，该支持具有原生的 JSONB 数据转换，因此必须禁用
    SQLAlchemy 的转换器；此外，新添加的 psycopg2 扩展 `extras.register_default_jsonb` 用于建立传递给方言的
    JSON 反序列化器，通过 `json_deserializer` 参数。还修复了 PostgreSQL 集成测试，这些测试实际上并没有循环传输 JSONB
    类型，而不是 JSON 类型。感谢 Mateusz Susik 提交的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-1730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Repaired the use of the “array_oid” flag when registering the HSTORE type with
    older psycopg2 versions < 2.4.3, which does not support this flag, as well as
    use of the native json serializer hook “register_default_json” with user-defined
    `json_deserializer` on psycopg2 versions < 2.5, which does not include native
    json.
  id: totrans-1731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用旧版本 psycopg2 < 2.4.3 时注册 HSTORE 类型时使用 “array_oid” 标志的问题，该标志不支持此标志，以及在使用旧版本
    psycopg2 < 2.5 时使用本机 json 序列化器钩子 “register_default_json” 与用户定义的 `json_deserializer`
    时的问题，该版本不包括本机 json。
- en: '**[postgresql] [bug]**'
  id: totrans-1732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL dialect would fail to render an expression in an
    [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    that did not correspond directly to a table-bound column; typically when a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct was one of the expressions within
    the index; or could misinterpret the list of expressions if one or more of them
    were such an expression.
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 中无法正确渲染表绑定列之外的表达式的 bug；通常情况下，当 `text()` 构造是索引中的表达式之一时；或者如果其中一个或多个表达式是这样的表达式，则可能会误解表达式列表。
- en: 'References: [#3174](https://www.sqlalchemy.org/trac/ticket/3174)'
  id: totrans-1734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3174](https://www.sqlalchemy.org/trac/ticket/3174)
- en: mysql
  id: totrans-1735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [change]**'
  id: totrans-1736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [change]**'
- en: The `gaerdbms` dialect is no longer necessary, and emits a deprecation warning.
    Google now recommends using the MySQLdb dialect directly.
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`gaerdbms` 方言不再必要，并发出弃用警告。Google 现在建议直接使用 MySQLdb 方言。'
- en: 'References: [#3275](https://www.sqlalchemy.org/trac/ticket/3275)'
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3275](https://www.sqlalchemy.org/trac/ticket/3275)
- en: '**[mysql] [bug]**'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added a version check to the MySQLdb dialect surrounding the check for ‘utf8_bin’
    collation, as this fails on MySQL server < 5.0.
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MySQLdb 方言周围添加了一个版本检查，用于检查 ‘utf8_bin’ 校对，因为这在 MySQL 服务器 < 5.0 上失败。
- en: 'References: [#3274](https://www.sqlalchemy.org/trac/ticket/3274)'
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3274](https://www.sqlalchemy.org/trac/ticket/3274)
- en: sqlite
  id: totrans-1742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [feature]**'
  id: totrans-1743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added support for partial indexes (e.g. with a WHERE clause) on SQLite. Pull
    request courtesy Kai Groner.
  id: totrans-1744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQLite 上添加了对部分索引（例如带有 WHERE 子句）的支持。感谢 Kai Groner 提交的拉取请求。
- en: See also
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partial Indexes](../dialects/sqlite.html#sqlite-partial-index)'
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[部分索引](../dialects/sqlite.html#sqlite-partial-index)'
- en: '**[sqlite] [feature]**'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [feature]**'
- en: Added a new SQLite backend for the SQLCipher backend. This backend provides
    for encrypted SQLite databases using the pysqlcipher Python driver, which is very
    similar to the pysqlite driver.
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 SQLite 后端用于 SQLCipher 后端。该后端使用 pysqlcipher Python 驱动程序提供加密的 SQLite 数据库，该驱动程序与
    pysqlite 驱动程序非常相似。
- en: See also
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`pysqlcipher`](../dialects/sqlite.html#module-sqlalchemy.dialects.sqlite.pysqlcipher
    "sqlalchemy.dialects.sqlite.pysqlcipher")'
- en: misc
  id: totrans-1751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext] [py3k]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug where the association proxy list class would not interpret slices
    correctly under Py3K. Pull request courtesy Gilles Dartiguelongue.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Py3K下关联代理列表类无法正确解释切片的bug。感谢Gilles Dartiguelongue提供的拉取请求。
- en: 0.9.8
  id: totrans-1754
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.8
- en: 'Released: October 13, 2014'
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年10月13日
- en: orm
  id: totrans-1756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [engine]**'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-1758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，通常会影响与[#3199](https://www.sqlalchemy.org/trac/ticket/3199)相同类型的事件，当`named=True`参数被使用时。一些事件将无法注册，其他事件将不正确地调用事件参数，通常是在事件被“包装”以适应其他方式时。已重新排列“命名”机制，以不干扰内部包装函数预期的参数签名。
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-1759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，影响了许多事件类，特别是ORM事件，但也包括引擎事件，其中对于通常的“去重”一个冗余调用[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")与相同参数的逻辑失败，对于那些被包装的监听函数会命中registry.py中的一个断言。现在，这个断言已经被集成到去重检查中，附加了一个检查去重的更简单的方式。
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-1762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-1763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个警告，当一个复杂的自引用主要连接包含函数时，同时指定了remote_side，该警告将被发出；警告将建议设置“远程方”。现在，只有在remote_side不存在时才发出。
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: orm declarative
  id: totrans-1766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")与声明`__abstract__`的子类时，修复了“‘NoneType’
    object has no attribute ‘concrete’”错误。
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-1769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: engine
  id: totrans-1770
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")或[`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options")传递给[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项不会传递给用于在“第一次连接”事件中初始化方言的特殊[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且当前可用的选项都不应该应用在这里。特别是，“autocommit”选项导致在这个初始连接中尝试自动提交，这将由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的非标准状态而导致AttributeError。
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-1773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-1774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-1775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定INSERT或UPDATE受影响列的字符串键现在在对“编译缓存”缓存键的贡献时进行排序。这些键以前没有确定性地排序，这意味着相同的语句可能根据等效键被多次缓存，这既在内存方面��在性能方面造成了损失。
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: sql
  id: totrans-1777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sql包中许多SQL元素无法成功`__repr__()`的错误，由于缺少`description`属性，导致内部AttributeError再次调用`__repr__()`时递归溢出。
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-1780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整表/索引反射，如果索引报告一个在表中找不到的列，将发出警告并跳过该列。这可能发生在一些特殊的系统列情况下，正如在Oracle中观察到的情况。
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-1783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-1784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE中的错误，其中当一个CTE引用语句中的另一个别名CTE时，`literal_binds`编译器参数不会始终正确传播。
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-1786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-1787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起的0.9.7版本回归问题，再加上一个命名错误的单元测试，导致所谓的“模式”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被序列化。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: postgresql
  id: totrans-1790
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 pg8000 驱动程序的“合理的多行计数”支持，这主要适用于在 ORM 中使用版本控制的情况。该功能是基于使用 pg8000 1.9.14 或更高版本的版本进行检测的。Pull
    request 由 Tony Locke 提供。
- en: '**[postgresql] [bug]**'
  id: totrans-1793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对于在 0.9.5 中首次修补的此问题进行了重新审视，显然 psycopg2 的`.closed`访问器不像我们假设的那样可靠，因此我们已经添加了对异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”的显式检查，以检测到断开连接的情况。我们将继续首先检查
    psycopg2 的 connection.closed。'
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL JSON 类型无法持久化或以其他方式呈现 SQL NULL 列值的错误，而不是 JSON 编码的`'null'`。为支持此案例，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-1798
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以指定值 [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致语句中的
    NULL 值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-1799
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新参数 [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")，当为 True 时表示 Python 的`None`值应该被持久化为 SQL NULL，而不是 JSON
    编码的`'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-1800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于除了 psycopg2 外的其他 DBAPI，即 pg8000，检索 NULL 作为 None 也已修复。
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-1802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-1803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，DBAPI 错误的异常包装系统可以容纳非标准的 DBAPI 异常，例如 psycopg2 的 TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，在
    TransactionRollbackError 的情况下，是`sqlalchemy.exc.OperationalError`。
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-1805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") 对象中的错误，其中与普通的 Python 列表进行比较将无法使用正确的数组构造函数。Pull
    request 由 Andrew 提供。
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-1807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-1808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对函数的支持 [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") 方法，例如，`func` 构造。之前，此方法的行为是未定义的。当前行为模仿了
    0.9.4 之前的行为，即将函数转换为具有给定别名的单列 FROM 子句，其中列本身被匿名命名。
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-1810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: mysql
  id: totrans-1811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-1813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始的Mysqlconnector，可能是由于Python 3合并的副作用，现在不再期望百分号（例如用作模运算符和其他操作符）加倍，即使使用“pyformat”绑定参数格式（Mysqlconnector未记录此更改）。方言现在在检测模运算符应该呈现为`%%`还是`%`时，检查py2k和mysqlconnector小于版本2.0。
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对于MySQLconnector版本2.0及以上，Unicode SQL已传递；对于Py2k和MySQL < 2.0，字符串被编码。
- en: sqlite
  id: totrans-1816
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-1818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用附加数据库文件从UNION中进行选择时，pysqlite驱动程序将列名在cursor.description中报告为‘dbname.tablename.colname’，而不是正常情况下的‘tablename.colname’（请注意，对于UNION，它应该只是‘colname’，但我们对此进行了处理）。此处的列翻译逻辑已调整为检索最右边的标记，而不是第二个标记，因此在两种情况下都有效。感谢Tony
    Roberts的解决方法。
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: mssql
  id: totrans-1820
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-1822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在pymssql方言中检测版本字符串时与Microsoft SQL Azure一起使用的问题，后者将“SQL Server”更改为“SQL Azure”。
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-1823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: oracle
  id: totrans-1824
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-1826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中长期存在的bug，即以数字开头的绑定参数名称不会被引用，因为Oracle不喜欢绑定参数名称中的数字。
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: misc
  id: totrans-1828
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-1829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些奇特的最终用户设置中观察到的不太可能的竞争条件，在这种情况下，尝试在声明中检查“重复类名”会遇到与另一个被移除的类相关的未完全清理的弱引用；此处的检查现在确保弱引用在进一步调用之前仍然引用一个对象。
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-1832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在集合替换事件期间，如果reorder_on_append标志设置为True，则项目顺序会被打乱的排序列表中的bug。修复确保排序列表仅影响与对象明确关联的列表。
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-1835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未实现`update()`字典方法的bug，因此无法捕捉更改。感谢Matt Chisholm的拉取请求。
- en: '**[bug] [ext]**'
  id: totrans-1837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在其中一个自定义 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 的子类在“强制转换”操作中不会显示，并且会返回一个普通的 [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")。感谢 Matt Chisholm 提供的拉取请求。
- en: '**[bug] [pool]**'
  id: totrans-1839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [池]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志记录中的一个 bug，即“连接检出”调试日志消息如果使用 `logging.setLevel()` 设置日志记录而不是使用 `echo_pool`
    标志则不会发出。已添加用于断言此日志记录的测试。这是在 0.9.0 中引入的一个回归。
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: orm
  id: totrans-1842
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [engine]**'
  id: totrans-1843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [引擎]**'
- en: Fixed bug that affected generally the same classes of event as that of [#3199](https://www.sqlalchemy.org/trac/ticket/3199),
    when the `named=True` parameter would be used. Some events would fail to register,
    and others would not invoke the event arguments correctly, generally in the case
    of when an event was “wrapped” for adaption in some other way. The “named” mechanics
    have been rearranged to not interfere with the argument signature expected by
    internal wrapper functions.
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响基本与 [#3199](https://www.sqlalchemy.org/trac/ticket/3199) 相同的事件类别的 bug，当使用
    `named=True` 参数时。一些事件将无法注册，其他事件将不会正确调用事件参数，通常在事件被“包装”以适应其他方式时。已重新排列“命名”机制，以不干扰内部包装函数期望的参数签名。
- en: 'References: [#3197](https://www.sqlalchemy.org/trac/ticket/3197)'
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3197](https://www.sqlalchemy.org/trac/ticket/3197)
- en: '**[orm] [bug]**'
  id: totrans-1846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug that affected many classes of event, particularly ORM events but also
    engine events, where the usual logic of “de duplicating” a redundant call to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") with the same arguments would fail, for those events
    where the listener function is wrapped. An assertion would be hit within registry.py.
    This assertion has now been integrated into the deduplication check, with the
    added bonus of a simpler means of checking deduplication across the board.
  id: totrans-1847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个影响多种事件类别的 bug，特别是 ORM 事件，但也包括引擎事件，即使用相同参数对 [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") 进行“去重”的常规逻辑失败的情况，对于那些监听器函数被包装的事件。在 registry.py 中会触发一个断言。现在，这个断言已经集成到去重检查中，并额外增加了一种更简单的检查去重的方法。
- en: 'References: [#3199](https://www.sqlalchemy.org/trac/ticket/3199)'
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3199](https://www.sqlalchemy.org/trac/ticket/3199)
- en: '**[orm] [bug]**'
  id: totrans-1849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed warning that would emit when a complex self-referential primaryjoin contained
    functions, while at the same time remote_side was specified; the warning would
    suggest setting “remote side”. It now only emits if remote_side isn’t present.
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个警告，当一个复杂的自引用 primaryjoin 包含函数时，并且同时指定了 remote_side 时，警告会建议设置“remote side”。现在只有在
    remote_side 不存在时才会发出。
- en: 'References: [#3194](https://www.sqlalchemy.org/trac/ticket/3194)'
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3194](https://www.sqlalchemy.org/trac/ticket/3194)
- en: orm declarative
  id: totrans-1852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明] [错误]**'
- en: Fixed “‘NoneType’ object has no attribute ‘concrete’” error when using [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") in conjunction with a subclass
    that declares `__abstract__`.
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与声明 `__abstract__` 的子类一起使用 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 时出现“‘NoneType’ 对象没有 ‘concrete’
    属性”的错误。
- en: 'References: [#3185](https://www.sqlalchemy.org/trac/ticket/3185)'
  id: totrans-1855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3185](https://www.sqlalchemy.org/trac/ticket/3185)
- en: engine
  id: totrans-1856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-1857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The execution options passed to an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") either via [`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine") or [`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options") are not passed to the special
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    used to initialize the dialect within the “first connect” event; dialects will
    usually perform their own queries in this phase, and none of the current available
    options should be applied here. In particular, the “autocommit” option was causing
    an attempt to autocommit within this initial connect which would fail with an
    AttributeError due to the non-standard state of the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过[`create_engine.execution_options`](../core/engines.html#sqlalchemy.create_engine.params.execution_options
    "sqlalchemy.create_engine")或[`Engine.update_execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.update_execution_options
    "sqlalchemy.engine.Engine.update_execution_options")传递给[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的执行选项不会传递给用于在“第一次连接”事件中初始化方言的特殊[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")；方言通常会在此阶段执行自己的查询，并且当前可用的选项都不应该应用于此处。特别是，“autocommit”选项导致在此初始连接中尝试自动提交，这将由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的非标准状态而导致AttributeError而失败。
- en: 'References: [#3200](https://www.sqlalchemy.org/trac/ticket/3200)'
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3200](https://www.sqlalchemy.org/trac/ticket/3200)
- en: '**[engine] [bug]**'
  id: totrans-1860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The string keys that are used to determine the columns impacted for an INSERT
    or UPDATE are now sorted when they contribute towards the “compiled cache” cache
    key. These keys were previously not deterministically ordered, meaning the same
    statement could be cached multiple times on equivalent keys, costing both in terms
    of memory as well as performance.
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定INSERT或UPDATE受影响列的字符串键现在在对“编译缓存”缓存键做出贡献时进行排序。这些键以前没有确定性地排序，这意味着相同的语句可能会根据等效键被多次缓存，这既会在内存方面也会在性能方面造成损失。
- en: 'References: [#3165](https://www.sqlalchemy.org/trac/ticket/3165)'
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3165](https://www.sqlalchemy.org/trac/ticket/3165)
- en: sql
  id: totrans-1863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where a fair number of SQL elements within the sql package would fail
    to `__repr__()` successfully, due to a missing `description` attribute that would
    then invoke a recursion overflow when an internal AttributeError would then re-invoke
    `__repr__()`.
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了sql包中许多SQL元素无法成功`__repr__()`的错误，这是由于缺少`description`属性导致的，然后在内部AttributeError时再次调用`__repr__()`会引发递归溢出。
- en: 'References: [#3195](https://www.sqlalchemy.org/trac/ticket/3195)'
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3195](https://www.sqlalchemy.org/trac/ticket/3195)
- en: '**[sql] [bug]**'
  id: totrans-1867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: An adjustment to table/index reflection such that if an index reports a column
    that isn’t found to be present in the table, a warning is emitted and the column
    is skipped. This can occur for some special system column situations as has been
    observed with Oracle.
  id: totrans-1868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整表/索引反射，如果索引报告一个在表中找不到的列，则会发出警告并跳过该列。这可能发生在一些特殊的系统列情况下，正如在Oracle中观察到的情况。
- en: 'References: [#3180](https://www.sqlalchemy.org/trac/ticket/3180)'
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3180](https://www.sqlalchemy.org/trac/ticket/3180)
- en: '**[sql] [bug]**'
  id: totrans-1870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in CTE where `literal_binds` compiler argument would not be always
    be correctly propagated when one CTE referred to another aliased CTE in a statement.
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了CTE中的错误，其中当一个CTE引用语另一个别名CTE时，`literal_binds`编译器参数不会始终正确传播。
- en: 'References: [#3154](https://www.sqlalchemy.org/trac/ticket/3154)'
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3154](https://www.sqlalchemy.org/trac/ticket/3154)
- en: '**[sql] [bug]**'
  id: totrans-1873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9.7 regression caused by [#3067](https://www.sqlalchemy.org/trac/ticket/3067)
    in conjunction with a mis-named unit test such that so-called “schema” types like
    [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    could no longer be pickled.
  id: totrans-1874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9.7中由[#3067](https://www.sqlalchemy.org/trac/ticket/3067)引起的回归，与一个命名错误的单元测试一起导致所谓的“模式”类型如[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")无法再被pickle。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067), [#3144](https://www.sqlalchemy.org/trac/ticket/3144)'
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)，[#3144](https://www.sqlalchemy.org/trac/ticket/3144)
- en: postgresql
  id: totrans-1876
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature] [pg8000]**'
  id: totrans-1877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature] [pg8000]**'
- en: Support is added for “sane multi row count” with the pg8000 driver, which applies
    mostly to when using versioning with the ORM. The feature is version-detected
    based on pg8000 1.9.14 or greater in use. Pull request courtesy Tony Locke.
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用pg8000驱动程序添加了“sane multi row count”支持，这主要适用于在ORM中使用版本控制时。该功能基于使用pg8000 1.9.14或更高版本进行版本检测。拉取请求由Tony
    Locke提供。
- en: '**[postgresql] [bug]**'
  id: totrans-1879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'A revisit to this issue first patched in 0.9.5, apparently psycopg2’s `.closed`
    accessor is not as reliable as we assumed, so we have added an explicit check
    for the exception messages “SSL SYSCALL error: Bad file descriptor” and “SSL SYSCALL
    error: EOF detected” when detecting an is-disconnect scenario. We will continue
    to consult psycopg2’s connection.closed as a first check.'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '重新访问了在0.9.5中首次修补的问题，显然psycopg2的`.closed`访问器并不像我们所假设的那样可靠，因此我们已经添加了一个显式检查异常消息“SSL
    SYSCALL error: Bad file descriptor”和“SSL SYSCALL error: EOF detected”以检测断开连接的情况。我们将继续将psycopg2的connection.closed作为第一次检查。'
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-1881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [bug]**'
  id: totrans-1882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: 'Fixed bug where PostgreSQL JSON type was not able to persist or otherwise render
    a SQL NULL column value, rather than a JSON-encoded `''null''`. To support this
    case, changes are as follows:'
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL JSON类型无法持久化或以其他方式呈现SQL NULL列值而不是JSON编码的`'null'`的错误。为支持此情况，更改如下：
- en: The value [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") can now be specified, which will always result
    in a NULL value resulting in the statement.
  id: totrans-1884
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在可以指定值[`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null "sqlalchemy.sql.expression.null")，这将始终导致语句中的NULL值。
- en: A new parameter [`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON") is added, which when True indicates that the Python `None`
    value should be persisted as SQL NULL, rather than JSON-encoded `'null'`.
  id: totrans-1885
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新参数[`JSON.none_as_null`](../core/type_basics.html#sqlalchemy.types.JSON.params.none_as_null
    "sqlalchemy.types.JSON")被添加，当为True时表示Python的`None`值应该被持久化为SQL NULL，而不是JSON编码的`'null'`。
- en: Retrieval of NULL as None is also repaired for DBAPIs other than psycopg2, namely
    pg8000.
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于除了psycopg2之外的其他DBAPI，如pg8000，将NULL检索为None也已修复。
- en: 'References: [#3159](https://www.sqlalchemy.org/trac/ticket/3159)'
  id: totrans-1887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3159](https://www.sqlalchemy.org/trac/ticket/3159)
- en: '**[postgresql] [bug]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The exception wrapping system for DBAPI errors can now accommodate non-standard
    DBAPI exceptions, such as the psycopg2 TransactionRollbackError. These exceptions
    will now be raised using the closest available subclass in `sqlalchemy.exc`, in
    the case of TransactionRollbackError, `sqlalchemy.exc.OperationalError`.
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DBAPI错误的异常包装系统现在可以容纳非标准的DBAPI异常，例如psycopg2的TransactionRollbackError。这些异常现在将使用`sqlalchemy.exc`中最接近的可用子类引发，在TransactionRollbackError的情况下，是`sqlalchemy.exc.OperationalError`。
- en: 'References: [#3075](https://www.sqlalchemy.org/trac/ticket/3075)'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3075](https://www.sqlalchemy.org/trac/ticket/3075)
- en: '**[postgresql] [bug]**'
  id: totrans-1891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in [`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array") object where comparison to a plain Python
    list would fail to use the correct array constructor. Pull request courtesy Andrew.
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`array`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.array
    "sqlalchemy.dialects.postgresql.array")对象中的��误，其中与普通Python列表的比较将无法使用正确的数组构造函数。拉取请求由Andrew提供。
- en: 'References: [#3141](https://www.sqlalchemy.org/trac/ticket/3141)'
  id: totrans-1893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3141](https://www.sqlalchemy.org/trac/ticket/3141)
- en: '**[postgresql] [bug]**'
  id: totrans-1894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a supported [`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias") method to functions, e.g. the
    `func` construct. Previously, behavior for this method was undefined. The current
    behavior mimics that of pre-0.9.4, which is that the function is turned into a
    single-column FROM clause with the given alias name, where the column itself is
    anonymously named.
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为函数添加了支持的[`FunctionElement.alias()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.alias
    "sqlalchemy.sql.functions.FunctionElement.alias")方法，例如`func`构造。先前，此方法的行为未定义。当前行为模仿了0.9.4之前的行为，即将函数转换为具有给定别名的单列FROM子句，其中列本身是匿名命名的。
- en: 'References: [#3137](https://www.sqlalchemy.org/trac/ticket/3137)'
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3137](https://www.sqlalchemy.org/trac/ticket/3137)
- en: mysql
  id: totrans-1897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Mysqlconnector as of version 2.0, probably as a side effect of the python 3
    merge, now does not expect percent signs (e.g. as used as the modulus operator
    and others) to be doubled, even when using the “pyformat” bound parameter format
    (this change is not documented by Mysqlconnector). The dialect now checks for
    py2k and for mysqlconnector less than version 2.0 when detecting if the modulus
    operator should be rendered as `%%` or `%`.
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mysqlconnector 从版本 2.0 开始，可能是由于 Python 3 合并的副作用，现在不再期望百分号（例如用作模运算符和其他操作符）被加倍，即使使用“pyformat”绑定参数格式（这一变化未在
    Mysqlconnector 中记录）。方言现在在检测模运算符应该呈现为`%%`还是`%`时检查 py2k 和 mysqlconnector 小于版本 2.0。
- en: '**[mysql] [bug] [mysqlconnector]**'
  id: totrans-1900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mysqlconnector]**'
- en: Unicode SQL is now passed for MySQLconnector version 2.0 and above; for Py2k
    and MySQL < 2.0, strings are encoded.
  id: totrans-1901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对于 MySQLconnector 版本 2.0 及以上版本传递 Unicode SQL；对于 Py2k 和 MySQL < 2.0，字符串被编码。
- en: sqlite
  id: totrans-1902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: When selecting from a UNION using an attached database file, the pysqlite driver
    reports column names in cursor.description as ‘dbname.tablename.colname’, instead
    of ‘tablename.colname’ as it normally does for a UNION (note that it’s supposed
    to just be ‘colname’ for both, but we work around it). The column translation
    logic here has been adjusted to retrieve the rightmost token, rather than the
    second token, so it works in both cases. Workaround courtesy Tony Roberts.
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从使用附加数据库文件的 UNION 中进行选择时，pysqlite 驱动程序将列名报告为‘dbname.tablename.colname’，而不是正常情况下对于
    UNION 的‘tablename.colname’（请注意，对于两者都应该只是‘colname’，但我们对此进行了处理）。这里的列翻译逻辑已经调整为检索最右边的标记，而不是第二个标记，因此在两种情况下都有效。感谢
    Tony Roberts 的解决方法。
- en: 'References: [#3211](https://www.sqlalchemy.org/trac/ticket/3211)'
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3211](https://www.sqlalchemy.org/trac/ticket/3211)
- en: mssql
  id: totrans-1906
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1907
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed the version string detection in the pymssql dialect to work with Microsoft
    SQL Azure, which changes the word “SQL Server” to “SQL Azure”.
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 方言中版本字符串检测的 bug，以便与 Microsoft SQL Azure 一起使用，该数据库将“SQL Server”更改为“SQL
    Azure”。
- en: 'References: [#3151](https://www.sqlalchemy.org/trac/ticket/3151)'
  id: totrans-1909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3151](https://www.sqlalchemy.org/trac/ticket/3151)
- en: oracle
  id: totrans-1910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed long-standing bug in Oracle dialect where bound parameter names that started
    with numbers would not be quoted, as Oracle doesn’t like numerics in bound parameter
    names.
  id: totrans-1912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中长期存在的 bug，即以数字开头的绑定参数名称不会被引用，因为 Oracle 不喜欢绑定参数名称中的数字。
- en: 'References: [#2138](https://www.sqlalchemy.org/trac/ticket/2138)'
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2138](https://www.sqlalchemy.org/trac/ticket/2138)
- en: misc
  id: totrans-1914
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-1915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed an unlikely race condition observed in some exotic end-user setups, where
    the attempt to check for “duplicate class name” in declarative would hit upon
    a not-totally-cleaned-up weak reference related to some other class being removed;
    the check here now ensures the weakref still references an object before calling
    upon it further.
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在一些奇特的最终用户设置中观察到的不太可能的竞争条件 bug，在这种情况下，在声明中检查“重复类名”时会遇到一个与其他被移除的类相关的未完全清理的弱引用；这里的检查现在确保在进一步调用之前弱引用仍然引用一个对象。
- en: 'References: [#3208](https://www.sqlalchemy.org/trac/ticket/3208)'
  id: totrans-1917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3208](https://www.sqlalchemy.org/trac/ticket/3208)
- en: '**[bug] [ext]**'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in ordering list where the order of items would be thrown off during
    a collection replace event, if the reorder_on_append flag were set to True. The
    fix ensures that the ordering list only impacts the list that is explicitly associated
    with the object.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在排序列表中的 bug，如果将 reorder_on_append 标志设置为 True，则在集合替换事件期间项目的顺序会被打乱。修复确保排序列表仅影响与对象明确关联的列表。
- en: 'References: [#3191](https://www.sqlalchemy.org/trac/ticket/3191)'
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3191](https://www.sqlalchemy.org/trac/ticket/3191)
- en: '**[bug] [ext]**'
  id: totrans-1921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") failed to implement the `update()` dictionary
    method, thus not catching changes. Pull request courtesy Matt Chisholm.
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")在实现`update()`字典方法时失败的 bug，因此无法捕捉更改。感谢 Matt
    Chisholm 的拉取请求。
- en: '**[bug] [ext]**'
  id: totrans-1923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where a custom subclass of [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") would not show up in a “coerce” operation,
    and would instead return a plain [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict"). Pull request courtesy Matt Chisholm.
  id: totrans-1924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自定义[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的子类不会在“强制转换”操作中显示，并且会返回一个普通的[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")的错误。感谢Matt Chisholm提供的拉取请求。
- en: '**[bug] [pool]**'
  id: totrans-1925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [连接池]**'
- en: Fixed bug in connection pool logging where the “connection checked out” debug
    logging message would not emit if the logging were set up using `logging.setLevel()`,
    rather than using the `echo_pool` flag. Tests to assert this logging have been
    added. This is a regression that was introduced in 0.9.0.
  id: totrans-1926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池日志中的错误，即“连接已检出”调试日志消息如果使用`logging.setLevel()`设置日志记录，而不是使用`echo_pool`标志，则不会发出。已添加了用于断言此日志记录的测试。这是在0.9.0中引入的退化。
- en: 'References: [#3168](https://www.sqlalchemy.org/trac/ticket/3168)'
  id: totrans-1927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3168](https://www.sqlalchemy.org/trac/ticket/3168)
- en: 0.9.7
  id: totrans-1928
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.7
- en: 'Released: July 22, 2014'
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年7月22日
- en: orm
  id: totrans-1930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-1931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [贪婪加载]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-1932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由0.9.4中释放的[#2976](https://www.sqlalchemy.org/trac/ticket/2976)引起的退化修复，在一系列加入的贪婪加载中，“外部连接”传播会错误地将兄弟加入路径上的“内部连接”也转换为外部连接，当只有后代路径应该接收“外部连接”传播时；另外，修复了“嵌套”加入传播在两个兄弟加入路径之间不适当地进行的相关问题。
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-1934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-1935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于0.9.0中的[#2736](https://www.sqlalchemy.org/trac/ticket/2736)引起的退化修复，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法不再正确设置[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的“from entity”，因此后续的[`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by")或[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")调用将无法在按字符串名称搜索属性时检查适当的“from”实体而失败。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)，[#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-1937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    a warning is now emitted. In 1.0 this will be promoted to a full exception.
  id: totrans-1938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询.update()/delete()的“评估器”在多表更新中不起作用，并且需要设置为synchronize_session=False或synchronize_session=’fetch’；现在会发出警告。在1.0中，这将升级为完整的异常。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [bug]**'
  id: totrans-1940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-1941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在保存点块内持久化、删除或主键更改的项目在外部事务回滚后无法参与恢复到其先前状态（不在会话中，在会话中，先前的PK）的错误。
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-1943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")一起使用子查询预加载时的 bug，对子查询加载中实体和列的定位已经针对这种类型的实体和其他实体更加准确。
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-1945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-1946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving dynamic attributes, that was again a regression of [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    from version 0.9.5\. A self-referential relationship with lazy=’dynamic’ would
    raise a TypeError within a flush operation.
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了动态属性中的 bug，这又是版本 0.9.5 的 [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    的一个回归。具有 lazy=’dynamic’ 的自引用关系会在刷新操作中引发 TypeError。
- en: 'References: [#3099](https://www.sqlalchemy.org/trac/ticket/3099)'
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3099](https://www.sqlalchemy.org/trac/ticket/3099)
- en: engine
  id: totrans-1949
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件`ConnectionEvents.handle_error()`，这是对`ConnectionEvents.dbapi_error()`的更全面和全面的替代。
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: sql
  id: totrans-1953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")和其他[`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")子类中的 bug，在这些类型直接关联到[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")时，当在[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")上发出事件（如创建事件）时会导致 hang。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到了：0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义操作符加法[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")系统中的 bug，当与 variant 一起使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")时，在使用比较运算符时会导致 MRO 错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到了：0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-1962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定特性中的 bug，在使用包含 `constraint_name` 的检查约定时，将强制所有[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")类型也需要名称，因为这些隐式创建约束，即使最终目标后端不需要生成约束，比如 PostgreSQL。这些特定约束的命名约定机制已经重新组织，使得命名确定在
    DDL 编译时进行，而不是在约束/表构造时进行。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-1965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了公共表达式中的错误，当 CTE 嵌套在某些方式中时，位置绑定参数可能以错误的最终顺序表示。
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-1968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造中的错误，该构造在字面 SQL 表达式的第一个给定值之后未能检查后续值条目。
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-1971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Python 版本 < 2.6.5 中为 dialect_kwargs 迭代添加了一个“str()”步骤，解决了“无 unicode 关键字参数”错误，因为这些参数在某些反射过程中作为关键字参数传递。
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-1974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法现在将接受一个类型类作为参数，该参数在内部转换为一个实例，使用了其他构造（如
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")）长期建立的相同约定。'
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-1976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: postgresql
  id: totrans-1977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-1979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 操作符中添加了 kw 参数 `postgresql_regconfig`，允许指定“reg
    config”参数以发出到 `to_tsquery()` 函数。感谢 Jonathan Vanasco 的拉取请求。
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-1981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 添加了对 PostgreSQL JSONB 的支持。感谢 Damian Dimmich
    的拉取请求。
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.9.5 版本中由新的 pg8000 隔离级别功能引入的错误，其中引擎级别的隔离级别参数在连接时会引发错误。
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: mysql
  id: totrans-1986
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 错误 2014 “commands out of sync” 似乎在现代 MySQL-Python 版本中被提升为 ProgrammingError，而不是
    OperationalError；现在在 OperationalError 和 ProgrammingError 中检查了所有被测试为“is disconnect”的
    MySQL 错误代码。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: sqlite
  id: totrans-1991
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [错误]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 SQLite 连接重写问题，其中作为标量子查询嵌入的子查询（例如在 IN 中）会从包含查询中接收不适当的替换，如果相同的表在子查询中存在，并且在包含查询中也存在，例如在连接继承场景中。 '
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: mssql
  id: totrans-1995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 2008 启用了“多值插入”。感谢 Albert Cervin 的贡献。还扩展了“IDENTITY INSERT”模式的检查，以包括当标识键出现在语句的
    VALUEs 子句中时。
- en: '**[mssql] [bug]**'
  id: totrans-1998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将语句编码添加到“SET IDENTITY_INSERT”语句中，当在 IDENTITY 列中插入显式 INSERT 时，以支持在不支持 unicode
    语句的驱动程序（如 pyodbc + unix + py2k）上使用非 ASCII 表标识符。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server pyodbc 方言中，修复了 `description_encoding` 方言参数的实现，当未显式设置时，会导致无法正确解析包含其他编码名称的结果集的
    cursor.description。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-2005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression from 0.9.5 caused by [#3025](https://www.sqlalchemy.org/trac/ticket/3025)
    where the query used to determine “default schema” is invalid in SQL Server 2000.
    For SQL Server 2000 we go back to defaulting to the “schema name” parameter of
    the dialect, which is configurable but defaults to ‘dbo’.
  id: totrans-2006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了从 0.9.5 中由 [#3025](https://www.sqlalchemy.org/trac/ticket/3025) 引起的回归，其中用于确定“默认模式”的查询在
    SQL Server 2000 中无效。对于 SQL Server 2000，我们回到了默认为 ‘dbo’ 的“模式名称”参数。可配置但默认为 ‘dbo’。 '
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-2008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [tests]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [tests]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 oracle 方言测试套件中的 bug，在一个测试中，假定 ‘username’ 在数据库 URL 中，即使这可能并非事实。
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: tests
  id: totrans-2012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“python setup.py test”未适当调用 distutils，导致在测试套件结束时会发出错误。
- en: misc
  id: totrans-2015
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [declarative]**'
  id: totrans-2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-2017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明性 `__abstract__` 标志未被区分为实际值为 `False` 时的 bug。`__abstract__` 标志需要在被测试的级别实际评估为
    True 值。
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-2018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: orm
  id: totrans-2019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [eagerloading]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [eagerloading]**'
- en: Fixed a regression caused by [#2976](https://www.sqlalchemy.org/trac/ticket/2976)
    released in 0.9.4 where the “outer join” propagation along a chain of joined eager
    loads would incorrectly convert an “inner join” along a sibling join path into
    an outer join as well, when only descendant paths should be receiving the “outer
    join” propagation; additionally, fixed related issue where “nested” join propagation
    would take place inappropriately between two sibling join paths.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9.4 中由 [#2976](https://www.sqlalchemy.org/trac/ticket/2976) 引起的回归，其中沿着一系列连接的“外连接”传播会错误地将一个“内连接”转换为外连接，当只有后代路径应该接收“外连接”传播时；此外，修复了相关问题，即“嵌套”连接传播会不适当地发生在两个兄弟连接路径之间。
- en: 'References: [#3131](https://www.sqlalchemy.org/trac/ticket/3131)'
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3131](https://www.sqlalchemy.org/trac/ticket/3131)
- en: '**[orm] [bug]**'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression from 0.9.0 due to [#2736](https://www.sqlalchemy.org/trac/ticket/2736)
    where the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method no longer set up the “from entity”
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object correctly, so that subsequent [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") or [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls would fail to check the appropriate “from”
    entity when searching for attributes by string name.
  id: totrans-2024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#2736](https://www.sqlalchemy.org/trac/ticket/2736) 导致的从 0.9.0 开始的回归修复了一个
    bug，[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法不再正确设置 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象的“from 实体”，因此，后续的 [`Query.filter_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.filter_by
    "sqlalchemy.orm.Query.filter_by") 或 [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 调用将无法在按字符串名称搜索属性时检查适当的“from”实体。
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736), [#3083](https://www.sqlalchemy.org/trac/ticket/3083)'
  id: totrans-2025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)，[#3083](https://www.sqlalchemy.org/trac/ticket/3083)
- en: '**[orm] [bug]**'
  id: totrans-2026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “evaluator” for query.update()/delete() won’t work with multi-table updates,
    and needs to be set to synchronize_session=False or synchronize_session=’fetch’;
    a warning is now emitted. In 1.0 this will be promoted to a full exception.
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于 query.update()/delete() 的“evaluator”在多表更新中不起作用，需要设置为 synchronize_session=False
    或 synchronize_session='fetch'；现在会发出警告。在 1.0 版本中，这将提升为完整的异常。
- en: 'References: [#3117](https://www.sqlalchemy.org/trac/ticket/3117)'
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3117](https://www.sqlalchemy.org/trac/ticket/3117)
- en: '**[orm] [bug]**'
  id: totrans-2029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where items that were persisted, deleted, or had a primary key change
    within a savepoint block would not participate in being restored to their former
    state (not in session, in session, previous PK) after the outer transaction were
    rolled back.
  id: totrans-2030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 savepoint 块中持久化、删除或主键更改的项目在外部事务回滚后无法参与恢复到其先前状态（不在会话中，在会话中，先前的 PK）的 bug。
- en: 'References: [#3108](https://www.sqlalchemy.org/trac/ticket/3108)'
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3108](https://www.sqlalchemy.org/trac/ticket/3108)
- en: '**[orm] [bug]**'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading in conjunction with [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic"), the targeting of entities and columns in the
    subquery load has been made more accurate with respect to this type of entity
    and others.
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在与 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 结合使用的子查询提前加载中修复了 bug，加载子查询中实体和列的目标对于此类实体和其他实体更加准确。
- en: 'References: [#3106](https://www.sqlalchemy.org/trac/ticket/3106)'
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3106](https://www.sqlalchemy.org/trac/ticket/3106)
- en: '**[orm] [bug]**'
  id: totrans-2035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving dynamic attributes, that was again a regression of [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    from version 0.9.5\. A self-referential relationship with lazy=’dynamic’ would
    raise a TypeError within a flush operation.
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及动态属性的 bug，这是从版本 0.9.5 重新出现的 [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    的一个回归。带有 lazy='dynamic' 的自引用关系在刷新操作中会引发 TypeError。
- en: 'References: [#3099](https://www.sqlalchemy.org/trac/ticket/3099)'
  id: totrans-2037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3099](https://www.sqlalchemy.org/trac/ticket/3099)
- en: engine
  id: totrans-2038
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2039
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added new event `ConnectionEvents.handle_error()`, a more fully featured and
    comprehensive replacement for `ConnectionEvents.dbapi_error()`.
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件 `ConnectionEvents.handle_error()`，这是 `ConnectionEvents.dbapi_error()`
    的更全面和全面的替代品。
- en: 'References: [#3076](https://www.sqlalchemy.org/trac/ticket/3076)'
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3076](https://www.sqlalchemy.org/trac/ticket/3076)
- en: sql
  id: totrans-2042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and other [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") subclasses where direct association of the type
    with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    would lead to a hang when events (like create events) were emitted on the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    和其他 [`SchemaType`](../core/type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    子类中的 bug，在直接将类型与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 关联时，当在 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") 上发出事件（如创建事件）时，会导致挂起。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯到**：0.8.7
- en: 'References: [#3124](https://www.sqlalchemy.org/trac/ticket/3124)'
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3124](https://www.sqlalchemy.org/trac/ticket/3124)
- en: '**[sql] [bug]**'
  id: totrans-2047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a bug within the custom operator plus [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") system, whereby using a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") in conjunction with variant would fail with
    an MRO error when a comparison operator was used.
  id: totrans-2048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在自定义运算符加法 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 系统中的一个错误，当与变体一起使用时，使用 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 会在使用比较运算符时出现 MRO 错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯到**：0.8.7
- en: 'References: [#3102](https://www.sqlalchemy.org/trac/ticket/3102)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3102](https://www.sqlalchemy.org/trac/ticket/3102)
- en: '**[sql] [bug]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fix bug in naming convention feature where using a check constraint convention
    that includes `constraint_name` would then force all [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") types to require names as well, as these implicitly create
    a constraint, even if the ultimate target backend were one that does not require
    generation of the constraint such as PostgreSQL. The mechanics of naming conventions
    for these particular constraints has been reorganized such that the naming determination
    is done at DDL compile time, rather than at constraint/table construction time.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了命名约定功能中的错误，在使用包含 `constraint_name` 的检查约定时，会强制所有 [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 和 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 类型也需要名称，因为这些隐式地创建了约束，即使最终的目标后端不需要生成约束，比如 PostgreSQL。这些特定约束的命名约定机制已经重新组织，以便在
    DDL 编译时进行命名确定，而不是在约束/表构造时。
- en: 'References: [#3067](https://www.sqlalchemy.org/trac/ticket/3067)'
  id: totrans-2053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3067](https://www.sqlalchemy.org/trac/ticket/3067)
- en: '**[sql] [bug]**'
  id: totrans-2054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in common table expressions whereby positional bound parameters could
    be expressed in the wrong final order when CTEs were nested in certain ways.
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式中的错误，在某些方式下嵌套 CTEs 时，位置绑定参数可能以错误的最终顺序表示。
- en: 'References: [#3090](https://www.sqlalchemy.org/trac/ticket/3090)'
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3090](https://www.sqlalchemy.org/trac/ticket/3090)
- en: '**[sql] [bug]**'
  id: totrans-2057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where multi-valued [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct would fail to check subsequent values
    entries beyond the first one given for literal SQL expressions.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多值 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造中的错误，使其在给定 SQL 表达式的第一个值之外检查后续值条目时不会失败。
- en: 'References: [#3069](https://www.sqlalchemy.org/trac/ticket/3069)'
  id: totrans-2059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3069](https://www.sqlalchemy.org/trac/ticket/3069)
- en: '**[sql] [bug]**'
  id: totrans-2060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added a “str()” step to the dialect_kwargs iteration for Python version < 2.6.5,
    working around the “no unicode keyword arg” bug as these args are passed along
    as keyword args within some reflection processes.
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 Python 版本 < 2.6.5 的 dialect_kwargs 迭代添加了一个“str()”步骤，解决了“无 Unicode 关键字参数”错误，因为这些参数会在某些反射过程中作为关键字参数传递。
- en: 'References: [#3123](https://www.sqlalchemy.org/trac/ticket/3123)'
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3123](https://www.sqlalchemy.org/trac/ticket/3123)
- en: '**[sql] [bug]**'
  id: totrans-2063
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method will now accept a type class
    as an argument which is internally converted to an instance, using the same convention
    long established by other constructs such as [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-2064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法现在将接受一个类型类作为参数，该参数在内部转换为一个实例，使用了其他构造（例如
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")）长期建立的相同约定。'
- en: 'References: [#3122](https://www.sqlalchemy.org/trac/ticket/3122)'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3122](https://www.sqlalchemy.org/trac/ticket/3122)
- en: postgresql
  id: totrans-2066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added kw argument `postgresql_regconfig` to the [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") operator, allows the “reg config”
    argument to be specified to the `to_tsquery()` function emitted. Pull request
    courtesy Jonathan Vanasco.
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 kw 参数 `postgresql_regconfig` 添加到 [`ColumnOperators.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 操作符，允许指定“reg config”参数以发出到
    `to_tsquery()` 函数。拉取请求由 Jonathan Vanasco 提供。
- en: 'References: [#3078](https://www.sqlalchemy.org/trac/ticket/3078)'
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3078](https://www.sqlalchemy.org/trac/ticket/3078)
- en: '**[postgresql] [feature]**'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL JSONB via [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB"). Pull request courtesy Damian Dimmich.
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`JSONB`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB
    "sqlalchemy.dialects.postgresql.JSONB") 添加了对 PostgreSQL JSONB 的支持。拉取请求由 Damian
    Dimmich 提供。
- en: '**[postgresql] [bug] [pg8000]**'
  id: totrans-2072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [pg8000]**'
- en: Fixed bug introduced in 0.9.5 by new pg8000 isolation level feature where engine-level
    isolation level parameter would raise an error on connect.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9.5 中由新的 pg8000 隔离级别功能引入的错误，其中引擎级别的隔离级别参数在连接时会引发错误。
- en: 'References: [#3134](https://www.sqlalchemy.org/trac/ticket/3134)'
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3134](https://www.sqlalchemy.org/trac/ticket/3134)
- en: mysql
  id: totrans-2075
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL error 2014 “commands out of sync” appears to be raised as a ProgrammingError,
    not OperationalError, in modern MySQL-Python versions; all MySQL error codes that
    are tested for “is disconnect” are now checked within OperationalError and ProgrammingError
    regardless.
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 错误 2014 “commands out of sync” 似乎在现代 MySQL-Python 版本中被提升为 ProgrammingError，而不是
    OperationalError；现在在 OperationalError 和 ProgrammingError 中都检查了所有被测试为“is disconnect”的
    MySQL 错误代码。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3101](https://www.sqlalchemy.org/trac/ticket/3101)'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3101](https://www.sqlalchemy.org/trac/ticket/3101)
- en: sqlite
  id: totrans-2080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed a SQLite join rewriting issue where a subquery that is embedded as a scalar
    subquery such as within an IN would receive inappropriate substitutions from the
    enclosing query, if the same table were present inside the subquery as were in
    the enclosing query such as in a joined inheritance scenario.
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 连接重写问题，其中嵌入作为标量子查询的子查询（例如在 IN 中）会从包含查询中接收不适当的替换，如果相同的表在子查询中存在，并且在包含查询中也存在，例如在连接继承场景中。
- en: 'References: [#3130](https://www.sqlalchemy.org/trac/ticket/3130)'
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3130](https://www.sqlalchemy.org/trac/ticket/3130)
- en: mssql
  id: totrans-2084
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Enabled “multivalues insert” for SQL Server 2008\. Pull request courtesy Albert
    Cervin. Also expanded the checks for “IDENTITY INSERT” mode to include when the
    identity key is present in the VALUEs clause of the statement.
  id: totrans-2086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 2008 启用了“multivalues insert”。拉取请求由 Albert Cervin 提供。还扩展了“IDENTITY
    INSERT”模式的检查，以包括当标识键出现在语句的 VALUEs 子句中时。
- en: '**[mssql] [bug]**'
  id: totrans-2087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Added statement encoding to the “SET IDENTITY_INSERT” statements which operate
    when an explicit INSERT is being interjected into an IDENTITY column, to support
    non-ascii table identifiers on drivers such as pyodbc + unix + py2k that don’t
    support unicode statements.
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将语句编码添加到“SET IDENTITY_INSERT”语句中，当在 IDENTITY 列中插入显式 INSERT 时进行操作，以支持在不支持 unicode
    语句的驱动程序（如 pyodbc + unix + py2k）上的非 ascii 表标识符。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: '**[mssql] [bug]**'
  id: totrans-2090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: In the SQL Server pyodbc dialect, repaired the implementation for the `description_encoding`
    dialect parameter, which when not explicitly set was preventing cursor.description
    from being parsed correctly in the case of result sets that contained names in
    alternate encodings. This parameter shouldn’t be needed going forward.
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server pyodbc 方言中，修复了 `description_encoding` 方言参数的实现，当未明确设置时，会阻止正确解析包含不同编码名称的结果集的
    cursor.description。未来不应该需要此参数。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3091](https://www.sqlalchemy.org/trac/ticket/3091)'
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3091](https://www.sqlalchemy.org/trac/ticket/3091)
- en: '**[mssql] [bug]**'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed a regression from 0.9.5 caused by [#3025](https://www.sqlalchemy.org/trac/ticket/3025)
    where the query used to determine “default schema” is invalid in SQL Server 2000.
    For SQL Server 2000 we go back to defaulting to the “schema name” parameter of
    the dialect, which is configurable but defaults to ‘dbo’.
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[#3025](https://www.sqlalchemy.org/trac/ticket/3025)引起的0.9.5中的回归错误已修复，用于确定“默认模式”的查询在SQL
    Server 2000中无效。对于SQL Server 2000，我们回到默认为‘dbo’的dialect的“模式名称”参数。
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: oracle
  id: totrans-2097
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug] [tests]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug] [tests]**'
- en: Fixed bug in oracle dialect test suite where in one test, ‘username’ was assumed
    to be in the database URL, even though this might not be the case.
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了oracle方言测试套件中的一个bug，在一个测试中，假定‘username’在数据库URL中，尽管这可能并非事实。
- en: 'References: [#3128](https://www.sqlalchemy.org/trac/ticket/3128)'
  id: totrans-2100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3128](https://www.sqlalchemy.org/trac/ticket/3128)
- en: tests
  id: totrans-2101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed bug where “python setup.py test” wasn’t calling into distutils appropriately,
    and errors would be emitted at the end of the test suite.
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“python setup.py test”未适当调用distutils的bug，测试套件结束时会发出错误。
- en: misc
  id: totrans-2104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Fixed bug when the declarative `__abstract__` flag was not being distinguished
    for when it was actually the value `False`. The `__abstract__` flag needs to actually
    evaluate to a True value at the level being tested.
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当声明式`__abstract__`标志未被区分为实际值`False`时的bug。`__abstract__`标志需要在被测试的级别上实际评估为True值。
- en: 'References: [#3097](https://www.sqlalchemy.org/trac/ticket/3097)'
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3097](https://www.sqlalchemy.org/trac/ticket/3097)
- en: 0.9.6
  id: totrans-2108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.6
- en: 'Released: June 23, 2014'
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年6月23日
- en: orm
  id: totrans-2110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Reverted the change for [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    - this is a unit of work fix that is updated more comprehensively in 1.0 via [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
    The fix in [#3060](https://www.sqlalchemy.org/trac/ticket/3060) unfortunately
    produces a new issue whereby an eager load of a many-to-one attribute can produce
    an event that is interpreted into an attribute change.
  id: totrans-2112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 撤销了[#3060](https://www.sqlalchemy.org/trac/ticket/3060)的更改 - 这是一个工作单元修复，在1.0中更全面地更新为[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。[#3060](https://www.sqlalchemy.org/trac/ticket/3060)中的修复不幸地产生了一个新问题，即一个多对一属性的急加载可能会产生一个被解释为属性更改的事件。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: orm
  id: totrans-2114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Reverted the change for [#3060](https://www.sqlalchemy.org/trac/ticket/3060)
    - this is a unit of work fix that is updated more comprehensively in 1.0 via [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
    The fix in [#3060](https://www.sqlalchemy.org/trac/ticket/3060) unfortunately
    produces a new issue whereby an eager load of a many-to-one attribute can produce
    an event that is interpreted into an attribute change.
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 撤销了[#3060](https://www.sqlalchemy.org/trac/ticket/3060)的更改 - 这是一个工作单元修复，在1.0中更全面地更新为[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。[#3060](https://www.sqlalchemy.org/trac/ticket/3060)中的修复不幸地产生了一个新问题，即一个多对一属性的急加载可能会产生一个被解释为属性更改的事件。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: 0.9.5
  id: totrans-2118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.5
- en: 'Released: June 23, 2014'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年6月23日
- en: orm
  id: totrans-2120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型已经进一步扩展，允许一个连接条件严格地从单个列到自身，通过某种SQL函数或表达式进行转换。这有点实验性质，但第一个概念验证是一个“材料化路径”连接条件，其中一个路径字符串与自身使用“like”进行比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 操作符也已添加到可在primaryjoin条件中使用的有效操作符列表中。
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-2124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-2125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为就像它们从会话中加载然后分离的对象。不存在的属性被标记为过期，并且对象可以添加到一个会话中，其中它将表现得像一个持久对象。
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [bug]**'
  id: totrans-2127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-2128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询急加载中的一个bug，在多态子类边界上的一长串急加载与多态加载一起会无法定位链中的子类链接，导致在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上出现缺少属性名称的错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-2131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数会掩盖应该在映射器配置期间由于用户错误而引发的AttributeErrors或KeyErrors。对于属性/键错误的捕获已经更具体，不包括配置步骤。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于继承映射器隐式组合其基于列的属性之一与父级的情况，已添加了额外的检查，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；然而，这个新检查只发出警告，而不是异常，以允许依赖于现有行为的应用程序。
- en: See also
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“隐式组合列X在属性Y下”的警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-2140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-2141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")的行为，使得主键列始终添加到“未延迟加载”列的列表中；否则，ORM无法加载行的标识。显然，可以延迟映射的主键，ORM将失败，这一点没有改变。但是，由于load_only本质上是说“除了X之外都延迟加载”，因此PK列不参与此延迟加载更为关键。
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-2143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-2144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在所谓的“行切换”场景中出现的一些边缘情况，其中INSERT/DELETE可以转换为UPDATE。在这种情况下，将一对多关系设置为None，或在某些情况下将标量属性设置为None，可能不会被检测为值的净变化，因此UPDATE不会重置前一行上的内容。这是由于属性历史的一些尚未解决的副作用，这些副作用在隐式假定None对于先前未设置的属性实际上不是一个“变化”。另请参见[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改已在0.9.6版本中**撤销**。完整修复将在SQLAlchemy的1.0版本中实现。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-2148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[#3060](https://www.sqlalchemy.org/trac/ticket/3060)相关，对工作单元进行了调整，以便对相关的一对多对象进行加载时更加积极，例如在要删除的自引用对象图中；加载相关对象有助于确定删除顺序的正确顺序，如果未设置`passive_deletes`。
- en: '**[orm] [bug]**'
  id: totrans-2150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite连接重写中的错误，由于重复导致的匿名列名不会在子查询中正确重写。这会影响带有任何类型子查询 + 连接的SELECT查询。
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-2153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[#2804](https://www.sqlalchemy.org/trac/ticket/2804)中新增的布尔强制转换中的问题，新规则对“where”和“having”不会对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造函数的“whereclause”和“having”关键字参数生效，这也是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")使用的内容，所以在ORM中也无法正常工作。
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-2155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: examples
  id: totrans-2156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [feature]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新示例，演示了使用最新关系特性的物化路径。示例由Jack Zhou提供。
- en: engine
  id: totrans-2159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，当引擎首次连接并进行初始检查时发生DBAPI异常，并且异常不是断开连接异常，但是当我们尝试关闭游标时游标引发错误。在这种情况下，由于我们试图通过连接池记录游标关闭异常并失败，因为我们试图以不适当的方式访问池的记录器来记录真正的异常，所以真正的异常会被压制。
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些“双失效”情况，检测到连接失效可能发生在已经是关键部分的情况下，比如连接关闭(); 最终，这些条件是由 [#2907](https://www.sqlalchemy.org/trac/ticket/2907)
    中的变化引起的，在这个变化中，“返回时重置”功能调用连接/事务来处理它，在那里可能会被“断开检测”捕获。然而，可能最近在 [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    中的更改使得这更有可能被视为“连接失效”操作更快，因为问题在 0.9.4 上更容易重现，而不是 0.9.3。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-2165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在可能发生失效的任何部分内都添加了检查，以阻止在失效的连接上进一步的不允许的操作。这包括两个修复，一个在引擎级别，一个在池级别。虽然这个问题是在高并发的
    gevent 情况下观察到的，但理论上它可能发生在任何断开连接的情况下。
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: sql
  id: totrans-2167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    的合同中稍微放宽了一点，如果索引将手动添加到表中，则可以将 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 表达式指定为目标；索引不再需要有表绑定的列存在。
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的标志 [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为 True 时，渲染为“BETWEEN SYMMETRIC”。还添加了一个新的否定操作符“notbetween_op”，现在允许一个表达式像
    `~col.between(x, y)` 这样渲染为“col NOT BETWEEN x AND y”，而不是带括号的 NOT 字符串。
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [bug]**'
  id: totrans-2174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-2175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 INSERT..FROM SELECT 构造中的错误，其中从 UNION 中选择会将联合包装在一个匿名的子查询中。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-2178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用空的 [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    或 [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    或其他空白表达式时，[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") 和 [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") 会生成一个空的 WHERE 子句的 bug。现在这与 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的行为一致。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-2182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当该表中的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    在显式的 [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 中被引用时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") 标志会被隐式设置为 `False`。这种行为现在与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 本身具有 [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志设置为 `True` 时的行为相匹配，这意味着这是一个完全等价的情况。
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-2185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在自定义 [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") 实现中无法重写 [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") 和 [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") 运算符重载方法。
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-2188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法中的 bug，其中为以前未包含任何特殊参数的构造添加参数将失败。
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-2191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-2192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.9 版本中引入的回归，新的“ORDER BY <labelname>”功能从 [#1068](https://www.sqlalchemy.org/trac/ticket/1068)
    中不会将标签名称作为 ORDER BY 中呈现的引用规则应用。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)，[#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")的导入到`sqlalchemy.sql.expression`导入命名空间，该导入在
    0.9 版本初期被移除。
- en: postgresql
  id: totrans-2196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 pg8000 DBAPI 时，添加了对 AUTOCOMMIT 隔离级别的支持。感谢 Tony Locke 提交的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-2199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型添加了一个新标志[`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为`True`时，在传递到数据库之前，将为所有数组索引值添加一个值，从而更好地实现 Python
    风格的从零开始索引和 PostgreSQL 从一开始索引之间的互操作性。感谢 Alexey Terentev 提交的拉取请求。
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [bug]**'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型添加了`hashable=False`标志，这是为了允许 ORM 在请求混合列/实体列表中的
    ORM 映射的 HSTORE 列时跳过尝试“哈希” ORM 的需求。感谢 Gunnlaugur Þór Briem 提交的补丁。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-2205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-2206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的 SSL 有关。感谢 Antti Haapala 提交的拉取请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-2209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当确定异常是否为“断开连接”错误时，现在会查看 psycopg2 的`.closed`访问器；理想情况下，这应该消除对异常消息的任何其他检查来检测断开连接的需要，但我们将保留这些现有消息作为备用。这应该能够处理新的情况，如“SSL
    EOF”条件。感谢 Dirk Mueller 提交的拉取请求。
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [enhancement]**'
  id: totrans-2212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [enhancement]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-2213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 PostgreSQL 方言添加了一个新类型[`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是 PG 中的一个私有类型，在现代版本中不会暴露，但在一些 PG
    使用情况下，如大对象支持，这些类型可能会被暴露，以及在一些用户报告的模式反射使用情况中。
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-2215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，在索引上将列名添加到`mysql_length`参数时，需要对引号名进行相同的引号以识别。修复使引号变为可选，但也提供了旧行为以向后兼容使用该解决方法的人。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-2220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-2221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对反映包含KEY_BLOCK_SIZE的索引的表的支持，使用等号。感谢Sean McGivern提供的Pull请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.8.7
- en: mssql
  id: totrans-2223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了用于确定当前默认模式名称的查询，以使用`database_principal_id()`函数与`sys.database_principals`视图相结合，以便我们可以独立于正在进行的登录类型（例如SQL
    Server，Windows等）确定默认模式。
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: tests
  id: totrans-2227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-2228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了一些关于在运行测试时涉及`imp`模块和Python 3.3或更高版本的弃用警告。感谢Matt Chisholm提供的Pull请求。
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-2231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在访问时，从声明混合或抽象类复制`__mapper_args__`字典，以便声明本身对该字典进行的修改不会与其他映射冲突。该字典在`version_id_col`和`polymorphic_on`参数方面进行修改，将其内的列替换为正式映射到本地类/表的列。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个在可变扩展中的错误，其中[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未对`setdefault()`字典操作报告更改事件。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-2239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-2240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")未返回现有值或新值（此错误未在任何0.8版本中发布）。感谢Thomas
    Hervé提供的Pull请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-2243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [testsuite]**'
  id: totrans-2244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [testsuite]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，将`StringTest.test_literal_backslashes`中不受支持的`Text`更改为使用`String(40)`。感谢Jan提供的Pull请求。
- en: '**[bug] [firebird]**'
  id: totrans-2246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug where the combination of “limit” rendering as “SELECT FIRST n ROWS”
    using a bound parameter (only firebird has both), combined with column-level subqueries
    which also feature “limit” as well as “positional” bound parameters (e.g. qmark
    style) would erroneously assign the subquery-level positions before that of the
    enclosing SELECT, thus returning parameters which are out of order.
  id: totrans-2247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即“limit”渲染为“SELECT FIRST n ROWS”并使用绑定参数（只有firebird同时具有两者），与列级子查询结合使用，该子查询也具有“limit”以及“位置”绑定参数（例如，qmark样式），会错误地在封闭SELECT之前分配子查询级别的位置，从而返回顺序错误的参数。
- en: 'References: [#3038](https://www.sqlalchemy.org/trac/ticket/3038)'
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3038](https://www.sqlalchemy.org/trac/ticket/3038)
- en: orm
  id: totrans-2249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The “primaryjoin” model has been stretched a bit further to allow a join condition
    that is strictly from a single column to itself, translated through some kind
    of SQL function or expression. This is kind of experimental, but the first proof
    of concept is a “materialized path” join condition where a path string is compared
    to itself using “like”. The [`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") operator has also been added
    to the list of valid operators to use in a primaryjoin condition.
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “primaryjoin”模型已进一步扩展，以允许严格从单个列到自身的连接条件，通过某种SQL函数或表达式进行转换。这有点实验性，但第一个概念验证是“materialized
    path”连接条件，其中路径字符串与自身进行“like”比较。[`ColumnOperators.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")操作符也已添加到可在primaryjoin条件中使用的有效操作符列表中。
- en: 'References: [#3029](https://www.sqlalchemy.org/trac/ticket/3029)'
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3029](https://www.sqlalchemy.org/trac/ticket/3029)
- en: '**[orm] [feature]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new utility function [`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") which can be used to manufacture
    objects that behave as though they were loaded from a session, then detached.
    Attributes that aren’t present are marked as expired, and the object can be added
    to a Session where it will act like a persistent one.
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的实用函数[`make_transient_to_detached()`](../orm/session_api.html#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")，可用于制造行为像从会话加载然后分离的对象。不存在的属性被标记为过期，对象可以添加到会话中，其中它将像持久对象一样工作。
- en: 'References: [#3017](https://www.sqlalchemy.org/trac/ticket/3017)'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3017](https://www.sqlalchemy.org/trac/ticket/3017)
- en: '**[orm] [bug]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in subquery eager loading where a long chain of eager loads across
    a polymorphic-subclass boundary in conjunction with polymorphic loading would
    fail to locate the subclass-link in the chain, erroring out with a missing property
    name on an [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了子查询贪婪加载中的一个bug，其中在与多态子类边界上的长贪婪加载链与多态加载相结合时，将无法定位链中的子类链接，导致在[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")上的丢失属性名称错误。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.8.7
- en: 'References: [#3055](https://www.sqlalchemy.org/trac/ticket/3055)'
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3055](https://www.sqlalchemy.org/trac/ticket/3055)
- en: '**[orm] [bug]**'
  id: totrans-2260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where the [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") function would mask AttributeErrors or KeyErrors
    that should raise during mapper configuration due to user errors. The catch for
    attribute/keyerror has been made more specific to not include the configuration
    step.
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，即[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")函数会掩盖应该在映射器配置期间引发的AttributeErrors或KeyErrors，原因是用户错误。针对属性/关键错误的捕获已经更具体，不包括配置步骤。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：0.8.7
- en: 'References: [#3047](https://www.sqlalchemy.org/trac/ticket/3047)'
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3047](https://www.sqlalchemy.org/trac/ticket/3047)
- en: '**[orm] [bug]**'
  id: totrans-2264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional checks have been added for the case where an inheriting mapper is
    implicitly combining one of its column-based attributes with that of the parent,
    where those columns normally don’t necessarily share the same value. This is an
    extension of an existing check that was added via [#1892](https://www.sqlalchemy.org/trac/ticket/1892);
    however this new check emits only a warning, instead of an exception, to allow
    for applications that may be relying upon the existing behavior.
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加额外的检查，用于处理继承映射器隐式组合其基于列的属性之一与父级属性的情况，其中这些列通常不一定共享相同的值。这是通过[#1892](https://www.sqlalchemy.org/trac/ticket/1892)添加的现有检查的扩展；但是，这个新检查只发出警告，而不是异常，以允许可能依赖现有行为的应用程序。
- en: See also
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m getting a warning or error about “Implicitly combining column X under
    attribute Y”](../faq/ormconfiguration.html#faq-combining-columns)'
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我收到关于“在属性Y下隐式组合列X”警告或错误](../faq/ormconfiguration.html#faq-combining-columns)'
- en: 'References: [#3042](https://www.sqlalchemy.org/trac/ticket/3042)'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3042](https://www.sqlalchemy.org/trac/ticket/3042)
- en: '**[orm] [bug]**'
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the behavior of [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") such that primary key columns are always added to
    the list of columns to be “undeferred”; otherwise, the ORM can’t load the row’s
    identity. Apparently, one can defer the mapped primary keys and the ORM will fail,
    that hasn’t been changed. But as load_only is essentially saying “defer all but
    X”, it’s more critical that PK cols not be part of this deferral.
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")的行为，使得主键列始终添加到“未延迟加载”列的列表中；否则，ORM无法加载行的标识。显然，可以延迟映射的主键，ORM将失败，这一点没有改变。但是，由于load_only本质上是说“除了X之外都延迟加载”，因此PK列不参与此延迟更为关键。
- en: 'References: [#3080](https://www.sqlalchemy.org/trac/ticket/3080)'
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3080](https://www.sqlalchemy.org/trac/ticket/3080)
- en: '**[orm] [bug]**'
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a few edge cases which arise in the so-called “row switch” scenario, where
    an INSERT/DELETE can be turned into an UPDATE. In this situation, a many-to-one
    relationship set to None, or in some cases a scalar attribute set to None, may
    not be detected as a net change in value, and therefore the UPDATE would not reset
    what was on the previous row. This is due to some as-yet unresolved side effects
    of the way attribute history works in terms of implicitly assuming None isn’t
    really a “change” for a previously un-set attribute. See also [#3061](https://www.sqlalchemy.org/trac/ticket/3061).
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在所谓的“行切换”场景中出现的一些边缘情况，其中INSERT/DELETE可以转换为UPDATE。在这种情况下，将一个多对一关系设置为None，或者在某些情况下将标量属性设置为None，可能不会被检测为值的净变化，因此UPDATE不会重置前一行上的内容。这是由于属性历史的一些尚未解决的副作用，这些副作用假定None对于先前未设置的属性实际上不是真正的“变化”。另请参见[#3061](https://www.sqlalchemy.org/trac/ticket/3061)。
- en: Note
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: This change has been **REVERTED** in 0.9.6\. The full fix will be in version
    1.0 of SQLAlchemy.
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改已在0.9.6版本中**撤销**。完整的修复将在SQLAlchemy的1.0版本中实现。
- en: 'References: [#3060](https://www.sqlalchemy.org/trac/ticket/3060)'
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3060](https://www.sqlalchemy.org/trac/ticket/3060)
- en: '**[orm] [bug]**'
  id: totrans-2277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Related to [#3060](https://www.sqlalchemy.org/trac/ticket/3060), an adjustment
    has been made to the unit of work such that loading for related many-to-one objects
    is slightly more aggressive, in the case of a graph of self-referential objects
    that are to be deleted; the load of related objects is to help determine the correct
    order for deletion if passive_deletes is not set.
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[#3060](https://www.sqlalchemy.org/trac/ticket/3060)相关，对工作单元进行了调整，以便在要删除的自引用对象图的情况下，与相关的多对一对象的加载更为积极；相关对象的加载有助于确定删除顺序的正确顺序，如果未设置passive_deletes。
- en: '**[orm] [bug]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in SQLite join rewriting where anonymized column names due to repeats
    would not correctly be rewritten in subqueries. This would affect SELECT queries
    with any kind of subquery + join.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite连接重写中的错误，其中由于重复导致的匿名列名不会在子查询中正确重写。这将影响带有任何类型的子查询 + 连接的SELECT查询。
- en: 'References: [#3057](https://www.sqlalchemy.org/trac/ticket/3057)'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3057](https://www.sqlalchemy.org/trac/ticket/3057)
- en: '**[orm] [bug] [sql]**'
  id: totrans-2282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql]**'
- en: Fixes to the newly enhanced boolean coercion in [#2804](https://www.sqlalchemy.org/trac/ticket/2804)
    where the new rules for “where” and “having” wouldn’t take effect for the “whereclause”
    and “having” kw arguments of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is also what [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") uses so wasn’t working in the ORM either.
  id: totrans-2283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[#2804](https://www.sqlalchemy.org/trac/ticket/2804)中新增的布尔强制转换，在“where”和“having”上的新规则不会对[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造函数的“whereclause”和“having”关键字参数生效，这也是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")使用的内容，因此在ORM中也无法正常工作。
- en: 'References: [#3013](https://www.sqlalchemy.org/trac/ticket/3013)'
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3013](https://www.sqlalchemy.org/trac/ticket/3013)
- en: examples
  id: totrans-2285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-2286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Added a new example illustrating materialized paths, using the latest relationship
    features. Example courtesy Jack Zhou.
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的示例，演示了使用最新的关系特性的物化路径。示例由Jack Zhou提供。
- en: engine
  id: totrans-2288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug which would occur if a DBAPI exception occurs when the engine first
    connects and does its initial checks, and the exception is not a disconnect exception,
    yet the cursor raises an error when we try to close it. In this case the real
    exception would be quashed as we tried to log the cursor close exception via the
    connection pool and failed, as we were trying to access the pool’s logger in a
    way that is inappropriate in this very specific scenario.
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当引擎首次连接并进行初始检查时发生DBAPI异常，且异常不是断开连接异常，但当我们尝试关闭游标时，游标引发错误。在这种情况下，真正的异常会被压制，因为我们尝试通过连接池记录游标关闭异常并失败，因为我们试图以不适合在这种非常特定情况下访问池的记录器的方式。
- en: 'References: [#3063](https://www.sqlalchemy.org/trac/ticket/3063)'
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3063](https://www.sqlalchemy.org/trac/ticket/3063)
- en: '**[engine] [bug]**'
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed some “double invalidate” situations were detected where a connection invalidation
    could occur within an already critical section like a connection.close(); ultimately,
    these conditions are caused by the change in [#2907](https://www.sqlalchemy.org/trac/ticket/2907),
    in that the “reset on return” feature calls out to the Connection/Transaction
    in order to handle it, where “disconnect detection” might be caught. However,
    it’s possible that the more recent change in [#2985](https://www.sqlalchemy.org/trac/ticket/2985)
    made it more likely for this to be seen as the “connection invalidate” operation
    is much quicker, as the issue is more reproducible on 0.9.4 than 0.9.3.
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些“双重无效”情况，其中连接无效可能发生在已经处于关键部分的情况下，比如连接关闭(); 最终，这些条件是由于[#2907](https://www.sqlalchemy.org/trac/ticket/2907)中的更改引起的，因为“返回时重置”功能调用Connection/Transaction来处理它，其中可能会被捕获“断开连接检测”。然而，最近在[#2985](https://www.sqlalchemy.org/trac/ticket/2985)中的更改可能使这种情况更容易被视为“连接无效”操作更快，因为在0.9.4上更容易复现这个问题，而在0.9.3上不太容易。
- en: Checks are now added within any section that an invalidate might occur to halt
    further disallowed operations on the invalidated connection. This includes two
    fixes both at the engine level and at the pool level. While the issue was observed
    with highly concurrent gevent cases, it could in theory occur in any kind of scenario
    where a disconnect occurs within the connection close operation.
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在可能发生无效操作的任何部分中添加检查以阻止对无效连接进行进一步的不允许操作。这包括引擎级别和池级别的两个修复。虽然这个问题在高度并发的gevent情况下被观察到，但理论上在任何发生连接关闭操作中断开连接的情况下都可能发生。
- en: 'References: [#3043](https://www.sqlalchemy.org/trac/ticket/3043)'
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3043](https://www.sqlalchemy.org/trac/ticket/3043)
- en: sql
  id: totrans-2296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Liberalized the contract for [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") a bit in that you can specify a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") expression as the target; the index no longer
    needs to have a table-bound column present if the index is to be manually added
    to the table, either via inline declaration or via [`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint").
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的合同中稍微放宽了一下，您可以将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")表达式指定为目标；如果要手动将索引添加到表中，则索引不再需要存在表绑定列，无论是通过内联声明还是通过[`Table.append_constraint()`](../core/metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")。
- en: 'References: [#3028](https://www.sqlalchemy.org/trac/ticket/3028)'
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3028](https://www.sqlalchemy.org/trac/ticket/3028)
- en: '**[sql] [feature]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new flag [`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between"), when set to True renders “BETWEEN SYMMETRIC”.
    Also added a new negation operator “notbetween_op”, which now allows an expression
    like `~col.between(x, y)` to render as “col NOT BETWEEN x AND y”, rather than
    a parenthesized NOT string.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的标志[`between.symmetric`](../core/sqlelement.html#sqlalchemy.sql.expression.between.params.symmetric
    "sqlalchemy.sql.expression.between")，当设置为 True 时，渲染为 “BETWEEN SYMMETRIC”。还添加了一个新的否定运算符“notbetween_op”，现在允许表达式如`~col.between(x,
    y)`渲染为 “col NOT BETWEEN x AND y”，而不是一个带括号的 NOT 字符串。
- en: 'References: [#2990](https://www.sqlalchemy.org/trac/ticket/2990)'
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2990](https://www.sqlalchemy.org/trac/ticket/2990)
- en: '**[sql] [bug]**'
  id: totrans-2303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in INSERT..FROM SELECT construct where selecting from a UNION would
    wrap the union in an anonymous (e.g. unlabeled) subquery.
  id: totrans-2304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 INSERT..FROM SELECT 结构中的 bug，在此结构中从 UNION 中进行选择会将 UNION 包装在一个匿名（例如无标签）子查询中。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: 'References: [#3044](https://www.sqlalchemy.org/trac/ticket/3044)'
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3044](https://www.sqlalchemy.org/trac/ticket/3044)
- en: '**[sql] [bug]**'
  id: totrans-2307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") and [`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete") would produce an empty WHERE clause when an
    empty [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    or [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    or other blank expression were applied. This is now consistent with that of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update "sqlalchemy.schema.Table.update")和[`Table.delete()`](../core/metadata.html#sqlalchemy.schema.Table.delete
    "sqlalchemy.schema.Table.delete")在应用空的[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")、[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")或其他空表达式时产生空的 WHERE 子句的 bug。现在这与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的行为一致了。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.7
- en: 'References: [#3045](https://www.sqlalchemy.org/trac/ticket/3045)'
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3045](https://www.sqlalchemy.org/trac/ticket/3045)
- en: '**[sql] [bug]**'
  id: totrans-2311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") flag is implicitly set to `False` when that [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is referred to in an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") for that table. This behavior now matches
    that of when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    itself has the [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag set to `True`, which is intended to be an exactly
    equivalent case.
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在表的明确[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中引用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 时，[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") 标志隐式设置为 `False`。这个行为现在与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 本身具有 [`Column.primary_key`](../core/metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志设置为 `True` 时的行为相匹配，这是一个完全等效的情况。
- en: 'References: [#3023](https://www.sqlalchemy.org/trac/ticket/3023)'
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3023](https://www.sqlalchemy.org/trac/ticket/3023)
- en: '**[sql] [bug]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug where the [`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__"), [`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__") and [`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__") operator overload methods could
    not be overridden within a custom [`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator") implementation.
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`Operators.__and__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__and__
    "sqlalchemy.sql.expression.Operators.__and__")、[`Operators.__or__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__or__
    "sqlalchemy.sql.expression.Operators.__or__")和[`Operators.__invert__()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.__invert__
    "sqlalchemy.sql.expression.Operators.__invert__")操作符重载方法无法在自定义[`Comparator`](../core/type_api.html#sqlalchemy.types.TypeEngine.Comparator
    "sqlalchemy.types.TypeEngine.Comparator")实现中被覆盖。
- en: 'References: [#3012](https://www.sqlalchemy.org/trac/ticket/3012)'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3012](https://www.sqlalchemy.org/trac/ticket/3012)
- en: '**[sql] [bug]**'
  id: totrans-2317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method where adding an argument
    for a construct not previously included for any special arguments would fail.
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法中的bug，其中为以前未包含任何特殊参数的构造添加参数将失败。
- en: 'References: [#3024](https://www.sqlalchemy.org/trac/ticket/3024)'
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3024](https://www.sqlalchemy.org/trac/ticket/3024)
- en: '**[sql] [bug]**'
  id: totrans-2320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression introduced in 0.9 where new “ORDER BY <labelname>” feature
    from [#1068](https://www.sqlalchemy.org/trac/ticket/1068) would not apply quoting
    rules to the label name as rendered in the ORDER BY.
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在0.9版本中引入的回归问题，即新的“ORDER BY <labelname>”功能从[#1068](https://www.sqlalchemy.org/trac/ticket/1068)中不会将标签名称的引用规则应用于在ORDER
    BY中呈现的标签名称。
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)'
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#1068](https://www.sqlalchemy.org/trac/ticket/1068), [#3020](https://www.sqlalchemy.org/trac/ticket/3020)
- en: '**[sql] [bug]**'
  id: totrans-2323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Restored the import for [`Function`](../core/functions.html#sqlalchemy.sql.functions.Function
    "sqlalchemy.sql.functions.Function") to the `sqlalchemy.sql.expression` import
    namespace, which was removed at the beginning of 0.9.
  id: totrans-2324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Function`](../core/functions.html#sqlalchemy.sql.functions.Function "sqlalchemy.sql.functions.Function")的导入到`sqlalchemy.sql.expression`导入命名空间，该导入在0.9开始时被移除。
- en: postgresql
  id: totrans-2325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for AUTOCOMMIT isolation level when using the pg8000 DBAPI. Pull
    request courtesy Tony Locke.
  id: totrans-2327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用pg8000 DBAPI时，添加了对AUTOCOMMIT隔离级别的支持。感谢Tony Locke的拉取请求。
- en: '**[postgresql] [feature]**'
  id: totrans-2328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new flag [`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY") to the PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") type. When set to `True`, a value of one will be added
    to all array index values before passing to the database, allowing better interoperability
    between Python style zero-based indexes and PostgreSQL one-based indexes. Pull
    request courtesy Alexey Terentev.
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型添加了一个新标志[`ARRAY.zero_indexes`](../core/type_basics.html#sqlalchemy.types.ARRAY.params.zero_indexes
    "sqlalchemy.types.ARRAY")。当设置为`True`时，在传递给数据库之前，将在所有数组索引值上添加一个值，从而允许Python风格的从零开始索引和PostgreSQL从一开始索引之间更好地进行互操作。感谢Alexey
    Terentev的拉取请求。
- en: 'References: [#2785](https://www.sqlalchemy.org/trac/ticket/2785)'
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2785](https://www.sqlalchemy.org/trac/ticket/2785)
- en: '**[postgresql] [bug]**'
  id: totrans-2331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added the `hashable=False` flag to the PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") type, which is needed to allow the ORM
    to skip over trying to “hash” an ORM-mapped HSTORE column when requesting it in
    a mixed column/entity list. Patch courtesy Gunnlaugur Þór Briem.
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PG [`HSTORE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE") 类型添加了`hashable=False`标志，这是为了允许ORM在请求混合列/实体列表中的ORM映射的HSTORE列时跳过尝试“哈希”ORM的必要性。感谢Gunnlaugur
    Þór Briem的补丁。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3053](https://www.sqlalchemy.org/trac/ticket/3053)'
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3053](https://www.sqlalchemy.org/trac/ticket/3053)
- en: '**[postgresql] [bug]**'
  id: totrans-2335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added a new “disconnect” message “connection has been closed unexpectedly”.
    This appears to be related to newer versions of SSL. Pull request courtesy Antti
    Haapala.
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的“断开连接”消息“连接意外关闭”。这似乎与较新版本的 SSL 有关。感谢 Antti Haapala 的拉取请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.8.7
- en: '**[postgresql] [bug]**'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The psycopg2 `.closed` accessor is now consulted when determining if an exception
    is a “disconnect” error; ideally, this should remove the need for any other inspection
    of the exception message to detect disconnect, however we will leave those existing
    messages in place as a fallback. This should be able to handle newer cases like
    “SSL EOF” conditions. Pull request courtesy Dirk Mueller.
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当确定异常是否为“断开连接”错误时，现在会查看 psycopg2 的`.closed`访问器；理想情况下，这应该消除对异常消息的其他检查的需求，但我们将保留这些现有消息作为备用。这应该能够处理新的情况，如“SSL
    EOF”条件。感谢 Dirk Mueller 的拉取请求。
- en: 'References: [#3021](https://www.sqlalchemy.org/trac/ticket/3021)'
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3021](https://www.sqlalchemy.org/trac/ticket/3021)
- en: '**[postgresql] [enhancement]**'
  id: totrans-2341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [enhancement]**'
- en: Added a new type [`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID") to the PostgreSQL dialect. While “oid” is
    generally a private type within PG that is not exposed in modern versions, there
    are some PG use cases such as large object support where these types might be
    exposed, as well as within some user-reported schema reflection use cases.
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言中添加了一个新类型[`OID`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.OID
    "sqlalchemy.dialects.postgresql.OID")。虽然“oid”通常是 PG 中的私有类型，在现代版本中不会公开，但在某些 PG
    使用情况下，如大对象支持，这些类型可能会被公开，以及在一些用户报告的模式反射使用情况中。
- en: 'References: [#3002](https://www.sqlalchemy.org/trac/ticket/3002)'
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3002](https://www.sqlalchemy.org/trac/ticket/3002)
- en: mysql
  id: totrans-2344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug where column names added to `mysql_length` parameter on an index needed
    to have the same quoting for quoted names in order to be recognized. The fix makes
    the quotes optional but also provides the old behavior for backwards compatibility
    with those using the workaround.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在索引的`mysql_length`参数中添加的列名需要具有相同引号才能被识别的错误。修复使引号变为可选，但也为那些使用解决方法的人提供了旧的行为以实现向后兼容。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.8.7
- en: 'References: [#3085](https://www.sqlalchemy.org/trac/ticket/3085)'
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3085](https://www.sqlalchemy.org/trac/ticket/3085)
- en: '**[mysql] [bug]**'
  id: totrans-2349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for reflecting tables where an index includes KEY_BLOCK_SIZE using
    an equal sign. Pull request courtesy Sean McGivern.
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对包含 KEY_BLOCK_SIZE 的索引的表进行反射的支持，使用等号。感谢 Sean McGivern 的拉取请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.8.7
- en: mssql
  id: totrans-2352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Revised the query used to determine the current default schema name to use the
    `database_principal_id()` function in conjunction with the `sys.database_principals`
    view so that we can determine the default schema independently of the type of
    login in progress (e.g., SQL Server, Windows, etc).
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修改了用于确定当前默认模式名称的查询，使用`database_principal_id()`函数与`sys.database_principals`视图结合使用，以便我们可以独立于正在进行的登录类型（例如
    SQL Server、Windows 等）确定默认模式。 '
- en: 'References: [#3025](https://www.sqlalchemy.org/trac/ticket/3025)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3025](https://www.sqlalchemy.org/trac/ticket/3025)
- en: tests
  id: totrans-2356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [py3k]**'
  id: totrans-2357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [py3k]**'
- en: Corrected for some deprecation warnings involving the `imp` module and Python
    3.3 or greater, when running tests. Pull request courtesy Matt Chisholm.
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了运行测试时涉及`imp`模块和 Python 3.3 或更高版本的一些弃用警告。感谢 Matt Chisholm 的拉取请求。
- en: 'References: [#2830](https://www.sqlalchemy.org/trac/ticket/2830)'
  id: totrans-2359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2830](https://www.sqlalchemy.org/trac/ticket/2830)
- en: misc
  id: totrans-2360
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [declarative]**'
  id: totrans-2361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: The `__mapper_args__` dictionary is copied from a declarative mixin or abstract
    class when accessed, so that modifications made to this dictionary by declarative
    itself won’t conflict with that of other mappings. The dictionary is modified
    regarding the `version_id_col` and `polymorphic_on` arguments, replacing the column
    within with the one that is officially mapped to the local class/table.
  id: totrans-2362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当访问`__mapper_args__`字典时，会从声明性混合或抽象类中复制，以便 declarative 自身对此字典所做的修改不会与其他映射发生冲突。关于`version_id_col`和`polymorphic_on`参数，字典会进行修改，用本地类/表正式映射到的列替换其中的列。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也**回溯**到：0.8.7
- en: 'References: [#3062](https://www.sqlalchemy.org/trac/ticket/3062)'
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3062](https://www.sqlalchemy.org/trac/ticket/3062)
- en: '**[bug] [ext]**'
  id: totrans-2365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") did not report change events for the `setdefault()`
    dictionary operation.
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的bug，即[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未报告`setdefault()`字典操作的更改事件。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-2368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [ext]**'
  id: totrans-2369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where [`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault") didn’t return the existing or
    new value (this bug was not released in any 0.8 version). Pull request courtesy
    Thomas Hervé.
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict.setdefault()`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict.setdefault
    "sqlalchemy.ext.mutable.MutableDict.setdefault")没有返回现有值或新值的bug（此bug未在任何0.8版本中发布）。感谢Thomas
    Hervé提供的拉取请求。
- en: 'This change is also **backported** to: 0.8.7'
  id: totrans-2371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.7
- en: 'References: [#3051](https://www.sqlalchemy.org/trac/ticket/3051), [#3093](https://www.sqlalchemy.org/trac/ticket/3093)'
  id: totrans-2372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3051](https://www.sqlalchemy.org/trac/ticket/3051)，[#3093](https://www.sqlalchemy.org/trac/ticket/3093)
- en: '**[bug] [testsuite]**'
  id: totrans-2373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [testsuite]**'
- en: In public test suite, changed to use of `String(40)` from less-supported `Text`
    in `StringTest.test_literal_backslashes`. Pullreq courtesy Jan.
  id: totrans-2374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在公共测试套件中，从不太受支持的`Text`更改为使用`String(40)`在`StringTest.test_literal_backslashes`中。感谢Jan提供的拉取请求。
- en: '**[bug] [firebird]**'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug where the combination of “limit” rendering as “SELECT FIRST n ROWS”
    using a bound parameter (only firebird has both), combined with column-level subqueries
    which also feature “limit” as well as “positional” bound parameters (e.g. qmark
    style) would erroneously assign the subquery-level positions before that of the
    enclosing SELECT, thus returning parameters which are out of order.
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即“limit”渲染为“SELECT FIRST n ROWS”并使用绑定参数（只有firebird同时具有这两个特性）的组合，再加上具有“limit”和“位置”绑定参数（例如qmark样式）的列级子查询，会错误地将子查询级别的位置分配在封闭SELECT之前，从而返回顺序错误的参数。
- en: 'References: [#3038](https://www.sqlalchemy.org/trac/ticket/3038)'
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3038](https://www.sqlalchemy.org/trac/ticket/3038)
- en: 0.9.4
  id: totrans-2378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.4
- en: 'Released: March 28, 2014'
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年3月28日
- en: general
  id: totrans-2380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [feature]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [feature]**'
- en: Support has been added for pytest to run tests. This runner is currently being
    supported in addition to nose, and will likely be preferred to nose going forward.
    The nose plugin system used by SQLAlchemy has been split out so that it works
    under pytest as well. There are no plans to drop support for nose at the moment
    and we hope that the test suite itself can continue to remain as agnostic of testing
    platform as possible. See the file README.unittests.rst for updated information
    on running tests with pytest.
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对pytest的支持以运行测试。目前，此运行程序除了nose外还得到支持，并且将来可能更倾向于使用pytest。SQLAlchemy使用的nose插件系统已被拆分，以便在pytest下也能正常工作。目前没有计划放弃对nose的支持，我们希望测试套件本身可以继续保持对测试平台的中立性。请查看README.unittests.rst文件以获取有关使用pytest运行测试的更新信息。
- en: The test plugin system has also been enhanced to support running tests against
    multiple database URLs at once, by specifying the `--db` and/or `--dburi` flags
    multiple times. This does not run the entire test suite for each database, but
    instead allows test cases that are specific to certain backends make use of that
    backend as the test is run. When using pytest as the test runner, the system will
    also run specific test suites multiple times, once for each database, particularly
    those tests within the “dialect suite”. The plan is that the enhanced system will
    also be used by Alembic, and allow Alembic to run migration operation tests against
    multiple backends in one run, including third-party backends not included within
    Alembic itself. Third party dialects and extensions are also encouraged to standardize
    on SQLAlchemy’s test suite as a basis; see the file README.dialects.rst for background
    on building out from SQLAlchemy’s test platform.
  id: totrans-2383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试插件系统还增强了对一次针对多个数据库URL运行测试的支持，通过多次指定`--db`和/或`--dburi`标志。这不会为每个数据库运行整个测试套件，而是允许特定于某些后端的测试用例在运行测试时使用该后端。当使用pytest作为测试运行器时，系统还将多次运行特定的测试套件，每个数据库运行一次，特别是那些在“方言套件”中的测试。计划是增强系统还将被Alembic使用，并允许Alembic在一次运行中针对多个后端运行迁移操作测试，包括Alembic本身不包含的第三方后端。还鼓励第三方方言和扩展标准化使用SQLAlchemy的测试套件作为基础；请参阅README.dialects.rst文件以了解从SQLAlchemy的测试平台构建的背景。
- en: '**[general] [bug]**'
  id: totrans-2384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`setup.py`文件以支持将来可能从setuptools中删除`setuptools.Feature`扩展。如果不存在此关键字，设置将仍然成功使用setuptools而不是退回到distutils。现在还可以通过设置DISABLE_SQLALCHEMY_CEXT环境变量来禁用C扩展构建。无论setuptools是否可用，此变量都有效。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: '**[general] [bug]**'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Fixed some test/feature failures occurring in Python 3.4, in particular the
    logic used to wrap “column default” callables wouldn’t work properly for Python
    built-ins.
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Python 3.4中发生的一些测试/功能失败，特别是用于包装“列默认”可调用对象的逻辑对于Python内置函数不起作用。
- en: 'References: [#2979](https://www.sqlalchemy.org/trac/ticket/2979)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2979](https://www.sqlalchemy.org/trac/ticket/2979)
- en: orm
  id: totrans-2391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter `mapper.confirm_deleted_rows`. Defaults to True, indicates
    that a series of DELETE statements should confirm that the cursor rowcount matches
    the number of primary keys that should have matched; this behavior had been taken
    off in most cases (except when version_id is used) to support the unusual edge
    case of self-referential ON DELETE CASCADE; to accommodate this, the message is
    now just a warning, not an exception, and the flag can be used to indicate a mapping
    that expects self-referential cascaded deletes of this nature. See also [#2403](https://www.sqlalchemy.org/trac/ticket/2403)
    for background on the original change.
  id: totrans-2393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增参数`mapper.confirm_deleted_rows`。默认为True，表示一系列DELETE语句应确认游标行数与应匹配的主键数量相匹配；这种行为在大多数情况下已被取消（除非使用version_id），以支持自引用ON
    DELETE CASCADE的不寻常边缘情况；为了适应这一点，消息现在只是一个警告，而不是异常，并且可以使用该标志指示期望自引用级联删除的映射。另请参见[#2403](https://www.sqlalchemy.org/trac/ticket/2403)以了解有关原始更改的背景。
- en: 'References: [#3007](https://www.sqlalchemy.org/trac/ticket/3007)'
  id: totrans-2394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3007](https://www.sqlalchemy.org/trac/ticket/3007)
- en: '**[orm] [feature]**'
  id: totrans-2395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A warning is emitted if the [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") events are applied to a specific
    mapper or mapped class, as the events are only invoked for the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") target at the general level.
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")或[`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件应用于特定的映射器或映射类，则会发出警告，因为这些事件仅在通用级别上为[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")目标调用。
- en: '**[orm] [feature]**'
  id: totrans-2397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new keyword argument `once=True` to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"). This is a convenience feature which will wrap
    the given listener such that it is only invoked once.
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的关键字参数`once=True`到[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")和[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")。这是一个方便的功能，它将包装给定的监听器，使其只调用一次。
- en: '**[orm] [feature]**'
  id: totrans-2399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new option to [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") which is to specify the string `"nested"`. When
    set to `"nested"` as opposed to `True`, the “chaining” of joins will parenthesize
    the inner join on the right side of an existing outer join, instead of chaining
    as a string of outer joins. This possibly should have been the default behavior
    when 0.9 was released, as we introduced the feature of right-nested joins in the
    ORM, however we are keeping it as a non-default for now to avoid further surprises.
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新选项到[`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")，即指定字符串`"nested"`。当设置为`"nested"`时，与`True`相反，连接的“链”将在现有外连接的右侧括起内连接，而不是将其链接为一串外连接。当0.9发布时，这可能本应该是默认行为，因为我们在ORM中引入了右嵌套连接的功能，但是目前我们将其保留为非默认行为，以避免进一步的意外。
- en: See also
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Right-nested inner joins available in joined eager loads](migration_09.html#feature-2976)'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在联接的急切加载中可用的右嵌套内连接](migration_09.html#feature-2976)'
- en: 'References: [#2976](https://www.sqlalchemy.org/trac/ticket/2976)'
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2976](https://www.sqlalchemy.org/trac/ticket/2976)
- en: '**[orm] [bug]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，即更改对象的主键，然后将其标记为DELETE会失败，无法定位正确的行进行DELETE操作。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.8.6
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.8.3中的回归，因为[#2818](https://www.sqlalchemy.org/trac/ticket/2818)的结果是[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在只有一个[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")条目但没有其他实体的查询上不起作用。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：0.8.6
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-2412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，如果对非可选择的内容进行了查询（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")），然后尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")使“左”侧确定为`None`，然后失败。现在明确检测到了这种情况。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: '**[orm] [bug]**'
  id: totrans-2415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`sqlalchemy.orm.interfaces.__all__`中删除了过时的名称，并使用当前名称进行刷新，以便再次从此模块进行`import
    *`操作。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: '**[orm] [bug]**'
  id: totrans-2419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a very old behavior where the lazy load emitted for a one-to-many could
    inappropriately pull in the parent table, and also return results inconsistent
    based on what’s in the parent table, when the primaryjoin includes some kind of
    discriminator against the parent table, such as `and_(parent.id == child.parent_id,
    parent.deleted == False)`. While this primaryjoin doesn’t make that much sense
    for a one-to-many, it is slightly more common when applied to the many-to-one
    side, and the one-to-many comes as a result of a backref. Loading rows from `child`
    in this case would keep `parent.deleted == False` as is within the query, thereby
    yanking it into the FROM clause and doing a cartesian product. The new behavior
    will now substitute the value of the local “parent.deleted” for that parameter
    as is appropriate. Though typically, a real-world app probably wants to use a
    different primaryjoin for the o2m side in any case.
  id: totrans-2420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常古老的行为，即一对多的延迟加载可能不适当地拉入父表，并且根据父表中的内容返回不一致的结果，当主连接包含某种针对父表的鉴别器时，例如`and_(parent.id
    == child.parent_id, parent.deleted == False)`。虽然这种主连接对于一对多来说并没有太多意义，但当应用于多对一方时稍微更常见，并且一对多是由反向引用产生的。在这种情况下加载`child`的行将保持查询中的`parent.deleted
    == False`不变，从而将其拉入FROM子句并执行笛卡尔积。新行为现在将适当地替换本地“parent.deleted”的值以用于该参数。尽管通常，一个真实的应用程序可能希望在任何情况下为o2m方面使用不同的主连接。
- en: 'References: [#2948](https://www.sqlalchemy.org/trac/ticket/2948)'
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2948](https://www.sqlalchemy.org/trac/ticket/2948)
- en: '**[orm] [bug]**'
  id: totrans-2422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the check for “how to join from A to B” such that when a table has
    multiple, composite foreign keys targeting a parent table, the [`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") argument will be properly interpreted in order
    to resolve the ambiguity; previously this condition would raise that there were
    multiple FK paths when in fact the foreign_keys argument should be establishing
    which one is expected.
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“如何从A连接到B”的检查，以便当一个表具有多个、复合的外键指向一个父表时，[`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship")参数将被正确解释以解决歧义；以前，这种情况会引发存在多个FK路径，而实际上foreign_keys参数应该确定哪一个是预期的。
- en: 'References: [#2965](https://www.sqlalchemy.org/trac/ticket/2965)'
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2965](https://www.sqlalchemy.org/trac/ticket/2965)
- en: '**[orm] [bug]**'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for the not-quite-yet-documented `insert=True` flag for [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") to work with mapper / instance events.
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为尚未完全记录的`insert=True`标志添加了对[`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")与mapper / instance事件一起工作的支持。
- en: '**[orm] [bug] [engine]**'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug where events set to listen at the class level (e.g. on the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") or [`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") level, as opposed to on an individual mapped class,
    and also on [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")) that also made use of internal argument conversion
    (which is most within those categories) would fail to be removable.
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即在类级别设置监听事件（例如在[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")或[`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager")级别，而不是在单个映射类上，以及在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上，同时还使用了内部参数转换（在这些类别中大多数情况下）会导致无法移除。
- en: 'References: [#2973](https://www.sqlalchemy.org/trac/ticket/2973)'
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2973](https://www.sqlalchemy.org/trac/ticket/2973)
- en: '**[orm] [bug]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8 where using an option like [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") with the “wildcard” expression, e.g. `"*"`, would raise
    an assertion error in the case where the query didn’t contain any actual entities.
    This assertion is meant for other cases and was catching this one inadvertently.
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.8版本开始的回归问题，即在使用像[`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")这样的选项与“通配符”表达式（例如，`"*"`）时，在查询中没有包含任何实际实体的情况下，会触发断言错误。这个断言是为其他情况准备的，并且意外地捕获了这种情况。
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: More fixes to SQLite “join rewriting”; the fix from [#2967](https://www.sqlalchemy.org/trac/ticket/2967)
    implemented right before the release of 0.9.3 affected the case where a UNION
    contained nested joins in it. “Join rewriting” is a feature with a wide range
    of possibilities and is the first intricate “SQL rewriting” feature we’ve introduced
    in years, so we’re sort of going through a lot of iterations with it (not unlike
    eager loading back in the 0.2/0.3 series, polymorphic loading in 0.4/0.5). We
    should be there soon so thanks for bearing with us :).
  id: totrans-2433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SQLite“联接重写”进行了更多修复；在0.9.3版本发布前实施的来自[#2967](https://www.sqlalchemy.org/trac/ticket/2967)的修复影响了UNION包含嵌套联接的情况。
    “联接重写”是一个具有广泛可能性的功能，并且是我们多年来引入的第一个复杂的“SQL重写”功能，因此我们正在进行许多迭代（不像0.2/0.3系列中的急切加载，0.4/0.5中的多态加载）。我们应该很快就会到达目的地，所以感谢您的耐心等待：）。
- en: 'References: [#2969](https://www.sqlalchemy.org/trac/ticket/2969)'
  id: totrans-2434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2969](https://www.sqlalchemy.org/trac/ticket/2969)
- en: examples
  id: totrans-2435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-2436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed bug in the versioned_history example where column-level INSERT defaults
    would prevent history values of NULL from being written.
  id: totrans-2437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了版本化历史示例中的错误，其中列级别的INSERT默认值会阻止写入NULL的历史值。
- en: engine
  id: totrans-2438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: Added some new event mechanics for dialect-level events; the initial implementation
    allows an event handler to redefine the specific mechanics by which an arbitrary
    dialect invokes execute() or executemany() on a DBAPI cursor. The new events,
    at this point semi-public and experimental, are in support of some upcoming transaction-related
    extensions.
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为方言级事件添加了一些新的事件机制；最初的实现允许事件处理程序重新定义任意方言调用DBAPI游标的execute()或executemany()的具体机制。此时的新事件在某种程度上是半公开和试验性的，支持即将推出的一些与事务相关的扩展。
- en: '**[engine] [feature]**'
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: An event listener can now be associated with a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), after one or more [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects have been created (such as by an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or via explicit connect) and the listener will pick
    up events from those connections. Previously, performance concerns pushed the
    event transfer from [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") at init-time only, but we’ve inlined a bunch of
    conditional checks to make this possible without any additional function calls.
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在一个或多个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象已创建后（例如通过orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或通过显式连接）与[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")相关联事件监听器，并且该监听器将捕获这些连接的事件。以前，出于性能考虑，事件传输从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")仅在初始化时进行，但是我们内联了一堆条件检查以使此成为可能，而不需要任何额外的函数调用。
- en: 'References: [#2978](https://www.sqlalchemy.org/trac/ticket/2978)'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2978](https://www.sqlalchemy.org/trac/ticket/2978)
- en: '**[engine] [bug]**'
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: A major improvement made to the mechanics by which the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") recycles the connection pool when a “disconnect” condition
    is detected; instead of discarding the pool and explicitly closing out connections,
    the pool is retained and a “generational” timestamp is updated to reflect the
    current time, thereby causing all existing connections to be recycled when they
    are next checked out. This greatly simplifies the recycle process, removes the
    need for “waking up” connect attempts waiting on the old pool and eliminates the
    race condition that many immediately-discarded “pool” objects could be created
    during the recycle operation.
  id: totrans-2445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")在检测到“断开”条件时重新使用连接池的机制进行了重大改进；不再丢弃池并显式关闭连接，而是保留池并更新“生成”时间戳以反映当前时间，从而在下次检出时重新使用所有现有连接。这极大地简化了回收过程，消除了等待旧池的“唤醒”连接尝试的需要，并消除了在回收操作期间可能创建的许多立即丢弃的“池”对象的竞争条件。
- en: 'References: [#2985](https://www.sqlalchemy.org/trac/ticket/2985)'
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2985](https://www.sqlalchemy.org/trac/ticket/2985)
- en: '**[engine] [bug]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The [`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") event is now emitted
    for the “_cursor_execute()” method of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); this is the “quick” executor that is used for
    things like when a sequence is executed ahead of an INSERT statement, as well
    as for dialect startup checks like unicode returns, charset, etc. the [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event was already
    invoked here. The “executemany” flag is now always set to False here, as this
    event always corresponds to a single execution. Previously the flag could be True
    if we were acting on behalf of an executemany INSERT statement.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") 事件现在被发射到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“_cursor_execute()”方法中；这是用于诸如在INSERT语句之前执行序列等快速执行器，以及用于方言启动检查（如unicode返回、字符集等）的“快速”执行器。[`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 事件已经在这里被调用。这里的“executemany”标志现在总是设置为False，因为此事件始终对应单个执行。以前，如果我们代表executemany
    INSERT语句执行操作，该标志可能为True。'
- en: sql
  id: totrans-2449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added support for literal rendering of boolean values, e.g. “true” / “false”
    or “1” / “0”.
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对布尔值的文字渲染支持，例如“true” / “false”或“1” / “0”。
- en: '**[sql] [feature]**'
  id: totrans-2452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added a new feature [`conv()`](../core/constraints.html#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv"), the purpose of which is to mark a constraint name as
    already having had a naming convention applied. This token will be used by Alembic
    migrations as of Alembic 0.6.4 in order to render constraints in migration scripts
    with names marked as already having been subject to a naming convention.
  id: totrans-2453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能[`conv()`](../core/constraints.html#sqlalchemy.schema.conv "sqlalchemy.schema.conv")，其目的是将约束名称标记为已经应用了命名约定。从Alembic
    0.6.4开始，Alembic迁移将使用此令牌，以便在迁移脚本中呈现已标记为已经受到命名约定影响的约束。
- en: '**[sql] [feature]**'
  id: totrans-2454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The new dialect-level keyword argument system for schema-level constructs has
    been enhanced in order to assist with existing schemes that rely upon addition
    of ad-hoc keyword arguments to constructs.
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了帮助依赖于向构造添加临时关键字参数的现有方案，已增强了模式级构造的方言级关键字参数系统。
- en: 'E.g., a construct such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") will again accept ad-hoc keyword arguments within the
    [`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs "sqlalchemy.schema.Index.kwargs")
    collection, after construction:'
  id: totrans-2456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    这样的构造将再次在构造后接受[`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs
    "sqlalchemy.schema.Index.kwargs") 集合中的临时关键字参数：
- en: '[PRE4]'
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To suit the use case of allowing custom arguments at construction time, the
    [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method now allows this registration:'
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应允许在构建时使用自定义参数的用例，[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法现在允许进行此注册：
- en: '[PRE5]'
  id: totrans-2459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
  id: totrans-2461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866), [#2962](https://www.sqlalchemy.org/trac/ticket/2962)'
  id: totrans-2462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866), [#2962](https://www.sqlalchemy.org/trac/ticket/2962)
- en: '**[sql] [bug]**'
  id: totrans-2463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    构造中的错误，其中基本上第一个 SQL 表达式的“类型”将被应用为比较元组值的“比较类型”；这在某些情况下会导致不适当的“类型转换”发生，例如当元组中混合了字符串和二进制值时，错误地将目标值转换为二进制，即使左侧的值不是二进制。
    [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    现在在其值列表中期望异构类型。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 至：0.8.6
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-2466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: '**[sql] [bug]**'
  id: totrans-2467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an 0.9 regression where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that failed to reflect correctly wouldn’t be removed
    from the parent [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), even though in an invalid state. Pullreq courtesy
    Roman Podoliaka.
  id: totrans-2468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.9 版本中的一个回归，即 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    如果无法正确反映则不会从父 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    中删除，即使处于无效状态。 Pullreq 由 Roman Podoliaka 提供。
- en: 'References: [#2988](https://www.sqlalchemy.org/trac/ticket/2988)'
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2988](https://www.sqlalchemy.org/trac/ticket/2988)
- en: '**[sql] [bug]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature will now also apply to [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects that are associated directly with
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    instead of just on the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 特性现在还将应用于与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 直接关联的 [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 对象，而不仅仅是 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: '**[sql] [bug]**'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature where the name of a check constraint making
    use of the “%(constraint_name)s” token would get doubled up for the constraint
    generated by a boolean or enum type, and overall duplicate events would cause
    the “%(constraint_name)s” token to keep compounding itself.
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 特性中的错误，在使用“%(constraint_name)s”标记的检查约束的名称会为布尔或枚举类型生成的约束而重复，而总体重复的事件将导致“%(constraint_name)s”标记不断增加。
- en: 'References: [#2991](https://www.sqlalchemy.org/trac/ticket/2991)'
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2991](https://www.sqlalchemy.org/trac/ticket/2991)
- en: '**[sql] [bug]**'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the logic which applies names to the .c collection when a no-name [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is received, e.g. via [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") or similar; the “key” of the bind param is
    used as the key within .c. rather than the rendered name. Since these binds have
    “anonymous” names in any case, this allows individual bound parameters to have
    their own name within a selectable if they are otherwise unlabeled.
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当接收到没有名称的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时，调整了将名称应用于 .c 集合的逻辑，例如通过[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")或类似方式；绑定参数的“键”被用作 .c 内的键，而不是呈现的名称。由于这些绑定在任何情况下都具有“匿名”名称，这使得在可选地中，如果它们未被标记，那么单个绑定参数可以拥有自己的名称。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-2478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Some changes to how the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection behaves when presented with
    duplicate columns. The behavior of emitting a warning and replacing the old column
    with the same name still remains to some degree; the replacement in particular
    is to maintain backwards compatibility. However, the replaced column still remains
    associated with the `c` collection now in a collection `._all_columns`, which
    is used by constructs such as aliases and unions, to deal with the set of columns
    in `c` more towards what is actually in the list of columns rather than the unique
    set of key names. This helps with situations where SELECT statements with same-named
    columns are used in unions and such, so that the union can match the columns up
    positionally and also there’s some chance of `FromClause.corresponding_column()`
    still being usable here (it can now return a column that is only in selectable.c._all_columns
    and not otherwise named). The new collection is underscored as we still need to
    decide where this list might end up. Theoretically it would become the result
    of iter(selectable.c), however this would mean that the length of the iteration
    would no longer match the length of keys(), and that behavior needs to be checked
    out.
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当呈现具有重复列的[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合时，对其行为进行了一些更改。仍然存在发出警告并用相同名称替换旧列的行为，以某种程度上保持向后兼容性。然而，替换的列现在仍然与`c`集合相关联，现在在一个集合`._all_columns`中，这由诸如别名和联合之类的结构使用，以处理`c`中的列集合更接近于实际列列表而不是唯一的键名称集合。这有助于处理在联合等中使用具有相同命名列的SELECT语句的情况，以便联合可以按位置匹配列，并且在这里仍然有一些使用`FromClause.corresponding_column()`的机会（它现在可以返回一个仅在selectable.c._all_columns中而不是以其他方式命名的列）。新集合加下划线是因为我们仍然需要决定此列表可能会结束的位置。从理论上讲，它将成为iter(selectable.c)的结果，但这意味着迭代的长度将不再匹配keys()的长度，需要检查该行为。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-2481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in new [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method where the ordering of columns
    given positionally would not be preserved. This could have potential impact in
    positional situations such as applying the resulting `TextAsFrom` object to a
    union.
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法中列的顺序位置上不会被保留的问题。这可能会在类似于将生成的`TextAsFrom`对象应用于联合的位置情况中产生潜在影响。
- en: postgresql
  id: totrans-2483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-2485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 psycopg2 DBAPI，启用了“合理的多行计数”检查，因为这似乎是作为 psycopg2 2.0.9 的支持。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**反向移植**到：0.8.6
- en: '**[postgresql] [bug]**'
  id: totrans-2487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-2488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了由发布0.8.5 / 0.9.3的兼容性增强引起的回归，其中针对仅���用于8.1、8.2系列的PostgreSQL版本的索引反射再次出现问题，围绕着一直存在问题的int2vector类型。虽然从8.1开始，int2vector支持数组操作，但显然从8.3开始才支持将其转换为varchar。 '
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到了：0.8.6
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: mysql
  id: totrans-2491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: 'Tweaked the settings for mysql-connector-python; in Py2K, the “supports unicode
    statements” flag is now False, so that SQLAlchemy will encode the *SQL string*
    (note: *not* the parameters) to bytes before sending to the database. This seems
    to allow all unicode-related tests to pass for mysql-connector, including those
    that use non-ascii table/column names, as well as some tests for the TEXT type
    using unicode under cursor.executemany().'
  id: totrans-2493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了mysql-connector-python的设置；在Py2K中，“supports unicode statements”标志现在为False，因此SQLAlchemy将在发送到数据库之前将*SQL字符串*（注意：*不是*参数）编码为字节。这似乎允许所有与unicode相关的测试通过mysql-connector，包括那些使用非ascii表/列名称以及使用unicode在cursor.executemany()下的TEXT类型的一些测试。
- en: oracle
  id: totrans-2494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Added a new engine option `coerce_to_unicode=True` to the cx_Oracle dialect,
    which restores the cx_Oracle outputtypehandler approach to Python unicode conversion
    under Python 2, which was removed in 0.9.2 as a result of [#2911](https://www.sqlalchemy.org/trac/ticket/2911).
    Some use cases would prefer that unicode coercion is unconditional for all string
    values, despite performance concerns. Pull request courtesy Christoph Zwerschke.
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向cx_Oracle方言添加了一个新的引擎选项`coerce_to_unicode=True`，它将cx_Oracle的输出类型处理程序方法恢复到Python
    2中的Unicode转换，这是因为在0.9.2中由于[#2911](https://www.sqlalchemy.org/trac/ticket/2911)而被移除。一些用例希望对所有字符串值进行Unicode强制转换，尽管存在性能问题。拉取请求由Christoph
    Zwerschke提供。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-2497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: '**[oracle] [bug]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added new datatype [`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE
    "sqlalchemy.dialects.oracle.DATE"), which is a subclass of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). As Oracle has no “datetime” type per se, it instead
    has only `DATE`, it is appropriate here that the `DATE` type as present in the
    Oracle dialect be an instance of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). This issue doesn’t change anything as far as the
    behavior of the type, as data conversion is handled by the DBAPI in any case,
    however the improved subclass layout will help the use cases of inspecting types
    for cross-database compatibility. Also removed uppercase `DATETIME` from the Oracle
    dialect as this type isn’t functional in that context.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的数据类型[`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE "sqlalchemy.dialects.oracle.DATE")，它是[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")的子类。由于Oracle本身没有“datetime”类型，而只有`DATE`，因此在Oracle方言中，将`DATE`类型作为[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")的实例是合适的。这个问题并不会改变类型的行为，因为数据转换无论如何都是由DBAPI处理的，但是改进的子类布局将有助于检查类型以实现跨数据库兼容性。此外，从Oracle方言中删除了大写的`DATETIME`，因为在该上下文中这种类型是无效的。
- en: 'References: [#2987](https://www.sqlalchemy.org/trac/ticket/2987)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2987](https://www.sqlalchemy.org/trac/ticket/2987)
- en: tests
  id: totrans-2501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a few errant `u''` strings that would prevent tests from passing in Py3.2\.
    Patch courtesy Arfrever Frehtes Taifersar Arahesis.
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些错误的`u''`字符串，这些字符串会导致在Py3.2中无法通过测试。补丁由Arfrever Frehtes Taifersar Arahesis提供。
- en: 'References: [#2980](https://www.sqlalchemy.org/trac/ticket/2980)'
  id: totrans-2504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2980](https://www.sqlalchemy.org/trac/ticket/2980)
- en: misc
  id: totrans-2505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-2507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误以及[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified")中的bug，在这种情况下，如果属性已重新分配给自身，则更改事件将不会传播。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到了：0.8.6
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: '**[bug] [automap] [ext]**'
  id: totrans-2510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [自动映射] [扩展]**'
- en: Added support to automap for the case where a relationship should not be created
    between two classes that are in a joined inheritance relationship, for those foreign
    keys that link the subclass back to the superclass.
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为自动映射添加了支持，当关系不应该在两个类之间创建时，这两个类处于联合继承关系中，针对将子类链接回超类的外键。
- en: 'References: [#3004](https://www.sqlalchemy.org/trac/ticket/3004)'
  id: totrans-2512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3004](https://www.sqlalchemy.org/trac/ticket/3004)
- en: '**[bug] [pool]**'
  id: totrans-2513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [池]**'
- en: Fixed small issue in [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") where the current connection to be returned
    might get inadvertently cleaned out during the “cleanup” process. Patch courtesy
    jd23.
  id: totrans-2514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")中修复了一个小问题，即在“清理”过程中当前要返回的连接可能会在无意中被清除。修补程序提供
    jd23。
- en: '**[bug] [ext] [py3k]**'
  id: totrans-2515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展] [Py3k]**'
- en: Fixed bug in association proxy where assigning an empty slice (e.g. `x[:] =
    [...]`) would fail on Py3k.
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在关联代理中修复了一个错误，在该错误中，赋予一个空切片（例如`x[:] = [...]`）在 Py3k 上会失败。
- en: '**[bug] [ext]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed a regression in association proxy caused by [#2810](https://www.sqlalchemy.org/trac/ticket/2810)
    which caused a user-provided “getter” to no longer receive values of `None` when
    fetching scalar values from a target that is non-present. The check for None introduced
    by this change is now moved into the default getter, so a user-provided getter
    will also again receive values of None.
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个与 [#2810](https://www.sqlalchemy.org/trac/ticket/2810) 相关的关联代理中的回归，该回归导致一个用户提供的“getter”在从非存在目标获取标量值时不再接收到`None`值。此更改引入的
    None 检查现在移至默认 getter 中，因此用户提供的 getter 也将再次接收到 None 值。
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: general
  id: totrans-2520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [feature]**'
  id: totrans-2521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [特性]**'
- en: Support has been added for pytest to run tests. This runner is currently being
    supported in addition to nose, and will likely be preferred to nose going forward.
    The nose plugin system used by SQLAlchemy has been split out so that it works
    under pytest as well. There are no plans to drop support for nose at the moment
    and we hope that the test suite itself can continue to remain as agnostic of testing
    platform as possible. See the file README.unittests.rst for updated information
    on running tests with pytest.
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 pytest 运行测试的支持。此运行器目前正在额外支持 nose，并且将来可能更倾向于使用 pytest。SQLAlchemy 使用的 nose
    插件系统已分离出来，以便它也能在 pytest 下工作。目前没有计划放弃对 nose 的支持，我们希望测试套件本身可以继续尽可能保持与测试平台的不可知性。请参阅
    README.unittests.rst 文件，了解使用 pytest 运行测试的更新信息。
- en: The test plugin system has also been enhanced to support running tests against
    multiple database URLs at once, by specifying the `--db` and/or `--dburi` flags
    multiple times. This does not run the entire test suite for each database, but
    instead allows test cases that are specific to certain backends make use of that
    backend as the test is run. When using pytest as the test runner, the system will
    also run specific test suites multiple times, once for each database, particularly
    those tests within the “dialect suite”. The plan is that the enhanced system will
    also be used by Alembic, and allow Alembic to run migration operation tests against
    multiple backends in one run, including third-party backends not included within
    Alembic itself. Third party dialects and extensions are also encouraged to standardize
    on SQLAlchemy’s test suite as a basis; see the file README.dialects.rst for background
    on building out from SQLAlchemy’s test platform.
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试插件系统还增强了，支持一次性针对多个数据库 URL 运行测试，通过多次指定`--db`和/或`--dburi`标志。这不会针对每个数据库运行整个测试套件，而是允许特定于某些后端的测试用例在运行测试时使用该后端。当将
    pytest 作为测试运行器时，系统还将多次运行特定的测试套件，每个数据库运行一次，特别是“方言套件”中的测试。计划增强的系统也将由 Alembic 使用，并允许
    Alembic 在一个运行中针对多个后端运行迁移操作测试，包括 Alembic 本身未包含的第三方后端。还鼓励第三方方言和扩展标准化为 SQLAlchemy
    的测试套件作为基础；请参阅 README.dialects.rst 文件，了解从 SQLAlchemy 的测试平台构建的背景信息。
- en: '**[general] [bug]**'
  id: totrans-2524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: Adjusted `setup.py` file to support the possible future removal of the `setuptools.Feature`
    extension from setuptools. If this keyword isn’t present, the setup will still
    succeed with setuptools rather than falling back to distutils. C extension building
    can be disabled now also by setting the DISABLE_SQLALCHEMY_CEXT environment variable.
    This variable works whether or not setuptools is even available.
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '调整了`setup.py`文件，以支持将来可能从setuptools中删除`setuptools.Feature`扩展。如果不存在此关键字，则设置仍将成功使用setuptools而不是退回到distutils。现在还可以通过设置DISABLE_SQLALCHEMY_CEXT环境变量来禁用C扩展构建。无论setuptools是否可用，此变量都有效。 '
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.6
- en: 'References: [#2986](https://www.sqlalchemy.org/trac/ticket/2986)'
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2986](https://www.sqlalchemy.org/trac/ticket/2986)
- en: '**[general] [bug]**'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: Fixed some test/feature failures occurring in Python 3.4, in particular the
    logic used to wrap “column default” callables wouldn’t work properly for Python
    built-ins.
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在Python 3.4中发生的一些测试/特性失败，特别是用于包装“列默认值”可调用对象的逻辑对于Python内置函数不起作用。
- en: 'References: [#2979](https://www.sqlalchemy.org/trac/ticket/2979)'
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2979](https://www.sqlalchemy.org/trac/ticket/2979)
- en: orm
  id: totrans-2531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added new parameter `mapper.confirm_deleted_rows`. Defaults to True, indicates
    that a series of DELETE statements should confirm that the cursor rowcount matches
    the number of primary keys that should have matched; this behavior had been taken
    off in most cases (except when version_id is used) to support the unusual edge
    case of self-referential ON DELETE CASCADE; to accommodate this, the message is
    now just a warning, not an exception, and the flag can be used to indicate a mapping
    that expects self-referential cascaded deletes of this nature. See also [#2403](https://www.sqlalchemy.org/trac/ticket/2403)
    for background on the original change.
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数`mapper.confirm_deleted_rows`。默认为True，表示一系列DELETE语句应确认游标行数与应匹配的主键数相匹配；这种行为在大多数情况下已被取消（除非使用version_id），以支持自引用ON
    DELETE CASCADE的不寻常边缘情况；为了适应这一点，消息现在只是一个警告，而不是异常，并且该标志可用于指示期望此类自引用级联删除的映射。有关原始更改的背景，请参见[#2403](https://www.sqlalchemy.org/trac/ticket/2403)。
- en: 'References: [#3007](https://www.sqlalchemy.org/trac/ticket/3007)'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3007](https://www.sqlalchemy.org/trac/ticket/3007)
- en: '**[orm] [feature]**'
  id: totrans-2535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: A warning is emitted if the [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") or [`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured") events are applied to a specific
    mapper or mapped class, as the events are only invoked for the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") target at the general level.
  id: totrans-2536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")或[`MapperEvents.after_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_configured
    "sqlalchemy.orm.MapperEvents.after_configured")事件应用于特定的映射器或映射类，则会发出警告，因为这些事件仅在通用级别的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")目标上调用。
- en: '**[orm] [feature]**'
  id: totrans-2537
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added a new keyword argument `once=True` to [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") and [`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for"). This is a convenience feature which will wrap
    the given listener such that it is only invoked once.
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`listen()`](../core/event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")和[`listens_for()`](../core/event.html#sqlalchemy.event.listens_for
    "sqlalchemy.event.listens_for")添加了一个新的关键字参数`once=True`。这是一个方便的功能，它将包装给定的监听器，以便只调用一次。
- en: '**[orm] [feature]**'
  id: totrans-2539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [特性]**'
- en: Added a new option to [`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship") which is to specify the string `"nested"`. When
    set to `"nested"` as opposed to `True`, the “chaining” of joins will parenthesize
    the inner join on the right side of an existing outer join, instead of chaining
    as a string of outer joins. This possibly should have been the default behavior
    when 0.9 was released, as we introduced the feature of right-nested joins in the
    ORM, however we are keeping it as a non-default for now to avoid further surprises.
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`relationship.innerjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.innerjoin
    "sqlalchemy.orm.relationship")中添加了一个新选项，即指定字符串`"nested"`。当设置为`"nested"`而不是`True`时，连接的“链”将在现有外连接的右侧括号内连接内连接，而不是作为一系列外连接的字符串连接。当0.9发布时，这可能应该是默认行为，因为我们在ORM中引入了右嵌套连接的功能，但是为了避免进一步的意外，我们目前将其保留为非默认行为。
- en: See also
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Right-nested inner joins available in joined eager loads](migration_09.html#feature-2976)'
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[右嵌套内连接可用于连接的预加载](migration_09.html#feature-2976)'
- en: 'References: [#2976](https://www.sqlalchemy.org/trac/ticket/2976)'
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2976](https://www.sqlalchemy.org/trac/ticket/2976)
- en: '**[orm] [bug]**'
  id: totrans-2544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed ORM bug where changing the primary key of an object, then marking it for
    DELETE would fail to target the correct row for DELETE.
  id: totrans-2545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM中的一个bug，即更改对象的主键，然后将其标记为DELETE将无法定位正确的行进行DELETE。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#3006](https://www.sqlalchemy.org/trac/ticket/3006)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3006](https://www.sqlalchemy.org/trac/ticket/3006)
- en: '**[orm] [bug]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8.3 as a result of [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") wouldn’t work on a query that only had a [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") entry but no other entities.
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从0.8.3版本开始的回归问题，这是由于[#2818](https://www.sqlalchemy.org/trac/ticket/2818)导致的，[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在只有一个[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")条目但没有其他实体的查询上无法工作。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#2995](https://www.sqlalchemy.org/trac/ticket/2995)'
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2995](https://www.sqlalchemy.org/trac/ticket/2995)
- en: '**[orm] [bug]**'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved an error message which would occur if a query() were made against a
    non-selectable, such as a [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column"), and then an attempt was made to use
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    such that the “left” side would be determined as `None` and then fail. This condition
    is now detected explicitly.
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了一个错误消息，如果对非可选择的内容进行了查询（例如[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")），然后尝试使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")进行连接，使得“左”侧被确定为`None`，然后失败。现在明确检测到这种情况。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: '**[orm] [bug]**'
  id: totrans-2555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed stale names from `sqlalchemy.orm.interfaces.__all__` and refreshed with
    current names, so that an `import *` from this module again works.
  id: totrans-2556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`sqlalchemy.orm.interfaces.__all__`中删除了过时的名称，并刷新为当前名称，以便再次从该模块进行`import *`操作。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#2975](https://www.sqlalchemy.org/trac/ticket/2975)'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2975](https://www.sqlalchemy.org/trac/ticket/2975)
- en: '**[orm] [bug]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a very old behavior where the lazy load emitted for a one-to-many could
    inappropriately pull in the parent table, and also return results inconsistent
    based on what’s in the parent table, when the primaryjoin includes some kind of
    discriminator against the parent table, such as `and_(parent.id == child.parent_id,
    parent.deleted == False)`. While this primaryjoin doesn’t make that much sense
    for a one-to-many, it is slightly more common when applied to the many-to-one
    side, and the one-to-many comes as a result of a backref. Loading rows from `child`
    in this case would keep `parent.deleted == False` as is within the query, thereby
    yanking it into the FROM clause and doing a cartesian product. The new behavior
    will now substitute the value of the local “parent.deleted” for that parameter
    as is appropriate. Though typically, a real-world app probably wants to use a
    different primaryjoin for the o2m side in any case.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个非常古老的行为，即懒加载在一对多关系中可能会不适当地拉入父表，并且基于父表中的内容返回不一致的结果，当 `primaryjoin` 包含针对父表的某种类型的鉴别器时，例如
    `and_(parent.id == child.parent_id, parent.deleted == False)`。虽然这种 `primaryjoin`
    对于一对多关系并没有太多意义，但当应用于多对一的一侧时，这种情况稍微更为常见，并且一对多是作为反向引用的结果。在这种情况下加载 `child` 行会在查询中保留
    `parent.deleted == False`，从而将其拉入 `FROM` 子句并执行笛卡尔积。新行为现在将适当地替换本地的 “parent.deleted”
    的值为该参数。尽管通常，一个真实的应用程序可能想在任何情况下都使用不同的 `primaryjoin`。
- en: 'References: [#2948](https://www.sqlalchemy.org/trac/ticket/2948)'
  id: totrans-2561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2948](https://www.sqlalchemy.org/trac/ticket/2948)
- en: '**[orm] [bug]**'
  id: totrans-2562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the check for “how to join from A to B” such that when a table has
    multiple, composite foreign keys targeting a parent table, the [`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") argument will be properly interpreted in order
    to resolve the ambiguity; previously this condition would raise that there were
    multiple FK paths when in fact the foreign_keys argument should be establishing
    which one is expected.
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了“如何从 A 连接到 B”的检查，使得当一个表有多个复合外键指向父表时，[`relationship.foreign_keys`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.foreign_keys
    "sqlalchemy.orm.relationship") 参数将被正确解释以解决歧义；以前，此条件会引发存在多个 FK 路径的错误，而事实上，`foreign_keys`
    参数应该确定哪个路径是预期的。
- en: 'References: [#2965](https://www.sqlalchemy.org/trac/ticket/2965)'
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2965](https://www.sqlalchemy.org/trac/ticket/2965)
- en: '**[orm] [bug]**'
  id: totrans-2565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for the not-quite-yet-documented `insert=True` flag for [`listen()`](../core/event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen") to work with mapper / instance events.
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对尚未完全文档化的 `insert=True` 标志与 mapper / 实例事件一起使用的支持。
- en: '**[orm] [bug] [engine]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [engine]**'
- en: Fixed bug where events set to listen at the class level (e.g. on the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") or [`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") level, as opposed to on an individual mapped class,
    and also on [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")) that also made use of internal argument conversion
    (which is most within those categories) would fail to be removable.
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在类级别设置监听事件（例如在 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 或 [`ClassManager`](../orm/internals.html#sqlalchemy.orm.ClassManager
    "sqlalchemy.orm.ClassManager") 级别，而不是在单个映射类上，并且还在 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上，也使用了内部参数转换（这在这些类别中是大多数情况）将无法移除。
- en: 'References: [#2973](https://www.sqlalchemy.org/trac/ticket/2973)'
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2973](https://www.sqlalchemy.org/trac/ticket/2973)
- en: '**[orm] [bug]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression from 0.8 where using an option like [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") with the “wildcard” expression, e.g. `"*"`, would raise
    an assertion error in the case where the query didn’t contain any actual entities.
    This assertion is meant for other cases and was catching this one inadvertently.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.8 中的回归，当使用像 [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") 这样的选项与“通配符”表达式，例如 `"*"`，时，在查询中不包含任何实际实体时会引发断言错误。此断言是针对其他情况的，而无意中捕获了这种情况。
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-2572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: More fixes to SQLite “join rewriting”; the fix from [#2967](https://www.sqlalchemy.org/trac/ticket/2967)
    implemented right before the release of 0.9.3 affected the case where a UNION
    contained nested joins in it. “Join rewriting” is a feature with a wide range
    of possibilities and is the first intricate “SQL rewriting” feature we’ve introduced
    in years, so we’re sort of going through a lot of iterations with it (not unlike
    eager loading back in the 0.2/0.3 series, polymorphic loading in 0.4/0.5). We
    should be there soon so thanks for bearing with us :).
  id: totrans-2573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SQLite“连接重写”进行了更多修复；在0.9.3版本发布之前实施的[#2967](https://www.sqlalchemy.org/trac/ticket/2967)修复影响了UNION中包含嵌套连接的情况。“连接重写”是一个具有广泛可能性的功能，是多年来我们引入的第一个复杂的“SQL重写”功能，因此我们正在进行许多迭代（有点类似于0.2/0.3系列中的急加载，0.4/0.5中的多态加载）。我们应该很快就会完成，所以感谢您的耐心等待
    :).
- en: 'References: [#2969](https://www.sqlalchemy.org/trac/ticket/2969)'
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2969](https://www.sqlalchemy.org/trac/ticket/2969)
- en: examples
  id: totrans-2575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed bug in the versioned_history example where column-level INSERT defaults
    would prevent history values of NULL from being written.
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了versioned_history示例中的bug，其中列级别的INSERT默认值会阻止写入NULL的历史值。
- en: engine
  id: totrans-2578
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [功能]**'
- en: Added some new event mechanics for dialect-level events; the initial implementation
    allows an event handler to redefine the specific mechanics by which an arbitrary
    dialect invokes execute() or executemany() on a DBAPI cursor. The new events,
    at this point semi-public and experimental, are in support of some upcoming transaction-related
    extensions.
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为方言级事件添加了一些新的事件机制；初始实现允许事件处理程序重新定义任意方言在DBAPI游标上调用execute()或executemany()的具体机制。这些新事件，目前是半公开和实验性的，是为了支持即将推出的一些与事务相关的扩展。
- en: '**[engine] [feature]**'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [功能]**'
- en: An event listener can now be associated with a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), after one or more [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects have been created (such as by an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or via explicit connect) and the listener will pick
    up events from those connections. Previously, performance concerns pushed the
    event transfer from [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") at init-time only, but we’ve inlined a bunch of
    conditional checks to make this possible without any additional function calls.
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在创建一个或多个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象（例如通过orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或通过显式连接）之后，将事件监听器与[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")关联，监听器将从这些连接中接收事件。以前，性能问题导致事件传输从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")仅在初始化时进行，但我们内联了一堆条件检查，使得这一点成为可能，而无需进行任何额外的函数调用。
- en: 'References: [#2978](https://www.sqlalchemy.org/trac/ticket/2978)'
  id: totrans-2583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2978](https://www.sqlalchemy.org/trac/ticket/2978)
- en: '**[engine] [bug]**'
  id: totrans-2584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: A major improvement made to the mechanics by which the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") recycles the connection pool when a “disconnect” condition
    is detected; instead of discarding the pool and explicitly closing out connections,
    the pool is retained and a “generational” timestamp is updated to reflect the
    current time, thereby causing all existing connections to be recycled when they
    are next checked out. This greatly simplifies the recycle process, removes the
    need for “waking up” connect attempts waiting on the old pool and eliminates the
    race condition that many immediately-discarded “pool” objects could be created
    during the recycle operation.
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")在检测到“断开”条件时回收连接池的机制进行了重大改进；不再丢弃池并显式关闭连接，而是保留池并更新“生成”时间戳以反映当前时间，从而在下次检出时回收所有现有连接。这极大地简化了回收过程，消除了等待旧池的“唤醒”连接尝试的需要，并消除了在回收操作期间可能创建许多立即丢弃的“池”对象的竞争条件。
- en: 'References: [#2985](https://www.sqlalchemy.org/trac/ticket/2985)'
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2985](https://www.sqlalchemy.org/trac/ticket/2985)
- en: '**[engine] [bug]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: The [`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") event is now emitted
    for the “_cursor_execute()” method of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); this is the “quick” executor that is used for
    things like when a sequence is executed ahead of an INSERT statement, as well
    as for dialect startup checks like unicode returns, charset, etc. the [`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") event was already
    invoked here. The “executemany” flag is now always set to False here, as this
    event always corresponds to a single execution. Previously the flag could be True
    if we were acting on behalf of an executemany INSERT statement.
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.after_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.after_cursor_execute
    "sqlalchemy.events.ConnectionEvents.after_cursor_execute") 事件现在针对[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的“_cursor_execute()”方法发出；这是用于诸如在INSERT语句之前执行序列等快速执行器，以及用于方言启动检查（如unicode返回、字符集等）的事件。[`ConnectionEvents.before_cursor_execute()`](../core/events.html#sqlalchemy.events.ConnectionEvents.before_cursor_execute
    "sqlalchemy.events.ConnectionEvents.before_cursor_execute") 事件已在此处调用。此处的“executemany”标志现在始终设置为False，因为此事件始终对应单个执行。以前，如果我们代表executemany
    INSERT语句执行操作，标志可能为True。'
- en: sql
  id: totrans-2589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added support for literal rendering of boolean values, e.g. “true” / “false”
    or “1” / “0”.
  id: totrans-2591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对布尔值的文字呈现支持，例如“true” / “false”或“1” / “0”。
- en: '**[sql] [feature]**'
  id: totrans-2592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added a new feature [`conv()`](../core/constraints.html#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv"), the purpose of which is to mark a constraint name as
    already having had a naming convention applied. This token will be used by Alembic
    migrations as of Alembic 0.6.4 in order to render constraints in migration scripts
    with names marked as already having been subject to a naming convention.
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了一个新功能[`conv()`](../core/constraints.html#sqlalchemy.schema.conv "sqlalchemy.schema.conv")，其目的是将约束名称标记为已经应用了命名约定。从Alembic
    0.6.4开始，Alembic迁移将使用此标记，在迁移脚本中呈现已经标记为已经受到命名约定影响的约束。
- en: '**[sql] [feature]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The new dialect-level keyword argument system for schema-level constructs has
    been enhanced in order to assist with existing schemes that rely upon addition
    of ad-hoc keyword arguments to constructs.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已增强新的方言级关键字参数系统，以协助依赖于向结构添加临时关键字参数的现有方案。
- en: 'E.g., a construct such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") will again accept ad-hoc keyword arguments within the
    [`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs "sqlalchemy.schema.Index.kwargs")
    collection, after construction:'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    这样的结构在构造后将再次接受[`Index.kwargs`](../core/constraints.html#sqlalchemy.schema.Index.kwargs
    "sqlalchemy.schema.Index.kwargs") 集合中的临时关键字参数：
- en: '[PRE6]'
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To suit the use case of allowing custom arguments at construction time, the
    [`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method now allows this registration:'
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应允许在构造时使用自定义参数的用例，[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法现在允许进行此注册：
- en: '[PRE7]'
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](../core/foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")'
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866), [#2962](https://www.sqlalchemy.org/trac/ticket/2962)'
  id: totrans-2602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866), [#2962](https://www.sqlalchemy.org/trac/ticket/2962)
- en: '**[sql] [bug]**'
  id: totrans-2603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed bug in [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") construct where the “type” of essentially
    the first SQL expression would be applied as the “comparison type” to a compared
    tuple value; this has the effect in some cases of an inappropriate “type coercion”
    occurring, such as when a tuple that has a mix of String and Binary values improperly
    coerces target values to Binary even though that’s not what they are on the left
    side. [`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")
    now expects heterogeneous types within its list of values.
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_ "sqlalchemy.sql.expression.tuple_")构造中的错误，其中实质上第一个SQL表达式的“类型”会被应用为与比较的元组值的“比较类型”；在某些情况下，这会导致不恰当的“类型强制转换”发生，例如当一个混合了String和Binary值的元组错误地将目标值强制转换为Binary，即使左侧的值并非如此。[`tuple_()`](../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")现在期望其值列表中存在异构类型。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.6
- en: 'References: [#2977](https://www.sqlalchemy.org/trac/ticket/2977)'
  id: totrans-2606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2977](https://www.sqlalchemy.org/trac/ticket/2977)
- en: '**[sql] [bug]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed an 0.9 regression where a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that failed to reflect correctly wouldn’t be removed
    from the parent [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), even though in an invalid state. Pullreq courtesy
    Roman Podoliaka.
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中的一个回归问题，即[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")未能正确反映时，即使处于无效状态，也不会从父[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中移除。感谢Roman Podoliaka的Pullreq。
- en: 'References: [#2988](https://www.sqlalchemy.org/trac/ticket/2988)'
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2988](https://www.sqlalchemy.org/trac/ticket/2988)
- en: '**[sql] [bug]**'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature will now also apply to [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") objects that are associated directly with
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    instead of just on the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")功能现在还将应用于直接与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")关联的[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")对象，而不仅仅是在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上。'
- en: '**[sql] [bug]**'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in new [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") feature where the name of a check constraint making
    use of the “%(constraint_name)s” token would get doubled up for the constraint
    generated by a boolean or enum type, and overall duplicate events would cause
    the “%(constraint_name)s” token to keep compounding itself.
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")功能中的错误，其中使用“%(constraint_name)s”标记的检查约束的名称会在布尔或枚举类型生成的约束中重复，整体重复事件会导致“%(constraint_name)s”标记不断累积。
- en: 'References: [#2991](https://www.sqlalchemy.org/trac/ticket/2991)'
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2991](https://www.sqlalchemy.org/trac/ticket/2991)
- en: '**[sql] [bug]**'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the logic which applies names to the .c collection when a no-name [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is received, e.g. via [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") or similar; the “key” of the bind param is
    used as the key within .c. rather than the rendered name. Since these binds have
    “anonymous” names in any case, this allows individual bound parameters to have
    their own name within a selectable if they are otherwise unlabeled.
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了将名称应用于.c集合时的逻辑，当接收到无名称的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时，例如通过[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")或类似方式；绑定参数的“键”被用作.c中的键，而不是渲染的名称。由于这些绑定在任何情况下都具有“匿名”名称，因此这允许单独的绑定参数在可选择的情况下具有自己的名称，如果它们没有被标记。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-2618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Some changes to how the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection behaves when presented with
    duplicate columns. The behavior of emitting a warning and replacing the old column
    with the same name still remains to some degree; the replacement in particular
    is to maintain backwards compatibility. However, the replaced column still remains
    associated with the `c` collection now in a collection `._all_columns`, which
    is used by constructs such as aliases and unions, to deal with the set of columns
    in `c` more towards what is actually in the list of columns rather than the unique
    set of key names. This helps with situations where SELECT statements with same-named
    columns are used in unions and such, so that the union can match the columns up
    positionally and also there’s some chance of `FromClause.corresponding_column()`
    still being usable here (it can now return a column that is only in selectable.c._all_columns
    and not otherwise named). The new collection is underscored as we still need to
    decide where this list might end up. Theoretically it would become the result
    of iter(selectable.c), however this would mean that the length of the iteration
    would no longer match the length of keys(), and that behavior needs to be checked
    out.
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合的行为进行了一些更改，当出现重复列时。仍然存在发出警告并替换旧列的行为；特别是替换是为了保持向后兼容性。但是，替换的列现在仍然与`c`集合关联在一个名为`._all_columns`的集合中，该集合由诸如别名和联合之类的结构使用，以处理`c`中的列集更加接近实际列列表而不是唯一的键名称。这有助于处理在联合等中使用具有相同名称的SELECT语句的情况，以便联合可以按位置匹配列，并且在这里仍然有一些机会使用`FromClause.corresponding_column()`（现在它可以返回仅在selectable.c._all_columns中的列，而不是其他命名）。新集合下划线的原因是我们仍然需要决定这个列表可能会在哪里结束。理论上它将成为iter(selectable.c)的结果，但是这意味着迭代的长度将不再与keys()的长度匹配，需要检查该行为。
- en: 'References: [#2974](https://www.sqlalchemy.org/trac/ticket/2974)'
  id: totrans-2620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2974](https://www.sqlalchemy.org/trac/ticket/2974)
- en: '**[sql] [bug]**'
  id: totrans-2621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue in new [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method where the ordering of columns
    given positionally would not be preserved. This could have potential impact in
    positional situations such as applying the resulting `TextAsFrom` object to a
    union.
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法中的问题，其中按位置给定的列的排序不会被保留。这可能会在位置相关的情况下产生潜在影响，比如将生成的`TextAsFrom`对象应用到联合操作中。
- en: postgresql
  id: totrans-2623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Enabled “sane multi-row count” checking for the psycopg2 DBAPI, as this seems
    to be supported as of psycopg2 2.0.9.
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为psycopg2 DBAPI启用了“合理的多行计数”检查，因为这似乎在psycopg2 2.0.9中得到了支持。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.6
- en: '**[postgresql] [bug]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed regression caused by release 0.8.5 / 0.9.3’s compatibility enhancements
    where index reflection on PostgreSQL versions specific to only the 8.1, 8.2 series
    again broke, surrounding the ever problematic int2vector type. While int2vector
    supports array operations as of 8.1, apparently it only supports CAST to a varchar
    as of 8.3.
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由发布0.8.5 / 0.9.3的兼容性增强引起的回归，其中索引反射在仅适用于8.1、8.2系列的PostgreSQL版本上再次中断，周围围绕着永远有问题的int2vector类型。虽然int2vector自8.1起支持数组操作，但显然它只支持从8.3开始的varchar的CAST。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.6
- en: 'References: [#3000](https://www.sqlalchemy.org/trac/ticket/3000)'
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3000](https://www.sqlalchemy.org/trac/ticket/3000)
- en: mysql
  id: totrans-2631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: 'Tweaked the settings for mysql-connector-python; in Py2K, the “supports unicode
    statements” flag is now False, so that SQLAlchemy will encode the *SQL string*
    (note: *not* the parameters) to bytes before sending to the database. This seems
    to allow all unicode-related tests to pass for mysql-connector, including those
    that use non-ascii table/column names, as well as some tests for the TEXT type
    using unicode under cursor.executemany().'
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了mysql-connector-python的设置；在Py2K中，“supports unicode statements”标志现在为False，因此SQLAlchemy将在发送到数据库之前将*SQL字符串*（注意：*不是*参数）编码为字节。这似乎允许所有与mysql-connector相关的unicode测试通过，包括那些使用非ASCII表/列名称以及使用cursor.executemany()下的unicode的TEXT类型的一些测试。
- en: oracle
  id: totrans-2634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能]**'
- en: Added a new engine option `coerce_to_unicode=True` to the cx_Oracle dialect,
    which restores the cx_Oracle outputtypehandler approach to Python unicode conversion
    under Python 2, which was removed in 0.9.2 as a result of [#2911](https://www.sqlalchemy.org/trac/ticket/2911).
    Some use cases would prefer that unicode coercion is unconditional for all string
    values, despite performance concerns. Pull request courtesy Christoph Zwerschke.
  id: totrans-2636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为cx_Oracle方言添加了一个新的引擎选项`coerce_to_unicode=True`，该选项恢复了在Python 2下的cx_Oracle输出类型处理程序方法进行Unicode转换的功能，该功能在0.9.2中被删除，原因是[#2911](https://www.sqlalchemy.org/trac/ticket/2911)。一些用例希望对所有字符串值进行Unicode强制转换，尽管存在性能问题。拉取请求由Christoph
    Zwerschke提供。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: '**[oracle] [bug]**'
  id: totrans-2638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added new datatype [`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE
    "sqlalchemy.dialects.oracle.DATE"), which is a subclass of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). As Oracle has no “datetime” type per se, it instead
    has only `DATE`, it is appropriate here that the `DATE` type as present in the
    Oracle dialect be an instance of [`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime"). This issue doesn’t change anything as far as the
    behavior of the type, as data conversion is handled by the DBAPI in any case,
    however the improved subclass layout will help the use cases of inspecting types
    for cross-database compatibility. Also removed uppercase `DATETIME` from the Oracle
    dialect as this type isn’t functional in that context.
  id: totrans-2639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的数据类型[`DATE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.DATE "sqlalchemy.dialects.oracle.DATE")，它是[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")的子类。由于Oracle没有“datetime”类型，而只有`DATE`，因此在这里，Oracle方言中的`DATE`类型作为[`DateTime`](../core/type_basics.html#sqlalchemy.types.DateTime
    "sqlalchemy.types.DateTime")的实例是合适的。这个问题并不会改变类型的行为，因为数据转换无论如何都由DBAPI处理，但是改进的子类布局将有助于检查类型以实现跨数据库兼容性。此外，从Oracle方言中删除了大写的`DATETIME`，因为这种类型在该上下文中不起作用。
- en: 'References: [#2987](https://www.sqlalchemy.org/trac/ticket/2987)'
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2987](https://www.sqlalchemy.org/trac/ticket/2987)
- en: tests
  id: totrans-2641
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed a few errant `u''` strings that would prevent tests from passing in Py3.2\.
    Patch courtesy Arfrever Frehtes Taifersar Arahesis.
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些错误的`u''`字符串，这些字符串会导致在Py3.2中无法通过测试。补丁由Arfrever Frehtes Taifersar Arahesis提供。
- en: 'References: [#2980](https://www.sqlalchemy.org/trac/ticket/2980)'
  id: totrans-2644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2980](https://www.sqlalchemy.org/trac/ticket/2980)
- en: misc
  id: totrans-2645
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug in mutable extension as well as [`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified") where the change event would not be
    propagated if the attribute had been reassigned to itself.
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了可变扩展中的错误以及[`flag_modified()`](../orm/session_api.html#sqlalchemy.orm.attributes.flag_modified
    "sqlalchemy.orm.attributes.flag_modified")中的错误，如果属性已重新分配给自身，则更改事件将不会传播。
- en: 'This change is also **backported** to: 0.8.6'
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.6
- en: 'References: [#2997](https://www.sqlalchemy.org/trac/ticket/2997)'
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2997](https://www.sqlalchemy.org/trac/ticket/2997)
- en: '**[bug] [automap] [ext]**'
  id: totrans-2650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [automap] [ext]**'
- en: Added support to automap for the case where a relationship should not be created
    between two classes that are in a joined inheritance relationship, for those foreign
    keys that link the subclass back to the superclass.
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为自动映射添加了支持，用于处理在联合继承关系中不应该创建两个类之间关系的情况，对于那些将子类链接回超类的外键。
- en: 'References: [#3004](https://www.sqlalchemy.org/trac/ticket/3004)'
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3004](https://www.sqlalchemy.org/trac/ticket/3004)
- en: '**[bug] [pool]**'
  id: totrans-2653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: Fixed small issue in [`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") where the current connection to be returned
    might get inadvertently cleaned out during the “cleanup” process. Patch courtesy
    jd23.
  id: totrans-2654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`SingletonThreadPool`](../core/pooling.html#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")中的一个小问题，在“清理”过程中，当前要返回的连接可能会在无意中被清除。补丁由jd23提供。
- en: '**[bug] [ext] [py3k]**'
  id: totrans-2655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [py3k]**'
- en: Fixed bug in association proxy where assigning an empty slice (e.g. `x[:] =
    [...]`) would fail on Py3k.
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关联代理中的错误，其中分配一个空切片（例如`x[:] = [...]`）将在Py3k上失败。
- en: '**[bug] [ext]**'
  id: totrans-2657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed a regression in association proxy caused by [#2810](https://www.sqlalchemy.org/trac/ticket/2810)
    which caused a user-provided “getter” to no longer receive values of `None` when
    fetching scalar values from a target that is non-present. The check for None introduced
    by this change is now moved into the default getter, so a user-provided getter
    will also again receive values of None.
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2810](https://www.sqlalchemy.org/trac/ticket/2810)引起的关联代理中的回归问题，导致当从不存在的目标获取标量值时，用户提供的“getter”不再接收`None`值。此更改引入的None检查现在移至默认getter中，因此用户提供的getter将再次接收None值。
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: 0.9.3
  id: totrans-2660
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.3
- en: 'Released: February 19, 2014'
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年2月19日
- en: orm
  id: totrans-2662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event which allows an event at
    the start of [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers"), as well as `__declare_first__()` hook within
    declarative to complement `__declare_last__()`.
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件，允许在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")开始时触发事件，以及在声明中的`__declare_first__()`钩子以补充`__declare_last__()`。
- en: '**[orm] [bug]**'
  id: totrans-2665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")在查询存在条件时未能一致引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")的错误，当给定的标识已经存在于标识映射中时。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [sqlite]**'
- en: Fixed bug in SQLite “join rewriting” where usage of an exists() construct would
    fail to be rewritten properly, such as when the exists is mapped to a column_property
    in an intricate nested-join scenario. Also fixed a somewhat related issue where
    join rewriting would fail on the columns clause of the SELECT statement if the
    targets were aliased tables, as opposed to individual aliased columns.
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite“连接重写”中的错误，其中exists()构造的使用未能正确重写，例如当exists映射到复杂嵌套连接场景中的column_property时。还修复了一个有些相关的问题，即当目标是别名表而不是单独的别名列时，连接重写会在SELECT语句的columns子句上失败。
- en: 'References: [#2967](https://www.sqlalchemy.org/trac/ticket/2967)'
  id: totrans-2671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2967](https://www.sqlalchemy.org/trac/ticket/2967)
- en: '**[orm] [bug]**'
  id: totrans-2672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed an 0.9 regression where ORM instance or mapper events applied to a base
    class such as a declarative base with the propagate=True flag would fail to apply
    to existing mapped classes which also used inheritance due to an assertion. Additionally,
    repaired an attribute error which could occur during removal of such an event,
    depending on how it was first assigned.
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中的一个回归问题，即应用于基类（例如具有propagate=True标志的声明基类）的ORM实例或映射器事件未能应用于由于断言而失败的现有映射类。此外，修复了在删除此类事件时可能发生的属性错误，具体取决于首次分配方式。
- en: 'References: [#2949](https://www.sqlalchemy.org/trac/ticket/2949)'
  id: totrans-2674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2949](https://www.sqlalchemy.org/trac/ticket/2949)
- en: '**[orm] [bug]**'
  id: totrans-2675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Improved the initialization logic of composite attributes such that calling
    `MyClass.attribute` will not require that the configure mappers step has occurred,
    e.g. it will just work without throwing any error.
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了复合属性的初始化逻辑，使得调用`MyClass.attribute`不需要配置映射器步骤已发生，例如，它将正常工作而不会引发任何错误。
- en: 'References: [#2935](https://www.sqlalchemy.org/trac/ticket/2935)'
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2935](https://www.sqlalchemy.org/trac/ticket/2935)
- en: '**[orm] [bug]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: More issues with [ticket:2932] first resolved in 0.9.2 where using a column
    key of the form `<tablename>_<columnname>` matching that of an aliased column
    in the text would still not match at the ORM level, which is ultimately due to
    a core column-matching issue. Additional rules have been added so that the column
    `_label` is taken into account when working with a `TextAsFrom` construct or with
    literal columns.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于[ticket:2932]的问题首次在0.9.2中解决，其中使用形式为`<tablename>_<columnname>`的列键与文本中别名列的匹配仍然无法在ORM级别匹配，这最终是由于核心列匹配问题。已添加额外规则，以便在使用`TextAsFrom`构造或文字列时考虑列`_label`。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: orm declarative
  id: totrans-2681
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明] [错误]**'
- en: Fixed bug where [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") would fail to be fully usable
    within declarative relationship configuration, as its string classname would not
    be available in the registry of classnames at mapper configuration time. The class
    now explicitly adds itself to the class registry, and additionally both [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") as well as [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") set themselves up *before* mappers
    are configured within the [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") setup, using the new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event.
  id: totrans-2683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")在声明关系配置中无法完全可用的错误，因为其字符串类名在映射器配置时不可用。该类现在显式将自己添加到类注册表中，并且[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")以及[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")都在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")设置中在配置映射器之前使用新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件设置自己。
- en: 'References: [#2950](https://www.sqlalchemy.org/trac/ticket/2950)'
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2950](https://www.sqlalchemy.org/trac/ticket/2950)
- en: examples
  id: totrans-2685
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-2686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [特性]**'
- en: Added optional “changed” column to the versioned rows example, as well as support
    for when the versioned [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has an explicit [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument. Pull request courtesy jplaverdure.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本化行示例中添加了可选的“changed”列，以及当版本化的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")具有显式[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数时的支持。感谢jplaverdure的拉取请求。
- en: engine
  id: totrans-2688
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [pool]**'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [池]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键回归，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，从而在即使在最小并发情况下也会导致方言配置错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-2693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")时传入空列表或元组会引发IndexError的错误。现在会生成一个空的插入构造，就像使用空字典一样。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-2698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的 bug，如果错误地传递了包含 `__getitem__()`
    方法的列表达式的比较器，例如使用 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型的列，将进入无限循环。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯到**：0.8.5
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-2702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in new “naming convention” feature where conventions would
    fail if the referred table in a foreign key contained a schema name. Pull request
    courtesy Thomas Farvour.
  id: totrans-2703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“命名约定”功能中的回归，在外键中的引用表包含模式名称时会导致约定失败的问题。感谢 Thomas Farvour 提供的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-2704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where so-called “literal render” of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs would fail if the bind were
    constructed with a callable, rather than a direct value. This prevented ORM expressions
    from being rendered with the “literal_binds” compiler flag.
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了所谓的“字面渲染” [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造的 bug，如果绑定是用可调用对象而不是直接值构造的，则会失败。这阻止了
    ORM 表达式使用“literal_binds”编译器标志进行渲染。
- en: postgresql
  id: totrans-2706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added the [`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type") convenience accessor onto the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type. Pull request courtesy Alexey Terentev.
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") 类型上添加了 [`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type") 方便访问器。感谢 Alexey Terentev 提供的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-2709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 psycopg2 断开连接检测添加了一个额外的消息，“无法发送数据到服务器”，这补充了现有的“无法从服务器接收数据”的消息，已被用户观察到。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯到**：0.8.5
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-2713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-2714
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 改进了对非常旧（8.1 版本之前）版本的 PostgreSQL 以及可能的其他 PG 引擎（假设 Redshift 报告的版本 < 8.1）的 PostgreSQL
    反射行为的支持。关于“索引”以及“主键”的查询依赖于检查所谓的“int2vector”数据类型，该类型在 8.1 之前拒绝强制转换为数组，导致查询中使用的“ANY()”运算符失败。通过广泛搜索，找到了一个非常糟糕但是被
    PG 核心开发者推荐使用的查询，用于当 PG 版本 < 8.1 时，索引和主键约束反射现在可以在这些版本上正常工作。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯到**：0.8.5
- en: '**[postgresql] [bug]**'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修订了这个非常古老的问题，其中 PostgreSQL 的“获取主键”反射查询已更新，以考虑重命名的主键约束；新的查询在非常旧的 PostgreSQL 版本（如版本
    7）上失败，因此在检测到 server_version_info < (8, 0) 的情况下，在这些情况下恢复旧的查询。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯到**：0.8.5
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql] [bug]**'
  id: totrans-2720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added server version detection to the newly added dialect startup query for
    “show standard_conforming_strings”; as this variable was added as of PG 8.2, we
    skip the query for PG versions who report a version string earlier than that.
  id: totrans-2721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于新添加的方言启动查询“show standard_conforming_strings”添加了服务器版本检测；由于此变量是从 PG 8.2 版本开始添加的，我们会跳过对于报告早于该版本的
    PG 版本的查询。
- en: 'References: [#2946](https://www.sqlalchemy.org/trac/ticket/2946)'
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2946](https://www.sqlalchemy.org/trac/ticket/2946)
- en: mysql
  id: totrans-2723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MySQL 特定的 [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括分数秒的支持；还为 [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") 添加了分数秒的支持。尽管 DBAPI 支持有限，但 MySQL Connector/Python
    已知支持分数秒。补丁由 Geert JM Vanderkelen 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-2728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 `PARTITION BY` 和 `PARTITIONS` MySQL 表关键字的支持，指定为 `mysql_partition_by='value'`
    和 `mysql_partitions='value'` 到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。感谢 Marcus McCurdy 的拉取请求。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 阻止了基于 MySQLdb 的方言（例如 pymysql）在 Py3K 中工作，因为“connection charset”的检查会由于
    Py3K 更严格的值比较规则而失败。在这种情况下，所调用的方法根本没有考虑数据库版本，因为服务器版本在那时仍然为 None，因此该方法已经简化为依赖于 connection.character_set_name()。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug] [cymysql]**'
  id: totrans-2736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [cymysql]**'
- en: Fixed bug in cymysql dialect where a version string such as `'33a-MariaDB'`
    would fail to parse properly. Pull request courtesy Matt Schmidt.
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cymysql 方言中的一个 bug，即像 `'33a-MariaDB'` 这样的版本字符串无法正确解析。感谢 Matt Schmidt 的拉取请求。
- en: 'References: [#2934](https://www.sqlalchemy.org/trac/ticket/2934)'
  id: totrans-2738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2934](https://www.sqlalchemy.org/trac/ticket/2934)
- en: sqlite
  id: totrans-2739
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The SQLite dialect will now skip unsupported arguments when reflecting types;
    such as if it encounters a string like `INTEGER(5)`, the [`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") type will be instantiated without the “5” being included,
    based on detecting a `TypeError` on the first attempt.
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在在反射类型时将跳过不支持的参数；例如，如果遇到像 `INTEGER(5)` 这样的字符串，将实例化 [`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") 类型而不包含“5”，基于在第一次尝试时检测到 `TypeError`。
- en: '**[sqlite] [bug]**'
  id: totrans-2742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Support has been added to SQLite type reflection to fully support the “type
    affinity” contract specified at [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html).
    In this scheme, keywords like `INT`, `CHAR`, `BLOB` or `REAL` located in the type
    name generically associate the type with one of five affinities. Pull request
    courtesy Erich Blume.
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQLite 类型反射添加了对完全支持在 [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html)
    指定的“类型亲和性”协议的支持。在这个方案中，类型名称中的关键字如 `INT`、`CHAR`、`BLOB` 或 `REAL` 通常将类型与五种亲和性之一关联起来。感谢
    Erich Blume 的拉取请求。
- en: See also
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Type Reflection](../dialects/sqlite.html#sqlite-type-reflection)'
  id: totrans-2745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[类型反射](../dialects/sqlite.html#sqlite-type-reflection)'
- en: misc
  id: totrans-2746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") class of the new automap extension would
    fail if classes were pre-arranged in single or potentially joined inheritance
    patterns. The repaired joined inheritance issue could also potentially apply when
    using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") as well.
  id: totrans-2748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新automap扩展的[`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase")类在类被预先排列在单个或潜在的连接继承模式中时会失败的错误。修复的连接继承问题也可能在使用[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")时应用。
- en: orm
  id: totrans-2749
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event which allows an event at
    the start of [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers"), as well as `__declare_first__()` hook within
    declarative to complement `__declare_last__()`.
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件，允许在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")开始时触发事件，以及在声明性中补充`__declare_last__()`的`__declare_first__()`钩子。
- en: '**[orm] [bug]**'
  id: totrans-2752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") would fail to consistently raise the [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") that invokes when called on a query with
    existing criterion, when the given identity is already present in the identity
    map.
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")在查询中存在现有条件时无法一致引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")的错误，当给定的标识已经存在于标识映射中时。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2951](https://www.sqlalchemy.org/trac/ticket/2951)'
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2951](https://www.sqlalchemy.org/trac/ticket/2951)
- en: '**[orm] [bug] [sqlite]**'
  id: totrans-2756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sqlite]**'
- en: Fixed bug in SQLite “join rewriting” where usage of an exists() construct would
    fail to be rewritten properly, such as when the exists is mapped to a column_property
    in an intricate nested-join scenario. Also fixed a somewhat related issue where
    join rewriting would fail on the columns clause of the SELECT statement if the
    targets were aliased tables, as opposed to individual aliased columns.
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite“连接重写”中的错误，其中exists()构造的使用未能正确重写，例如，当exists映射到复杂嵌套连接场景中的column_property时。还修复了一个有些相关的问题，即当目标是别名表而不是单独的别名列时，连接重写会在SELECT语句的columns子句上失败。
- en: 'References: [#2967](https://www.sqlalchemy.org/trac/ticket/2967)'
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2967](https://www.sqlalchemy.org/trac/ticket/2967)
- en: '**[orm] [bug]**'
  id: totrans-2759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an 0.9 regression where ORM instance or mapper events applied to a base
    class such as a declarative base with the propagate=True flag would fail to apply
    to existing mapped classes which also used inheritance due to an assertion. Additionally,
    repaired an attribute error which could occur during removal of such an event,
    depending on how it was first assigned.
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中的一个回归，即应用于基类（例如具有propagate=True标志的声明性基类）的ORM实例或映射器事件将无法应用于已存在的使用继承的映射类，因为断言失败。此外，修复了在删除此类事件时可能发生的属性错误，具体取决于首次分配方式。
- en: 'References: [#2949](https://www.sqlalchemy.org/trac/ticket/2949)'
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2949](https://www.sqlalchemy.org/trac/ticket/2949)
- en: '**[orm] [bug]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the initialization logic of composite attributes such that calling
    `MyClass.attribute` will not require that the configure mappers step has occurred,
    e.g. it will just work without throwing any error.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了复合属性的初始化逻辑，使调用`MyClass.attribute`不需要配置映射器步骤，例如，它将正常工作而不会抛出任何错误。
- en: 'References: [#2935](https://www.sqlalchemy.org/trac/ticket/2935)'
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2935](https://www.sqlalchemy.org/trac/ticket/2935)
- en: '**[orm] [bug]**'
  id: totrans-2765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: More issues with [ticket:2932] first resolved in 0.9.2 where using a column
    key of the form `<tablename>_<columnname>` matching that of an aliased column
    in the text would still not match at the ORM level, which is ultimately due to
    a core column-matching issue. Additional rules have been added so that the column
    `_label` is taken into account when working with a `TextAsFrom` construct or with
    literal columns.
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.9.2中首次解决的更多问题，其中使用形式为`<tablename>_<columnname>`的列键与文本中的别名列匹配仍然不会在ORM级别匹配，这最终是由于核心列匹配问题。已添加额外规则，以便在使用`TextAsFrom`构造或文字列时考虑列`_label`。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: orm declarative
  id: totrans-2768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-2769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug where [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") would fail to be fully usable
    within declarative relationship configuration, as its string classname would not
    be available in the registry of classnames at mapper configuration time. The class
    now explicitly adds itself to the class registry, and additionally both [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") as well as [`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase") set themselves up *before* mappers
    are configured within the [`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers") setup, using the new [`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured") event.
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")在声明关系配置中无法完全可用的错误，因为其字符串类名在映射器配置时不可用。该类现在明确将自己添加到类注册表中，并且[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")以及[`ConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.ConcreteBase
    "sqlalchemy.ext.declarative.ConcreteBase")在映射器配置之前*之前*设置自己，在[`configure_mappers()`](../orm/mapping_api.html#sqlalchemy.orm.configure_mappers
    "sqlalchemy.orm.configure_mappers")设置中，使用新的[`MapperEvents.before_configured()`](../orm/events.html#sqlalchemy.orm.MapperEvents.before_configured
    "sqlalchemy.orm.MapperEvents.before_configured")事件。
- en: 'References: [#2950](https://www.sqlalchemy.org/trac/ticket/2950)'
  id: totrans-2771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2950](https://www.sqlalchemy.org/trac/ticket/2950)
- en: examples
  id: totrans-2772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-2773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Added optional “changed” column to the versioned rows example, as well as support
    for when the versioned [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") has an explicit [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table") argument. Pull request courtesy jplaverdure.
  id: totrans-2774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本化行示例中添加了可选的“changed”列，以及当版本化[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")具有显式[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数时的支持。拉取��求由jplaverdure提供。
- en: engine
  id: totrans-2775
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug] [pool]**'
  id: totrans-2776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed a critical regression caused by [#2880](https://www.sqlalchemy.org/trac/ticket/2880)
    where the newly concurrent ability to return connections from the pool means that
    the “first_connect” event is now no longer synchronized either, thus leading to
    dialect mis-configurations under even minimal concurrency situations.
  id: totrans-2777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2880](https://www.sqlalchemy.org/trac/ticket/2880)引起的关键回归，其中新的并发能力从池中返回连接意味着“first_connect”事件现在也不再同步，从而在即使是最小并发情况下也会导致方言配置错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880), [#2964](https://www.sqlalchemy.org/trac/ticket/2964)'
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)，[#2964](https://www.sqlalchemy.org/trac/ticket/2964)
- en: sql
  id: totrans-2780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where calling [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") with an empty list or tuple would raise
    an IndexError. It now produces an empty insert construct as would be the case
    with an empty dictionary.
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了调用带有空列表或元组的[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")会引发IndexError的错误。现在它会生成一个空的插入构造，就像使用空字典的情况一样。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2944](https://www.sqlalchemy.org/trac/ticket/2944)'
  id: totrans-2784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2944](https://www.sqlalchemy.org/trac/ticket/2944)
- en: '**[sql] [bug]**'
  id: totrans-2785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") would go into an endless loop
    if erroneously passed a column expression whose comparator included the `__getitem__()`
    method, such as a column that uses the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type.
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")会陷入无限循环的错误，如果错误地传递了一个包含`__getitem__()`方法的列表达式的比较器，比如一个使用[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型的列。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：0.8.5
- en: 'References: [#2957](https://www.sqlalchemy.org/trac/ticket/2957)'
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2957](https://www.sqlalchemy.org/trac/ticket/2957)
- en: '**[sql] [bug]**'
  id: totrans-2789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression in new “naming convention” feature where conventions would
    fail if the referred table in a foreign key contained a schema name. Pull request
    courtesy Thomas Farvour.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“命名约定”功能中的回归错误，在外键中引用的表包含模式名称时，约定会失败。感谢 Thomas Farvour 的拉取请求。
- en: '**[sql] [bug]**'
  id: totrans-2791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where so-called “literal render” of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs would fail if the bind were
    constructed with a callable, rather than a direct value. This prevented ORM expressions
    from being rendered with the “literal_binds” compiler flag.
  id: totrans-2792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了所谓的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造的“字面渲染”失败的错误，如果绑定是用可调用方式构造的，而不是直接值。这会阻止
    ORM 表达式使用“literal_binds”编译器标志进行渲染。
- en: postgresql
  id: totrans-2793
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added the [`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type") convenience accessor onto the [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") type. Pull request courtesy Alexey Terentev.
  id: totrans-2795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")类型上添加了[`TypeEngine.python_type`](../core/type_api.html#sqlalchemy.types.TypeEngine.python_type
    "sqlalchemy.types.TypeEngine.python_type")的便利访问器。感谢 Alexey Terentev 的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-2796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added an additional message to psycopg2 disconnect detection, “could not send
    data to server”, which complements the existing “could not receive data from server”
    and has been observed by users.
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 psycopg2 断开连接检测的额外消息，“无法发送数据到服务器”，这补充了现有的“无法从服务器接收数据”并被用户观察到。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：0.8.5
- en: 'References: [#2936](https://www.sqlalchemy.org/trac/ticket/2936)'
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2936](https://www.sqlalchemy.org/trac/ticket/2936)
- en: '**[postgresql] [bug]**'
  id: totrans-2800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Support has been improved for PostgreSQL reflection behavior on very old (pre
    8.1) versions of PostgreSQL, and potentially other PG engines such as Redshift
    (assuming Redshift reports the version as < 8.1). The query for “indexes” as well
    as “primary keys” relies upon inspecting a so-called “int2vector” datatype, which
    refuses to coerce to an array prior to 8.1 causing failures regarding the “ANY()”
    operator used in the query. Extensive googling has located the very hacky, but
    recommended-by-PG-core-developer query to use when PG version < 8.1 is in use,
    so index and primary key constraint reflection now work on these versions.
  id: totrans-2801
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于非常旧的（8.1 之前）PostgreSQL 版本以及可能的其他 PG 引擎（假设 Redshift 报告的版本为 < 8.1），改进了对 PostgreSQL
    反射行为的支持。关于“索引”和“主键”的查询依赖于检查所谓的“int2vector”数据类型，它在 8.1 之前拒绝强制转换为数组，导致查询中使用的“ANY()”运算符失败。通过广泛的搜索，找到了非常笨拙但由
    PG 核心开发人员推荐使用的查询，用于当 PG 版本 < 8.1 时，索引和主键约束反射现在在这些版本上工作。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：0.8.5
- en: '**[postgresql] [bug]**'
  id: totrans-2803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Revised this very old issue where the PostgreSQL “get primary key” reflection
    query were updated to take into account primary key constraints that were renamed;
    the newer query fails on very old versions of PostgreSQL such as version 7, so
    the old query is restored in those cases when server_version_info < (8, 0) is
    detected.
  id: totrans-2804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了这个非常古老的问题，即 PostgreSQL “获取主键”反射查询已更新以考虑已重命名的主键约束；新的查询在旧版本的 PostgreSQL 中（如版本
    7）失败，因此在检测到 server_version_info < (8, 0) 时，恢复了旧的查询。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：0.8.5
- en: 'References: [#2291](https://www.sqlalchemy.org/trac/ticket/2291)'
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2291](https://www.sqlalchemy.org/trac/ticket/2291)
- en: '**[postgresql] [bug]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added server version detection to the newly added dialect startup query for
    “show standard_conforming_strings”; as this variable was added as of PG 8.2, we
    skip the query for PG versions who report a version string earlier than that.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新添加的方言启动查询中添加了服务器版本检测，用于“show standard_conforming_strings”；由于此变量是从 PG 8.2 开始添加的，我们会跳过报告版本字符串早于此的
    PG 版本的查询。
- en: 'References: [#2946](https://www.sqlalchemy.org/trac/ticket/2946)'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2946](https://www.sqlalchemy.org/trac/ticket/2946)
- en: mysql
  id: totrans-2810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: Added new MySQL-specific [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME") which includes fractional seconds support;
    also added fractional seconds support to [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP"). DBAPI support is limited, though fractional
    seconds are known to be supported by MySQL Connector/Python. Patch courtesy Geert
    JM Vanderkelen.
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 MySQL 特定的 [`DATETIME`](../dialects/mysql.html#sqlalchemy.dialects.mysql.DATETIME
    "sqlalchemy.dialects.mysql.DATETIME")，其中包括分数秒支持；还为 [`TIMESTAMP`](../dialects/mysql.html#sqlalchemy.dialects.mysql.TIMESTAMP
    "sqlalchemy.dialects.mysql.TIMESTAMP") 添加了分数秒支持。尽管 DBAPI 支持有限，但分数秒已知受到 MySQL Connector/Python
    的支持。补丁由 Geert JM Vanderkelen 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2941](https://www.sqlalchemy.org/trac/ticket/2941)'
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2941](https://www.sqlalchemy.org/trac/ticket/2941)
- en: '**[mysql] [bug]**'
  id: totrans-2815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for the `PARTITION BY` and `PARTITIONS` MySQL table keywords,
    specified as `mysql_partition_by='value'` and `mysql_partitions='value'` to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Pull request courtesy Marcus McCurdy.
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 `PARTITION BY` 和 `PARTITIONS` MySQL 表关键字的支持，指定为 `mysql_partition_by='value'`
    和 `mysql_partitions='value'` 到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。拉取请求由 Marcus McCurdy 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2966](https://www.sqlalchemy.org/trac/ticket/2966)'
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2966](https://www.sqlalchemy.org/trac/ticket/2966)
- en: '**[mysql] [bug]**'
  id: totrans-2819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug which prevented MySQLdb-based dialects (e.g. pymysql) from working
    in Py3K, where a check for “connection charset” would fail due to Py3K’s more
    strict value comparison rules. The call in question wasn’t taking the database
    version into account in any case as the server version was still None at that
    point, so the method overall has been simplified to rely upon connection.character_set_name().
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止基于 MySQLdb 的方言（例如 pymysql）在 Py3K 中工作的错误，其中“连接字符集”检查会由于 Py3K 更严格的值比较规则而失败。在任何情况下，所涉及的调用都没有考虑数据库版本，因为服务器版本在那时仍然为
    None，因此该方法已经简化为依赖于 connection.character_set_name()。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: 'References: [#2933](https://www.sqlalchemy.org/trac/ticket/2933)'
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2933](https://www.sqlalchemy.org/trac/ticket/2933)
- en: '**[mysql] [bug] [cymysql]**'
  id: totrans-2823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [cymysql]**'
- en: Fixed bug in cymysql dialect where a version string such as `'33a-MariaDB'`
    would fail to parse properly. Pull request courtesy Matt Schmidt.
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cymysql 方言中的错误，其中版本字符串如 `'33a-MariaDB'` 无法��确解析。拉取请求由 Matt Schmidt 提供。
- en: 'References: [#2934](https://www.sqlalchemy.org/trac/ticket/2934)'
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2934](https://www.sqlalchemy.org/trac/ticket/2934)
- en: sqlite
  id: totrans-2826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The SQLite dialect will now skip unsupported arguments when reflecting types;
    such as if it encounters a string like `INTEGER(5)`, the [`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") type will be instantiated without the “5” being included,
    based on detecting a `TypeError` on the first attempt.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在在反射类型时会跳过不支持的参数；例如，如果遇到类似 `INTEGER(5)` 的字符串，[`INTEGER`](../core/type_basics.html#sqlalchemy.types.INTEGER
    "sqlalchemy.types.INTEGER") 类型将在实例化时不包含“5”，基于在第一次尝试时检测到 `TypeError`。
- en: '**[sqlite] [bug]**'
  id: totrans-2829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Support has been added to SQLite type reflection to fully support the “type
    affinity” contract specified at [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html).
    In this scheme, keywords like `INT`, `CHAR`, `BLOB` or `REAL` located in the type
    name generically associate the type with one of five affinities. Pull request
    courtesy Erich Blume.
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对 SQLite 类型反射的支持，以完全支持在 [https://www.sqlite.org/datatype3.html](https://www.sqlite.org/datatype3.html)
    中指定的“类型亲和性”协议。在此方案中，类型名称中的关键字如 `INT`、`CHAR`、`BLOB` 或 `REAL` 通常将类型与五种亲和性之一关联起来。拉取请求由
    Erich Blume 提供。
- en: See also
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Type Reflection](../dialects/sqlite.html#sqlite-type-reflection)'
  id: totrans-2832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[类型反射](../dialects/sqlite.html#sqlite-type-reflection)'
- en: misc
  id: totrans-2833
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-2834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug where the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") class of the new automap extension would
    fail if classes were pre-arranged in single or potentially joined inheritance
    patterns. The repaired joined inheritance issue could also potentially apply when
    using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") as well.
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新自动映射扩展的[`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase")类在类被预先排列在单个或潜在的联合继承模式中时会失败的错误。修复的联合继承问题也可能适用于使用[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")时。
- en: 0.9.2
  id: totrans-2836
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.2
- en: 'Released: February 2, 2014'
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年2月2日
- en: orm
  id: totrans-2838
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new parameter [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op"). This flag allows a custom op from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") to be considered as a “comparison” operator,
    thus usable for custom [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") conditions.
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新参数[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")。此标志允许来自[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")的自定义操作被视为“比较”运算符，因此可用于自定义[`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件。
- en: See also
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '**[orm] [feature]**'
  id: totrans-2843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Support is improved for supplying a [`join()`](../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") construct as the target of [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") for the purposes of creating very complex [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") join conditions. The change includes adjustments
    to query joining, joined eager loading to not render a SELECT subquery, changes
    to lazy loading such that the “secondary” target is properly included in the SELECT,
    and changes to declarative to better support specification of a join() object
    with classes as targets.
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了为[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的目标提供[`join()`](../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join")构造的支持，以便创建非常复杂的[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")连接条件。此更改包括对查询连接、连接的急加载进行调整，以避免渲染SELECT子查询，对延迟加载进行更改，以便正确包含“次要”目标在SELECT中，并对声明性进行更改以更好地支持将join()对象与类作为目标的规范。
- en: The new use case is somewhat experimental, but a new documentation section has
    been added.
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新用例有些实验性，但已添加了新的文档部分。
- en: See also
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composite “Secondary” Joins](../orm/join_conditions.html#composite-secondary-join)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[复合“次要”连接](../orm/join_conditions.html#composite-secondary-join)'
- en: '**[orm] [bug]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当将迭代器对象传递给[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")或类似函数时出现的错误消息，该错误会导致字符串格式化时无法呈现错误。感谢 Kyle Stark
    提交的 Pullreq。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.5
- en: '**[orm] [bug]**'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new `TextAsFrom` construct where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")- oriented row lookups were not matching up to the
    ad-hoc [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects that `TextAsFrom` generates,
    thereby making it not usable as a target in [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement"). Also fixed [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement") mechanics to not mistake a `TextAsFrom`
    for a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct. This bug is also an 0.9 regression as the [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method is called to accommodate
    the [`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text") argument.
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的`TextAsFrom`结构中修复了一个错误，其中[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")导向的行查找与`TextAsFrom`生成的临时[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")对象不匹配，因此在[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")中无法使用。还修复了[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")的机制，以防将`TextAsFrom`错误地误认为是[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造。此错误也是0.9的回归，因为需要调用[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法来适应[`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text")参数。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: '**[orm] [bug]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new directive used within the scope of an attribute “set” operation
    to disable autoflush, in the case that the attribute needs to lazy-load the “old”
    value, as in when replacing one-to-one values or some kinds of many-to-one. A
    flush at this point otherwise occurs at the point that the attribute is None and
    can cause NULL violations.
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在属性“set”操作范围内添加了一个新指令，用于禁用自动刷新，在属性需要延迟加载“旧”值的情况下使用，例如替换一对一值或某些类型的一对多值。在此时刷新否则会在属性为None时发生，并可能导致NULL违规。
- en: 'References: [#2921](https://www.sqlalchemy.org/trac/ticket/2921)'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2921](https://www.sqlalchemy.org/trac/ticket/2921)
- en: '**[orm] [bug]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an 0.9 regression where the automatic aliasing applied by [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") and in other situations where selects or joins were aliased
    (such as joined table inheritance) could fail if a user-defined [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") subclass were used in the expression. In this case,
    the subclass would fail to propagate ORM-specific “annotations” along needed by
    the adaptation. The “expression annotations” system has been corrected to account
    for this case.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9中的一个回归，即[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")自动别名和在其他情况下别名（例如联接表继承）可能会失败，如果表达式中使用了用户定义的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")子类。在这种情况下，子类将无法传播ORM特定的“注解”，这些注解由适配器所需。已对“表达式注解”系统进行了修正，以解决此问题。
- en: 'References: [#2918](https://www.sqlalchemy.org/trac/ticket/2918)'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2918](https://www.sqlalchemy.org/trac/ticket/2918)
- en: '**[orm] [bug]**'
  id: totrans-2860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug involving the new flattened JOIN structures which are used with
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") (thereby causing a regression in joined eager loading)
    as well as [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    in conjunction with the `flat=True` flag and joined-table inheritance; basically
    multiple joins across a “parent JOIN sub” entity using different paths to get
    to a target class wouldn’t form the correct ON conditions. An adjustment / simplification
    made in the mechanics of figuring out the “left side” of the join in the case
    of an aliased, joined-inh class repairs the issue.
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关于新的扁平化JOIN结构的错误，该结构与[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")一起使用（从而导致连接贪婪加载中的回归），以及与`flat=True`标志和联接表继承一起使用的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")；基本上，通过不同路径跨越“父JOIN子”实体进行多次连接以到达目标类的多个连接不会形成正确的ON条件。在处理aliased、joined-inh类的“左侧”连接的机制中进行了调整/简化，修复了此问题。
- en: 'References: [#2908](https://www.sqlalchemy.org/trac/ticket/2908)'
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2908](https://www.sqlalchemy.org/trac/ticket/2908)
- en: examples
  id: totrans-2863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Added a tweak to the “history_meta” example where the check for “history” on
    a relationship-bound attribute will now no longer emit any SQL if the relationship
    is unloaded.
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“history_meta”示例进行了微调，现在在关系绑定属性上检查“history”时，如果关系未加载，则不会再发出任何SQL。
- en: engine
  id: totrans-2866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature] [pool]**'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性] [池]**'
- en: Added a new pool event [`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate"). Called when a DBAPI connection is
    to be marked as “invalidated” and discarded from the pool.
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的池事件[`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")。当要将DBAPI连接标记为“无效”并从池中丢弃时调用。
- en: sql
  id: totrans-2869
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added [`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect") to support dialect-level reflection options
    for all [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects reflected.
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect")，以支持为所有反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象设置方言级别的反射选项。
- en: '**[sql] [feature]**'
  id: totrans-2872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added a new feature which allows automated naming conventions to be applied
    to [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects. Based on a recipe in the wiki, the new feature uses schema-events to
    set up names as various schema objects are associated with each other. The events
    then expose a configuration system through a new argument [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This system allows production of both simple and
    custom naming schemes for constraints and indexes on a per-[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") basis.
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能，允许自动命名约定应用于[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象。基于维基中的一个示例，新功能使用模式事件来设置名称，因为各种模式对象相互关联。然后，事件通过一个新参数[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")公开一个配置系统。该系统允许在每个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")基础上生成简单和自定义的约束和索引命名方案。
- en: See also
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)'
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](../core/constraints.html#constraint-naming-conventions)'
- en: 'References: [#2923](https://www.sqlalchemy.org/trac/ticket/2923)'
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2923](https://www.sqlalchemy.org/trac/ticket/2923)
- en: '**[sql] [feature]**'
  id: totrans-2877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Options can now be specified on a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object independently of the specification
    of columns in the table with the `primary_key=True` flag; use a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object with no columns in it to achieve
    this result.
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象上独立于使用`primary_key=True`标志在表中指定列的情况下指定选项；使用一个不包含列的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象即可实现此结果。
- en: Previously, an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") would have the effect of those columns
    marked as `primary_key=True` being ignored; since this is no longer the case,
    the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") will now assert that either one style
    or the other is used to specify the columns, or if both are present, that the
    column lists match exactly. If an inconsistent set of columns in the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") and within the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") marked as `primary_key=True` are present, a warning
    is emitted, and the list of columns is taken only from the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") alone as was the case in previous releases.
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前，显式的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")会导致将标记为`primary_key=True`的列被忽略；由于不再这样，[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")现在将断言使用其中一种样式来指定列，或者如果两者都存在，则列列表必须完全匹配。如果在[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")和在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中标记为`primary_key=True`的不一致列集存在，则会发出警告，并且列列表仅从[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中获取，就像在先前的版本中一样。
- en: See also
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")'
  id: totrans-2881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") '
- en: 'References: [#2910](https://www.sqlalchemy.org/trac/ticket/2910)'
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2910](https://www.sqlalchemy.org/trac/ticket/2910)
- en: '**[sql] [feature]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The system by which schema constructs and certain SQL constructs accept dialect-specific
    keyword arguments has been enhanced. This system includes commonly the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") constructs, which accept a wide variety of dialect-specific
    arguments such as `mysql_engine` and `postgresql_where`, as well as the constructs
    [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), and also newly added kwarg capability to
    [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"). The change is that participating dialects can
    now specify acceptable argument lists for these constructs, allowing an argument
    error to be raised if an invalid keyword is specified for a particular dialect.
    If the dialect portion of the keyword is unrecognized, a warning is emitted only;
    while the system will actually make use of setuptools entrypoints in order to
    locate non-local dialects, the use case where certain dialect-specific arguments
    are used in an environment where that third-party dialect is uninstalled remains
    supported. Dialects also have to explicitly opt-in to this system, so that external
    dialects which aren’t making use of this system will remain unaffected.
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 架构构造和某些 SQL 构造接受特定方言关键字参数的系统已得到增强。这个系统通常包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，它们接受各种各样的特定方言参数，如`mysql_engine`和`postgresql_where`，以及构造[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")和[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")，还新增了对[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")的关键字参数功能。改变在于参与的方言现在可以为这些构造指定可接受的参数列表，允许在为特定方言指定无效关键字时引发参数错误。如果关键字的方言部分未被识别，只会发出警告；虽然系统实际上会利用
    setuptools 入口点来定位非本地方言，但在未安装第三方方言的环境中使用某些特定方言参数的用例仍然受支持。方言还必须明确选择加入这个系统，因此不使用这个系统的外部方言将不受影响。
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866)'
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866)
- en: '**[sql] [bug]**'
  id: totrans-2886
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") has been adjusted such that the schema target
    of a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    will not be changed unless that schema matches that of the parent table. That
    is, if a table “schema_a.user” has a foreign key to “schema_b.order.id”, the “schema_b”
    target will be maintained whether or not the “schema” argument is passed to [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata"). However if a table “schema_a.user” refers
    to “schema_a.order.id”, the presence of “schema_a” will be updated on both the
    parent and referred tables. This is a behavioral change hence isn’t likely to
    be backported to 0.8; it is assumed that the previous behavior is pretty buggy
    however and that it’s unlikely anyone was relying upon it.
  id: totrans-2887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") 的行为已经调整，以便当[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")的模式目标不匹配父表的模式时，不会更改。也就是说，如果一个表“schema_a.user”有一个指向“schema_b.order.id”的外键，无论是否将“schema”参数传递给[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")，都将保持“schema_b”目标。但是，如果一个表“schema_a.user”引用“schema_a.order.id”，则“schema_a”将在父表和被引用表上更新。这是一个行为变更，因此不太可能被回溯到0.8；可以假设以前的行为相当错误，而且很少有人依赖它。'
- en: Additionally, a new parameter has been added [`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata"). This refers to a callable function which
    will be used to determine the new referred schema for any [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") encountered in the tometadata operation.
    This callable can be used to revert to the previous behavior or to customize how
    referred schemas are treated on a per-constraint basis.
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，新增了一个参数[`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata")。这是一个可调用函数，用于确定在 tometadata 操作中遇到的任何[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的新引用模式。这个可调用函数可以用于恢复到以前的行为，或者根据每个约束自定义如何处理引用模式。
- en: 'References: [#2913](https://www.sqlalchemy.org/trac/ticket/2913)'
  id: totrans-2889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2913](https://www.sqlalchemy.org/trac/ticket/2913)
- en: '**[sql] [bug]**'
  id: totrans-2890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby binary type would fail in some cases if used with a “test”
    dialect, such as a DefaultDialect or other dialect with no DBAPI.
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些情况下，如果与“test”方言（例如DefaultDialect或其他没有DBAPI的方言）一起使用二进制类型会失败的bug。
- en: '**[sql] [bug] [py3k]**'
  id: totrans-2892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Fixed bug where “literal binds” wouldn’t work with a bound parameter that’s
    a binary type. A similar, but different, issue is fixed in 0.8.
  id: totrans-2893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“literal binds”无法与绑定参数是二进制类型的bug。在0.8中修复了类似但不同的问题。
- en: '**[sql] [bug]**'
  id: totrans-2894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression whereby the “annotation” system used by the ORM was leaking
    into the names used by standard functions in `sqlalchemy.sql.functions`, such
    as `func.coalesce()` and `func.max()`. Using these functions in ORM attributes
    and thus producing annotated versions of them could corrupt the actual function
    name rendered in the SQL.
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM使用的“注释”系统泄漏到`sqlalchemy.sql.functions`中标准函数（如`func.coalesce()`和`func.max()`）使用的名称中的回归问题。在ORM属性中使用这些函数，从而生成它们的带注释版本，可能会破坏在SQL中呈现的实际函数名称。
- en: 'References: [#2927](https://www.sqlalchemy.org/trac/ticket/2927)'
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2927](https://www.sqlalchemy.org/trac/ticket/2927)
- en: '**[sql] [bug]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9 regression where the new sortable support for `RowProxy` would lead
    to `TypeError` when compared to non-tuple types as it attempted to apply tuple()
    to the “other” object unconditionally. The full range of Python comparison operators
    have now been implemented on `RowProxy`, using an approach that guarantees a comparison
    system that is equivalent to that of a tuple, and the “other” object is only coerced
    if it’s an instance of RowProxy.
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中新的`RowProxy`可排序支持导致与非元组类型比较时会导致`TypeError`的回归问题，因为它试图无条件地应用tuple()到“other”对象。现在在`RowProxy`上实现了完整的Python比较运算符范围，使用一种保证等效于元组的比较系统的方法，只有在“other”对象是RowProxy的实例时才会强制转换。
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)'
  id: totrans-2899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)
- en: '**[sql] [bug]**'
  id: totrans-2900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") created inline with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has no columns within it will be skipped. Pullreq
    courtesy Derek Harland.
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与一个没有列的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    内联创建的 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 将被跳过。Pullreq 由 Derek Harland 提供。
- en: '**[sql] [bug] [orm]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: Fixed the multiple-table “UPDATE..FROM” construct, only usable on MySQL, to
    correctly render the SET clause among multiple columns with the same name across
    tables. This also changes the name used for the bound parameter in the SET clause
    to “<tablename>_<colname>” for the non-primary table only; as this parameter is
    typically specified using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly this should not have an impact on
    applications. The fix takes effect for both [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") as well as [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") in the ORM.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多表“UPDATE..FROM”构造，在 MySQL 上可用，以正确地在跨表中的多个相同名称的列之间渲染 SET 子句。这也将非主表中用于 SET
    子句中的绑定参数的名称更改为“<tablename>_<colname>”；由于通常直接使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象指定此参数，这不应对应用程序产生影响。此修复对 ORM 中的 [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") 和 [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") 都生效。
- en: 'References: [#2912](https://www.sqlalchemy.org/trac/ticket/2912)'
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2912](https://www.sqlalchemy.org/trac/ticket/2912)
- en: schema
  id: totrans-2905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Restored `sqlalchemy.schema.SchemaVisitor` to the `.schema` module. Pullreq
    courtesy Sean Dague.
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `sqlalchemy.schema.SchemaVisitor` 恢复到 `.schema` 模块中。Pullreq 由 Sean Dague 提供。
- en: postgresql
  id: totrans-2908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new dialect-level argument `postgresql_ignore_search_path`; this argument
    is accepted by both the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor as well as by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method. When in use against PostgreSQL,
    a foreign-key referenced table which specifies a remote schema name will retain
    that schema name even if the name is present in the `search_path`; the default
    behavior since 0.7.3 has been that schemas present in `search_path` would not
    be copied to reflected [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects. The documentation has been updated to
    describe in detail the behavior of the `pg_get_constraintdef()` function and how
    the `postgresql_ignore_search_path` feature essentially determines if we will
    honor the schema qualification reported by this function or not.
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的方言级参数 `postgresql_ignore_search_path`；该参数被 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构造函数和 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法都接受。当用于 PostgreSQL 时，指定了远程模式名称的外键引用表将保留该模式名称，即使该名称存在于
    `search_path` 中；自 0.7.3 以来的默认行为是，`search_path` 中存在的模式不会复制到反射的 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象中。文档已更新以详细描述 `pg_get_constraintdef()` 函数的行为以及
    `postgresql_ignore_search_path` 特性如何实质上决定我们是否会尊重此函数报告的模式资格。
- en: See also
  id: totrans-2911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[远程模式表内省和 PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
- en: 'References: [#2922](https://www.sqlalchemy.org/trac/ticket/2922)'
  id: totrans-2913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2922](https://www.sqlalchemy.org/trac/ticket/2922)
- en: mysql
  id: totrans-2914
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 cymysql 方言添加了一些缺失的方法，包括 _get_server_version_info() 和 _detect_charset()。Pullreq
    由 Hajime Nakagami 提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 到：0.8.5
- en: '**[mysql] [bug] [sql]**'
  id: totrans-2918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [sql]**'
- en: Added new test coverage for so-called “down adaptions” of SQL types, where a
    more specific type is adapted to a more generic one - this use case is needed
    by some third party tools such as `sqlacodegen`. The specific cases that needed
    repair within this test suite were that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM") being downcast into a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and that of SQLite date types being cast into generic
    date types. The `adapt()` method needed to become more specific here to counteract
    the removal of a “catch all” `**kwargs` collection on the base [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class that was removed in 0.9.
  id: totrans-2919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所谓的SQL类型的“向下适应”添加了新的测试覆盖，其中更具体的类型被适应为更通用的类型 - 这种用例被一些第三方工具（如`sqlacodegen`）所需。在此测试套件中需要修复的特定情况是将[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM")降级为[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")，以及将SQLite日期类型转换为通用日期类型。`adapt()`方法需要在这里变得更具体，以抵消在0.9中删除的基本[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类上的“捕获所有”`**kwargs`集合的移除。
- en: 'References: [#2917](https://www.sqlalchemy.org/trac/ticket/2917)'
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2917](https://www.sqlalchemy.org/trac/ticket/2917)
- en: '**[mysql] [bug]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL CAST compilation now takes into account aspects of a string type such
    as “charset” and “collation”. While MySQL wants all character- based CAST calls
    to use the CHAR type, we now create a real CHAR object at CAST time and copy over
    all the parameters it has, so that an expression like `cast(x, mysql.TEXT(charset='utf8'))`
    will render `CAST(t.col AS CHAR CHARACTER SET utf8)`.
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在MySQL CAST编译考虑了字符串类型的“字符集”和“排序”。虽然MySQL希望所有基于字符的CAST调用都使用CHAR类型，但我们现在在CAST时创建一个真正的CHAR对象，并复制它具有的所有参数，因此像`cast(x,
    mysql.TEXT(charset='utf8'))`这样的表达式将呈现为`CAST(t.col AS CHAR CHARACTER SET utf8)`。
- en: '**[mysql] [bug]**'
  id: totrans-2923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new “unicode returns” detection to the MySQL dialect and to the default
    dialect system overall, such that any dialect can add extra “tests” to the on-first-connect
    “does this DBAPI return unicode directly?” detection. In this case, we are adding
    a check specifically against the “utf8” encoding with an explicit “utf8_bin” collation
    type (after checking that this collation is available) to test for some buggy
    unicode behavior observed with MySQLdb version 1.2.3\. While MySQLdb has resolved
    this issue as of 1.2.4, the check here should guard against regressions. The change
    also allows the “unicode” checks to log in the engine logs, which was not previously
    the case.
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对MySQL方言和整体默认方言系统添加了新的“unicode返回”检测，以便任何方言都可以在首次连接时添加额外的“测试”来检测DBAPI是否直接返回unicode。在这种情况下，我们特别针对“utf8”编码添加了一个检查，使用显式的“utf8_bin”排序类型（在检查此排序是否可用后）来测试观察到的MySQLdb版本1.2.3存在的一些错误的unicode行为。虽然MySQLdb在1.2.4中已解决了此问题，但此处的检查应该防止出现退化。此更改还允许“unicode”检查记录在引擎日志中，这以前是不可能的。
- en: 'References: [#2906](https://www.sqlalchemy.org/trac/ticket/2906)'
  id: totrans-2925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2906](https://www.sqlalchemy.org/trac/ticket/2906)
- en: '**[mysql] [bug] [engine] [pool]**'
  id: totrans-2926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [engine] [pool]**'
- en: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now associates a new [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") or [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") with its immediate [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") as a “reset handler” for the span of that
    transaction, which takes over the task of calling commit() or rollback() for the
    “reset on return” behavior of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") if the transaction was not otherwise completed. This resolves
    the issue that a picky transaction like that of MySQL two-phase will be properly
    closed out when the connection is closed without an explicit rollback or commit
    (e.g. no longer raises “XAER_RMFAIL” in this case - note this only shows up in
    logging as the exception is not propagated within pool reset). This issue would
    arise e.g. when using an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with `twophase` set, and then [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") is called without an explicit rollback or commit.
    The change also has the effect that you will now see an explicit “ROLLBACK” in
    the logs when using a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object in non-autocommit mode regardless of how that
    session was discarded. Thanks to Jeff Dairiki and Laurence Rowe for isolating
    the issue here.'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在将一个新的 [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") 或 [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") 与其立即的 [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") 关联为该事务的“复位处理程序”，在该事务的范围内接管调用 commit() 或 rollback()
    来处理 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    的“返回时重置”行为，如果事务没有被其他方式完成。这解决了当连接关闭时，像MySQL两阶段那样挑剔的事务将被正确关闭的问题，而不需要显式的回滚或提交（例如，在此情况下不再引发“XAER_RMFAIL”
    - 请注意，这仅显示在日志中，因为异常未在池重置中传播）。例如，当使用带有 `twophase` 设置的orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，然后在没有显式回滚或提交的情况下调用 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 时，会出现此问题。该更改还具有的效果是，现在在非自动提交模式下使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象时，无论该会话是如何被丢弃的，都会在日志中看到显式的“ROLLBACK”。感谢 Jeff Dairiki
    和 Laurence Rowe 在此处隔离问题。'
- en: 'References: [#2907](https://www.sqlalchemy.org/trac/ticket/2907)'
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2907](https://www.sqlalchemy.org/trac/ticket/2907)
- en: sqlite
  id: totrans-2929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-2930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug whereby SQLite compiler failed to propagate compiler arguments such
    as “literal binds” into a CAST expression.
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即SQLite编译器无法将编译器参数（例如“literal binds”）传播到CAST表达式中的情况。
- en: mssql
  id: totrans-2932
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-2933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added an option `mssql_clustered` to the [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") constructs; on SQL Server, this adds
    the `CLUSTERED` keyword to the constraint construct within DDL. Pullreq courtesy
    Derek Harland.
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 构造添加了一个选项 `mssql_clustered`；在SQL Server上，这将在DDL中将
    `CLUSTERED` 关键字添加到约束构造中。感谢 Derek Harland 提供了Pullreq。
- en: oracle
  id: totrans-2935
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: It’s been observed that the usage of a cx_Oracle “outputtypehandler” in Python
    2.xx in order to coerce string values to Unicode is inordinately expensive; even
    though cx_Oracle is written in C, when you pass the Python `unicode` primitive
    to cursor.var() and associate with an output handler, the library counts every
    conversion as a Python function call with all the requisite overhead being recorded;
    this *despite* the fact when running in Python 3, all strings are also unconditionally
    coerced to unicode but it does *not* incur this overhead, meaning that cx_Oracle
    is failing to use performant techniques in Py2K. As SQLAlchemy cannot easily select
    for this style of type handler on a per-column basis, the handler was assembled
    unconditionally thereby adding the overhead to all string access.
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已经观察到，在 Python 2.xx 中使用 cx_Oracle 的 “outputtypehandler” 来将字符串值强制转换为 Unicode
    是非常昂贵的；即使 cx_Oracle 是用 C 编写的，当你将 Python `unicode` 原语传递给 cursor.var() 并与输出处理程序关联时，库会将每次转换都记录为
    Python 函数调用，带有所有必要的开销；尽管在 Python 3 中运行时，所有字符串也被无条件地强制转换为 unicode，但它不会产生这种开销，这意味着
    cx_Oracle 在 Py2K 中未能使用高效的技术。由于 SQLAlchemy 无法轻松地按列选择这种类型处理程序，因此处理程序是无条件地组装的，从而为所有字符串访问添加了开销。
- en: So this logic has been replaced with SQLAlchemy’s own unicode conversion system,
    which now only takes effect in Py2K for columns that are requested as unicode.
    When C extensions are used, SQLAlchemy’s system appears to be 2-3x faster than
    cx_Oracle’s. Additionally, SQLAlchemy’s unicode conversion has been enhanced such
    that when the “conditional” converter is required (now needed for the Oracle backend),
    the check for “already unicode” is now performed in C and no longer introduces
    significant overhead.
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，这个逻辑已被替换为 SQLAlchemy 自己的 unicode 转换系统，现在只在请求为 unicode 的列中对 Py2K 生效。当使用 C
    扩展时，SQLAlchemy 的系统似乎比 cx_Oracle 的快 2-3 倍。此外，SQLAlchemy 的 unicode 转换已经得到增强，以便在需要“条件”转换器（现在需要用于
    Oracle 后端）时，在 C 中执行“已经是 unicode”的检查，不再引入显著的开销。
- en: This change has two impacts on the cx_Oracle backend. One is that string values
    in Py2K which aren’t specifically requested with the Unicode type or convert_unicode=True
    will now come back as `str`, not `unicode` - this behavior is similar to a backend
    such as MySQL. Additionally, when unicode values are requested with the cx_Oracle
    backend, if the C extensions are *not* used, there is now an additional overhead
    of an isinstance() check per column. This tradeoff has been made as it can be
    worked around and no longer places a performance burden on the likely majority
    of Oracle result columns that are non-unicode strings.
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变化对 cx_Oracle 后端有两个影响。一个是在 Py2K 中，未明确请求 Unicode 类型或 convert_unicode=True 的字符串值现在将返回为
    `str`，而不是 `unicode` - 这种行为类似于像 MySQL 这样的后端。此外，当使用 cx_Oracle 后端请求 unicode 值时，如果不使用
    C 扩展，则现在每列都会有一个 isinstance() 检查的额外开销。这种权衡已经做出，因为它可以被解决，并且不再对大多数非 unicode 字符串的
    Oracle 结果列产生性能负担。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: misc
  id: totrans-2941
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-2942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: The argument names for the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event have been renamed to `dbapi_connection`
    and `connection_record` in order to maintain consistency with all the other pool
    events. It is expected that any existing listeners for this relatively new and
    seldom-used event are using positional style to receive arguments in any case.
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件的参数名称已更改为 `dbapi_connection` 和 `connection_record`，以保持与所有其他池事件的一致性。预计任何现有监听器对于这个相对较新且很少使用的事件都是使用位置样式来接收参数。'
- en: '**[bug] [cextensions] [py3k]**'
  id: totrans-2944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [cextensions] [py3k]**'
- en: Fixed an issue where the C extensions in Py3K are using the wrong API to specify
    the top-level module function, which breaks in Python 3.4b2\. Py3.4b2 changes
    PyMODINIT_FUNC to return “void” instead of `PyObject *`, so we now make sure to
    use “PyMODINIT_FUNC” instead of `PyObject *` directly. Pull request courtesy cgohlke.
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 Py3K 中的 C 扩展正在使用错误的 API 来指定顶级模块函数，这在 Python 3.4b2 中会出错。Py3.4b2 将 PyMODINIT_FUNC
    更改为返回“void”，而不是 `PyObject *`，因此我们现在确保直接使用“PyMODINIT_FUNC”而不是 `PyObject *`。感谢 cgohlke
    提交的拉取请求。
- en: orm
  id: totrans-2946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new parameter [`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op"). This flag allows a custom op from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") to be considered as a “comparison” operator,
    thus usable for custom [`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") conditions.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新参数[`Operators.op.is_comparison`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")。此标志允许从[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")中选择自定义运算符作为“比较”运算符，因此可用于自定义[`relationship.primaryjoin`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件。
- en: See also
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using custom operators in join conditions](../orm/join_conditions.html#relationship-custom-operator)'
  id: totrans-2950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../orm/join_conditions.html#relationship-custom-operator)'
- en: '**[orm] [feature]**'
  id: totrans-2951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Support is improved for supplying a [`join()`](../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") construct as the target of [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") for the purposes of creating very complex [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") join conditions. The change includes adjustments
    to query joining, joined eager loading to not render a SELECT subquery, changes
    to lazy loading such that the “secondary” target is properly included in the SELECT,
    and changes to declarative to better support specification of a join() object
    with classes as targets.
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了将[`join()`](../core/selectable.html#sqlalchemy.sql.expression.join "sqlalchemy.sql.expression.join")构造作为[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")的目标以创建非常复杂的[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")连接条件的支持。该更改包括对查询连接、连接的急加载进行调整，以避免渲染 SELECT 子查询，对延迟加载进行更改，以便正确地在
    SELECT 中包含“次要”目标，并对声明性进行更改以更好地支持使用类作为目标的 join() 对象的规范。
- en: The new use case is somewhat experimental, but a new documentation section has
    been added.
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的用例有些实验性，但已添加了新的文档部分。
- en: See also
  id: totrans-2954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composite “Secondary” Joins](../orm/join_conditions.html#composite-secondary-join)'
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[复合“次要”连接](../orm/join_conditions.html#composite-secondary-join)'
- en: '**[orm] [bug]**'
  id: totrans-2956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed error message when an iterator object is passed to [`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper") or similar, where the error would fail to render
    on string formatting. Pullreq courtesy Kyle Stark.
  id: totrans-2957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当将迭代器对象传递给[`class_mapper()`](../orm/mapping_api.html#sqlalchemy.orm.class_mapper
    "sqlalchemy.orm.class_mapper")或类似方法时出现的错误消息，该错误会导致字符串格式化时无法呈现。感谢 Kyle Stark 提交的
    Pullreq。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-2958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: '**[orm] [bug]**'
  id: totrans-2959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new `TextAsFrom` construct where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")- oriented row lookups were not matching up to the
    ad-hoc [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects that `TextAsFrom` generates,
    thereby making it not usable as a target in [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement"). Also fixed [`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement") mechanics to not mistake a `TextAsFrom`
    for a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct. This bug is also an 0.9 regression as the [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns") method is called to accommodate
    the [`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text") argument.
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的`TextAsFrom`构造中的错误，其中[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") - 导向行查找未与`TextAsFrom`生成的临时[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")对象相匹配，因此不能在[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")中使用。同时修复了[`Query.from_statement()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.from_statement
    "sqlalchemy.orm.Query.from_statement")机制，以免将`TextAsFrom`错误地视为[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造。该错误也是0.9的一个回归，因为要适应[`text.typemap`](../core/sqlelement.html#sqlalchemy.sql.expression.text.params.typemap
    "sqlalchemy.sql.expression.text")参数，[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")方法被调用。
- en: 'References: [#2932](https://www.sqlalchemy.org/trac/ticket/2932)'
  id: totrans-2961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2932](https://www.sqlalchemy.org/trac/ticket/2932)
- en: '**[orm] [bug]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a new directive used within the scope of an attribute “set” operation
    to disable autoflush, in the case that the attribute needs to lazy-load the “old”
    value, as in when replacing one-to-one values or some kinds of many-to-one. A
    flush at this point otherwise occurs at the point that the attribute is None and
    can cause NULL violations.
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的指令，在属性“设置”操作的范围内使用，以禁用自动刷新，在属性需要惰性加载“旧”值的情况下使用，例如替换一对一值或某些类型的一对多。此时刷新通常在属性为None时发生，并且可能会导致NULL违规。
- en: 'References: [#2921](https://www.sqlalchemy.org/trac/ticket/2921)'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2921](https://www.sqlalchemy.org/trac/ticket/2921)
- en: '**[orm] [bug]**'
  id: totrans-2965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an 0.9 regression where the automatic aliasing applied by [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") and in other situations where selects or joins were aliased
    (such as joined table inheritance) could fail if a user-defined [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") subclass were used in the expression. In this case,
    the subclass would fail to propagate ORM-specific “annotations” along needed by
    the adaptation. The “expression annotations” system has been corrected to account
    for this case.
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9版本中的一个回归，即[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")自动别名化以及在其他情况下选择或连接被别名化（例如连接表继承）可能会失败，如果表达式中使用了用户定义的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")子类。在这种情况下，子类将无法传播需要适应的ORM特定的“注解”。已经修正了“表达式注解”系统以解决此问题。
- en: 'References: [#2918](https://www.sqlalchemy.org/trac/ticket/2918)'
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2918](https://www.sqlalchemy.org/trac/ticket/2918)
- en: '**[orm] [bug]**'
  id: totrans-2968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a bug involving the new flattened JOIN structures which are used with
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") (thereby causing a regression in joined eager loading)
    as well as [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    in conjunction with the `flat=True` flag and joined-table inheritance; basically
    multiple joins across a “parent JOIN sub” entity using different paths to get
    to a target class wouldn’t form the correct ON conditions. An adjustment / simplification
    made in the mechanics of figuring out the “left side” of the join in the case
    of an aliased, joined-inh class repairs the issue.
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关于新的扁平化JOIN结构的错误，该结构与[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")（从而导致连接贪婪加载的回归）以及与`flat=True`标志和联接表继承一起使用的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")相关的错误；基本上，通过不同路径跨越“父JOIN子”实体进行多次连接以到达目标类的多个连接不会形成正确的ON条件。在处理aliased、joined-inh类的“左侧”连接的机制中进行了调整/简化，修复了这个问题。
- en: 'References: [#2908](https://www.sqlalchemy.org/trac/ticket/2908)'
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2908](https://www.sqlalchemy.org/trac/ticket/2908)
- en: examples
  id: totrans-2971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Added a tweak to the “history_meta” example where the check for “history” on
    a relationship-bound attribute will now no longer emit any SQL if the relationship
    is unloaded.
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“history_meta”示例进行了调整，当关系绑定属性上的“history”检查不再发出任何SQL时，如果关系未加载。
- en: engine
  id: totrans-2974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature] [pool]**'
  id: totrans-2975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature] [pool]**'
- en: Added a new pool event [`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate"). Called when a DBAPI connection is
    to be marked as “invalidated” and discarded from the pool.
  id: totrans-2976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的池事件[`PoolEvents.invalidate()`](../core/events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")。当一个DBAPI连接被标记为“无效”并且从池中丢弃时调用。
- en: sql
  id: totrans-2977
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-2978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect") to support dialect-level reflection options
    for all [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects reflected.
  id: totrans-2979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`MetaData.reflect.dialect_kwargs`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect.params.dialect_kwargs
    "sqlalchemy.schema.MetaData.reflect")以支持为所有反射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象设置方言级别的反射选项。
- en: '**[sql] [feature]**'
  id: totrans-2980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added a new feature which allows automated naming conventions to be applied
    to [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    and [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects. Based on a recipe in the wiki, the new feature uses schema-events to
    set up names as various schema objects are associated with each other. The events
    then expose a configuration system through a new argument [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This system allows production of both simple and
    custom naming schemes for constraints and indexes on a per-[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") basis.
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新功能，允许自动命名约定应用于[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象。基于维基百科中的一个配方，新功能使用模式事件来设置名称，当各种模式对象相互关联时。然后，事件通过一个新参数[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")暴露一个配置系统。该系统允许在每个[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")基础上生成简单和自定义的约束和索引命名方案。
- en: See also
  id: totrans-2982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](../core/constraints.html#constraint-naming-conventions)'
  id: totrans-2983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](../core/constraints.html#constraint-naming-conventions)'
- en: 'References: [#2923](https://www.sqlalchemy.org/trac/ticket/2923)'
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2923](https://www.sqlalchemy.org/trac/ticket/2923)
- en: '**[sql] [feature]**'
  id: totrans-2985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Options can now be specified on a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object independently of the specification
    of columns in the table with the `primary_key=True` flag; use a [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object with no columns in it to achieve
    this result.
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象上独立指定选项，而不需要在表中的列上使用`primary_key=True`标志；使用一个不包含列的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")对象即可实现此目的。
- en: Previously, an explicit [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") would have the effect of those columns
    marked as `primary_key=True` being ignored; since this is no longer the case,
    the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") will now assert that either one style
    or the other is used to specify the columns, or if both are present, that the
    column lists match exactly. If an inconsistent set of columns in the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") and within the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") marked as `primary_key=True` are present, a warning
    is emitted, and the list of columns is taken only from the [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") alone as was the case in previous releases.
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以前，显式的[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")会导致那些标记为`primary_key=True`的列被忽略；由于现在不再这样，[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")现在会断言要么使用一种风格指定列，要么使用另一种风格，或者如果两者都存在，则列列表必须完全匹配。如果在[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")和在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中标记为`primary_key=True`的不一致列集存在，则会发出警告，并且列列表仅从[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")中获取，就像在先前的版本中一样。
- en: See also
  id: totrans-2988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")'
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")'
- en: 'References: [#2910](https://www.sqlalchemy.org/trac/ticket/2910)'
  id: totrans-2990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2910](https://www.sqlalchemy.org/trac/ticket/2910)
- en: '**[sql] [feature]**'
  id: totrans-2991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The system by which schema constructs and certain SQL constructs accept dialect-specific
    keyword arguments has been enhanced. This system includes commonly the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") constructs, which accept a wide variety of dialect-specific
    arguments such as `mysql_engine` and `postgresql_where`, as well as the constructs
    [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), and also newly added kwarg capability to
    [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"). The change is that participating dialects can
    now specify acceptable argument lists for these constructs, allowing an argument
    error to be raised if an invalid keyword is specified for a particular dialect.
    If the dialect portion of the keyword is unrecognized, a warning is emitted only;
    while the system will actually make use of setuptools entrypoints in order to
    locate non-local dialects, the use case where certain dialect-specific arguments
    are used in an environment where that third-party dialect is uninstalled remains
    supported. Dialects also have to explicitly opt-in to this system, so that external
    dialects which aren’t making use of this system will remain unaffected.
  id: totrans-2992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 架构构造和某些 SQL 构造接受特定方言的关键字参数的系统已经得到增强。这个系统通常包括[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造，它们接受各种特定方言的参数，比如`mysql_engine`和`postgresql_where`，以及[`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")、[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")、[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")和[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")等构造，还新增了对[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")的关键字参数功能。改变之处在于参与的方言现在可以为这些构造指定可接受的参数列表，允许在为特定方言指定无效关键字时引发参数错误。如果关键字的方言部分未被识别，只会发出警告；虽然系统实际上会利用
    setuptools 的 entrypoints 来定位非本地方言，但在未安装第三方方言的环境中使用某些特定方言参数的用例仍然受支持。方言还必须明确选择加入这个系统，因此不使用这个系统的外部方言将不受影响。
- en: 'References: [#2866](https://www.sqlalchemy.org/trac/ticket/2866)'
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2866](https://www.sqlalchemy.org/trac/ticket/2866)
- en: '**[sql] [bug]**'
  id: totrans-2994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The behavior of [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") has been adjusted such that the schema target
    of a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    will not be changed unless that schema matches that of the parent table. That
    is, if a table “schema_a.user” has a foreign key to “schema_b.order.id”, the “schema_b”
    target will be maintained whether or not the “schema” argument is passed to [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata"). However if a table “schema_a.user” refers
    to “schema_a.order.id”, the presence of “schema_a” will be updated on both the
    parent and referred tables. This is a behavioral change hence isn’t likely to
    be backported to 0.8; it is assumed that the previous behavior is pretty buggy
    however and that it’s unlikely anyone was relying upon it.
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")的行为已经调整，以便在不匹配父表模式的情况下不会更改[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")的模式目标。也就是说，如果一个表“schema_a.user”有一个指向“schema_b.order.id”的外键，无论是否将“schema”参数传递给[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")，都将保持“schema_b”目标。但是，如果一个表“schema_a.user”引用“schema_a.order.id”，则“schema_a”将在父表和引用表上更新。这是一个行为变更，因此不太可能被回溯到0.8；可以假设以前的行为相当错误，而且很少有人依赖它。'
- en: Additionally, a new parameter has been added [`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata"). This refers to a callable function which
    will be used to determine the new referred schema for any [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") encountered in the tometadata operation.
    This callable can be used to revert to the previous behavior or to customize how
    referred schemas are treated on a per-constraint basis.
  id: totrans-2996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，新增了一个参数[`Table.tometadata.referred_schema_fn`](../core/metadata.html#sqlalchemy.schema.Table.tometadata.params.referred_schema_fn
    "sqlalchemy.schema.Table.tometadata")。这是一个可调用函数，用于确定在tometadata操作中遇到的任何[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的新引用模式。这个可调用函数可以用于恢复到以前的行为或者自定义如何处理每个约束的引用模式。
- en: 'References: [#2913](https://www.sqlalchemy.org/trac/ticket/2913)'
  id: totrans-2997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2913](https://www.sqlalchemy.org/trac/ticket/2913)
- en: '**[sql] [bug]**'
  id: totrans-2998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby binary type would fail in some cases if used with a “test”
    dialect, such as a DefaultDialect or other dialect with no DBAPI.
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了二进制类型在某些情况下与“test”方言（例如DefaultDialect或其他没有DBAPI的方言）一起使用时会失败的bug。
- en: '**[sql] [bug] [py3k]**'
  id: totrans-3000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [py3k]**'
- en: Fixed bug where “literal binds” wouldn’t work with a bound parameter that’s
    a binary type. A similar, but different, issue is fixed in 0.8.
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“literal binds”无法与绑定参数为二进制类型的bug。0.8中修复了类似但不同的问题。
- en: '**[sql] [bug]**'
  id: totrans-3002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression whereby the “annotation” system used by the ORM was leaking
    into the names used by standard functions in `sqlalchemy.sql.functions`, such
    as `func.coalesce()` and `func.max()`. Using these functions in ORM attributes
    and thus producing annotated versions of them could corrupt the actual function
    name rendered in the SQL.
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM使用的“注释”系统泄漏到`sqlalchemy.sql.functions`中标准函数（如`func.coalesce()`和`func.max()`）使用的名称中的回归问题。在ORM属性中使用这些函数，从而生成它们的带注释版本，可能会破坏在SQL中呈现的实际函数名称。
- en: 'References: [#2927](https://www.sqlalchemy.org/trac/ticket/2927)'
  id: totrans-3004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2927](https://www.sqlalchemy.org/trac/ticket/2927)
- en: '**[sql] [bug]**'
  id: totrans-3005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 0.9 regression where the new sortable support for `RowProxy` would lead
    to `TypeError` when compared to non-tuple types as it attempted to apply tuple()
    to the “other” object unconditionally. The full range of Python comparison operators
    have now been implemented on `RowProxy`, using an approach that guarantees a comparison
    system that is equivalent to that of a tuple, and the “other” object is only coerced
    if it’s an instance of RowProxy.
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了0.9中的回归问题，新的`RowProxy`可排序支持会导致与非元组类型比较时引发`TypeError`，因为它试图无条件地应用tuple()到��other”对象。现在在`RowProxy`上实现了完整的Python比较运算符范围，使用一种保证等效于元组的比较系统的方法，只有当“other”对象是`RowProxy`的实例时才会强制转换。
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)'
  id: totrans-3007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848), [#2924](https://www.sqlalchemy.org/trac/ticket/2924)
- en: '**[sql] [bug]**'
  id: totrans-3008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") created inline with a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that has no columns within it will be skipped. Pullreq
    courtesy Derek Harland.
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在没有列的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")中内联创建的[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")将被跳过。Pullreq 感谢 Derek Harland。
- en: '**[sql] [bug] [orm]**'
  id: totrans-3010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [orm]**'
- en: Fixed the multiple-table “UPDATE..FROM” construct, only usable on MySQL, to
    correctly render the SET clause among multiple columns with the same name across
    tables. This also changes the name used for the bound parameter in the SET clause
    to “<tablename>_<colname>” for the non-primary table only; as this parameter is
    typically specified using the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object directly this should not have an impact on
    applications. The fix takes effect for both [`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update") as well as [`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update") in the ORM.
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多表“UPDATE..FROM”结构，仅适用于 MySQL，在多个表中正确呈现 SET 子句的问题。这也更改了 SET 子句中用于非主表的绑定参数的名称为“<tablename>_<colname>”；由于该参数通常是直接使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象指定的，因此这不会对应用程序产生影响。此修复对 ORM 中的[`Table.update()`](../core/metadata.html#sqlalchemy.schema.Table.update
    "sqlalchemy.schema.Table.update")和[`Query.update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.update
    "sqlalchemy.orm.Query.update")都生效。
- en: 'References: [#2912](https://www.sqlalchemy.org/trac/ticket/2912)'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2912](https://www.sqlalchemy.org/trac/ticket/2912)
- en: schema
  id: totrans-3013
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-3014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Restored `sqlalchemy.schema.SchemaVisitor` to the `.schema` module. Pullreq
    courtesy Sean Dague.
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了`sqlalchemy.schema.SchemaVisitor`到`.schema`模块。Pullreq 感谢 Sean Dague。
- en: postgresql
  id: totrans-3016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new dialect-level argument `postgresql_ignore_search_path`; this argument
    is accepted by both the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") constructor as well as by the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method. When in use against PostgreSQL,
    a foreign-key referenced table which specifies a remote schema name will retain
    that schema name even if the name is present in the `search_path`; the default
    behavior since 0.7.3 has been that schemas present in `search_path` would not
    be copied to reflected [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects. The documentation has been updated to
    describe in detail the behavior of the `pg_get_constraintdef()` function and how
    the `postgresql_ignore_search_path` feature essentially determines if we will
    honor the schema qualification reported by this function or not.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一个方言级别的参数`postgresql_ignore_search_path`；该参数被[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造函数和[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法同时接受。在针对 PostgreSQL 使用时，如果外键引用的表指定了远程模式名称，即使该名称存在于`search_path`中，也会保留该模式名称；自0.7.3以来的默认行为是，`search_path`中存在的模式不会被复制到反映的[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象中。文档已经更新，详细描述了`pg_get_constraintdef()`函数的行为以及`postgresql_ignore_search_path`特性如何确定我们是否会尊重此函数报告的模式限定。
- en: See also
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Remote-Schema Table Introspection and PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
  id: totrans-3020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[远程模式表内省和 PostgreSQL search_path](../dialects/postgresql.html#postgresql-schema-reflection)'
- en: 'References: [#2922](https://www.sqlalchemy.org/trac/ticket/2922)'
  id: totrans-3021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2922](https://www.sqlalchemy.org/trac/ticket/2922)
- en: mysql
  id: totrans-3022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Some missing methods added to the cymysql dialect, including _get_server_version_info()
    and _detect_charset(). Pullreq courtesy Hajime Nakagami.
  id: totrans-3024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 cymysql 方言添加了一些缺失的方法，包括 _get_server_version_info() 和 _detect_charset()。Pullreq
    感谢 Hajime Nakagami。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: '**[mysql] [bug] [sql]**'
  id: totrans-3026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [sql]**'
- en: Added new test coverage for so-called “down adaptions” of SQL types, where a
    more specific type is adapted to a more generic one - this use case is needed
    by some third party tools such as `sqlacodegen`. The specific cases that needed
    repair within this test suite were that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM") being downcast into a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum"), and that of SQLite date types being cast into generic
    date types. The `adapt()` method needed to become more specific here to counteract
    the removal of a “catch all” `**kwargs` collection on the base [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class that was removed in 0.9.
  id: totrans-3027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '为所谓的 SQL 类型的“向下适配”添加了新的测试覆盖，其中更具体的类型被适配为更通用的类型 - 这种用例被一些第三方工具（如 `sqlacodegen`）所需。在这个测试套件中需要修复的具体情况包括将
    [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    转换为 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")，以及将
    SQLite 日期类型转换为通用日期类型。`adapt()` 方法在这里需要变得更具体，以抵消在 0.9 版本中从基本 [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类中删除的“捕获所有”`**kwargs` 集合。 '
- en: 'References: [#2917](https://www.sqlalchemy.org/trac/ticket/2917)'
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2917](https://www.sqlalchemy.org/trac/ticket/2917)
- en: '**[mysql] [bug]**'
  id: totrans-3029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The MySQL CAST compilation now takes into account aspects of a string type such
    as “charset” and “collation”. While MySQL wants all character- based CAST calls
    to use the CHAR type, we now create a real CHAR object at CAST time and copy over
    all the parameters it has, so that an expression like `cast(x, mysql.TEXT(charset='utf8'))`
    will render `CAST(t.col AS CHAR CHARACTER SET utf8)`.
  id: totrans-3030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL CAST 编译现在考虑了字符串类型的“字符集”和“校对规则”等方面。虽然 MySQL 希望所有基于字符的 CAST 调用都使用 CHAR 类型，但我们现在在
    CAST 时创建一个真正的 CHAR 对象，并复制它所有的参数，因此像 `cast(x, mysql.TEXT(charset='utf8'))` 这样的表达式将会渲染为
    `CAST(t.col AS CHAR CHARACTER SET utf8)`。
- en: '**[mysql] [bug]**'
  id: totrans-3031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added new “unicode returns” detection to the MySQL dialect and to the default
    dialect system overall, such that any dialect can add extra “tests” to the on-first-connect
    “does this DBAPI return unicode directly?” detection. In this case, we are adding
    a check specifically against the “utf8” encoding with an explicit “utf8_bin” collation
    type (after checking that this collation is available) to test for some buggy
    unicode behavior observed with MySQLdb version 1.2.3\. While MySQLdb has resolved
    this issue as of 1.2.4, the check here should guard against regressions. The change
    also allows the “unicode” checks to log in the engine logs, which was not previously
    the case.
  id: totrans-3032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 MySQL 方言和默认方言系统整体添加了新的“unicode 返回”检测，以便任何方言都可以向首次连接时添加额外的“测试”来检测“这个 DBAPI
    是否直接返回 unicode”。在这种情况下，我们特别针对“utf8”编码添加了一个检查，带有显式的“utf8_bin”校对类型（在检查此校对是否可用后），以测试观察到的
    MySQLdb 版本 1.2.3 存在的一些错误的 unicode 行为。虽然 MySQLdb 已在 1.2.4 版本中解决了这个问题，但这里的检查应该防范回归。此更改还允许“unicode”检查记录在引擎日志中，这在以前是不可能的。
- en: 'References: [#2906](https://www.sqlalchemy.org/trac/ticket/2906)'
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2906](https://www.sqlalchemy.org/trac/ticket/2906)
- en: '**[mysql] [bug] [engine] [pool]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [engine] [pool]**'
- en: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now associates a new [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") or [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") with its immediate [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") as a “reset handler” for the span of that
    transaction, which takes over the task of calling commit() or rollback() for the
    “reset on return” behavior of [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") if the transaction was not otherwise completed. This resolves
    the issue that a picky transaction like that of MySQL two-phase will be properly
    closed out when the connection is closed without an explicit rollback or commit
    (e.g. no longer raises “XAER_RMFAIL” in this case - note this only shows up in
    logging as the exception is not propagated within pool reset). This issue would
    arise e.g. when using an orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with `twophase` set, and then [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") is called without an explicit rollback or commit.
    The change also has the effect that you will now see an explicit “ROLLBACK” in
    the logs when using a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object in non-autocommit mode regardless of how that
    session was discarded. Thanks to Jeff Dairiki and Laurence Rowe for isolating
    the issue here.'
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在将一个新的 [`RootTransaction`](../core/connections.html#sqlalchemy.engine.RootTransaction
    "sqlalchemy.engine.RootTransaction") 或 [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") 与其直接的 [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") 关联为该事务的“重置处理程序”，负责在事务期间调用 commit() 或 rollback()
    以实现 [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    的“返回时重置”行为，如果事务未被其他方式完成，则接管该任务。当连接关闭而没有显式的回滚或提交时，解决了像 MySQL 两阶段这样挑剔的事务将被正确关闭的问题（例如，在此情况下不再引发“XAER_RMFAIL”
    - 请注意，这只会显示在日志中，因为异常不会在池重置中传播）。当使用设置了 `twophase` 的 orm [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，然后在没有显式的回滚或提交的情况下调用 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 时，会出现此问题。该更改还具有以下效果：无论会话如何被丢弃，在非自动提交模式下使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象时，您现在都将在日志中看到显式的“ROLLBACK”。感谢 Jeff Dairiki 和 Laurence
    Rowe 在此处分离问题。'
- en: 'References: [#2907](https://www.sqlalchemy.org/trac/ticket/2907)'
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2907](https://www.sqlalchemy.org/trac/ticket/2907)
- en: sqlite
  id: totrans-3037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-3038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed bug whereby SQLite compiler failed to propagate compiler arguments such
    as “literal binds” into a CAST expression.
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 编译器无法将诸如“literal binds”之类的编译器参数传递到 CAST 表达式中的错误。
- en: mssql
  id: totrans-3040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [feature]**'
  id: totrans-3041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [feature]**'
- en: Added an option `mssql_clustered` to the [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") constructs; on SQL Server, this adds
    the `CLUSTERED` keyword to the constraint construct within DDL. Pullreq courtesy
    Derek Harland.
  id: totrans-3042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`PrimaryKeyConstraint`](../core/constraints.html#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 构造添加了一个 `mssql_clustered` 选项；在 SQL Server
    上，这将在 DDL 中的约束结构中添加 `CLUSTERED` 关键字。感谢 Derek Harland 的 Pullreq。
- en: oracle
  id: totrans-3043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: It’s been observed that the usage of a cx_Oracle “outputtypehandler” in Python
    2.xx in order to coerce string values to Unicode is inordinately expensive; even
    though cx_Oracle is written in C, when you pass the Python `unicode` primitive
    to cursor.var() and associate with an output handler, the library counts every
    conversion as a Python function call with all the requisite overhead being recorded;
    this *despite* the fact when running in Python 3, all strings are also unconditionally
    coerced to unicode but it does *not* incur this overhead, meaning that cx_Oracle
    is failing to use performant techniques in Py2K. As SQLAlchemy cannot easily select
    for this style of type handler on a per-column basis, the handler was assembled
    unconditionally thereby adding the overhead to all string access.
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已经观察到在 Python 2.xx 中使用 cx_Oracle 的“outputtypehandler”来将字符串值强制转换为 Unicode 是非常昂贵的；即使
    cx_Oracle 是用 C 写的，当你将 Python `unicode` 原语传递给 cursor.var() 并与输出处理程序关联时，库会将每次转换都记录为
    Python 函数调用，带有所有必要的开销；尽管在 Python 3 中运行时，所有字符串也被无条件地转换为 Unicode，但它不会产生这种开销，这意味着
    cx_Oracle 在 Py2K 中未能使用高性能技术。由于 SQLAlchemy 不能轻松地按列选择这种类型处理程序的方式，处理程序被无条件地组装，从而为所有字符串访问增加了开销。
- en: So this logic has been replaced with SQLAlchemy’s own unicode conversion system,
    which now only takes effect in Py2K for columns that are requested as unicode.
    When C extensions are used, SQLAlchemy’s system appears to be 2-3x faster than
    cx_Oracle’s. Additionally, SQLAlchemy’s unicode conversion has been enhanced such
    that when the “conditional” converter is required (now needed for the Oracle backend),
    the check for “already unicode” is now performed in C and no longer introduces
    significant overhead.
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，这个逻辑已被 SQLAlchemy 自己的 Unicode 转换系统取代，现在只在请求为 Unicode 的列中在 Py2K 中生效。当使用 C
    扩展时，SQLAlchemy 的系统似乎比 cx_Oracle 的快 2-3 倍。此外，SQLAlchemy 的 Unicode 转换已经得到增强，以便当需要“条件”转换器（现在需要用于
    Oracle 后端）时，在 C 中执行“已经是 Unicode”的检查，不再引入显著的开销。
- en: This change has two impacts on the cx_Oracle backend. One is that string values
    in Py2K which aren’t specifically requested with the Unicode type or convert_unicode=True
    will now come back as `str`, not `unicode` - this behavior is similar to a backend
    such as MySQL. Additionally, when unicode values are requested with the cx_Oracle
    backend, if the C extensions are *not* used, there is now an additional overhead
    of an isinstance() check per column. This tradeoff has been made as it can be
    worked around and no longer places a performance burden on the likely majority
    of Oracle result columns that are non-unicode strings.
  id: totrans-3047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变对 cx_Oracle 后端有两个影响。一个是在 Py2K 中，如果没有明确请求 Unicode 类型或 convert_unicode=True，那么字符串值现在将返回为`str`，而不是`unicode`
    - 这种行为类似于 MySQL 这样的后端。此外，在请求带有 cx_Oracle 后端的 Unicode 值时，如果没有使用 C 扩展，现在每列都会有一个
    isinstance() 检查的额外开销。这种权衡是因为它可以被解决，并且不再对大多数非 Unicode 字符串的 Oracle 结果列造成性能负担。
- en: 'References: [#2911](https://www.sqlalchemy.org/trac/ticket/2911)'
  id: totrans-3048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2911](https://www.sqlalchemy.org/trac/ticket/2911)
- en: misc
  id: totrans-3049
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [pool]**'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [pool]**'
- en: The argument names for the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event have been renamed to `dbapi_connection`
    and `connection_record` in order to maintain consistency with all the other pool
    events. It is expected that any existing listeners for this relatively new and
    seldom-used event are using positional style to receive arguments in any case.
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件的参数名称已更改为 `dbapi_connection` 和 `connection_record`，以保持与所有其他池事件的一致性。预计任何现有监听器对于这个相对新的且很少使用的事件都在任何情况下使用位置样式接收参数。'
- en: '**[bug] [cextensions] [py3k]**'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [cextensions] [py3k]**'
- en: Fixed an issue where the C extensions in Py3K are using the wrong API to specify
    the top-level module function, which breaks in Python 3.4b2\. Py3.4b2 changes
    PyMODINIT_FUNC to return “void” instead of `PyObject *`, so we now make sure to
    use “PyMODINIT_FUNC” instead of `PyObject *` directly. Pull request courtesy cgohlke.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 Py3K 中的 C 扩展正在使用错误的 API 来指定顶层模块函数，这在 Python 3.4b2 中会出错。Py3.4b2 将 PyMODINIT_FUNC
    更改为返回“void”而不是`PyObject *`，因此我们现在确保使用“PyMODINIT_FUNC”而不是直接使用`PyObject *`。感谢 cgohlke
    提交的拉取请求。
- en: 0.9.1
  id: totrans-3054
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.1
- en: 'Released: January 5, 2014'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2014年1月5日
- en: orm
  id: totrans-3056
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [events]**'
  id: totrans-3057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [events]**'
- en: Fixed regression where using a `functools.partial()` with the event system would
    cause a recursion overflow due to usage of inspect.getargspec() on it in order
    to detect a legacy calling signature for certain events, and apparently there’s
    no way to do this with a partial object. Instead we skip the legacy check and
    assume the modern style; the check itself now only occurs for the SessionEvents.after_bulk_update
    and SessionEvents.after_bulk_delete events. Those two events will require the
    new signature style if assigned to a “partial” event listener.
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，当使用`functools.partial()`与事件系统时，由于在其中使用inspect.getargspec()来检测某些事件的传统调用签名，因此会导致递归溢出，而显然没有办法在partial对象上执行此操作。相反，我们跳过传统检查，并假设现代样式；该检查现在仅在SessionEvents.after_bulk_update和SessionEvents.after_bulk_delete事件中发生。如果将这两个事件分配给“partial”事件侦听器，则这两个事件将需要新的签名样式。
- en: 'References: [#2905](https://www.sqlalchemy.org/trac/ticket/2905)'
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2905](https://www.sqlalchemy.org/trac/ticket/2905)
- en: '**[orm] [bug]**'
  id: totrans-3060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where using new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute would fail if the `.info` argument were
    only passed to the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") creation call but not to the object itself. Courtesy
    Robin Schoonover.
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即如果`.info`参数仅传递给[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")创建调用而不传递给对象本身，则使用新的[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")属性将失败。感谢Robin Schoonover。
- en: '**[orm] [bug]**'
  id: totrans-3062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression where we don’t check the given name against the correct string
    class when setting up a backref based on a name, therefore causing the error “too
    many values to unpack”. This was related to the Py3k conversion.
  id: totrans-3063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，即在设置基于名称的backref时，我们不会根据正确的字符串类检查给定的名称，因此会导致错误“值太多而无法解压缩”。这与Py3k转换有关。
- en: 'References: [#2901](https://www.sqlalchemy.org/trac/ticket/2901)'
  id: totrans-3064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2901](https://www.sqlalchemy.org/trac/ticket/2901)
- en: '**[orm] [bug]**'
  id: totrans-3065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression where we apparently still create an implicit alias when saying
    query(B).join(B.cs), where “C” is a joined inh class; however, this implicit alias
    was created only considering the immediate left side, and not a longer chain of
    joins along different joined-inh subclasses of the same base. As long as we’re
    still implicitly aliasing in this case, the behavior is dialed back a bit so that
    it will alias the right side in a wider variety of cases.
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，当我们显然仍然在说查询（B）。join（B.cs）时会创建一个隐式别名，其中“C”是一个联接继承类；然而，这个隐式别名只考虑了直接左侧，而没有考虑到同一基类的不同联接继承子类的一系列联接。只要我们在这种情况下仍然隐式别名，行为就会稍微减弱，以便在更广泛的情况下为右侧别名。
- en: 'References: [#2903](https://www.sqlalchemy.org/trac/ticket/2903)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2903](https://www.sqlalchemy.org/trac/ticket/2903)
- en: orm declarative
  id: totrans-3068
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明] [错误]**'
- en: Fixed an extremely unlikely memory issue where when using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") to define classes pending for
    reflection, if some subset of those classes were discarded before the [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") method were called to
    reflect and map the class, a strong reference to the class would remain held within
    the declarative internals. This internal collection of “classes to map” now uses
    weak references against the classes themselves.
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个极不可能发生的内存问题，即当使用[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")来定义待反射的类时，如果在调用[`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")方法之前丢弃了其中某些类的子集，则在映射和反映类时，对类的强引用将仍然保持在声明性内部。这个内部的“要映射的类”集合现在使用弱引用来引用这些类本身。
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明] [错误]**'
- en: A quasi-regression where apparently in 0.8 you can set a class-level attribute
    on declarative to simply refer directly to an [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") on a superclass or on the class itself,
    and it acts more or less like a synonym; in 0.9, this fails to set up enough bookkeeping
    to keep up with the more liberalized backref logic from [#2789](https://www.sqlalchemy.org/trac/ticket/2789).
    Even though this use case was never directly considered, it is now detected by
    declarative at the “setattr()” level as well as when setting up a subclass, and
    the mirrored/renamed attribute is now set up as a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead.
  id: totrans-3072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一种准回归，显然在0.8中，您可以在声明性上设置一个类级属性，直接引用超类或类本身上的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")，它更多或更少地像一个同义词；在0.9中，这未能设置足够的记录来跟上从[#2789](https://www.sqlalchemy.org/trac/ticket/2789)中更自由化的backref逻辑。即使这种用例从未直接考虑过，现在在声明性的“setattr()”级别以及在设置子类时也会检测到，并且镜像/重命名属性现在设置为[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")。
- en: 'References: [#2900](https://www.sqlalchemy.org/trac/ticket/2900)'
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2900](https://www.sqlalchemy.org/trac/ticket/2900)
- en: orm extensions
  id: totrans-3074
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-3075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [extensions] [feature]**'
- en: A new, **experimental** extension [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") is added. This extension expands upon the functionality
    of Declarative as well as the [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class to produce a base class
    which automatically generates mapped classes *and relationships* based on table
    metadata.
  id: totrans-3076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的，**实验性的**扩展[`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")。该扩展扩展了声明性的功能以及[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")类，以生成一个基类，该基类根据表元数据自动生成映射类和*关系*。
- en: See also
  id: totrans-3077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Automap Extension](migration_09.html#feature-automap)'
  id: totrans-3078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Automap Extension](migration_09.html#feature-automap)'
- en: '[Automap](../orm/extensions/automap.html)'
  id: totrans-3079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Automap](../orm/extensions/automap.html)'
- en: sql
  id: totrans-3080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'Conjunctions like [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") can now accept Python generators as a single
    argument, e.g.:'
  id: totrans-3082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")和[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")这样的连接词现在可以接受Python生成器作为单个参数，例如：
- en: '[PRE8]'
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The logic here looks for a single argument `*args` where the first element is
    an instance of `types.GeneratorType`.
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的逻辑寻找一个单一参数`*args`，其中第一个元素是`types.GeneratorType`的实例。
- en: schema
  id: totrans-3085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [feature]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: The [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") and [`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table") parameters are now available on the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")和[`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table")参数现在在[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法中可用。'
- en: orm
  id: totrans-3088
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [events]**'
  id: totrans-3089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [events]**'
- en: Fixed regression where using a `functools.partial()` with the event system would
    cause a recursion overflow due to usage of inspect.getargspec() on it in order
    to detect a legacy calling signature for certain events, and apparently there’s
    no way to do this with a partial object. Instead we skip the legacy check and
    assume the modern style; the check itself now only occurs for the SessionEvents.after_bulk_update
    and SessionEvents.after_bulk_delete events. Those two events will require the
    new signature style if assigned to a “partial” event listener.
  id: totrans-3090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即在事件系统中使用`functools.partial()`会因为在其上使用inspect.getargspec()来检测某些事件的传统调用签名而导致递归溢出，显然无法通过部分对象来实现这一点。相反，我们跳过传统检查并假定现代风格；现在检查本身仅在SessionEvents.after_bulk_update和SessionEvents.after_bulk_delete事件中发生。如果将这两个事件分配给“partial”事件侦听器，则这两个事件将需要新的签名样式。
- en: 'References: [#2905](https://www.sqlalchemy.org/trac/ticket/2905)'
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2905](https://www.sqlalchemy.org/trac/ticket/2905)
- en: '**[orm] [bug]**'
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute would fail if the `.info` argument were
    only passed to the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") creation call but not to the object itself. Courtesy
    Robin Schoonover.
  id: totrans-3093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，在使用新的[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")属性时，如果`.info`参数只传递给了[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")创建调用，而没有传递给对象本身，则会失败。Robin Schoonover 礼貌提供。
- en: '**[orm] [bug]**'
  id: totrans-3094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where we don’t check the given name against the correct string
    class when setting up a backref based on a name, therefore causing the error “too
    many values to unpack”. This was related to the Py3k conversion.
  id: totrans-3095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，当设置基于名称的反向引用时，我们不会检查给定名称与正确的字符串类是否匹配，因此会导致错误“要解包的值太多”。这与 Py3k 转换有关。
- en: 'References: [#2901](https://www.sqlalchemy.org/trac/ticket/2901)'
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2901](https://www.sqlalchemy.org/trac/ticket/2901)
- en: '**[orm] [bug]**'
  id: totrans-3097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where we apparently still create an implicit alias when saying
    query(B).join(B.cs), where “C” is a joined inh class; however, this implicit alias
    was created only considering the immediate left side, and not a longer chain of
    joins along different joined-inh subclasses of the same base. As long as we’re
    still implicitly aliasing in this case, the behavior is dialed back a bit so that
    it will alias the right side in a wider variety of cases.
  id: totrans-3098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，当我们显然仍然在说查询(B).join(B.cs)时创建了一个隐式别名，其中“C”是一个已连接的继承类；但是，此隐式别名仅考虑了立即左侧，而不是沿着相同基类的不同已连接继承子类的一长串连接。只要我们在这种情况下仍然隐式地为别名赋值，行为就会稍微减弱，以便在更广泛的情况下为右侧创建别名。
- en: 'References: [#2903](https://www.sqlalchemy.org/trac/ticket/2903)'
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2903](https://www.sqlalchemy.org/trac/ticket/2903)
- en: orm declarative
  id: totrans-3100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed an extremely unlikely memory issue where when using [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") to define classes pending for
    reflection, if some subset of those classes were discarded before the [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") method were called to
    reflect and map the class, a strong reference to the class would remain held within
    the declarative internals. This internal collection of “classes to map” now uses
    weak references against the classes themselves.
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个极不可能的内存问题，即当使用[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection")来定义待反射的类时，如果在调用[`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")方法之前丢弃了其中某些类的子集，那么在反射和映射类时将会保留对该类的强引用在声明性内部。这个内部的“要映射的类”集合现在对类本身使用弱引用。
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A quasi-regression where apparently in 0.8 you can set a class-level attribute
    on declarative to simply refer directly to an [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") on a superclass or on the class itself,
    and it acts more or less like a synonym; in 0.9, this fails to set up enough bookkeeping
    to keep up with the more liberalized backref logic from [#2789](https://www.sqlalchemy.org/trac/ticket/2789).
    Even though this use case was never directly considered, it is now detected by
    declarative at the “setattr()” level as well as when setting up a subclass, and
    the mirrored/renamed attribute is now set up as a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead.
  id: totrans-3104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 几乎是一个回归，显然在 0.8 版本中，你可以在声明性上设置一个类级别的属性，直接引用超类上或类本身上的[`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")，并且它更或多少地充当同义词；在 0.9 版本中，这无法设置足够的记录以跟上从
    [#2789](https://www.sqlalchemy.org/trac/ticket/2789) 中放宽的反向引用逻辑。即使从未直接考虑过这种用例，现在也会在声明性“setattr()”级别以及在设置子类时检测到，同时，镜像/重命名的属性现在被设置为[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")。
- en: 'References: [#2900](https://www.sqlalchemy.org/trac/ticket/2900)'
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2900](https://www.sqlalchemy.org/trac/ticket/2900)
- en: orm extensions
  id: totrans-3106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 扩展
- en: '**[orm] [extensions] [feature]**'
  id: totrans-3107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [extensions] [feature]**'
- en: A new, **experimental** extension [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap") is added. This extension expands upon the functionality
    of Declarative as well as the [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class to produce a base class
    which automatically generates mapped classes *and relationships* based on table
    metadata.
  id: totrans-3108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的、**实验性的**扩展 [`sqlalchemy.ext.automap`](../orm/extensions/automap.html#module-sqlalchemy.ext.automap
    "sqlalchemy.ext.automap")。该扩展扩展了 Declarative 的功能以及 [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") 类，以生成一个基类，该基类根据表元数据自动生成映射类和*关系*。
- en: See also
  id: totrans-3109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Automap Extension](migration_09.html#feature-automap)'
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Automap Extension](migration_09.html#feature-automap)'
- en: '[Automap](../orm/extensions/automap.html)'
  id: totrans-3111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Automap](../orm/extensions/automap.html)'
- en: sql
  id: totrans-3112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'Conjunctions like [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") can now accept Python generators as a single
    argument, e.g.:'
  id: totrans-3114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像 [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    和 [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    这样的连接词现在可以接受 Python 生成器作为单个参数，例如：
- en: '[PRE9]'
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The logic here looks for a single argument `*args` where the first element is
    an instance of `types.GeneratorType`.
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处的逻辑查找一个单一参数 `*args`，其中第一个元素是 `types.GeneratorType` 的实例。
- en: schema
  id: totrans-3117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [feature]**'
  id: totrans-3118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: The [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") and [`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table") parameters are now available on the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method.
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 和 [`Table.autoload_replace`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_replace
    "sqlalchemy.schema.Table") 参数现在可以在 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法中使用。'
- en: 0.9.0
  id: totrans-3120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本：0.9.0
- en: 'Released: December 30, 2013'
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年12月30日
- en: orm
  id: totrans-3122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") or DBAPI-related subclass now can accommodate
    additional information about the “reason” for the exception; the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now adds some detail to it when the exception occurs
    within an autoflush. This approach is taken as opposed to combining [`FlushError`](../orm/exceptions.html#sqlalchemy.orm.exc.FlushError
    "sqlalchemy.orm.exc.FlushError") with a Python 3 style “chained exception” approach
    so as to maintain compatibility both with Py2K code as well as code that already
    catches `IntegrityError` or similar.
  id: totrans-3124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    或与 DBAPI 相关的子类现在可以容纳有关异常“原因”的附加信息；当异常发生在自动刷新中时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 现在会添加一些详细信息。这种方法是为了与 Py2K 代码以及已经捕获 `IntegrityError`
    或类似异常的代码保持兼容，而不是将 [`FlushError`](../orm/exceptions.html#sqlalchemy.orm.exc.FlushError
    "sqlalchemy.orm.exc.FlushError") 与 Python 3 风格的“链接异常”方法相结合。'
- en: '**[orm] [feature] [backrefs]**'
  id: totrans-3125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [backrefs]**'
- en: Added new argument `include_backrefs=True` to the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function; when set to False, a validation event will
    not be triggered if the event was initiated as a backref to an attribute operation
    from the other side.
  id: totrans-3126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")
    函数添加了新参数 `include_backrefs=True`；当设置为 False 时，如果事件是从另一侧的属性操作的反向引用发起的，则不会触发验证事件。
- en: See also
  id: totrans-3127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[include_backrefs=False option for @validates](migration_09.html#feature-1535)'
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[include_backrefs=False option for @validates](migration_09.html#feature-1535)'
- en: 'References: [#1535](https://www.sqlalchemy.org/trac/ticket/1535)'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1535](https://www.sqlalchemy.org/trac/ticket/1535)
- en: '**[orm] [feature]**'
  id: totrans-3130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method, to complement the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. Pull request
    courtesy Mario Lassnig.
  id: totrans-3131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")方法添加了用于指定`SELECT`的`FOR UPDATE`子句的新API，以补充新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-3133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对select()，Query()的新FOR UPDATE支持](migration_09.html#feature-github-42)'
- en: '**[orm] [bug]**'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-3135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略进行了调整，确保查询在加载过程开始后运行；这样subqueryload就优先于其他加载器，这些加载器可能由于其他错误的时机导致命中相同属性。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.5
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-3138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用从表到基表的联接表继承时的bug，其中PK列也不是同名的情况；持久性系统在INSERT时无法将主键值从基表复制到继承表中。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.5
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-3142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）不能解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；之前引发一个未绑定的本地错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.5
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: '**[orm] [bug]**'
  id: totrans-3146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2818](https://www.sqlalchemy.org/trac/ticket/2818)引入的回归，其中生成的EXISTS查询会为具有两个同名列的语句产生“正在替换列”警告，因为内部SELECT没有设置use_labels。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.4
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug] [collections] [py3k]**'
  id: totrans-3150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [collections] [py3k]**'
- en: Added support for the Python 3 method `list.clear()` within the ORM collection
    instrumentation system; pull request courtesy Eduardo Schettino.
  id: totrans-3151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM集合仪器系统中添加了对Python 3方法`list.clear()`的支持；感谢Eduardo Schettino的拉取请求。
- en: '**[orm] [bug]**'
  id: totrans-3152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Some refinements to the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct with regards to descriptors, like
    hybrids, synonyms, composites, user-defined descriptors, etc. The attribute adaptation
    which goes on has been made more robust, such that if a descriptor returns another
    instrumented attribute, rather than a compound SQL expression element, the operation
    will still proceed. Additionally, the “adapted” operator will retain its class;
    previously, a change in class from `InstrumentedAttribute` to `QueryableAttribute`
    (a superclass) would interact with Python’s operator system such that an expression
    like `aliased(MyClass.x) > MyClass.x` would reverse itself to read `myclass.x
    < myclass_1.x`. The adapted attribute will also refer to the new [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as its parent which was not always the case
    before.
  id: totrans-3153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造进行了一些细化，涉及到描述符，如混合体、同义词、复合体、用户定义的描述符等。进行的属性适应变得更加健壮，因此，如果描述符返回另一个被检测的属性，而不是一个复合的
    SQL 表达式元素，操作仍将继续。此外，“适应”的操作符将保留其类；以前，从`InstrumentedAttribute`到`QueryableAttribute`（一个超类）的类变化会与
    Python 的操作符系统交互，使得像`aliased(MyClass.x) > MyClass.x`这样的表达式会反转为`myclass.x < myclass_1.x`。适应的属性还将引用新的[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为其父类，这在以前并不总是如此。
- en: 'References: [#2872](https://www.sqlalchemy.org/trac/ticket/2872)'
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2872](https://www.sqlalchemy.org/trac/ticket/2872)
- en: '**[orm] [bug]**'
  id: totrans-3155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `viewonly` flag on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will now prevent attribute history from being written
    on behalf of the target attribute. This has the effect of the object not being
    written to the Session.dirty list if it is mutated. Previously, the object would
    be present in Session.dirty, but no change would take place on behalf of the modified
    attribute during flush. The attribute still emits events such as backref events
    and user-defined events and will still receive mutations from backrefs.
  id: totrans-3156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的`viewonly`标志现在将阻止为目标属性代表写入属性历史记录。这将导致对象在被改变时不会被写入到
    Session.dirty 列表中。以前，对象会出现在 Session.dirty 中，但在 flush 期间不会代表修改的属性发生任何变化。该属性仍会发出事件，如反向引用事件和用户定义事件，并且仍会接收来自反向引用的变化。'
- en: See also
  id: totrans-3157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[viewonly=True on relationship() prevents history from taking effect](migration_09.html#migration-2833)'
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在 relationship() 上使用 viewonly=True 阻止历史记录生效](migration_09.html#migration-2833)'
- en: 'References: [#2833](https://www.sqlalchemy.org/trac/ticket/2833)'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2833](https://www.sqlalchemy.org/trac/ticket/2833)
- en: '**[orm] [bug]**'
  id: totrans-3160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-3161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")的新[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")属性的支持。
- en: '**[orm] [bug]**'
  id: totrans-3162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object would cause the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute to fail.
  id: totrans-3163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用新的[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")对象会导致[`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")属性失败的 bug。
- en: '**[orm] [bug] [sql] [sqlite]**'
  id: totrans-3164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [sql] [sqlite]**'
- en: Fixed a regression introduced by the join rewriting feature of [#2369](https://www.sqlalchemy.org/trac/ticket/2369)
    and [#2587](https://www.sqlalchemy.org/trac/ticket/2587) where a nested join with
    one side already an aliased select would fail to translate the ON clause on the
    outside correctly; in the ORM this could be seen when using a SELECT statement
    as a “secondary” table.
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于[#2369](https://www.sqlalchemy.org/trac/ticket/2369)和[#2587](https://www.sqlalchemy.org/trac/ticket/2587)的连接重写功能引入的回归，其中一个嵌套连接的一侧已经是别名选择时，无法正确翻译外部的
    ON 子句的 bug；在 ORM 中，当使用 SELECT 语句作为“secondary”表时，可以看到这种情况。
- en: 'References: [#2858](https://www.sqlalchemy.org/trac/ticket/2858)'
  id: totrans-3166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2858](https://www.sqlalchemy.org/trac/ticket/2858)
- en: orm declarative
  id: totrans-3167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Declarative does an extra check to detect if the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is mapped multiple times under different properties
    (which typically should be a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead) or if two or more [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are given the same name, raising a warning
    if this condition is detected.
  id: totrans-3169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 声明式进行额外检查，以检测是否将相同的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")映射到不同的属性下（通常应该是[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")），或者是否给两个或更多的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象赋予相同的名称，如果检测到这种情况，则会发出警告。
- en: 'References: [#2828](https://www.sqlalchemy.org/trac/ticket/2828)'
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2828](https://www.sqlalchemy.org/trac/ticket/2828)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [错误]**'
- en: The [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class has been enhanced to provide
    automatic reflection support for the “secondary” table referred to by a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). “secondary”, when specified either as a string
    table name, or as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object with only a name and [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object will also be included in the reflection process
    when [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") is called.
  id: totrans-3172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") 类已经增强，为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")引用的“次要”表提供自动反射支持。当指定“次要”表时，无论是作为字符串表名还是作为仅具有名称和[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，当调用[`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")时，也将包括在反射过程中。'
- en: 'References: [#2865](https://www.sqlalchemy.org/trac/ticket/2865)'
  id: totrans-3173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2865](https://www.sqlalchemy.org/trac/ticket/2865)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明式] [错误]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在Py2K中，unicode文字不能作为声明式中的类或其他参数的字符串名称被[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")接受的bug。
- en: examples
  id: totrans-3176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-3177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed bug which prevented history_meta recipe from working with joined inheritance
    schemes more than one level deep.
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，该bug阻止了history_meta配方与多级联继承方案一起工作。
- en: engine
  id: totrans-3179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function has been improved so that we will be
    able to parse dialect-specific arguments from string configuration dictionaries.
    Dialect classes can now provide their own list of parameter types and string-conversion
    routines. The feature is not yet used by the built-in dialects, however.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") 函数已经改进，以便我们能够从字符串配置字典中解析特定方言的参数。方言类现在可以提供自己的参数类型列表和字符串转换例程。然而，该功能目前尚未被内置方言使用。'
- en: 'References: [#2875](https://www.sqlalchemy.org/trac/ticket/2875)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2875](https://www.sqlalchemy.org/trac/ticket/2875)
- en: '**[engine] [bug]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`connect()`调用引发的错误不是`dbapi.Error`的子类（如`TypeError`、`NotImplementedError`等）时，将原样传播该异常。以前，针对`connect()`例程的特定错误处理既会通过方言的[`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect")例程不适当地运行异常，也会将其包装在一个[`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")中。现在，它将以与执行过程中相同的方式原样传播。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-3186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-3187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")已经进行了增强，当现有连接尝试阻塞时，不会阻止新的连接尝试。以前，新连接的生成是在监视溢出的块内串行进行的；现在，溢出计数器在连接过程本身之外的自己的临界区内被修改。'
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-3190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-3191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待池化连接可用的逻辑进行了微调，这样对于未指定超时的连接池，每半秒钟都会中断等待，以检查所谓的“中止”标志，该标志允许等待者在整个连接池被卸载的情况下中断；通常，等待者应该因为notify_all()而中断，但在极少数情况下可能会错过这个notify_all()。这是从0.8.0首次引入的逻辑的扩展，该问题只在压力测试中偶尔观察到。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-3195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-3196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")中引发了一个预DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")时SQL语句会不正确进行ASCII编码的错误，从而导致非ASCII语句的编码错误。现在，字符串化仍然在Python
    Unicode内部，因此避免了编码错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: '**[engine] [bug]**'
  id: totrans-3199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    routine and the related [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function no longer considers the `+` sign to be
    a space within the password field. The parsing in this area has been adjusted
    to match more closely to how RFC 1738 handles these tokens, in that both `username`
    and `password` expect only `:`, `@`, and `/` to be encoded.
  id: totrans-3200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")例程和相关的[`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url")函数不再将`+`号视为密码字段中的空格。该区域的解析已经调整，以更接近RFC 1738处理这些标记的方式，即`username`和`password`都只期望`:`、`@`和`/`被编码。'
- en: See also
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The “password” portion of a create_engine() no longer considers the + sign
    as an encoded space](migration_09.html#migration-2873)'
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[create_engine()的“密码”部分不再将+号视为编码空格](migration_09.html#migration-2873)'
- en: 'References: [#2873](https://www.sqlalchemy.org/trac/ticket/2873)'
  id: totrans-3203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2873](https://www.sqlalchemy.org/trac/ticket/2873)
- en: '**[engine] [bug]**'
  id: totrans-3204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The `RowProxy` object is now sortable in Python as a regular tuple is; this
    is accomplished via ensuring tuple() conversion on both sides within the `__eq__()`
    method as well as the addition of a `__lt__()` method.
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RowProxy`对象现在在Python中可排序，就像普通元组一样；这是通过在`__eq__()`方法中确保在两侧都进行tuple()转换以及添加`__lt__()`方法来实现的。'
- en: See also
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[RowProxy now has tuple-sorting behavior](migration_09.html#migration-2848)'
  id: totrans-3207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RowProxy现在具有元组排序行为](migration_09.html#migration-2848)'
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848)'
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848)
- en: sql
  id: totrans-3209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New improvements to the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, including more flexible ways to set
    up bound parameters and return types; in particular, a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") can now be turned into a full FROM-object, embeddable
    in other statements as an alias or CTE using the new method [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns"). The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct can also render “inline” bound parameters
    when the construct is compiled in a “literal bound” context.
  id: totrans-3211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造的新改进，包括更灵活的设置绑定参数和返回类型的方式；特别是，现在可以将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")转换为完整的FROM对象，在其他语句中作为别名或CTE嵌入，使用新方法[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")。当构造在“文字绑定”上下文中编译时，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造还可以呈现“内联”绑定参数。'
- en: See also
  id: totrans-3212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New text() Capabilities](migration_09.html#feature-2877)'
  id: totrans-3213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[text()的新功能](migration_09.html#feature-2877)'
- en: 'References: [#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)'
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)
- en: '**[sql] [feature]**'
  id: totrans-3215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. This method
    supports a more straightforward system of setting dialect-specific options compared
    to the `for_update` keyword argument of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and also includes support for the SQL standard
    `FOR UPDATE OF` clause. The ORM also includes a new corresponding method [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Pull request courtesy Mario Lassnig.
  id: totrans-3216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一种用于指定`SELECT`的`FOR UPDATE`子句的API，使用新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法。该方法支持一种更直接的设置方言特定选项的系统，与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的`for_update`关键字参数相比，还支持SQL标准的`FOR UPDATE OF`子句。ORM还包括一个新的相应方法[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-3217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[select()、Query() 新的 FOR UPDATE 支持](migration_09.html#feature-github-42)'
- en: '**[sql] [feature]**'
  id: totrans-3219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The precision used when coercing a returned floating point value to Python `Decimal`
    via string is now configurable. The flag `decimal_return_scale` is now supported
    by all [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    and [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    types, which will ensure this many digits are taken from the native floating point
    value when it is converted to string. If not present, the type will make use of
    the value of `.scale`, if the type supports this setting and it is non-None. Otherwise
    the original default length of 10 is used.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将返回的浮点值强制转换为 Python `Decimal` 时，现在可以配置使用的精度。标志 `decimal_return_scale` 现在由所有
    [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    和 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型支持，这将确保从本机浮点值中取出这么多位数字，当它被转换为字符串时。如果不存在，则类型将使用`.scale` 的值，如果类型支持此设置且它不为 None。否则将使用原始默认长度
    10。
- en: See also
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Floating Point String-Conversion Precision Configurable for Native Floating
    Point Types](migration_09.html#feature-2867)'
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[本机浮点类型的浮点字符串转换精度可配置](migration_09.html#feature-2867)'
- en: 'References: [#2867](https://www.sqlalchemy.org/trac/ticket/2867)'
  id: totrans-3223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2867](https://www.sqlalchemy.org/trac/ticket/2867)
- en: '**[sql] [bug]**'
  id: totrans-3224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即具有 Sequence 的主键列，但该列不是“自动增量”列，可能是因为具有外键约束或设置了 `autoincrement=False`，在没有支持序列的后端上，当插入缺少主键值的
    INSERT 时，会尝试触发 Sequence。这将发生在像 SQLite、MySQL 这样的非序列后端上。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-3227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-3228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 方法的 bug，其中给定名称的顺序在生成 INSERT 语句时不会被考虑，因此与给定
    SELECT 语句中的列名不匹配。还注意到 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 暗示着不能使用 Python 端的插入默认值，因为该语句没有
    VALUES 子句。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-3231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [bug]**'
  id: totrans-3232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function, when given a plain literal value, will now apply the given type to the
    given literal value on the bind parameter side according to the type given to
    the cast, in the same manner as that of the [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") function. However unlike [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce"), this only takes effect if a non-clauseelement
    value is passed to [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast"); an existing typed construct will retain its
    type.
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定一个普通文本值时，[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")函数现在会根据给定的类型将给定的文本值应用到绑定参数侧，方式与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")函数相同。然而，与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")不同的是，只有当传递给[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")的不是clauseelement值时，才会生效；现有的类型构造将保留其类型。
- en: '**[sql] [bug]**'
  id: totrans-3234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    class more aggressively checks the given column argument. If not a string, it
    checks that the object is at least a [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), or an object that resolves to one,
    and that the `.table` attribute, if present, refers to a [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") or subclass, and not something like an
    [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias").
    Otherwise, a [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is raised.
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")类更积极地检查给定的列参数。如果不是字符串，则检查对象至少是[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")或解析为其中一个的对象，并且`.table`属性（如果存在）指向[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")或其子类，而不是类似[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")的东西。否则，将引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。'
- en: 'References: [#2883](https://www.sqlalchemy.org/trac/ticket/2883)'
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2883](https://www.sqlalchemy.org/trac/ticket/2883)
- en: '**[sql] [bug]**'
  id: totrans-3237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The precedence rules for the [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") operator have been modified,
    such that the COLLATE operator is now of lower precedence than the comparison
    operators. This has the effect that a COLLATE applied to a comparison will not
    render parenthesis around the comparison, which is not parsed by backends such
    as MSSQL. The change is backwards incompatible for those setups that were working
    around the issue by applying `Operators.collate()` to an individual element of
    the comparison expression, rather than the comparison expression as a whole.
  id: totrans-3238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")运算符的优先规则已经修改，使得COLLATE运算符现在比比较运算符的优先级低。这样做的效果是，应用于比较的COLLATE不会在比较周围添加括号，这样的括号在诸如MSSQL等后端不会被解析。这个改变对那些通过将`Operators.collate()`应用于比较表达式的单个元素而绕过问题的设置是不兼容的，而不是整个比较表达式。'
- en: See also
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The precedence rules for COLLATE have been changed](migration_09.html#migration-2879)'
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[COLLATE的优先规则已更改](migration_09.html#migration-2879)'
- en: 'References: [#2879](https://www.sqlalchemy.org/trac/ticket/2879)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2879](https://www.sqlalchemy.org/trac/ticket/2879)
- en: '**[sql] [enhancement]**'
  id: totrans-3242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [增强]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-3243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在编译的语句中存在一个未提供值的[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")时引发的异常现在在错误消息中包含了绑定参数的键名。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: schema
  id: totrans-3245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-3246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed a regression caused by [#2812](https://www.sqlalchemy.org/trac/ticket/2812)
    where the repr() for table and column names would fail if the name contained non-ascii
    characters.
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2812](https://www.sqlalchemy.org/trac/ticket/2812) 引起的回归，其中表和列名的 repr()
    如果包含非 ASCII 字符则会失败。
- en: 'References: [#2868](https://www.sqlalchemy.org/trac/ticket/2868)'
  id: totrans-3248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2868](https://www.sqlalchemy.org/trac/ticket/2868)
- en: postgresql
  id: totrans-3249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL JSON has been added, using the new [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type. Huge thanks to Nathan Rice for implementing and
    testing this.
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL JSON 的支持，使用新的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型。非常感谢 Nathan Rice 实施和测试。
- en: 'References: [#2581](https://www.sqlalchemy.org/trac/ticket/2581)'
  id: totrans-3252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2581](https://www.sqlalchemy.org/trac/ticket/2581)
- en: '**[postgresql] [feature]**'
  id: totrans-3253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for PostgreSQL TSVECTOR via the [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") type. Pull request courtesy Noufal
    Ibrahim.
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") 类型添加了对 PostgreSQL TSVECTOR 的支持。拉取请求由
    Noufal Ibrahim 提供。
- en: '**[postgresql] [bug]**'
  id: totrans-3255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-3256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当使用 pypostgresql 适配器时，索引反射会错误地解释 indkey 值，该适配器将这些值作为列表返回，而不是 psycopg2
    返回的字符串类型。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: '**[postgresql] [bug]**'
  id: totrans-3259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Now using psycopg2 UNICODEARRAY extension for handling unicode arrays with psycopg2
    + normal “native unicode” mode, in the same way the UNICODE extension is used.
  id: totrans-3260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 psycopg2 的 UNICODEARRAY 扩展来处理带有 psycopg2 + 普通“本地 unicode”模式的 unicode 数组，与
    UNICODE 扩展的使用方式相同。
- en: '**[postgresql] [bug]**'
  id: totrans-3261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where values within an ENUM weren’t escaped for single quote signs.
    Note that this is backwards-incompatible for existing workarounds that manually
    escape the single quotes.
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ENUM 中的值未对单引号进行转义的 bug。请注意，对于手动转义单引号的现有解决方法来说，这是不兼容��。
- en: See also
  id: totrans-3263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL CREATE TYPE <x> AS ENUM now applies quoting to values](migration_09.html#migration-2878)'
  id: totrans-3264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL CREATE TYPE <x> AS ENUM 现在对值应用引号](migration_09.html#migration-2878)'
- en: 'References: [#2878](https://www.sqlalchemy.org/trac/ticket/2878)'
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2878](https://www.sqlalchemy.org/trac/ticket/2878)
- en: mysql
  id: totrans-3266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improvements to the system by which SQL types generate within `__repr__()`,
    particularly with regards to the MySQL integer/numeric/ character types which
    feature a wide variety of keyword arguments. The `__repr__()` is important for
    use with Alembic autogenerate for when Python code is rendered in a migration
    script.
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SQL 类型在 `__repr__()` 中生成的系统，特别是关于 MySQL 整数/数字/字符类型，这些类型具有各种关键字参数。`__repr__()`
    对于 Alembic autogenerate 很重要，用于在迁移脚本中呈现 Python 代码时使用。
- en: 'References: [#2893](https://www.sqlalchemy.org/trac/ticket/2893)'
  id: totrans-3269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2893](https://www.sqlalchemy.org/trac/ticket/2893)
- en: mssql
  id: totrans-3270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-3271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型时，与“asdecimal”标志一起使用将适用于 Firebird 以及 mssql+pyodbc 方言；以前未发生十进制转换。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-3274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“Net-Lib error during Connection reset by peer”消息添加到 pymssql 方言中检查“disconnect”消息的列表中。感谢
    John Anderson。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[mssql] [bug]**'
  id: totrans-3277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 0.8.0 中引入的 bug，当 MSSQL 中的索引位于替代模式中时，`DROP INDEX` 语句会渲染错误；模式名/表名会被颠倒。格式也已经修订以匹配当前的
    MSSQL 文档。感谢 Derek Harland。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: oracle
  id: totrans-3280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-02396“最大空闲时间”错误代码添加到与cx_oracle一起的“is disconnect”代码列表中。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle中未指定长度的`VARCHAR`类型（例如用于`CAST`或类似操作）会错误地呈现为`None CHAR`或类似情况的错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-3289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [firebird]**'
  id: totrans-3290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird方言将引用以下划线开头的标识符。感谢Treeve Jelbert。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-3294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-3295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Firebird索引反射中列未正确排序的错误；现在它们按照RDB$FIELD_POSITION的顺序排序。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: '**[bug] [declarative]**'
  id: totrans-3297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将字符串参数发送到[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时，如果未解析为类或映射器，则错误消息已更正为与接收非字符串参数时相同的方式，该方式指示配置错误的关系名称。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-3300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: '**[bug] [ext]**'
  id: totrans-3301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，该错误导致`serializer`扩展无法正确处理包含非ASCII字符的表或列名称。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: '**[bug] [firebird]**'
  id: totrans-3305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Changed the queries used by Firebird to list table and view names to query from
    the `rdb$relations` view instead of the `rdb$relation_fields` and `rdb$view_relations`
    views. Variants of both the old and new queries are mentioned on many FAQ and
    blogs, however the new queries are taken straight from the “Firebird FAQ” which
    appears to be the most official source of info.
  id: totrans-3306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了Firebird用于列出表和视图名称的查询，从`rdb$relations`视图查询，而不是从`rdb$relation_fields`和`rdb$view_relations`视图查询。许多FAQ和博客中提到了新旧查询的变体，但新查询直接来自“Firebird
    FAQ”，这似乎是最官方的信息来源。
- en: 'References: [#2898](https://www.sqlalchemy.org/trac/ticket/2898)'
  id: totrans-3307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2898](https://www.sqlalchemy.org/trac/ticket/2898)
- en: '**[removed]**'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[removed]**'
- en: The “informix” and “informixdb” dialects have been removed; the code is now
    available as a separate repository on Bitbucket. The IBM-DB project has provided
    production-level Informix support since the informixdb dialect was first added.
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “informix”和“informixdb”方言已被移除；该代码现在作为一个独立的存储库在Bitbucket上提供。自从添加informixdb方言以来，IBM-DB项目提供了生产级Informix支持。
- en: orm
  id: totrans-3310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError") or DBAPI-related subclass now can accommodate
    additional information about the “reason” for the exception; the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now adds some detail to it when the exception occurs
    within an autoflush. This approach is taken as opposed to combining [`FlushError`](../orm/exceptions.html#sqlalchemy.orm.exc.FlushError
    "sqlalchemy.orm.exc.FlushError") with a Python 3 style “chained exception” approach
    so as to maintain compatibility both with Py2K code as well as code that already
    catches `IntegrityError` or similar.
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")或DBAPI相关的子类现在可以容纳有关异常“原因”的其他信息；当异常发生在自动刷新中时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")现在会在异常发生时添加一些详细信息。与将[`FlushError`](../orm/exceptions.html#sqlalchemy.orm.exc.FlushError
    "sqlalchemy.orm.exc.FlushError")与Python 3风格的“链接异常”方法相结合以保持与Py2K代码以及已经捕获`IntegrityError`或类似异常的代码的兼容性相比，采取了这种方法。'
- en: '**[orm] [feature] [backrefs]**'
  id: totrans-3313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [backrefs]**'
- en: Added new argument `include_backrefs=True` to the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function; when set to False, a validation event will
    not be triggered if the event was initiated as a backref to an attribute operation
    from the other side.
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates "sqlalchemy.orm.validates")函数添加了新参数`include_backrefs=True`；当设置为False时，如果事件是从另一侧的属性操作的反向引用发起的，则不会触发验证事件。
- en: See also
  id: totrans-3315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[include_backrefs=False option for @validates](migration_09.html#feature-1535)'
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[include_backrefs=False option for @validates](migration_09.html#feature-1535)'
- en: 'References: [#1535](https://www.sqlalchemy.org/trac/ticket/1535)'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1535](https://www.sqlalchemy.org/trac/ticket/1535)
- en: '**[orm] [feature]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method, to complement the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. Pull request
    courtesy Mario Lassnig.
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的API来指定`SELECT`的`FOR UPDATE`子句，使用新的[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")方法，以补充新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
- en: '**[orm] [bug]**'
  id: totrans-3322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An adjustment to the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") strategy which ensures that the query runs after
    the loading process has begun; this is so that the subqueryload takes precedence
    over other loaders that may be hitting the same attribute due to other eager/noload
    situations at the wrong time.
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")策略进行了调整，确保查询在加载过程开始后运行；这样，subqueryload优先于其他加载器运行，这些加载器可能由于其他错误的时机导致了其他急切/无加载情况。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2887](https://www.sqlalchemy.org/trac/ticket/2887)'
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2887](https://www.sqlalchemy.org/trac/ticket/2887)
- en: '**[orm] [bug]**'
  id: totrans-3326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug when using joined table inheritance from a table to a select/alias
    on the base, where the PK columns were also not same named; the persistence system
    would fail to copy primary key values from the base table to the inherited table
    upon INSERT.
  id: totrans-3327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用从表到基表的连接表继承时的错误，其中主键列也不同名的bug；持久性系统在INSERT时无法将主键值从基表复制到继承表。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2885](https://www.sqlalchemy.org/trac/ticket/2885)'
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2885](https://www.sqlalchemy.org/trac/ticket/2885)
- en: '**[orm] [bug]**'
  id: totrans-3330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    will raise an informative error message when the columns/attribute (names) passed
    don’t resolve to a Column or mapped attribute (such as an erroneous tuple); previously
    raised an unbound local.'
  id: totrans-3331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当传递的列/属性（名称）不能解析为列或映射属性（例如错误的元组）时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")将引发一个信息性错误消息；以前引发一个未绑定的本地错误。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.5
- en: 'References: [#2889](https://www.sqlalchemy.org/trac/ticket/2889)'
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2889](https://www.sqlalchemy.org/trac/ticket/2889)
- en: '**[orm] [bug]**'
  id: totrans-3334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a regression introduced by [#2818](https://www.sqlalchemy.org/trac/ticket/2818)
    where the EXISTS query being generated would produce a “columns being replaced”
    warning for a statement with two same-named columns, as the internal SELECT wouldn’t
    have use_labels set.
  id: totrans-3335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#2818](https://www.sqlalchemy.org/trac/ticket/2818)引入的回归，其中生成的EXISTS查询会对具有两个同名列的语句产生“正在替换列”的警告，因为内部SELECT不会设置use_labels。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.4
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-3337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug] [collections] [py3k]**'
  id: totrans-3338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [collections] [py3k]**'
- en: Added support for the Python 3 method `list.clear()` within the ORM collection
    instrumentation system; pull request courtesy Eduardo Schettino.
  id: totrans-3339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM集合仪器系统中添加了对Python 3方法`list.clear()`的支持；拉取请求由Eduardo Schettino提供。
- en: '**[orm] [bug]**'
  id: totrans-3340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Some refinements to the [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") construct with regards to descriptors, like
    hybrids, synonyms, composites, user-defined descriptors, etc. The attribute adaptation
    which goes on has been made more robust, such that if a descriptor returns another
    instrumented attribute, rather than a compound SQL expression element, the operation
    will still proceed. Additionally, the “adapted” operator will retain its class;
    previously, a change in class from `InstrumentedAttribute` to `QueryableAttribute`
    (a superclass) would interact with Python’s operator system such that an expression
    like `aliased(MyClass.x) > MyClass.x` would reverse itself to read `myclass.x
    < myclass_1.x`. The adapted attribute will also refer to the new [`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") as its parent which was not always the case
    before.
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")构造进行了一些优化，涉及到描述符，如混合体、同义词、复合体、用户定义的描述符等。进行的属性适应性更加健壮，因此如果描述符返回另一个受检测的属性，而不是一个复合SQL表达式元素，则操作仍将继续。此外，“适应”运算符将保留其类；以前，从`InstrumentedAttribute`到`QueryableAttribute`（超类）的类变化会与Python的运算符系统交互，使得像`aliased(MyClass.x)
    > MyClass.x`这样的表达式会反转为`myclass.x < myclass_1.x`。适应的属性还将引用新的[`AliasedClass`](../orm/queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")作为其父类，这在以前并不总是如此。
- en: 'References: [#2872](https://www.sqlalchemy.org/trac/ticket/2872)'
  id: totrans-3342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2872](https://www.sqlalchemy.org/trac/ticket/2872)
- en: '**[orm] [bug]**'
  id: totrans-3343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The `viewonly` flag on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will now prevent attribute history from being written
    on behalf of the target attribute. This has the effect of the object not being
    written to the Session.dirty list if it is mutated. Previously, the object would
    be present in Session.dirty, but no change would take place on behalf of the modified
    attribute during flush. The attribute still emits events such as backref events
    and user-defined events and will still receive mutations from backrefs.
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的`viewonly`标志现在会阻止代表目标属性写入属性历史。这使得如果对象被改变，它不会被写入到Session.dirty列表中。以前，对象会出现在Session.dirty中，但在刷新期间不会代表修改的属性进行任何更改。该属性仍然会发出事件，例如反向引用事件和用户定义的事件，并且仍将从反向引用接收到变化。
- en: See also
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[viewonly=True on relationship() prevents history from taking effect](migration_09.html#migration-2833)'
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在relationship()上设置viewonly=True可以阻止历史记录生效](migration_09.html#migration-2833)'
- en: 'References: [#2833](https://www.sqlalchemy.org/trac/ticket/2833)'
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2833](https://www.sqlalchemy.org/trac/ticket/2833)
- en: '**[orm] [bug]**'
  id: totrans-3348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for new [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute to [`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session").
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info "sqlalchemy.orm.Session.info")属性添加了对[`scoped_session`](../orm/contextual.html#sqlalchemy.orm.scoped_session
    "sqlalchemy.orm.scoped_session")的支持。
- en: '**[orm] [bug]**'
  id: totrans-3350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where usage of new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") object would cause the [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute to fail.
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用新的 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    对象会导致 [`Query.column_descriptions`](../orm/queryguide/query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 属性失败的 bug。
- en: '**[orm] [bug] [sql] [sqlite]**'
  id: totrans-3352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [SQL] [SQLite]**'
- en: Fixed a regression introduced by the join rewriting feature of [#2369](https://www.sqlalchemy.org/trac/ticket/2369)
    and [#2587](https://www.sqlalchemy.org/trac/ticket/2587) where a nested join with
    one side already an aliased select would fail to translate the ON clause on the
    outside correctly; in the ORM this could be seen when using a SELECT statement
    as a “secondary” table.
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#2369](https://www.sqlalchemy.org/trac/ticket/2369) 和 [#2587](https://www.sqlalchemy.org/trac/ticket/2587)
    的连接重写特性引入的回归，其中一个嵌套连接的一侧已经是别名选择时，外部的 ON 子句无法正确转换的问题；在 ORM 中，当使用 SELECT 语句作为“次要”表时，可能会出现这种情况。
- en: 'References: [#2858](https://www.sqlalchemy.org/trac/ticket/2858)'
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2858](https://www.sqlalchemy.org/trac/ticket/2858)
- en: orm declarative
  id: totrans-3355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明式] [错误]**'
- en: Declarative does an extra check to detect if the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is mapped multiple times under different properties
    (which typically should be a [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") instead) or if two or more [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are given the same name, raising a warning
    if this condition is detected.
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Declarative 做了额外的检查，以检测同一个 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 是否在不同属性下被映射多次（通常应该是 [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")），或者是否有两个或更多的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象具有相同的名称，如果检测到这种情况，则会发出警告。
- en: 'References: [#2828](https://www.sqlalchemy.org/trac/ticket/2828)'
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2828](https://www.sqlalchemy.org/trac/ticket/2828)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明式] [错误]**'
- en: The [`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") class has been enhanced to provide
    automatic reflection support for the “secondary” table referred to by a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). “secondary”, when specified either as a string
    table name, or as a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object with only a name and [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object will also be included in the reflection process
    when [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") is called.
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DeferredReflection`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection
    "sqlalchemy.ext.declarative.DeferredReflection") 类已经增强，以提供对由 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 引用的“次要”表的自动反射支持。当指定“次要”表时，无论是作为字符串表名，还是作为仅具有名称和
    [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，当调用 [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") 时，也将包括在反射过程中。'
- en: 'References: [#2865](https://www.sqlalchemy.org/trac/ticket/2865)'
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2865](https://www.sqlalchemy.org/trac/ticket/2865)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明式] [错误]**'
- en: Fixed bug where in Py2K a unicode literal would not be accepted as the string
    name of a class or other argument within declarative using [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，在 Py2K 中，unicode 文本不能被接受作为声明式中 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 内的类或其他参数的字符串名称。
- en: examples
  id: totrans-3364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-3365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed bug which prevented history_meta recipe from working with joined inheritance
    schemes more than one level deep.
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，该 bug 阻止了 history_meta 配方与超过一级深度的连接继承方案一起工作。
- en: engine
  id: totrans-3367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-3368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config") function has been improved so that we will be
    able to parse dialect-specific arguments from string configuration dictionaries.
    Dialect classes can now provide their own list of parameter types and string-conversion
    routines. The feature is not yet used by the built-in dialects, however.
  id: totrans-3369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`engine_from_config()`](../core/engines.html#sqlalchemy.engine_from_config
    "sqlalchemy.engine_from_config")函数已经改进，以便我们能够从字符串配置字典中解析特定于方言的参数。方言类现在可以提供自己的参数类型列表和字符串转换例程。然而，该功能尚未被内置方言使用。'
- en: 'References: [#2875](https://www.sqlalchemy.org/trac/ticket/2875)'
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2875](https://www.sqlalchemy.org/trac/ticket/2875)
- en: '**[engine] [bug]**'
  id: totrans-3371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: A DBAPI that raises an error on `connect()` which is not a subclass of dbapi.Error
    (such as `TypeError`, `NotImplementedError`, etc.) will propagate the exception
    unchanged. Previously, the error handling specific to the `connect()` routine
    would both inappropriately run the exception through the dialect’s [`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect") routine as well as wrap it in a [`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError"). It is now propagated unchanged in the same way as
    occurs within the execute process.
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引发`connect()`上错误的DBAPI如果不是dbapi.Error的子类（如`TypeError`、`NotImplementedError`等），则会传播未改变的异常。以前，`connect()`例程的特定错误处理既不恰当地通过方言的[`Dialect.is_disconnect()`](../core/internals.html#sqlalchemy.engine.Dialect.is_disconnect
    "sqlalchemy.engine.Dialect.is_disconnect")例程运行异常，也将其包装在[`sqlalchemy.exc.DBAPIError`](../core/exceptions.html#sqlalchemy.exc.DBAPIError
    "sqlalchemy.exc.DBAPIError")中。现在，它与执行过程中发生的方式相同，未经改变地传播。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此更改还**被回溯到**: 0.8.4'
- en: 'References: [#2881](https://www.sqlalchemy.org/trac/ticket/2881)'
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2881](https://www.sqlalchemy.org/trac/ticket/2881)
- en: '**[engine] [bug] [pool]**'
  id: totrans-3375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [池]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    has been enhanced to not block new connection attempts when an existing connection
    attempt is blocking. Previously, the production of new connections was serialized
    within the block that monitored overflow; the overflow counter is now altered
    within its own critical section outside of the connection process itself.
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")已经增强，以便在现有连接尝试阻塞时不会阻塞新的连接尝试。以前，新连接的生成在监视溢出的块内序列化；现在，在连接过程本身之外，溢出计数器在其自己的关键部分中进行了更改。'
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此更改还**被回溯到**: 0.8.4'
- en: 'References: [#2880](https://www.sqlalchemy.org/trac/ticket/2880)'
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2880](https://www.sqlalchemy.org/trac/ticket/2880)
- en: '**[engine] [bug] [pool]**'
  id: totrans-3379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [池]**'
- en: Made a slight adjustment to the logic which waits for a pooled connection to
    be available, such that for a connection pool with no timeout specified, it will
    every half a second break out of the wait to check for the so-called “abort” flag,
    which allows the waiter to break out in case the whole connection pool was dumped;
    normally the waiter should break out due to a notify_all() but it’s possible this
    notify_all() is missed in very slim cases. This is an extension of logic first
    introduced in 0.8.0, and the issue has only been observed occasionally in stress
    tests.
  id: totrans-3380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对等待池连接可用性的逻辑进行了轻微调整，以便于对于未指定超时的连接池，每隔半秒钟就会中断等待以检查所谓的“中止”标志，这允许等待者在整个连接池被抛弃的情况下中断；通常情况下，等待者应该因为notify_all()而中断，但在极少数情况下可能会漏掉这个notify_all()。这是逻辑在0.8.0中首次引入的扩展，该问题只在压力测试中偶尔观察到。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此更改还**被回溯到**: 0.8.4'
- en: 'References: [#2522](https://www.sqlalchemy.org/trac/ticket/2522)'
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2522](https://www.sqlalchemy.org/trac/ticket/2522)
- en: '**[engine] [bug]**'
  id: totrans-3383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where SQL statement would be improperly ASCII-encoded when a pre-DBAPI
    [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError "sqlalchemy.exc.StatementError")
    were raised within [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), causing encoding errors for non-ASCII
    statements. The stringification now remains within Python unicode thus avoiding
    encoding errors.
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当在[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")中引发一个预先DBAPI [`StatementError`](../core/exceptions.html#sqlalchemy.exc.StatementError
    "sqlalchemy.exc.StatementError")时，SQL语句会被错误地ASCII编码，导致非ASCII语句出现编码错误。现在字符串化保持在Python
    unicode中，从而避免编码错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2871](https://www.sqlalchemy.org/trac/ticket/2871)'
  id: totrans-3386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2871](https://www.sqlalchemy.org/trac/ticket/2871)
- en: '**[engine] [bug]**'
  id: totrans-3387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    routine and the related [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function no longer considers the `+` sign to be
    a space within the password field. The parsing in this area has been adjusted
    to match more closely to how RFC 1738 handles these tokens, in that both `username`
    and `password` expect only `:`, `@`, and `/` to be encoded.
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")例程和相关的[`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url")函数不再将`+`号视为密码字段中的空格。该区域的解析已经调整，以更接近RFC 1738处理这些标记的方式，即`username`和`password`都只期望`:`,
    `@`, 和`/`被编码。'
- en: See also
  id: totrans-3389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The “password” portion of a create_engine() no longer considers the + sign
    as an encoded space](migration_09.html#migration-2873)'
  id: totrans-3390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[create_engine()中的“密码”部分不再将+号视为编码空格](migration_09.html#migration-2873)'
- en: 'References: [#2873](https://www.sqlalchemy.org/trac/ticket/2873)'
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2873](https://www.sqlalchemy.org/trac/ticket/2873)
- en: '**[engine] [bug]**'
  id: totrans-3392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The `RowProxy` object is now sortable in Python as a regular tuple is; this
    is accomplished via ensuring tuple() conversion on both sides within the `__eq__()`
    method as well as the addition of a `__lt__()` method.
  id: totrans-3393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`RowProxy`对象现在在Python中可以像常规元组一样进行排序；这是通过在`__eq__()`方法中确保双方都进行了tuple()转换以及添加了`__lt__()`方法来实现的。'
- en: See also
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[RowProxy now has tuple-sorting behavior](migration_09.html#migration-2848)'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RowProxy现在具有元组排序行为](migration_09.html#migration-2848)'
- en: 'References: [#2848](https://www.sqlalchemy.org/trac/ticket/2848)'
  id: totrans-3396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2848](https://www.sqlalchemy.org/trac/ticket/2848)
- en: sql
  id: totrans-3397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: New improvements to the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct, including more flexible ways to set
    up bound parameters and return types; in particular, a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") can now be turned into a full FROM-object, embeddable
    in other statements as an alias or CTE using the new method [`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns"). The [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct can also render “inline” bound parameters
    when the construct is compiled in a “literal bound” context.
  id: totrans-3399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")构造进行了新的改进，包括更灵活地设置绑定参数和返回类型的方式；特别是，现在可以将[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")转换为完整的FROM对象，在其他语句中作为别名或CTE嵌入，使用新方法[`TextClause.columns()`](../core/sqlelement.html#sqlalchemy.sql.expression.TextClause.columns
    "sqlalchemy.sql.expression.TextClause.columns")。当构造在“literal bound”上下文中编译时，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造还可以呈现“内联”绑定参数。
- en: See also
  id: totrans-3400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New text() Capabilities](migration_09.html#feature-2877)'
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的text()功能](migration_09.html#feature-2877)'
- en: 'References: [#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)'
  id: totrans-3402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2877](https://www.sqlalchemy.org/trac/ticket/2877), [#2882](https://www.sqlalchemy.org/trac/ticket/2882)
- en: '**[sql] [feature]**'
  id: totrans-3403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A new API for specifying the `FOR UPDATE` clause of a `SELECT` is added with
    the new [`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") method. This method
    supports a more straightforward system of setting dialect-specific options compared
    to the `for_update` keyword argument of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), and also includes support for the SQL standard
    `FOR UPDATE OF` clause. The ORM also includes a new corresponding method [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Pull request courtesy Mario Lassnig.
  id: totrans-3404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了用于指定`SELECT`的`FOR UPDATE`子句的新API，使用新的[`GenerativeSelect.with_for_update()`](../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")方法。该方法支持一种更直接的设置方言特定选项的系统，与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的`for_update`关键字参数相比，还包括对SQL标准`FOR UPDATE OF`子句的支持。ORM还包括一个新的相应方法[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")。感谢Mario Lassnig的拉取请求。
- en: See also
  id: totrans-3405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New FOR UPDATE support on select(), Query()](migration_09.html#feature-github-42)'
  id: totrans-3406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在select()，Query()上支持新的FOR UPDATE](migration_09.html#feature-github-42)'
- en: '**[sql] [feature]**'
  id: totrans-3407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The precision used when coercing a returned floating point value to Python `Decimal`
    via string is now configurable. The flag `decimal_return_scale` is now supported
    by all [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    and [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    types, which will ensure this many digits are taken from the native floating point
    value when it is converted to string. If not present, the type will make use of
    the value of `.scale`, if the type supports this setting and it is non-None. Otherwise
    the original default length of 10 is used.
  id: totrans-3408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将返回的浮点值强制转换为Python `Decimal`时使用的精度现在是可配置的。现在，所有[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")和[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")类型都支持标志`decimal_return_scale`，这将确保从本机浮点值转换为字符串时取出这么多位数。如果不存在，则类型将使用`.scale`的值，如果类型支持此设置且不为`None`。否则将使用原始默认长度为10。
- en: See also
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Floating Point String-Conversion Precision Configurable for Native Floating
    Point Types](migration_09.html#feature-2867)'
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[本地浮点类型的可配置浮点字符串转换精度](migration_09.html#feature-2867)'
- en: 'References: [#2867](https://www.sqlalchemy.org/trac/ticket/2867)'
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2867](https://www.sqlalchemy.org/trac/ticket/2867)
- en: '**[sql] [bug]**'
  id: totrans-3412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where a primary key column that has a Sequence on it, yet the column
    is not the “auto increment” column, either because it has a foreign key constraint
    or `autoincrement=False` set, would attempt to fire the Sequence on INSERT for
    backends that don’t support sequences, when presented with an INSERT missing the
    primary key value. This would take place on non-sequence backends like SQLite,
    MySQL.
  id: totrans-3413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主键列具有Sequence但列不是“自动增量”列的问题，要么因为它有外键约束，要么设置了`autoincrement=False`，当在没有主键值的情况下提供INSERT时，会尝试在不支持序列的后端上触发Sequence。这将发生在像SQLite，MySQL这样的非序列后端上。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2896](https://www.sqlalchemy.org/trac/ticket/2896)'
  id: totrans-3415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2896](https://www.sqlalchemy.org/trac/ticket/2896)
- en: '**[sql] [bug]**'
  id: totrans-3416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug with [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") method where the order of the
    given names would not be taken into account when generating the INSERT statement,
    thus producing a mismatch versus the column names in the given SELECT statement.
    Also noted that [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") implies that Python-side insert
    defaults cannot be used, since the statement has no VALUES clause.
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")方法的错误，其中给定名称的顺序在生成INSERT语句时不会被考虑，因此与给定SELECT语句中的列名不匹配。还指出[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")暗示不能使用Python端的插入默认值，因为该语句没有VALUES子句。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: 'References: [#2895](https://www.sqlalchemy.org/trac/ticket/2895)'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2895](https://www.sqlalchemy.org/trac/ticket/2895)
- en: '**[sql] [bug]**'
  id: totrans-3420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")
    function, when given a plain literal value, will now apply the given type to the
    given literal value on the bind parameter side according to the type given to
    the cast, in the same manner as that of the [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") function. However unlike [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce"), this only takes effect if a non-clauseelement
    value is passed to [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast"); an existing typed construct will retain its
    type.
  id: totrans-3421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast "sqlalchemy.sql.expression.cast")函数给定普通文字值时，现在将根据给定的类型将给定的文字值应用于绑定参数侧，方式与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")函数相同。但与[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")不同，只有在传递非clauseelement值给[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")时才会生效；现有的类型构造将保留其类型。
- en: '**[sql] [bug]**'
  id: totrans-3422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    class more aggressively checks the given column argument. If not a string, it
    checks that the object is at least a [`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), or an object that resolves to one,
    and that the `.table` attribute, if present, refers to a [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") or subclass, and not something like an
    [`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias").
    Otherwise, a [`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError") is raised.
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")类更积极地检查给定的列参数。如果不是字符串，则检查对象至少是[`ColumnClause`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause")，或者解析为其中一个的对象，并且`.table`属性（如果存在）指向[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")或其子类，而不是像[`Alias`](../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")之类的东西。否则，将引发[`ArgumentError`](../core/exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。'
- en: 'References: [#2883](https://www.sqlalchemy.org/trac/ticket/2883)'
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2883](https://www.sqlalchemy.org/trac/ticket/2883)
- en: '**[sql] [bug]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The precedence rules for the [`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") operator have been modified,
    such that the COLLATE operator is now of lower precedence than the comparison
    operators. This has the effect that a COLLATE applied to a comparison will not
    render parenthesis around the comparison, which is not parsed by backends such
    as MSSQL. The change is backwards incompatible for those setups that were working
    around the issue by applying `Operators.collate()` to an individual element of
    the comparison expression, rather than the comparison expression as a whole.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.collate()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate")运算符的优先规则已经修改，使得COLLATE运算符现在比比较运算符的优先级低。这样做的效果是，应用于比较的COLLATE不会在比较周围添加括号，这在后端如MSSQL中不会被解析。对于那些通过将`Operators.collate()`应用于比较表达式的单个元素而不是整个比较表达式来解决问题的设置，此更改是不兼容的。'
- en: See also
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The precedence rules for COLLATE have been changed](migration_09.html#migration-2879)'
  id: totrans-3428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[COLLATE的优先规则已更改](migration_09.html#migration-2879)'
- en: 'References: [#2879](https://www.sqlalchemy.org/trac/ticket/2879)'
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2879](https://www.sqlalchemy.org/trac/ticket/2879)
- en: '**[sql] [enhancement]**'
  id: totrans-3430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [增强]**'
- en: The exception raised when a [`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") is present in a compiled statement
    without a value now includes the key name of the bound parameter in the error
    message.
  id: totrans-3431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当编译语句中存在[`BindParameter`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter")但没有值时，现在引发的异常在错误消息中包含绑定参数的键名。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.5
- en: schema
  id: totrans-3433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-3434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Fixed a regression caused by [#2812](https://www.sqlalchemy.org/trac/ticket/2812)
    where the repr() for table and column names would fail if the name contained non-ascii
    characters.
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 [#2812](https://www.sqlalchemy.org/trac/ticket/2812) 引起的回归已修复，如果名称包含非 ASCII
    字符，则表和列名称的 repr() 将失败。
- en: 'References: [#2868](https://www.sqlalchemy.org/trac/ticket/2868)'
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2868](https://www.sqlalchemy.org/trac/ticket/2868)
- en: postgresql
  id: totrans-3437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Support for PostgreSQL JSON has been added, using the new [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type. Huge thanks to Nathan Rice for implementing and
    testing this.
  id: totrans-3439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL JSON 的支持，使用新的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 类型。非常感谢 Nathan Rice 实施和测试。
- en: 'References: [#2581](https://www.sqlalchemy.org/trac/ticket/2581)'
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2581](https://www.sqlalchemy.org/trac/ticket/2581)
- en: '**[postgresql] [feature]**'
  id: totrans-3441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for PostgreSQL TSVECTOR via the [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") type. Pull request courtesy Noufal
    Ibrahim.
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [`TSVECTOR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.TSVECTOR
    "sqlalchemy.dialects.postgresql.TSVECTOR") 类型添加了对 PostgreSQL TSVECTOR 的支持。感谢 Noufal
    Ibrahim 提交的拉取请求。
- en: '**[postgresql] [bug]**'
  id: totrans-3443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where index reflection would mis-interpret indkey values when using
    the pypostgresql adapter, which returns these values as lists vs. psycopg2’s return
    type of string.
  id: totrans-3444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pypostgresql 适配器时，索引反射会错误解释 indkey 值的 bug，该适配器将这些值返回为列表，而 psycopg2 返回字符串。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.4
- en: 'References: [#2855](https://www.sqlalchemy.org/trac/ticket/2855)'
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2855](https://www.sqlalchemy.org/trac/ticket/2855)
- en: '**[postgresql] [bug]**'
  id: totrans-3447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Now using psycopg2 UNICODEARRAY extension for handling unicode arrays with psycopg2
    + normal “native unicode” mode, in the same way the UNICODE extension is used.
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 psycopg2 UNICODEARRAY 扩展来处理带有 psycopg2 + 普通 “本地 unicode” 模式的 unicode 数组，与使用
    UNICODE 扩展的方式相同。
- en: '**[postgresql] [bug]**'
  id: totrans-3449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where values within an ENUM weren’t escaped for single quote signs.
    Note that this is backwards-incompatible for existing workarounds that manually
    escape the single quotes.
  id: totrans-3450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ENUM 中的值未对单引号进行转义的 bug。请注意，对于手动转义单引号的现有解决方法，这是不兼容的。
- en: See also
  id: totrans-3451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL CREATE TYPE <x> AS ENUM now applies quoting to values](migration_09.html#migration-2878)'
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL CREATE TYPE <x> AS ENUM 现在对值应用引号](migration_09.html#migration-2878)'
- en: 'References: [#2878](https://www.sqlalchemy.org/trac/ticket/2878)'
  id: totrans-3453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2878](https://www.sqlalchemy.org/trac/ticket/2878)
- en: mysql
  id: totrans-3454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Improvements to the system by which SQL types generate within `__repr__()`,
    particularly with regards to the MySQL integer/numeric/ character types which
    feature a wide variety of keyword arguments. The `__repr__()` is important for
    use with Alembic autogenerate for when Python code is rendered in a migration
    script.
  id: totrans-3456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 SQL 类型在 `__repr__()` 中生成的系统进行了改进，特别是关于 MySQL 的整数/数字/字符类型，这些类型具有各种关键字参数。`__repr__()`
    对于 Alembic autogenerate 非常重要，用于在迁移脚本中呈现 Python 代码时。
- en: 'References: [#2893](https://www.sqlalchemy.org/trac/ticket/2893)'
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2893](https://www.sqlalchemy.org/trac/ticket/2893)
- en: mssql
  id: totrans-3458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [firebird]**'
  id: totrans-3459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [firebird]**'
- en: The “asdecimal” flag used with the [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") type will now work with Firebird as well as the mssql+pyodbc
    dialects; previously the decimal conversion was not occurring.
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 [`Float`](../core/type_basics.html#sqlalchemy.types.Float "sqlalchemy.types.Float")
    类型一起使用的 “asdecimal” 标志现在也适用于 Firebird 以及 mssql+pyodbc 方言；以前未发生十进制转换。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[mssql] [bug] [pymssql]**'
  id: totrans-3462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [pymssql]**'
- en: Added “Net-Lib error during Connection reset by peer” message to the list of
    messages checked for “disconnect” within the pymssql dialect. Courtesy John Anderson.
  id: totrans-3463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 “Net-Lib error during Connection reset by peer” 消息添加到 pymssql 方言中检查的 “disconnect”
    消息列表中。感谢 John Anderson。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.5
- en: '**[mssql] [bug]**'
  id: totrans-3465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Fixed bug introduced in 0.8.0 where the `DROP INDEX` statement for an index
    in MSSQL would render incorrectly if the index were in an alternate schema; the
    schemaname/tablename would be reversed. The format has been also been revised
    to match current MSSQL documentation. Courtesy Derek Harland.
  id: totrans-3466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 0.8.0 中引入的 bug，如果 MSSQL 中的索引位于替代模式中，则 `DROP INDEX` 语句将呈现错误；模式名/表名将被颠倒。格式也已经修订以匹配当前的
    MSSQL 文档。感谢 Derek Harland。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.4
- en: oracle
  id: totrans-3468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Added ORA-02396 “maximum idle time” error code to list of “is disconnect” codes
    with cx_oracle.
  id: totrans-3470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将ORA-02396“最大空闲时间”错误代码添加到与cx_oracle一起“断开连接”代码列表中。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.4
- en: 'References: [#2864](https://www.sqlalchemy.org/trac/ticket/2864)'
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2864](https://www.sqlalchemy.org/trac/ticket/2864)
- en: '**[oracle] [bug]**'
  id: totrans-3473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed bug where Oracle `VARCHAR` types given with no length (e.g. for a `CAST`
    or similar) would incorrectly render `None CHAR` or similar.
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle中未给出长度的`VARCHAR`类型（例如用于`CAST`或类似操作）会错误地呈现`None CHAR`或类似情况的错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.4
- en: 'References: [#2870](https://www.sqlalchemy.org/trac/ticket/2870)'
  id: totrans-3476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2870](https://www.sqlalchemy.org/trac/ticket/2870)
- en: misc
  id: totrans-3477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [firebird]**'
  id: totrans-3478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: The firebird dialect will quote identifiers which begin with an underscore.
    Courtesy Treeve Jelbert.
  id: totrans-3479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 火鸟方言将引用以下划线开头的标识符。Treeve Jelbert提供。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.5
- en: 'References: [#2897](https://www.sqlalchemy.org/trac/ticket/2897)'
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2897](https://www.sqlalchemy.org/trac/ticket/2897)
- en: '**[bug] [firebird]**'
  id: totrans-3482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Fixed bug in Firebird index reflection where the columns within the index were
    not sorted correctly; they are now sorted in order of RDB$FIELD_POSITION.
  id: totrans-3483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Firebird索引反射中列未正确排序的错误；它们现在按照RDB$FIELD_POSITION的顺序排序。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.5
- en: '**[bug] [declarative]**'
  id: totrans-3485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [declarative]**'
- en: Error message when a string arg sent to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") which doesn’t resolve to a class or mapper has
    been corrected to work the same way as when a non-string arg is received, which
    indicates the name of the relationship which had the configurational error.
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当发送给[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的字符串参数无法解析为类或映射器时，错误消息已更正，以与接收非字符串参数时相同的方式工作，指示配置错误的关系名称。
- en: 'This change is also **backported** to: 0.8.5'
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.5
- en: 'References: [#2888](https://www.sqlalchemy.org/trac/ticket/2888)'
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2888](https://www.sqlalchemy.org/trac/ticket/2888)
- en: '**[bug] [ext]**'
  id: totrans-3489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed bug which prevented the `serializer` extension from working correctly
    with table or column names that contain non-ASCII characters.
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止`serializer`扩展与包含非ASCII字符的表或列名正常工作的错误。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**至：0.8.4
- en: 'References: [#2869](https://www.sqlalchemy.org/trac/ticket/2869)'
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2869](https://www.sqlalchemy.org/trac/ticket/2869)
- en: '**[bug] [firebird]**'
  id: totrans-3493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [firebird]**'
- en: Changed the queries used by Firebird to list table and view names to query from
    the `rdb$relations` view instead of the `rdb$relation_fields` and `rdb$view_relations`
    views. Variants of both the old and new queries are mentioned on many FAQ and
    blogs, however the new queries are taken straight from the “Firebird FAQ” which
    appears to be the most official source of info.
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了Firebird用于列出表和视图名称的查询，从`rdb$relations`视图而不是`rdb$relation_fields`和`rdb$view_relations`视图查询。许多FAQ和博客中提到了新旧查询的变体，但新查询直接来自“Firebird
    FAQ”，似乎是最官方的信息来源。
- en: 'References: [#2898](https://www.sqlalchemy.org/trac/ticket/2898)'
  id: totrans-3495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2898](https://www.sqlalchemy.org/trac/ticket/2898)
- en: '**[removed]**'
  id: totrans-3496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[removed]**'
- en: The “informix” and “informixdb” dialects have been removed; the code is now
    available as a separate repository on Bitbucket. The IBM-DB project has provided
    production-level Informix support since the informixdb dialect was first added.
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “informix”和“informixdb”方言已被移除；代码现在作为一个独立的存储库在Bitbucket上提供���自从添加informixdb方言以来，IBM-DB项目提供了生产级Informix支持。
- en: 0.9.0b1
  id: totrans-3498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.9.0b1
- en: 'Released: October 26, 2013'
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2013年10月26日
- en: general
  id: totrans-3500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general] [feature] [py3k]**'
  id: totrans-3501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [feature] [py3k]**'
- en: The C extensions are ported to Python 3 and will build under any supported CPython
    2 or 3 environment.
  id: totrans-3502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C扩展已移植到Python 3，并将在任何支持的CPython 2或3环境下构建。
- en: 'References: [#2161](https://www.sqlalchemy.org/trac/ticket/2161)'
  id: totrans-3503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2161](https://www.sqlalchemy.org/trac/ticket/2161)
- en: '**[general] [feature] [py3k]**'
  id: totrans-3504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [feature] [py3k]**'
- en: The codebase is now “in-place” for Python 2 and 3, the need to run 2to3 has
    been removed. Compatibility is now against Python 2.6 on forward.
  id: totrans-3505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码库现在针对Python 2和3“原地”，不再需要运行2to3。兼容性现在针对Python 2.6及更高版本。
- en: 'References: [#2671](https://www.sqlalchemy.org/trac/ticket/2671)'
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2671](https://www.sqlalchemy.org/trac/ticket/2671)
- en: '**[general]**'
  id: totrans-3507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: A large refactoring of packages has reorganized the import structure of many
    Core modules as well as some aspects of the ORM modules. In particular `sqlalchemy.sql`
    has been broken out into several more modules than before so that the very large
    size of `sqlalchemy.sql.expression` is now pared down. The effort has focused
    on a large reduction in import cycles. Additionally, the system of API functions
    in `sqlalchemy.sql.expression` and `sqlalchemy.orm` has been reorganized to eliminate
    redundancy in documentation between the functions vs. the objects they produce.
  id: totrans-3508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对许多 Core 模块以及 ORM 模块的导入结构进行了大规模重构。特别是，`sqlalchemy.sql` 被分解成比以前更多的模块，因此`sqlalchemy.sql.expression`
    的庞大大小现在已经减小。该工作集中在大幅减少导入循环上。此外，`sqlalchemy.sql.expression` 和 `sqlalchemy.orm`
    中的 API 函数系统已被重新组织，以消除函数与它们产生的对象之间的文档中的冗余。
- en: orm
  id: totrans-3509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的新选项`distinct_target_key`。这使得子查询急切加载策略能够对最内层的 SELECT
    子查询应用 DISTINCT，在最内层查询生成与此关系对应的重复行的情况下提供帮助（对于在最内层子查询之外的连接生成重复行的问题尚无普遍解决方案）。当标志设置为`True`时，无条件渲染
    DISTINCT，当设置为`None`时，如果最内层关系目标列不构成完整的主键，则渲染 DISTINCT。该选项在 0.8 中默认为 False（即在所有情况下默认关闭），在
    0.9 中默认为 None（即默认情况下自动开启）。感谢 Alexander Koval 提供帮助。
- en: See also
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-3513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询急切加载将对某些查询的最内层 SELECT 应用 DISTINCT](migration_09.html#change-2836)'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [feature]**'
  id: totrans-3516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The association proxy now returns `None` when fetching a scalar attribute off
    of a scalar relationship, where the scalar relationship itself points to `None`,
    instead of raising an `AttributeError`.
  id: totrans-3517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从标量关系中获取标量属性时，关联代理现在将返回`None`，如果标量关系本身指向`None`，而不是引发`AttributeError`。
- en: See also
  id: totrans-3518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association Proxy Missing Scalar returns None](migration_09.html#migration-2810)'
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理缺失标量返回 None](migration_09.html#migration-2810)'
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: '**[orm] [feature]**'
  id: totrans-3521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new method [`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history"), works like [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") but also fires loader callables.
  id: totrans-3522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history")，功能类似于[`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")，但还会触发加载器可调用。
- en: See also
  id: totrans-3523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history() 将默认从数据库查询，如果值不存在](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [feature]**'
  id: totrans-3526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new load option [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). This allows a series of column names to be specified
    as loading “only” those attributes, deferring the rest.
  id: totrans-3527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的加载选项[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。这允许指定一系列列名仅加载这些属性，推迟其余属性的加载。
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-3529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The system of loader options has been entirely rearchitected to build upon a
    much more comprehensive base, the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object. This base allows any common loader option like
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"), etc. to be used in a “chained” style for the purpose
    of specifying options down a path, such as `joinedload("foo").subqueryload("bar")`.
    The new system supersedes the usage of dot-separated path names, multiple attributes
    within options, and the usage of `_all()` options.
  id: totrans-3530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载器选项系统已完全重构，以构建在一个更全面的基础上，即 [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") 对象。这个基础允许使用任何常见的加载器选项，如 [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") ，[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") 等，在“链接”风格中用于指定沿路径的选项，比如 `joinedload("foo").subqueryload("bar")`。新系统取代了点分隔路径名称的使用，选项中的多个属性以及
    `_all()` 选项的使用。
- en: See also
  id: totrans-3531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Query Options API; load_only() option](migration_09.html#feature-1418)'
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新查询选项 API；load_only() 选项](migration_09.html#feature-1418)'
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-3533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-3534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    construct now maintains the return object when used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), rather than expanding out into individual columns. This
    makes use of the new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") feature internally. This behavior is backwards incompatible;
    to select from a composite column which will expand out, use `MyClass.some_composite.clauses`.
  id: totrans-3535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当在基于列的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    中使用 [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    构造时，会维持返回对象，而不会扩展为单独的列。这是利用了内部的新 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 特性。这种行为是不向后兼容的；要从一个将要展开的复合列中选择，请使用 `MyClass.some_composite.clauses`。
- en: See also
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-3537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当按属性基础查询时，复合属性现在作为其对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-3538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-3539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A new construct [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is added, which allows for specification of groups of
    column expressions to a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct. The group of columns are returned as a single
    tuple by default. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be overridden however to provide any sort of result
    processing to the returned row. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is also embedded into composite attributes now when they
    are used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-3540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了一个构造 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    ，允许对列表达式的组进行指定，并作为单个元组返回默认。然而，可以重写 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 的行为，以对返回的行进行任何形式的结果处理。现在，在使用基于列的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 时，[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 的行为也嵌入到复合属性中。
- en: See also
  id: totrans-3541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Bundles for ORM queries](migration_09.html#change-2824)'
  id: totrans-3542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 查询的列绑定](migration_09.html#change-2824)'
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当按属性基础查询时，复合属性现在作为其对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-3544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-3545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `version_id_generator` parameter of `Mapper` can now be specified to rely
    upon server generated version identifiers, using triggers or other database-provided
    versioning features, or via an optional programmatic value, by setting `version_id_generator=False`.
    When using a server-generated version identifier, the ORM will use RETURNING when
    available to immediately load the new version value, else it will emit a second
    SELECT.
  id: totrans-3546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Mapper`的`version_id_generator`参数现在可以指定依赖于服务器生成的版本标识符，使用触发器或其他数据库提供的版本控制功能，或通过设置`version_id_generator=False`来使用可选的程序值。当使用服务器生成的版本标识符时，ORM将在可用时使用RETURNING立即加载新版本值，否则将发出第二个SELECT。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-3547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-3548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `eager_defaults` flag of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will now allow the newly generated default values to
    be fetched using an inline RETURNING clause, rather than a second SELECT statement,
    for backends that support RETURNING.
  id: totrans-3549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的`eager_defaults`标志现在将允许使用内联RETURNING子句获取新生成的默认值，而不是使用第二个SELECT语句，适用于支持RETURNING的后端。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-3550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-3551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new attribute [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") to [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"); this is a dictionary where applications can store arbitrary
    data local to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The contents of [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") can be also be initialized using the `info` argument
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  id: totrans-3552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")添加了一个新属性[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")；这是一个字典，应用程序可以将任意数据存储在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本地。[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")的内容也可以使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")的`info`参数进行初始化。
- en: '**[orm] [feature]**'
  id: totrans-3553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Removal of event listeners is now implemented. The feature is provided via the
    [`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")
    function.
  id: totrans-3554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在已实现事件监听器的移除。该功能通过[`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")函数提供。
- en: See also
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Event Removal API](migration_09.html#feature-2268)'
  id: totrans-3556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事件移除API](migration_09.html#feature-2268)'
- en: 'References: [#2268](https://www.sqlalchemy.org/trac/ticket/2268)'
  id: totrans-3557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2268](https://www.sqlalchemy.org/trac/ticket/2268)
- en: '**[orm] [feature]**'
  id: totrans-3558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The mechanism by which attribute events pass along an `AttributeImpl` as an
    “initiator” token has been changed; the object is now an event-specific object
    called `Event`. Additionally, the attribute system no longer halts events based
    on a matching “initiator” token; this logic has been moved to be specific to ORM
    backref event handlers, which are the typical source of the re-propagation of
    an attribute event onto subsequent append/set/remove operations. End user code
    which emulates the behavior of backrefs must now ensure that recursive event propagation
    schemes are halted, if the scheme does not use the backref handlers. Using this
    new system, backref handlers can now perform a “two-hop” operation when an object
    is appended to a collection, associated with a new many-to-one, de-associated
    with the previous many-to-one, and then removed from a previous collection. Before
    this change, the last step of removal from the previous collection would not occur.
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性事件传递的机制已更改，现在将`AttributeImpl`作为“initiator”令牌传递; 对象现在是一个称为`Event`的特定于事件的对象。此外，属性系统不再根据匹配的“initiator”令牌停止事件;
    此逻辑已移至特定于ORM反向引用事件处理程序的地方，这些处理程序是将属性事件重新传播到后续附加/设置/删除操作的典型来源。模拟反向引用行为的最终用户代码现在必须确保递归事件传播方案被停止，如果该方案不使用反向引用处理程序。使用这个新系统，当对象附加到集合时，与新的多对一关联，与先前的多对一解除关联，然后从先前的集合中移除时，反向引用处理程序现在可以执行“两跳”操作。在此更改之前，从先前集合中删除的最后一步将不会发生。
- en: See also
  id: totrans-3560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Backref handlers can now propagate more than one level deep](migration_09.html#migration-2789)'
  id: totrans-3561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反向引用处理程序现在可以传播多个级别](migration_09.html#migration-2789)'
- en: 'References: [#2789](https://www.sqlalchemy.org/trac/ticket/2789)'
  id: totrans-3562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2789](https://www.sqlalchemy.org/trac/ticket/2789)
- en: '**[orm] [feature]**'
  id: totrans-3563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A major change regarding how the ORM constructs joins where the right side is
    itself a join or left outer join. The ORM is now configured to allow simple nesting
    of joins of the form `a JOIN (b JOIN c ON b.id=c.id) ON a.id=b.id`, rather than
    forcing the right side into a `SELECT` subquery. This should allow significant
    performance improvements on most backends, most particularly MySQL. The one database
    backend that has for many years held back this change, SQLite, is now addressed
    by moving the production of the `SELECT` subquery from the ORM to the SQL compiler;
    so that a right-nested join on SQLite will still ultimately render with a `SELECT`,
    while all other backends are no longer impacted by this workaround.
  id: totrans-3564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于ORM如何构建右侧是自身连接或左外连接的连接的重大变化。现在，ORM已配置为允许形式为`a JOIN (b JOIN c ON b.id=c.id)
    ON a.id=b.id`的连接的简单嵌套，而不是强制右侧成为`SELECT`子查询。这应该允许大多数后端数据库获得显着的性能改进，尤其是MySQL。多年来一直阻碍此更改的一个数据库后端，SQLite，现在通过将`SELECT`子查询的生成从ORM移动到SQL编译器来解决；因此，在SQLite上的右侧连接仍最终以`SELECT`呈现，而所有其他后端不再受此解决方法的影响。
- en: As part of this change, a new argument `flat=True` has been added to the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"), `Join.alias()`, and [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") functions, which allows an “alias” of a JOIN
    to be produced which applies an anonymous alias to each component table within
    the join, rather than producing a subquery.
  id: totrans-3565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")、`Join.alias()`和[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数中添加了一个新参数`flat=True`，允许生成一个JOIN的“别名”，该别名对加入的每个组件表应用匿名别名，而不是生成一个子查询。
- en: See also
  id: totrans-3566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-3567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多JOIN和LEFT OUTER JOIN表达式将不再被包装在(SELECT * FROM ..) AS ANON_1中](migration_09.html#feature-joins-09)'
- en: 'References: [#2587](https://www.sqlalchemy.org/trac/ticket/2587)'
  id: totrans-3568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2587](https://www.sqlalchemy.org/trac/ticket/2587)
- en: '**[orm] [bug]**'
  id: totrans-3569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-3570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`时，列表仪器化无法正确表示`[0:0]`的bug，特别是在使用关联代理时可能发生。由于Python集合中的某些怪癖，该问题在Python
    3中比在Python 2中更有可能发生。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3, 0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-3573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在与父[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")关联之前使用[`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote")或[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")等注释时可能导致父表未在连接中呈现的问题的bug，这是由注释执行的固有复制操作引起的。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-3576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-3577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-3578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists")在没有任何WHERE条件的情况下无法正常工作的bug。感谢Vladimir Magamedov。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-3580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-3581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 用于迭代映射器层次结构的有序序列实现中的潜在问题；在 Jython 解释器下，这个实现没有排序，尽管 cPython 和 PyPy 保持了排序。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-3584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-3585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-3586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 级别事件注册中的 bug，在某些“未映射基类”配置中，“原始”或“传播”标志可能被错误配置。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-3588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-3589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-3590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在加载映射实体时使用 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") 选项时与性能相关的问题。在加载时将每个对象的延迟可调用函数应用到实例的函数开销明显高于仅从行加载数据的开销（请注意，`defer()`
    旨在减少数据库/网络开销，而不一定是函数调用次数）；在所有情况下，函数调用开销现在小于从列加载数据的开销。每次加载从 N（结果中的总延迟值）减少到 1（延迟列的总数）的“延迟可调用”对象的数量也有所减少。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-3592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-3593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-3594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，当使用 [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") 函数将对象从“持久”状态移动到“挂起”状态时，涉及基于集合的反向引用的操作会导致属性历史函数失败。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-3596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: '**[orm] [bug]**'
  id: totrans-3597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-3598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试刷新已分配给类别无效值的继承类对象时，会发出警告。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-3600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-3601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多个加入继承实体针对同一基类相互加入时，在连接字符串超过两个实体时，不会独立跟踪基表上的列的多态 SQL 生成中的 bug。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-3604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-3605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-3606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将复合属性传递到 [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 会产生一种某些数据库不接受的带括号表达式的 bug。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-3609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-3610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。以前，在应用别名时，复合属性在比较操作中不会正常工作。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-3613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-3614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当调用`clear()`时[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")未报告更改事件的错误。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-3617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") when used with a scalar column-mapped
    attribute will now honor the “passive” flag passed to it; as this defaults to
    `PASSIVE_OFF`, the function will by default query the database if the value is
    not present. This is a behavioral change vs. 0.8.'
  id: totrans-3618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与标量列映射属性一起使用时，[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history")现在将遵守传递给它的“被动”标志；由于默认为`PASSIVE_OFF`，如果值不存在，默认情况下该函数将查询数据库。这与0.8相比是一种行为变化。
- en: See also
  id: totrans-3619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history()将默认从数据库查询值不存在的情况](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [bug] [associationproxy]**'
  id: totrans-3622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [associationproxy]**'
- en: Added additional criterion to the ==, != comparators, used with scalar values,
    for comparisons to None to also take into account the association record itself
    being non-present, in addition to the existing test for the scalar endpoint on
    the association record being NULL. Previously, comparing `Cls.scalar == None`
    would return records for which `Cls.associated` were present and `Cls.associated.scalar`
    is None, but not rows for which `Cls.associated` is non-present. More significantly,
    the inverse operation `Cls.scalar != None` *would* return `Cls` rows for which
    `Cls.associated` was non-present.
  id: totrans-3623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于与None进行比较的==，！=比较器，用于标量值，还添加了额外的条件，以考虑到关联记录本身不存在，除了现有的对关联记录上的标量端点为NULL的测试。以前，比较`Cls.scalar
    == None`将返回`Cls.associated`存在且`Cls.associated.scalar`为None的记录，但不会返回`Cls.associated`不存在的行。更重要的是，相反的操作`Cls.scalar
    != None` *会*返回`Cls`行，其中`Cls.associated`不存在。
- en: The case for `Cls.scalar != 'somevalue'` is also modified to act more like a
    direct SQL comparison; only rows for which `Cls.associated` is present and `Associated.scalar`
    is non-NULL and not equal to `'somevalue'` are returned. Previously, this would
    be a simple `NOT EXISTS`.
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`Cls.scalar != 'somevalue'`的情况也进行了修改，以更像直接的SQL比较；只有`Cls.associated`存在且`Associated.scalar`非NULL且不等于`'somevalue'`的行才会被返回。以前，这将是一个简单的`NOT
    EXISTS`。
- en: Also added a special use case where you can call `Cls.scalar.has()` with no
    arguments, when `Cls.scalar` is a column-based value - this returns whether or
    not `Cls.associated` has any rows present, regardless of whether or not `Cls.associated.scalar`
    is NULL or not.
  id: totrans-3625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了一个特殊用例，您可以在`Cls.scalar`是基于列的值时调用`Cls.scalar.has()`而不带参数 - 这将返回`Cls.associated`是否有任何行存在的信息，而不管`Cls.associated.scalar`是否为NULL。
- en: See also
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association Proxy SQL Expression Improvements and Fixes](migration_09.html#migration-2751)'
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理SQL表达式改进和修复](migration_09.html#migration-2751)'
- en: 'References: [#2751](https://www.sqlalchemy.org/trac/ticket/2751)'
  id: totrans-3628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2751](https://www.sqlalchemy.org/trac/ticket/2751)
- en: '**[orm] [bug]**'
  id: totrans-3629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an obscure bug where the wrong results would be fetched when joining/joinedloading
    across a many-to-many relationship to a single-table-inheriting subclass with
    a specific discriminator value, due to “secondary” rows that would come back.
    The “secondary” and right-side tables are now inner joined inside of parenthesis
    for all ORM joins on many-to-many relationships so that the left->right join can
    accurately filtered. This change was made possible by finally addressing the issue
    with right-nested joins outlined in [#2587](https://www.sqlalchemy.org/trac/ticket/2587).
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个晦涩的错误，当跨越一个具有特定鉴别器值的单表继承子类的多对多关系进行连接/联接加载时，错误的结果会被获取，这是由于返回的“secondary”行。现在，在所有ORM多对多关系的JOIN中，“secondary”和右侧表现在括号内进行内连接，以便左->右连接可以准确过滤。这个改变是通过最终解决了在[#2587](https://www.sqlalchemy.org/trac/ticket/2587)中概述的右嵌套连接问题而实现的。
- en: See also
  id: totrans-3631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-3632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多JOIN和LEFT OUTER JOIN表达式将不再被包装在(SELECT * FROM ..) AS ANON_1中](migration_09.html#feature-joins-09)'
- en: 'References: [#2369](https://www.sqlalchemy.org/trac/ticket/2369)'
  id: totrans-3633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2369](https://www.sqlalchemy.org/trac/ticket/2369)
- en: '**[orm] [bug]**'
  id: totrans-3634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “auto-aliasing” behavior of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method has been turned off. The specific behavior
    is now available via a new method `Query.select_entity_from()`. The auto-aliasing
    behavior here was never well documented and is generally not what’s desired, as
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has become more oriented towards controlling
    how a JOIN is rendered. `Query.select_entity_from()` will also be made available
    in 0.8 so that applications which rely on the auto-aliasing can shift their applications
    to use this method.
  id: totrans-3635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法的“自动别名”行为已被关闭。现在可以通过新方法`Query.select_entity_from()`获得特定行为。这里的自动别名行为从未有很好的文档记录，并且通常不是所需的行为，因为[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")更多地用于控制如何呈现JOIN。`Query.select_entity_from()`也将在0.8中提供，以便依赖自动别名的应用程序可以转向使用此方法。'
- en: See also
  id: totrans-3636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[_query.Query.select_from() no longer applies the clause to corresponding entities](migration_09.html#migration-2736)'
  id: totrans-3637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[_query.Query.select_from()不再将子句应用于相应的实体](migration_09.html#migration-2736)'
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: orm declarative
  id: totrans-3639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[orm] [declarative] [feature]**'
  id: totrans-3640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-3641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器[`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，它是对[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")的包装，允许使用一种巧妙的类装饰方法应用现有的基类。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: '**[orm] [declarative] [feature]**'
  id: totrans-3643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-3644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在与`order_by`、`primaryjoin`或类似的用法中使用字符串参数引用ORM描述符，例如混合属性，以及列绑定属性，用于[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-3647
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [feature]**'
  id: totrans-3648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [功能]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-3649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的示例，包括`discriminator_on_association.py`使用单表继承来处理“鉴别器”。还添加了一个真正的“通用外键”示例，它类似于其他流行框架，使用���个开放的整数指向任何其他表，放弃了传统的参照完整性。虽然我们不推荐这种模式，但信息想要自由。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-3651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-3652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本示例中添加了“autoincrement=False”到历史表中，因为这个表在任何情况下都不应该有自增。感谢Patrick Schmid。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-3654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的一个问题，即当存在反向引用时，一个多对一引用可能会为目标产生一个无意义的版本，即使它没有被更改。补丁由Matt Chisholm提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: engine
  id: totrans-3657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-3658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-3659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")的`repr()`现在将使用星号隐藏密码。感谢Gunnlaugur Þór Briem。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-3661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [feature]**'
  id: totrans-3662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'New events added to [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"):'
  id: totrans-3663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents")中添加了新事件：
- en: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
  id: totrans-3664
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
- en: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
  id: totrans-3665
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
- en: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
  id: totrans-3666
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
- en: 'References: [#2770](https://www.sqlalchemy.org/trac/ticket/2770)'
  id: totrans-3667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2770](https://www.sqlalchemy.org/trac/ticket/2770)
- en: '**[engine] [bug]**'
  id: totrans-3668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-3669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在解析ipv6地址，例如用括号括起来。'
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-3671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-3672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-3673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，则不会第二次调用Dialect.initialize()，因为出现了断开错误。这修复了Oracle
    8方言中的一个特定问题，但通常情况下，Dialect.initialize()阶段应该只执行一次。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-3675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-3676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-3677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当现有的池化连接在失效或重新生成事件后未能重新连接时，[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")会丢失正确的已检出计数。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-3679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: '**[engine] [bug]**'
  id: totrans-3680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-3681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，当[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")的各种实现中的`reset_on_return`参数在重新生成池时未被传播时。感谢Eevee。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: '**[engine] [bug]**'
  id: totrans-3683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The method signature of `Dialect.reflecttable()`, which in all known cases is
    provided by [`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect"), has been tightened to expect `include_columns`
    and `exclude_columns` arguments without any kw option, reducing ambiguity - previously
    `exclude_columns` was missing.
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Dialect.reflecttable()`的方法签名，所有已知情况下都由[`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")提供，已经被调整为期望`include_columns`和`exclude_columns`参数，不带任何kw选项，减少了歧义
    - 以前缺少了`exclude_columns`。'
- en: 'References: [#2748](https://www.sqlalchemy.org/trac/ticket/2748)'
  id: totrans-3685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2748](https://www.sqlalchemy.org/trac/ticket/2748)
- en: sql
  id: totrans-3686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-3687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“唯一约束”反射的支持，通过[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")方法。感谢Roman Podolyaka的补丁。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-3689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.4
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-3690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: '**[sql] [feature]**'
  id: totrans-3691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-3692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")和[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造现在将ORM实体解释为要操作的目标表，例如：'
- en: '[PRE10]'
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[sql] [feature] [mysql] [postgresql]**'
  id: totrans-3695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性] [mysql] [postgresql]**'
- en: The PostgreSQL and MySQL dialects now support reflection/inspection of foreign
    key options, including ON UPDATE, ON DELETE. PostgreSQL also reflects MATCH, DEFERRABLE,
    and INITIALLY. Courtesy ijl.
  id: totrans-3696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL和MySQL方言现在支持外键选项的反射/检查，包括ON UPDATE、ON DELETE。PostgreSQL还反映了MATCH、DEFERRABLE和INITIALLY。感谢ijl。
- en: 'References: [#2183](https://www.sqlalchemy.org/trac/ticket/2183)'
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2183](https://www.sqlalchemy.org/trac/ticket/2183)
- en: '**[sql] [feature]**'
  id: totrans-3698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: A [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct with a “null” type (e.g. no type
    specified) is now copied when used in a typed expression, and the new copy is
    assigned the actual type of the compared column. Previously, this logic would
    occur on the given [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") in place. Additionally, a similar process
    now occurs for [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs passed to [`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") for an [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct, within the compilation phase of
    the construct.
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个带有“null”类型（例如没有指定类型）的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造现在在用于有类型表达式时会被复制，并且新的副本会被分配给比较列的实际类型。以前，这个逻辑会在给定的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")上发生。此外，类似的过程现在也会发生在传递给[`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")用于[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")或[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造中，在构造的编译阶段。
- en: These are both subtle behavioral changes which may impact some usages.
  id: totrans-3700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两者都是一些微妙的行为变化，可能会影响一些用法。
- en: See also
  id: totrans-3701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[A bindparam() construct with no type gets upgraded via copy when a type is
    available](migration_09.html#migration-2850)'
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[一个没有类型的`bindparam()`构造在有类型时通过复制升级](migration_09.html#migration-2850)'
- en: 'References: [#2850](https://www.sqlalchemy.org/trac/ticket/2850)'
  id: totrans-3703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2850](https://www.sqlalchemy.org/trac/ticket/2850)
- en: '**[sql] [feature]**'
  id: totrans-3704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: An overhaul of expression handling for special symbols particularly with conjunctions,
    e.g. `None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false"), including consistency in rendering NULL in
    conjunctions, “short-circuiting” of [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") expressions which contain boolean constants,
    and rendering of boolean constants and expressions as compared to “1” or “0” for
    backends that don’t feature `true`/`false` constants.
  id: totrans-3705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对特殊符号的表达式处理进行了彻底改革，特别是连接词，例如`None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")，包括在连接词中渲染NULL的一致性，“短路”[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")和[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")表达式中包含布尔常量，并且将布尔常量和表达式渲染为与不支持`true`/`false`常量的后端相比的“1”或“0”。
- en: See also
  id: totrans-3706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Improved rendering of Boolean constants, NULL constants, conjunctions](migration_09.html#migration-2804)'
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进的布尔常量、NULL常量、连接词的渲染](migration_09.html#migration-2804)'
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2804](https://www.sqlalchemy.org/trac/ticket/2804),
    [#2823](https://www.sqlalchemy.org/trac/ticket/2823)'
  id: totrans-3708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2804](https://www.sqlalchemy.org/trac/ticket/2804),
    [#2823](https://www.sqlalchemy.org/trac/ticket/2823)
- en: '**[sql] [feature]**'
  id: totrans-3709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: The typing system now handles the task of rendering “literal bind” values, e.g.
    values that are normally bound parameters but due to context must be rendered
    as strings, typically within DDL constructs such as CHECK constraints and indexes
    (note that “literal bind” values become used by DDL as of [#2742](https://www.sqlalchemy.org/trac/ticket/2742)).
    A new method [`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") serves as the base, and [`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") is added to allow wrapping
    of a native literal rendering method.
  id: totrans-3710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，键入系统处理呈现“文字绑定”值的任务，例如通常是绑定参数但由于上下文必须呈现为字符串的值，通常在DDL构造中，例如CHECK约束和索引中（请注意，“文字绑定”值从[#2742](https://www.sqlalchemy.org/trac/ticket/2742)开始被DDL使用）。一个新方法[`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")作为基础，添加了[`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")以允许包装本机文字呈现方法。
- en: See also
  id: totrans-3711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The typing system now handles the task of rendering “literal bind” values](migration_09.html#change-2838)'
  id: totrans-3712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[键入系统](migration_09.html#change-2838)现在处理呈现“文字绑定”值的任务。'
- en: 'References: [#2838](https://www.sqlalchemy.org/trac/ticket/2838)'
  id: totrans-3713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2838](https://www.sqlalchemy.org/trac/ticket/2838)
- en: '**[sql] [feature]**'
  id: totrans-3714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method now produces copies of all [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") dictionaries from all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects within the structure including columns,
    constraints, foreign keys, etc. As these dictionaries are copies, they are independent
    of the original dictionary. Previously, only the `.info` dictionary of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was transferred within this operation, and it was
    only linked in place, not copied.
  id: totrans-3715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法现在会复制所有结构中所有[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")对象的所有[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")字典，包括列、约束、外键等。由于这些字典是副本，它们独立于原始字典。以前，此操作仅传输[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.info`字典，并且仅在原地链接，而不是复制。'
- en: 'References: [#2716](https://www.sqlalchemy.org/trac/ticket/2716)'
  id: totrans-3716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2716](https://www.sqlalchemy.org/trac/ticket/2716)
- en: '**[sql] [feature]**'
  id: totrans-3717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: The `default` argument of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") now accepts a class or object method as an argument,
    in addition to a standalone function; will properly detect if the “context” argument
    is accepted or not.
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`default`参数现在接受类或对象方法作为参数，除了独立函数；将正确检测是否接受“上下文”参数。'
- en: '**[sql] [feature]**'
  id: totrans-3719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`. While this feature
    is highlighted as part of 0.9 it is also backported to 0.8.3.
  id: totrans-3720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法到[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定列的列表和可选择的内容，呈现`INSERT INTO (table)
    (columns) SELECT ..`。虽然此功能作为0.9的一部分而突出显示，但也已回溯到0.8.3。
- en: See also
  id: totrans-3721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT from SELECT](migration_09.html#feature-722)'
  id: totrans-3722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从SELECT插入](migration_09.html#feature-722)'
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-3723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-3724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-3725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")提供了一个名为[`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")的新属性，以便更容易控制使用`==`或`!=`与`None`和布尔类型进行比较时如何生成`IS`表达式，或者与绑定参数一起生成普通的相等表达式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-3726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [feature]**'
  id: totrans-3727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A [`label()`](../core/sqlelement.html#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    construct will now render as its name alone in an `ORDER BY` clause, if that label
    is also referred to in the columns clause of the select, instead of rewriting
    the full expression. This gives the database a better chance to optimize the evaluation
    of the same expression in two different contexts.
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`label()`构造也在select的列子句中引用了该标签，则该`label()`构造现在将仅在`ORDER BY`子句中呈现其名称，而不是重新编写完整表达式。这使得数据库有更好的机会优化在两个不同上下文中评估相同表达式。
- en: See also
  id: totrans-3729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Label constructs can now render as their name alone in an ORDER BY](migration_09.html#migration-1068)'
  id: totrans-3730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标签构造现在可以在ORDER BY中仅呈现其名称](migration_09.html#migration-1068)'
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-3731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql] [bug]**'
  id: totrans-3732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-3733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，即如果在多个FROM子句中引用了CTE的名称，则可能无法正确引用CTE的名称。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-3735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-3736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-3737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式系统中的错误，如果CTE仅被用作`alias()`构造，则不会使用WITH关键字呈现。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-3739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-3740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-3741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的错误，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会传播。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-3743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-3744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-3745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")无法正确解释具有`__clause_element__()`方法的ORM元素的错误。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-3747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-3748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-3749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当生成“非本地”类型的CHECK约束时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型现在会绕过任何自定义（例如TypeDecorator）类型的使用。这样，自定义类型不会参与CHECK中的表达式，因为此表达式针对“impl”值而不是“decorated”值。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-3751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-3752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-3753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从未指定`unique`（默认为`None`）的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")生成了[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，则`.unique`标志可能会生成为`None`。现在该标志将始终为`True`或`False`。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-3755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-3756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-3757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了默认编译器以及postgresql、mysql和mssql的bug，以确保任何字面SQL表达式值在CREATE INDEX语句中直接呈现为字面值，而不是作为绑定参数。这也改变了其他DDL（如约束）的呈现方案。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-3760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-3761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")在其FROM子句中引用自身，通常通过就地突变，将引发信息性错误消息，而不是导致递归溢出。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-3763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-3764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-3765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`column_reflect`事件更改传入[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.key`会阻止正确反映主键约束、索引和外键约束的bug。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-3767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-3768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-3769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 0.8中添加的[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")运算符现在正确地生成了对空集合使用时“IN”返回的否定。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-3771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-3772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式系统依赖于`select()`构造中的`.c`集合的`str()`形式的一些表达式的 bug，但由于元素依赖于方言特定的编译构造，特别是与
    PostgreSQL `ARRAY` 元素一起使用的`__getitem__()`运算符，因此`str()`形式不可用。 修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发该异常。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-3774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: '**[sql] [bug]**'
  id: totrans-3775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-3776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造的关联行为进行了多次修复，这是在 0.8.0 中首次引入的：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-3777
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为满足 FROM 条目应该向外关联到包含另一个 SELECT 的 SELECT，然后再包含此 SELECT 的用例，现在当通过[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")建立显式关联时，关联现在可以跨多个级别工作，前提是目标 select
    在由 WHERE/ORDER BY/columns 子句包含的链中的某处，而不仅仅是嵌套的 FROM 子句。 这使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")的行为再次更加兼容于 0.7，同时仍保持新的“智能”关联。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-3778
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当未使用显式关联时，通常的“隐式”关联将其行为限制在仅限于直接封闭的 SELECT 中，以最大限度地提高与 0.7 应用程序的兼容性，并且在这种情况下还防止跨嵌套
    FROM 的关联，以保持与 0.8.0/0.8.1 的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-3779
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法未在所有情况下阻止给定的 FROM 子句进行关联，并且还会导致
    FROM 子句被错误地完全省略（更像是 0.7 会做的），这已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-3780
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`select.correlate_except(None)`将使所有 FROM 子句进入关联，正如预期的那样。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-3782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)，[#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-3783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-3784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即将表“A”的多个外键路径的`select()`与表“B”连接到表“B”时，如果直接将表“A”与“B”连接，则不会产生“模糊的连接条件”错误，而是会产生具有多个条件的连接条件。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-3786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-3787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-3788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在跨远程模式和本地模式使用 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 可能会在两个模式都有相同名称的表的情况下产生错误结果。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-3791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-3792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基础 [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 类中删除了“not implemented” `__iter__()`
    调用，虽然这在 0.8.0 版本中引入是为了防止在自定义运算符上实现 `__getitem__()` 方法并在该对象上错误调用 `list()` 时出现无限增长的内存循环，但它导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的办法同时实现两边，所以我们坚持使用
    Python 最佳实践。在自定义运算符上实现 `__getitem__()` 时要小心！
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-3794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug]**'
  id: totrans-3795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “name” attribute is set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") before the “attach” events are called, so that attachment
    events can be used to dynamically generate a name for the index based on the parent
    table and/or columns.
  id: totrans-3796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“attach”事件之前，[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    上设置了“name”属性，以便可以使用附加事件根据父表和/或列动态生成索引名称。
- en: 'References: [#2835](https://www.sqlalchemy.org/trac/ticket/2835)'
  id: totrans-3797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2835](https://www.sqlalchemy.org/trac/ticket/2835)
- en: '**[sql] [bug]**'
  id: totrans-3798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The erroneous kw arg “schema” has been removed from the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object. this was an accidental commit that did
    nothing; a warning is raised in 0.8.3 when this kw arg is used.
  id: totrans-3799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象中的错误 kw 参数“schema”已被移除。这是一个意外提交，没有任何作用；在使用此 kw 参数时，0.8.3 版本会发出警告。'
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-3800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-3801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A rework to the way that “quoted” identifiers are handled, in that instead of
    relying upon various `quote=True` flags being passed around, these flags are converted
    into rich string objects with quoting information included at the point at which
    they are passed to common schema constructs like [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. This solves the issue of various methods that
    don’t correctly honor the “quote” flag such as `Engine.has_table()` and related
    methods. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") object is a string subclass that can
    also be used explicitly if needed; the object will hold onto the quoting preferences
    passed and will also bypass the “name normalization” performed by dialects that
    standardize on uppercase symbols, such as Oracle, Firebird and DB2. The upshot
    is that the “uppercase” backends can now work with force-quoted names, such as
    lowercase-quoted names and new reserved words.
  id: totrans-3802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“引号”标识符处理方式进行了重新设计，不再依赖于传递各种`quote=True`标志，而是将这些标志转换为包含引号信息的丰富字符串对象，并在它们传递给像[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")等常见模式构造时包含这些信息。这解决了各种方法不正确遵守“quote”标志的问题，例如`Engine.has_table()`和相关方法。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")对象是一个字符串子类，如果需要，也可以明确使用；该对象将保留传递的引号首选项，并且还将绕过标准化为大写符号的方言执行的“名称规范化”。结果是，“大写”后端现在可以使用强制引号名称，例如小写引号名称和新的保留字。
- en: See also
  id: totrans-3803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Schema identifiers now carry along their own quoting information](migration_09.html#change-2812)'
  id: totrans-3804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式标识符现在携带自己的引号信息](migration_09.html#change-2812)'
- en: 'References: [#2812](https://www.sqlalchemy.org/trac/ticket/2812)'
  id: totrans-3805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2812](https://www.sqlalchemy.org/trac/ticket/2812)
- en: '**[sql] [bug]**'
  id: totrans-3806
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The resolution of [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects to their target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") has been reworked to be as immediate as possible,
    based on the moment that the target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as this [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), rather than waiting for the first time a join
    is constructed, or similar. This along with other improvements allows earlier
    detection of some foreign key configuration issues. Also included here is a rework
    of the type-propagation system, so that it should be reliable now to set the type
    as `None` on any [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that refers to another via [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") - the type will be copied from the target column
    as soon as that other column is associated, and now works for composite foreign
    keys as well.
  id: totrans-3807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象解析为其目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的分辨率已经重新设计，以尽可能立即进行，基于目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与此[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")关联的相同[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")的时刻，而不是等待构建联接的第一次或类似情况。这与其他改进一起，允许更早地检测到一些外键配置问题。此外，这里还包括对类型传播系统的重新设计，因此现在应该可以可靠地在通过[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用另一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的任何[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上将类型设置为`None` - 该类型将在另一个列关联时立即从目标列复制，并且现在也适用于复合外键。'
- en: See also
  id: totrans-3808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns can reliably get their type from a column referred to via ForeignKey](migration_09.html#migration-1765)'
  id: totrans-3809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列可以可靠地从通过ForeignKey引用的列获取其类型](migration_09.html#migration-1765)'
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765)'
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765)
- en: postgresql
  id: totrans-3811
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-3812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-3813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 PostgreSQL 9.2 范围类型已添加。目前尚未提供类型转换，因此暂时直接使用字符串或 psycopg2 2.5 范围扩展类型。补丁由 Chris
    Withers 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.2
- en: '**[postgresql] [feature]**'
  id: totrans-3815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-3816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 DBAPI 时，添加了对“AUTOCOMMIT”隔离的支持。关键字可通过`isolation_level`执行选项使用。补丁由
    Roman Podolyaka 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.2
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-3818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [feature]**'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [功能]**'
- en: Added support for rendering `SMALLSERIAL` when a [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") type is used on a primary key autoincrement column,
    based on server version detection of PostgreSQL version 9.2 or greater.
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在主键自增列上使用 [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") 类型时，根据 PostgreSQL 版本检测，添加了对 `SMALLSERIAL` 的呈现支持。
- en: 'References: [#2840](https://www.sqlalchemy.org/trac/ticket/2840)'
  id: totrans-3821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2840](https://www.sqlalchemy.org/trac/ticket/2840)
- en: '**[postgresql] [bug]**'
  id: totrans-3822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-3823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了从列的服务器默认反射中的 128 字符截断；此代码最初来自 PG 系统视图，用于可读性截断字符串。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.3
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-3825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 CREATE INDEX 语句的列列表中，将会对复合 SQL 表达式应用括号。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-3829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-3830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-3831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 版本字符串前缀为“PostgreSQL”或“EnterpriseDB”之前的字符串不会解析的错误。由 Scott Schaefer
    提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.3
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-3833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: '**[postgresql] [bug]**'
  id: totrans-3834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-3835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract")的行为已简化，不再将硬编码的`::timestamp`或类似的转换注入到给定的表达式中，因为这会干扰诸如时区感知日期时间之类的类型，但是对于现代版本的
    psycopg2 似乎也不是必需的。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.2
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-3837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-3838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-3839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型中包含反斜杠引号的键/值在使用“非本机”（即非-psycopg2）方式转换 HSTORE 数据时不会正确转义的错误。补丁由 Ryan
    Kelly 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.2
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-3841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-3842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多列 PostgreSQL 索引中列顺序反映错误的错误。由 Roman Podolyaka 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**已回溯**至：0.8.2
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-3845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: mysql
  id: totrans-3846
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-3847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-3848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")一起使用的`mysql_length`参数现在可以作为列名/长度的字典传递，用于复合索引。非常感谢Roman
    Podolyaka的补丁。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-3850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [feature]**'
  id: totrans-3851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The MySQL [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type now features the same auto-quoting behavior as that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM"). Quotes are not required when setting up the
    value, but quotes that are present will be auto-detected along with a warning.
    This also helps with Alembic where the SET type doesn’t render with quotes.
  id: totrans-3852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    类型现在具有与[`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")相同的自动引号行为。在设置值时不需要引号，但存在的引号将被自动检测并发出警告。这也有助于
    Alembic，在那里 SET 类型不带引号。
- en: 'References: [#2817](https://www.sqlalchemy.org/trac/ticket/2817)'
  id: totrans-3853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2817](https://www.sqlalchemy.org/trac/ticket/2817)
- en: '**[mysql] [bug]**'
  id: totrans-3854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-3855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新MySQL保留字版本5.5、5.6，感谢Hanno Schlichting。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-3856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3, 0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-3857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-3858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[#2721](https://www.sqlalchemy.org/trac/ticket/2721)中的更改是，MySQL后端对[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")的`deferrable`关键字被静默忽略，将在0.9版本中恢复；此关键字现在将再次呈现，在MySQL上引发错误，因为它不被理解
    - 相同的行为也将适用于`initially`关键字。在0.8版本中，这些关键字将继续被忽略，但会发出警告。此外，`match`关键字现在在0.9上引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在0.8上发出警告；这个关键字不仅被MySQL静默忽略，还会破坏ON UPDATE/ON DELETE选项。'
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要使用在MySQL上不呈现或呈现不同的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。文档中已添加了此用法示例，请参阅[MySQL /
    MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-3863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-3864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL-connector方言现在允许在create_engine查询字符串中使用选项来覆盖在连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-3866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: '**[mysql] [bug]**'
  id: totrans-3867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-3868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用多表UPDATE时出现的bug，其中一个补充表是带有自己绑定参数的SELECT，绑定参数的位置与使用MySQL的特殊语法时语句本身相反。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-3870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-3871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`mysql+gaerdbms`方言中添加了另一个条件来检测所谓的“开发”模式，其中我们应该使用`rdbms_mysqldb` DBAPI。补丁由Brett
    Slatkin提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-3874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-3875
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")和[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")上的`deferrable`关键字参数不会在MySQL方言上呈现`DEFERRABLE`关键字。很长一段时间以来，我们一直保留这个设置，因为一个非延迟的外键与一个延迟的外键的行为非常不同，但一些环境只是在MySQL上禁用FKs，所以我们在这里会少些主观意见。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-3878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-3879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fix and test parsing of MySQL foreign key options within reflection; this complements
    the work in [#2183](https://www.sqlalchemy.org/trac/ticket/2183) where we begin
    to support reflection of foreign key options such as ON UPDATE/ON DELETE cascade.
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复并测试MySQL外键选项在反射中的解析；这是对[#2183](https://www.sqlalchemy.org/trac/ticket/2183)中的工作的补充，我们开始支持外键选项的反射，如ON
    UPDATE/ON DELETE cascade。
- en: 'References: [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-3881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-3882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improved support for the cymysql driver, supporting version 0.6.5, courtesy
    Hajime Nakagami.
  id: totrans-3883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对cymysql驱动程序的支持，支持版本0.6.5，感谢Hajime Nakagami。
- en: sqlite
  id: totrans-3884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-3885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-3886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增的SQLite DATETIME参数storage_format和regexp显然没有完全正确实现；虽然参数被接受，但实际上它们没有任何效果；这个问题已经修复。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-3888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: '**[sqlite] [bug]**'
  id: totrans-3889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-3890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT")添加到可以由SQLite方言反射的类型名称列表中；感谢Russell Stuart。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-3892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-3893
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server 2000上查询信息模式时，删除了在0.8.1中添加的CAST调用，以帮助处理驱动程序问题，显然在2000上不兼容。CAST保留在SQL
    Server 2005及更高版本中。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-3897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-3898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pyodbc]**'
- en: Fixes to MSSQL with Python 3 + pyodbc, including that statements are passed
    correctly.
  id: totrans-3899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Python 3 + pyodbc中的MSSQL问题，包括正确传递语句。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-3900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: oracle
  id: totrans-3901
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [py3k]**'
  id: totrans-3902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [特性] [py3k]**'
- en: The Oracle unit tests with cx_oracle now pass fully under Python 3.
  id: totrans-3903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 cx_oracle 进行的 Oracle 单元测试现在完全在 Python 3 下通过。
- en: '**[oracle] [bug]**'
  id: totrans-3904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-3905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用同义词反射 Oracle 表时，如果同义词和表位于不同的远程模式中，则会失败的错误。感谢 Kyle Derr 提供的修补程序。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.8.3
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-3907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-3908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-3909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-3910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    添加了一个新标志 `system=True`，它将列标记为数据库自动添加的“系统”列（例如 PostgreSQL 的 `oid` 或 `xmin`）。该列将被省略在
    `CREATE TABLE` 语句中，但仍可用于查询。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") 构造可以应用于自定义编译规则，以允许跳过列，方法是生成一个返回 `None` 的规则。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.8.3
- en: '**[feature] [firebird]**'
  id: totrans-3912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 kinterbasdb 和 fdb 方言添加了新标志 `retaining=True`。这控制发送到 DBAPI 连接的 `commit()` 和
    `rollback()` 方法的 `retaining` 标志的值。由于历史原因，此标志在 0.8.2 中默认为 `True`，但是在 0.9.0b1 中，此标志默认为
    `False`。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.8.2
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[feature] [core]**'
  id: totrans-3916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [核心]**'
- en: Added a new variant to [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") called `ValuesBase.return_defaults()`;
    this allows arbitrary columns to be added to the RETURNING clause of the statement
    without interfering with the compilers usual “implicit returning” feature, which
    is used to efficiently fetch newly generated primary key values. For supporting
    backends, a dictionary of all fetched values is present at `ResultProxy.returned_defaults`.
  id: totrans-3917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 的新变体，称为 `ValuesBase.return_defaults()`；这允许将任意列添加到语句的
    RETURNING 子句中，而不会干扰编译器通常的“隐式返回”特性，该特性用于有效地获取新生成的主键值。对于支持的后端，所有获取的值的字典都存在于 `ResultProxy.returned_defaults`
    中。
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[feature] [pool]**'
  id: totrans-3919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [池]**'
- en: Added pool logging for “rollback-on-return” and the less used “commit-on-return”.
    This is enabled with the rest of pool “debug” logging.
  id: totrans-3920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“回滚后返回”和较少使用的“提交后返回”的池记录。这与池“调试”日志一起启用。
- en: 'References: [#2752](https://www.sqlalchemy.org/trac/ticket/2752)'
  id: totrans-3921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2752](https://www.sqlalchemy.org/trac/ticket/2752)
- en: '**[feature] [firebird]**'
  id: totrans-3922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [firebird]**'
- en: The `fdb` dialect is now the default dialect when specified without a dialect
    qualifier, i.e. `firebird://`, per the Firebird project publishing `fdb` as their
    official Python driver.
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当未指定方言限定符时，`fdb` 方言现在是默认方言，即 `firebird://`，根据 Firebird 项目发布 `fdb` 作为其官方 Python
    驱动程序。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-3924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-3925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-3926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射 Firebird 类型 LONG 和 INT64 时，类型查找已修复，使得 LONG 被视为 INTEGER，INT64 被视为 BIGINT，除非类型具有“精度”，在这种情况下，它将被视为
    NUMERIC。补丁由 Russell Stuart 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：0.8.2
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-3928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-3929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-3930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果使用函数而不是类设置组合类型，则当尝试检查该列是否为 [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") 时，可变扩展会失败（它不是）。感谢 asldevi 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: '**[requirements]**'
  id: totrans-3932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[要求]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-3933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python [模拟](https://pypi.org/project/mock) 库现在是运行单元测试套件所必需的。虽然从 Python 3.3 开始是标准库的一部分，但之前的
    Python 安装需要安装它才能运行单元测试或者使用 `sqlalchemy.testing` 包来处理外部方言。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-3934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: general
  id: totrans-3935
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [feature] [py3k]**'
  id: totrans-3936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般] [功能] [py3k]**'
- en: The C extensions are ported to Python 3 and will build under any supported CPython
    2 or 3 environment.
  id: totrans-3937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C 扩展已迁移到 Python 3，并且将在任何支持的 CPython 2 或 3 环境下构建。
- en: 'References: [#2161](https://www.sqlalchemy.org/trac/ticket/2161)'
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2161](https://www.sqlalchemy.org/trac/ticket/2161)
- en: '**[general] [feature] [py3k]**'
  id: totrans-3939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般] [功能] [py3k]**'
- en: The codebase is now “in-place” for Python 2 and 3, the need to run 2to3 has
    been removed. Compatibility is now against Python 2.6 on forward.
  id: totrans-3940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码库现在对 Python 2 和 3 进行了“原地”修改，不再需要运行 2to3。兼容性现在针对 Python 2.6 向前。
- en: 'References: [#2671](https://www.sqlalchemy.org/trac/ticket/2671)'
  id: totrans-3941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2671](https://www.sqlalchemy.org/trac/ticket/2671)
- en: '**[general]**'
  id: totrans-3942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: A large refactoring of packages has reorganized the import structure of many
    Core modules as well as some aspects of the ORM modules. In particular `sqlalchemy.sql`
    has been broken out into several more modules than before so that the very large
    size of `sqlalchemy.sql.expression` is now pared down. The effort has focused
    on a large reduction in import cycles. Additionally, the system of API functions
    in `sqlalchemy.sql.expression` and `sqlalchemy.orm` has been reorganized to eliminate
    redundancy in documentation between the functions vs. the objects they produce.
  id: totrans-3943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对许多核心模块以及 ORM 模块的导入结构进行了大规模的重构。特别是，`sqlalchemy.sql` 已经被分解成比以前更多的模块，因此非常大的 `sqlalchemy.sql.expression`
    现在已经被削减了。该工作的重点是大幅减少导入循环。此外，`sqlalchemy.sql.expression` 和 `sqlalchemy.orm` 中的
    API 函数系统已重新组织，以消除函数与它们生成的对象之间文档中的冗余。
- en: orm
  id: totrans-3944
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-3945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new option to [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`. This enables the subquery
    eager loader strategy to apply a DISTINCT to the innermost SELECT subquery, to
    assist in the case where duplicate rows are generated by the innermost query which
    corresponds to this relationship (there’s not yet a general solution to the issue
    of dupe rows within subquery eager loading, however, when joins outside of the
    innermost subquery produce dupes). When the flag is set to `True`, the DISTINCT
    is rendered unconditionally, and when it is set to `None`, DISTINCT is rendered
    if the innermost relationship targets columns that do not comprise a full primary
    key. The option defaults to False in 0.8 (e.g. off by default in all cases), None
    in 0.9 (e.g. automatic by default). Thanks to Alexander Koval for help with this.
  id: totrans-3946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新选项到 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") `distinct_target_key`。这使子查询急加载策略能够对最内部的 SELECT
    子查询应用 DISTINCT，以协助解决由最内部查询生成重复行的情况（尚无解决子查询急加载中重复行问题的一般解决方案，但是，当最内部子查询之外的连接生成重复时）。当标志设置为
    `True` 时，将无条件地呈现 DISTINCT，当设置为 `None` 时，如果最内部关系的目标列不包含完整的主键，则呈现 DISTINCT。该选项在
    0.8 中默认为 False（例如，在所有情况下默认关闭），在 0.9 中默认为 None（例如，默认情况下自动执行）。感谢 Alexander Koval
    的帮助。
- en: See also
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Subquery Eager Loading will apply DISTINCT to the innermost SELECT for some
    queries](migration_09.html#change-2836)'
  id: totrans-3948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[子查询急加载将对某些查询的最内部 SELECT 应用 DISTINCT](migration_09.html#change-2836)'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-3949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2836](https://www.sqlalchemy.org/trac/ticket/2836)'
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2836](https://www.sqlalchemy.org/trac/ticket/2836)
- en: '**[orm] [feature]**'
  id: totrans-3951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The association proxy now returns `None` when fetching a scalar attribute off
    of a scalar relationship, where the scalar relationship itself points to `None`,
    instead of raising an `AttributeError`.
  id: totrans-3952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从标量关系中获取标量属性时，关联代理现在会返回`None`，而不是引发`AttributeError`，其中标量关系本身指向`None`。
- en: See also
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Association Proxy Missing Scalar returns None](migration_09.html#migration-2810)'
  id: totrans-3954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理缺失标量返回 None](migration_09.html#migration-2810)'
- en: 'References: [#2810](https://www.sqlalchemy.org/trac/ticket/2810)'
  id: totrans-3955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2810](https://www.sqlalchemy.org/trac/ticket/2810)
- en: '**[orm] [feature]**'
  id: totrans-3956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new method [`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history"), works like [`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") but also fires loader callables.
  id: totrans-3957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`AttributeState.load_history()`](../orm/internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history")，类似于[`AttributeState.history`](../orm/internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")，但也触发加载器可调用。
- en: See also
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-3959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history()现在默认情况下会从数据库查询，如果值不存在](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-3960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [feature]**'
  id: totrans-3961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new load option [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only"). This allows a series of column names to be specified
    as loading “only” those attributes, deferring the rest.
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的加载选项[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")。这允许指定一系列列名作为“仅”加载这些属性，推迟其余属性的加载。
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-3963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-3964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The system of loader options has been entirely rearchitected to build upon a
    much more comprehensive base, the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object. This base allows any common loader option like
    [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer"), etc. to be used in a “chained” style for the purpose
    of specifying options down a path, such as `joinedload("foo").subqueryload("bar")`.
    The new system supersedes the usage of dot-separated path names, multiple attributes
    within options, and the usage of `_all()` options.
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载器选项系统已经完全重新设计，建立在更全面的基础上，即[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")对象。这个基础允许任何常见的加载器选项，如[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")、[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")等，以“链式”方式用于指定路径下的选项，例如`joinedload("foo").subqueryload("bar")`。新系统取代了点分隔路径名称、选项中的多个属性以及使用`_all()`选项的用法。
- en: See also
  id: totrans-3966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[New Query Options API; load_only() option](migration_09.html#feature-1418)'
  id: totrans-3967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的查询选项 API；load_only() 选项](migration_09.html#feature-1418)'
- en: 'References: [#1418](https://www.sqlalchemy.org/trac/ticket/1418)'
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1418](https://www.sqlalchemy.org/trac/ticket/1418)
- en: '**[orm] [feature]**'
  id: totrans-3969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    construct now maintains the return object when used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), rather than expanding out into individual columns. This
    makes use of the new [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") feature internally. This behavior is backwards incompatible;
    to select from a composite column which will expand out, use `MyClass.some_composite.clauses`.
  id: totrans-3970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在基于列的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")中使用[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")构造时，现在会保留返回对象，而不是展开为单独的列。这在内部使用了新的[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")功能。这种行为是不兼容的；要从一个会展开的复合列中选择，使用`MyClass.some_composite.clauses`。
- en: See also
  id: totrans-3971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-3972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[复合属性现在在按属性查询时以对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-3973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-3974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: A new construct [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is added, which allows for specification of groups of
    column expressions to a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct. The group of columns are returned as a single
    tuple by default. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be overridden however to provide any sort of result
    processing to the returned row. The behavior of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") is also embedded into composite attributes now when they
    are used in a column-oriented [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-3975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的构造[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")，允许将列表达式组指定给[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")构造。默认情况下，列组将作为单个元组返回。但是，可以覆盖[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")的行为，以提供对返回行的任何类型的结果处理。当在基于列的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中使用时，现在复合属性的行为也嵌入到[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")中。
- en: See also
  id: totrans-3976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Bundles for ORM queries](migration_09.html#change-2824)'
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 查询的列捆绑](migration_09.html#change-2824)'
- en: '[Composite attributes are now returned as their object form when queried on
    a per-attribute basis](migration_09.html#migration-2824)'
  id: totrans-3978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当按属性基础查询时，现在复合属性将以对象形式返回](migration_09.html#migration-2824)'
- en: 'References: [#2824](https://www.sqlalchemy.org/trac/ticket/2824)'
  id: totrans-3979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2824](https://www.sqlalchemy.org/trac/ticket/2824)
- en: '**[orm] [feature]**'
  id: totrans-3980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `version_id_generator` parameter of `Mapper` can now be specified to rely
    upon server generated version identifiers, using triggers or other database-provided
    versioning features, or via an optional programmatic value, by setting `version_id_generator=False`.
    When using a server-generated version identifier, the ORM will use RETURNING when
    available to immediately load the new version value, else it will emit a second
    SELECT.
  id: totrans-3981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Mapper`的`version_id_generator`参数现在可以指定依赖于服务器生成的版本标识符，使用触发器或其他数据库提供的版本控制功能，或通过设置`version_id_generator=False`来使用可选的程序值。当使用服务器生成的版本标识符时，ORM
    将在可用时使用 RETURNING 立即加载新的版本值，否则将发出第二个 SELECT。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-3982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-3983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The `eager_defaults` flag of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will now allow the newly generated default values to
    be fetched using an inline RETURNING clause, rather than a second SELECT statement,
    for backends that support RETURNING.
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的`eager_defaults`标志现在将允许使用内联
    RETURNING 子句获取新生成的默认值，而不是使用第二个 SELECT 语句，适用于支持 RETURNING 的后端。'
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-3985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[orm] [feature]**'
  id: totrans-3986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new attribute [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") to [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"); this is a dictionary where applications can store arbitrary
    data local to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The contents of [`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") can be also be initialized using the `info` argument
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  id: totrans-3987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新属性[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")；这是一个字典，应用程序可以将任意数据存储在与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关的本地数据中。[`Session.info`](../orm/session_api.html#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info")的内容也可以使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")的`info`参数进行初始化。
- en: '**[orm] [feature]**'
  id: totrans-3988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Removal of event listeners is now implemented. The feature is provided via the
    [`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")
    function.
  id: totrans-3989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在已实现事件监听器的移除。该功能通过[`remove()`](../core/event.html#sqlalchemy.event.remove "sqlalchemy.event.remove")函数提供。
- en: See also
  id: totrans-3990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Event Removal API](migration_09.html#feature-2268)'
  id: totrans-3991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[事件移除 API](migration_09.html#feature-2268)'
- en: 'References: [#2268](https://www.sqlalchemy.org/trac/ticket/2268)'
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2268](https://www.sqlalchemy.org/trac/ticket/2268)
- en: '**[orm] [feature]**'
  id: totrans-3993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The mechanism by which attribute events pass along an `AttributeImpl` as an
    “initiator” token has been changed; the object is now an event-specific object
    called `Event`. Additionally, the attribute system no longer halts events based
    on a matching “initiator” token; this logic has been moved to be specific to ORM
    backref event handlers, which are the typical source of the re-propagation of
    an attribute event onto subsequent append/set/remove operations. End user code
    which emulates the behavior of backrefs must now ensure that recursive event propagation
    schemes are halted, if the scheme does not use the backref handlers. Using this
    new system, backref handlers can now perform a “two-hop” operation when an object
    is appended to a collection, associated with a new many-to-one, de-associated
    with the previous many-to-one, and then removed from a previous collection. Before
    this change, the last step of removal from the previous collection would not occur.
  id: totrans-3994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性事件传递 `AttributeImpl` 作为“发起者”令牌的机制已更改；对象现在是一个名为 `Event` 的特定事件对象。此外，属性系统不再根据匹配的“发起者”令牌停止事件；此逻辑已移至特定于
    ORM 反向引用事件处理程序的地方，这些处理程序是属性事件重新传播到后续附加/设置/移除操作的典型来源。模拟反向引用处理程序行为的最终用户代码现在必须确保递归事件传播方案被停止，如果该方案不使用反向引用处理程序。使用这个新系统，当对象附加到集合中，与新的多对一关联，与先前的多对一解除关联，然后从先前的集合中移除时，反向引用处理程序现在可以执行“两跳”操作。在此更改之前，从先前集合中移除的最后一步操作将不会发生。
- en: See also
  id: totrans-3995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Backref handlers can now propagate more than one level deep](migration_09.html#migration-2789)'
  id: totrans-3996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Backref 处理程序现在可以传播多个级别](migration_09.html#migration-2789)'
- en: 'References: [#2789](https://www.sqlalchemy.org/trac/ticket/2789)'
  id: totrans-3997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2789](https://www.sqlalchemy.org/trac/ticket/2789)
- en: '**[orm] [feature]**'
  id: totrans-3998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: A major change regarding how the ORM constructs joins where the right side is
    itself a join or left outer join. The ORM is now configured to allow simple nesting
    of joins of the form `a JOIN (b JOIN c ON b.id=c.id) ON a.id=b.id`, rather than
    forcing the right side into a `SELECT` subquery. This should allow significant
    performance improvements on most backends, most particularly MySQL. The one database
    backend that has for many years held back this change, SQLite, is now addressed
    by moving the production of the `SELECT` subquery from the ORM to the SQL compiler;
    so that a right-nested join on SQLite will still ultimately render with a `SELECT`,
    while all other backends are no longer impacted by this workaround.
  id: totrans-3999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 ORM 构建右侧为 JOIN 或 LEFT OUTER JOIN 的连接的重大变更。现在 ORM 配置为允许形式为 `a JOIN (b JOIN
    c ON b.id=c.id) ON a.id=b.id` 的连接简单嵌套，而不是强制右侧成为 `SELECT` 子查询。这应该可以在大多数后端上实现显著的性能改进，尤其是
    MySQL。多年来一直阻碍此变更的一个数据库后端，SQLite，现在通过将 `SELECT` 子查询的生成从 ORM 移动到 SQL 编译器来解决；因此，在
    SQLite 上的右侧嵌套连接最终仍将呈现为 `SELECT`，而所有其他后端不再受此解决方法的影响。
- en: As part of this change, a new argument `flat=True` has been added to the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"), `Join.alias()`, and [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") functions, which allows an “alias” of a JOIN
    to be produced which applies an anonymous alias to each component table within
    the join, rather than producing a subquery.
  id: totrans-4000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")、`Join.alias()`
    和 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 函数现在添加了一个新参数 `flat=True`，允许生成一个 JOIN 的“别名”，该别名对加入的每个组件表应用一个匿名别名，而不是生成一个子查询。
- en: See also
  id: totrans-4001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多 JOIN 和 LEFT OUTER JOIN 表达式将不再被包裹在 (SELECT * FROM ..) AS ANON_1 中](migration_09.html#feature-joins-09)'
- en: 'References: [#2587](https://www.sqlalchemy.org/trac/ticket/2587)'
  id: totrans-4003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2587](https://www.sqlalchemy.org/trac/ticket/2587)
- en: '**[orm] [bug]**'
  id: totrans-4004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where list instrumentation would fail to represent a setslice of `[0:0]`
    correctly, which in particular could occur when using `insert(0, item)` with the
    association proxy. Due to some quirk in Python collections, the issue was much
    more likely with Python 3 rather than 2.
  id: totrans-4005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了列表插入操作`insert(0, item)`时，列表仪器化未能正确表示`[0:0]`的切片设置，特别是在使用关联代理时可能发生的情况。由于 Python
    集合中的一些怪癖，该问题在 Python 3 中比在 Python 2 中更有可能发生。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2807](https://www.sqlalchemy.org/trac/ticket/2807)'
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2807](https://www.sqlalchemy.org/trac/ticket/2807)
- en: '**[orm] [bug]**'
  id: totrans-4008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where using an annotation such as [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote
    "sqlalchemy.orm.remote") or [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") on a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") before association with a parent [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") could produce issues related to the parent table not
    rendering within joins, due to the inherent copy operation performed by an annotation.
  id: totrans-4009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在与父 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    关联之前在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    上使用 [`remote()`](../orm/relationship_api.html#sqlalchemy.orm.remote "sqlalchemy.orm.remote")
    或 [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign "sqlalchemy.orm.foreign")
    等注释可能会导致与父表相关的问题，因为注释���行的固有复制操作。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2813](https://www.sqlalchemy.org/trac/ticket/2813)'
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2813](https://www.sqlalchemy.org/trac/ticket/2813)
- en: '**[orm] [bug]**'
  id: totrans-4012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") failed to work correctly without any WHERE criterion.
    Courtesy Vladimir Magamedov.
  id: totrans-4013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 [`Query.exists()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.exists
    "sqlalchemy.orm.Query.exists") 在没有任何 WHERE 条件的情况下无法正常工作。感谢 Vladimir Magamedov。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2818](https://www.sqlalchemy.org/trac/ticket/2818)'
  id: totrans-4015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2818](https://www.sqlalchemy.org/trac/ticket/2818)
- en: '**[orm] [bug]**'
  id: totrans-4016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a potential issue in an ordered sequence implementation used by the ORM
    to iterate mapper hierarchies; under the Jython interpreter this implementation
    wasn’t ordered, even though cPython and PyPy maintained ordering.
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 用于迭代映射器层次结构的有序序列实现中的潜在问题；在 Jython 解释器下，这个实现没有排序，尽管 cPython 和 PyPy 保持了排序。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2794](https://www.sqlalchemy.org/trac/ticket/2794)'
  id: totrans-4019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2794](https://www.sqlalchemy.org/trac/ticket/2794)
- en: '**[orm] [bug]**'
  id: totrans-4020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM-level event registration where the “raw” or “propagate” flags
    could potentially be mis-configured in some “unmapped base class” configurations.
  id: totrans-4021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 级别事件注册中“原始”或“传播”标志在某些“未映射基类”配置中可能被错误配置的 bug。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2786](https://www.sqlalchemy.org/trac/ticket/2786)'
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2786](https://www.sqlalchemy.org/trac/ticket/2786)
- en: '**[orm] [bug]**'
  id: totrans-4024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A performance fix related to the usage of the [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") option when loading mapped entities. The function overhead
    of applying a per-object deferred callable to an instance at load time was significantly
    higher than that of just loading the data from the row (note that `defer()` is
    meant to reduce DB/network overhead, not necessarily function call count); the
    function call overhead is now less than that of loading data from the column in
    all cases. There is also a reduction in the number of “lazy callable” objects
    created per load from N (total deferred values in the result) to 1 (total number
    of deferred cols).
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与加载映射实体时使用 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    选项相关的性能修复。在加载时间将一个每个对象延迟可调用应用到实例的函数开销明显高于仅从行加载数据的开销（请注意，`defer()` 旨在减少数据库/网络开销，而不一定是函数调用次数）；在所有情况下，函数调用开销现在小于从列加载数据的开销。每次从
    N（结果中的总延迟值）加载的“延迟可调用”对象数量也从 N 减少到 1（延迟列的总数）。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2778](https://www.sqlalchemy.org/trac/ticket/2778)'
  id: totrans-4027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2778](https://www.sqlalchemy.org/trac/ticket/2778)
- en: '**[orm] [bug]**'
  id: totrans-4028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug whereby attribute history functions would fail when an object we moved
    from “persistent” to “pending” using the [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") function, for operations involving collection-based
    backrefs.
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即当我们使用 [`make_transient()`](../orm/session_api.html#sqlalchemy.orm.make_transient
    "sqlalchemy.orm.make_transient") 函数将对象从“持久”移动到“挂起”时，涉及基于集合的反向引用的操作中，属性历史函数会失败。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2773](https://www.sqlalchemy.org/trac/ticket/2773)'
  id: totrans-4031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2773](https://www.sqlalchemy.org/trac/ticket/2773)
- en: '**[orm] [bug]**'
  id: totrans-4032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted when trying to flush an object of an inherited class where
    the polymorphic discriminator has been assigned to a value that is invalid for
    the class.
  id: totrans-4033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当尝试刷新一个继承类的对象时，如果多态鉴别器已分配给对该类无效的值，则会发出警告。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: 'References: [#2750](https://www.sqlalchemy.org/trac/ticket/2750)'
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2750](https://www.sqlalchemy.org/trac/ticket/2750)
- en: '**[orm] [bug]**'
  id: totrans-4036
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in polymorphic SQL generation where multiple joined-inheritance entities
    against the same base class joined to each other as well would not track columns
    on the base table independently of each other if the string of joins were more
    than two entities long.
  id: totrans-4037
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多态 SQL 生成中的错误，当多个继承实体针对相同的基类相互连接时，如果连接字符串超过两个实体，则基表上的列不会独立跟踪彼此。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: 'References: [#2759](https://www.sqlalchemy.org/trac/ticket/2759)'
  id: totrans-4039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2759](https://www.sqlalchemy.org/trac/ticket/2759)
- en: '**[orm] [bug]**'
  id: totrans-4040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where sending a composite attribute into [`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") would produce a parenthesized expression not
    accepted by some databases.
  id: totrans-4041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将复合属性发送到[`Query.order_by()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")会产生一些数据库不接受的括号表达式的错误。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: 'References: [#2754](https://www.sqlalchemy.org/trac/ticket/2754)'
  id: totrans-4043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2754](https://www.sqlalchemy.org/trac/ticket/2754)
- en: '**[orm] [bug]**'
  id: totrans-4044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed the interaction between composite attributes and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. Previously, composite attributes wouldn’t
    work correctly in comparison operations when aliasing was applied.
  id: totrans-4045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合属性与[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数之间的交互。以前，在应用别名时，复合属性在比较操作中不会正确工作。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: 'References: [#2755](https://www.sqlalchemy.org/trac/ticket/2755)'
  id: totrans-4047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2755](https://www.sqlalchemy.org/trac/ticket/2755)
- en: '**[orm] [bug] [ext]**'
  id: totrans-4048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ext]**'
- en: Fixed bug where [`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") didn’t report a change event when `clear()`
    was called.
  id: totrans-4049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`MutableDict`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")在调用`clear()`时未报告更改事件的错误。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.2
- en: 'References: [#2730](https://www.sqlalchemy.org/trac/ticket/2730)'
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2730](https://www.sqlalchemy.org/trac/ticket/2730)
- en: '**[orm] [bug]**'
  id: totrans-4052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: '[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history") when used with a scalar column-mapped
    attribute will now honor the “passive” flag passed to it; as this defaults to
    `PASSIVE_OFF`, the function will by default query the database if the value is
    not present. This is a behavioral change vs. 0.8.'
  id: totrans-4053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与标量列映射属性一起使用时，[`get_history()`](../orm/session_api.html#sqlalchemy.orm.attributes.get_history
    "sqlalchemy.orm.attributes.get_history")现在将遵守传递给它的“被动”标志；由于这默认为`PASSIVE_OFF`，如果值不存在，默认情况下该函数将查询数据库。这与
    0.8 版本相比是一种行为变化。
- en: See also
  id: totrans-4054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[attributes.get_history() will query from the DB by default if value not present](migration_09.html#change-2787)'
  id: totrans-4055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[attributes.get_history()将默认从数据库查询，如果值不存在](migration_09.html#change-2787)'
- en: 'References: [#2787](https://www.sqlalchemy.org/trac/ticket/2787)'
  id: totrans-4056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2787](https://www.sqlalchemy.org/trac/ticket/2787)
- en: '**[orm] [bug] [associationproxy]**'
  id: totrans-4057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [associationproxy]**'
- en: Added additional criterion to the ==, != comparators, used with scalar values,
    for comparisons to None to also take into account the association record itself
    being non-present, in addition to the existing test for the scalar endpoint on
    the association record being NULL. Previously, comparing `Cls.scalar == None`
    would return records for which `Cls.associated` were present and `Cls.associated.scalar`
    is None, but not rows for which `Cls.associated` is non-present. More significantly,
    the inverse operation `Cls.scalar != None` *would* return `Cls` rows for which
    `Cls.associated` was non-present.
  id: totrans-4058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于与标量值一起使用的 ==、!= 比较器添加了额外的标准，以便比较 None 时也考虑到关联记录本身不存在，除了现有的对关联记录的标量端点为 NULL
    的测试。之前，比较 `Cls.scalar == None` 将返回 `Cls.associated` 存在且 `Cls.associated.scalar`
    为 None 的记录，但不会返回 `Cls.associated` 不存在的行。更重要的是，反向操作 `Cls.scalar != None` *将* 返回
    `Cls` 行，其中 `Cls.associated` 不存在。
- en: The case for `Cls.scalar != 'somevalue'` is also modified to act more like a
    direct SQL comparison; only rows for which `Cls.associated` is present and `Associated.scalar`
    is non-NULL and not equal to `'somevalue'` are returned. Previously, this would
    be a simple `NOT EXISTS`.
  id: totrans-4059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Cls.scalar != ''somevalue''` 的情况也被修改，更像直接的 SQL 比较；只有当 `Cls.associated` 存在且
    `Associated.scalar` 非 NULL 且不等于 `''somevalue''` 时才返回行。之前，这将是一个简单的 `NOT EXISTS`。'
- en: Also added a special use case where you can call `Cls.scalar.has()` with no
    arguments, when `Cls.scalar` is a column-based value - this returns whether or
    not `Cls.associated` has any rows present, regardless of whether or not `Cls.associated.scalar`
    is NULL or not.
  id: totrans-4060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还添加了一个特殊用例，当 `Cls.scalar` 是基于列的值时，可以调用 `Cls.scalar.has()` 而不带参数，这将返回 `Cls.associated`
    是否有任何行存在，而不管 `Cls.associated.scalar` 是否为 NULL。
- en: See also
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Association Proxy SQL Expression Improvements and Fixes](migration_09.html#migration-2751)'
  id: totrans-4062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关联代理 SQL 表达式改进和修复](migration_09.html#migration-2751)'
- en: 'References: [#2751](https://www.sqlalchemy.org/trac/ticket/2751)'
  id: totrans-4063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2751](https://www.sqlalchemy.org/trac/ticket/2751)
- en: '**[orm] [bug]**'
  id: totrans-4064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed an obscure bug where the wrong results would be fetched when joining/joinedloading
    across a many-to-many relationship to a single-table-inheriting subclass with
    a specific discriminator value, due to “secondary” rows that would come back.
    The “secondary” and right-side tables are now inner joined inside of parenthesis
    for all ORM joins on many-to-many relationships so that the left->right join can
    accurately filtered. This change was made possible by finally addressing the issue
    with right-nested joins outlined in [#2587](https://www.sqlalchemy.org/trac/ticket/2587).
  id: totrans-4065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个晦涩的 bug，在跨多对多关系连接/联接加载到具有特定鉴别器值的单表继承子类时，错误的结果将被获取，这是由于返回的“secondary”行。现在，在所有
    ORM 关联的多对多关系中，“secondary” 和右侧表现在括号内进行内部连接，以便左->右连接可以准确过滤。这一变化得以实现，最终解决了关于右侧嵌套连接的问题，详见
    [#2587](https://www.sqlalchemy.org/trac/ticket/2587)。
- en: See also
  id: totrans-4066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Many JOIN and LEFT OUTER JOIN expressions will no longer be wrapped in (SELECT
    * FROM ..) AS ANON_1](migration_09.html#feature-joins-09)'
  id: totrans-4067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[许多 JOIN 和 LEFT OUTER JOIN 表达式将不再被包装在 (SELECT * FROM ..) AS ANON_1 中](migration_09.html#feature-joins-09)'
- en: 'References: [#2369](https://www.sqlalchemy.org/trac/ticket/2369)'
  id: totrans-4068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2369](https://www.sqlalchemy.org/trac/ticket/2369)
- en: '**[orm] [bug]**'
  id: totrans-4069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The “auto-aliasing” behavior of the [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method has been turned off. The specific behavior
    is now available via a new method `Query.select_entity_from()`. The auto-aliasing
    behavior here was never well documented and is generally not what’s desired, as
    [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") has become more oriented towards controlling
    how a JOIN is rendered. `Query.select_entity_from()` will also be made available
    in 0.8 so that applications which rely on the auto-aliasing can shift their applications
    to use this method.
  id: totrans-4070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 方法的“自动别名”行为已关闭。现在特定行为可以通过新方法 `Query.select_entity_from()`
    获得。这里的自动别名行为从未有很好的文档记录，通常也不是所需的，因为 [`Query.select_from()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") 更多地用于控制 JOIN 的呈现方式。`Query.select_entity_from()`
    也将在 0.8 版本中提供，以便依赖自动别名的应用程序可以转向使用此方法。'
- en: See also
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[_query.Query.select_from() no longer applies the clause to corresponding entities](migration_09.html#migration-2736)'
  id: totrans-4072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[_query.Query.select_from() 不再将子句应用于相应的实体](migration_09.html#migration-2736)'
- en: 'References: [#2736](https://www.sqlalchemy.org/trac/ticket/2736)'
  id: totrans-4073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2736](https://www.sqlalchemy.org/trac/ticket/2736)
- en: orm declarative
  id: totrans-4074
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [feature]**'
  id: totrans-4075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: Added a convenience class decorator [`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative"), is a wrapper for [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") which allows an existing base class to be applied
    using a nifty class-decorated approach.
  id: totrans-4076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个方便的类装饰器[`as_declarative()`](../orm/mapping_api.html#sqlalchemy.orm.as_declarative
    "sqlalchemy.orm.as_declarative")，它是对[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 的包装，允许使用一种巧妙的类装饰方法应用现有的基类。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: '**[orm] [declarative] [feature]**'
  id: totrans-4078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [feature]**'
- en: ORM descriptors such as hybrid properties can now be referenced by name in a
    string argument used with `order_by`, `primaryjoin`, or similar in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), in addition to column-bound attributes.
  id: totrans-4079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在字符串参数中使用`order_by`、`primaryjoin`或类似参数中使用ORM描述符，如混合属性，来引用ORM描述符，如混合属性，在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 中，除了列绑定属性之外。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.2
- en: 'References: [#2761](https://www.sqlalchemy.org/trac/ticket/2761)'
  id: totrans-4081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2761](https://www.sqlalchemy.org/trac/ticket/2761)
- en: examples
  id: totrans-4082
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [feature]**'
  id: totrans-4083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [feature]**'
- en: Improved the examples in `examples/generic_associations`, including that `discriminator_on_association.py`
    makes use of single table inheritance do the work with the “discriminator”. Also
    added a true “generic foreign key” example, which works similarly to other popular
    frameworks in that it uses an open-ended integer to point to any other table,
    foregoing traditional referential integrity. While we don’t recommend this pattern,
    information wants to be free.
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了`examples/generic_associations`中的示例，包括`discriminator_on_association.py`利用单表继承来处理“鉴别器”的工作。还添加了一个真正的“通用外键”示例，其工作方式类似于其他流行框架，它使用开放式整数指向任何其他表，放弃了传统的引用完整性。虽然我们不建议使用这种模式，但信息渴望自由。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-4086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Added “autoincrement=False” to the history table created in the versioning example,
    as this table shouldn’t have autoinc on it in any case, courtesy Patrick Schmid.
  id: totrans-4087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本控制示例中创建的历史表中添加了“autoincrement=False”，因为该表在任何情况下都不应具有自动增量，由Patrick Schmid提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: '**[examples] [bug]**'
  id: totrans-4089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed an issue with the “versioning” recipe whereby a many-to-one reference
    could produce a meaningless version for the target, even though it was not changed,
    when backrefs were present. Patch courtesy Matt Chisholm.
  id: totrans-4090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本控制”配方中的一个问题，即当存在反向引用时，多对一引用可能会为目标产生一个无意义的版本，即使它没有被更改。修补来自Matt Chisholm。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.2
- en: engine
  id: totrans-4092
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-4093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: '`repr()` for the [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    will now conceal the password using asterisks. Courtesy Gunnlaugur Þór Briem.'
  id: totrans-4094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    的[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL") 的`repr()`现在将使用星号隐藏密码。由Gunnlaugur
    Þór Briem提供。'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: 'References: [#2821](https://www.sqlalchemy.org/trac/ticket/2821)'
  id: totrans-4096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2821](https://www.sqlalchemy.org/trac/ticket/2821)
- en: '**[engine] [feature]**'
  id: totrans-4097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: 'New events added to [`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents"):'
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents`](../core/events.html#sqlalchemy.events.ConnectionEvents
    "sqlalchemy.events.ConnectionEvents") 中添加了新的事件：'
- en: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
  id: totrans-4099
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.engine_connect()`](../core/events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")'
- en: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
  id: totrans-4100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options")'
- en: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
  id: totrans-4101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options")'
- en: 'References: [#2770](https://www.sqlalchemy.org/trac/ticket/2770)'
  id: totrans-4102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2770](https://www.sqlalchemy.org/trac/ticket/2770)
- en: '**[engine] [bug]**'
  id: totrans-4103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The regexp used by the `make_url()` function now parses ipv6 addresses, e.g.
    surrounded by brackets.
  id: totrans-4104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`make_url()`函数使用的正则表达式现在解析ipv6地址，例如用方括号括起来。'
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2851](https://www.sqlalchemy.org/trac/ticket/2851)'
  id: totrans-4106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2851](https://www.sqlalchemy.org/trac/ticket/2851)
- en: '**[engine] [bug] [oracle]**'
  id: totrans-4107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [oracle]**'
- en: Dialect.initialize() is not called a second time if an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is recreated, due to a disconnect error. This fixes
    a particular issue in the Oracle 8 dialect, but in general the dialect.initialize()
    phase should only be once per dialect.
  id: totrans-4108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果重新创建[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时出现断开错误，将不会再第二次调用Dialect.initialize()。这修复了Oracle
    8方言中的一个特定问题，但通常情况下，dialect.initialize()阶段应该只执行一次。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2776](https://www.sqlalchemy.org/trac/ticket/2776)'
  id: totrans-4110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2776](https://www.sqlalchemy.org/trac/ticket/2776)
- en: '**[engine] [bug] [pool]**'
  id: totrans-4111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [pool]**'
- en: Fixed bug where [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") would lose the correct checked out count if an existing
    pooled connection failed to reconnect after an invalidate or recycle event.
  id: totrans-4112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")在现有池化连接在无效或重新生成事件后未能重新连接时会丢失正确的已检出计数的错误。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: 'References: [#2772](https://www.sqlalchemy.org/trac/ticket/2772)'
  id: totrans-4114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2772](https://www.sqlalchemy.org/trac/ticket/2772)
- en: '**[engine] [bug]**'
  id: totrans-4115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where the `reset_on_return` argument to various [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementations would not be propagated when the pool
    was regenerated. Courtesy Eevee.
  id: totrans-4116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现中`reset_on_return`参数在重新生成池时不会传播的错误。感谢Eevee。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: '**[engine] [bug]**'
  id: totrans-4118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The method signature of `Dialect.reflecttable()`, which in all known cases is
    provided by [`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect"), has been tightened to expect `include_columns`
    and `exclude_columns` arguments without any kw option, reducing ambiguity - previously
    `exclude_columns` was missing.
  id: totrans-4119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Dialect.reflecttable()`方法的方法签名已经更改，所有已知情况下由[`DefaultDialect`](../core/internals.html#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect")提供，现在期望`include_columns`和`exclude_columns`参数没有任何kw选项，减少了歧义
    - 以前缺少了`exclude_columns`。'
- en: 'References: [#2748](https://www.sqlalchemy.org/trac/ticket/2748)'
  id: totrans-4120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2748](https://www.sqlalchemy.org/trac/ticket/2748)
- en: sql
  id: totrans-4121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-4122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added support for “unique constraint” reflection, via the [`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints") method. Thanks
    for Roman Podolyaka for the patch.
  id: totrans-4123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“唯一约束”反射的支持，通过[`Inspector.get_unique_constraints()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints")方法。感谢Roman Podolyaka的补丁。
- en: 'This change is also **backported** to: 0.8.4'
  id: totrans-4124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.4
- en: 'References: [#1443](https://www.sqlalchemy.org/trac/ticket/1443)'
  id: totrans-4125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1443](https://www.sqlalchemy.org/trac/ticket/1443)
- en: '**[sql] [feature]**'
  id: totrans-4126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: 'The [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update"),
    [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs will now interpret ORM entities as target tables to be operated upon,
    e.g.:'
  id: totrans-4127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")、[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")和[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造现在将ORM实体解释为要操作的目标表，例如：'
- en: '[PRE11]'
  id: totrans-4128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.3
- en: '**[sql] [feature] [mysql] [postgresql]**'
  id: totrans-4130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature] [mysql] [postgresql]**'
- en: The PostgreSQL and MySQL dialects now support reflection/inspection of foreign
    key options, including ON UPDATE, ON DELETE. PostgreSQL also reflects MATCH, DEFERRABLE,
    and INITIALLY. Courtesy ijl.
  id: totrans-4131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 和 MySQL 方言现在支持反射/检查外键选项，包括 ON UPDATE、ON DELETE。PostgreSQL 还反映了 MATCH、DEFERRABLE
    和 INITIALLY。感谢 ijl。
- en: 'References: [#2183](https://www.sqlalchemy.org/trac/ticket/2183)'
  id: totrans-4132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2183](https://www.sqlalchemy.org/trac/ticket/2183)
- en: '**[sql] [feature]**'
  id: totrans-4133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct with a “null” type (e.g. no type
    specified) is now copied when used in a typed expression, and the new copy is
    assigned the actual type of the compared column. Previously, this logic would
    occur on the given [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") in place. Additionally, a similar process
    now occurs for [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") constructs passed to [`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") for an [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct, within the compilation phase of
    the construct.
  id: totrans-4134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在类型表达式中使用具有“null”类型（例如未指定类型）的 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造时，现在会复制该构造，并将新副本分配给比较列的实际类型。以前，这种逻辑会在给定的
    [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam "sqlalchemy.sql.expression.bindparam")
    中发生。此外，在构造的编译阶段，现在对传递给 [`ValuesBase.values()`](../core/dml.html#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") 用于 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 或 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造的 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造也会发生类似的过程。
- en: These are both subtle behavioral changes which may impact some usages.
  id: totrans-4135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些都是一些微妙的行为变化，可能会影响某些用法。
- en: See also
  id: totrans-4136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[A bindparam() construct with no type gets upgraded via copy when a type is
    available](migration_09.html#migration-2850)'
  id: totrans-4137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当类型可用时，没有类型的 bindparam() 构造通过复制升级](migration_09.html#migration-2850)'
- en: 'References: [#2850](https://www.sqlalchemy.org/trac/ticket/2850)'
  id: totrans-4138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2850](https://www.sqlalchemy.org/trac/ticket/2850)
- en: '**[sql] [feature]**'
  id: totrans-4139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: An overhaul of expression handling for special symbols particularly with conjunctions,
    e.g. `None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false"), including consistency in rendering NULL in
    conjunctions, “short-circuiting” of [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") expressions which contain boolean constants,
    and rendering of boolean constants and expressions as compared to “1” or “0” for
    backends that don’t feature `true`/`false` constants.
  id: totrans-4140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对特殊符号的表达式处理进行了彻底改革，特别是连接词，例如 `None` [`null()`](../core/sqlelement.html#sqlalchemy.sql.expression.null
    "sqlalchemy.sql.expression.null") [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")，包括在连接中呈现 NULL 的一致性，包含布尔常量的 [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 和 [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") 表达式的“短路”，以及对布尔常量和表达式的呈现与不支持 `true`/`false` 常量的后端相比较为“1”或“0”。
- en: See also
  id: totrans-4141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Improved rendering of Boolean constants, NULL constants, conjunctions](migration_09.html#migration-2804)'
  id: totrans-4142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[改进的布尔常量、NULL常量、连接的呈现](migration_09.html#migration-2804)'
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2804](https://www.sqlalchemy.org/trac/ticket/2804),
    [#2823](https://www.sqlalchemy.org/trac/ticket/2823)'
  id: totrans-4143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734)，[#2804](https://www.sqlalchemy.org/trac/ticket/2804)，[#2823](https://www.sqlalchemy.org/trac/ticket/2823)
- en: '**[sql] [feature]**'
  id: totrans-4144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The typing system now handles the task of rendering “literal bind” values, e.g.
    values that are normally bound parameters but due to context must be rendered
    as strings, typically within DDL constructs such as CHECK constraints and indexes
    (note that “literal bind” values become used by DDL as of [#2742](https://www.sqlalchemy.org/trac/ticket/2742)).
    A new method [`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor") serves as the base, and [`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param") is added to allow wrapping
    of a native literal rendering method.
  id: totrans-4145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，打字系统处理呈现“文字绑定”值的任务，例如通常绑定参数但由于上下文必须呈现为字符串的值，通常在DDL构造中，例如CHECK约束和索引（请注意，“文字绑定”值从DDL中使用，如[#2742](https://www.sqlalchemy.org/trac/ticket/2742)）。一个新方法[`TypeEngine.literal_processor()`](../core/type_api.html#sqlalchemy.types.TypeEngine.literal_processor
    "sqlalchemy.types.TypeEngine.literal_processor")作为基础，添加了[`TypeDecorator.process_literal_param()`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.process_literal_param
    "sqlalchemy.types.TypeDecorator.process_literal_param")以允许包装本机文字呈现方法。
- en: See also
  id: totrans-4146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The typing system now handles the task of rendering “literal bind” values](migration_09.html#change-2838)'
  id: totrans-4147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[打字系统现在处理呈现“文字绑定”值的任务](migration_09.html#change-2838)'
- en: 'References: [#2838](https://www.sqlalchemy.org/trac/ticket/2838)'
  id: totrans-4148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2838](https://www.sqlalchemy.org/trac/ticket/2838)
- en: '**[sql] [feature]**'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The [`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata") method now produces copies of all [`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") dictionaries from all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects within the structure including columns,
    constraints, foreign keys, etc. As these dictionaries are copies, they are independent
    of the original dictionary. Previously, only the `.info` dictionary of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was transferred within this operation, and it was
    only linked in place, not copied.
  id: totrans-4150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Table.tometadata()`](../core/metadata.html#sqlalchemy.schema.Table.tometadata
    "sqlalchemy.schema.Table.tometadata")方法现在会生成所有[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")对象中的所有[`SchemaItem.info`](../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")字典的副本，包括列、约束、外键等。由于这些字典是副本，它们独立于原始字典。以前，仅传输了此操作中[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.info`字典，并且仅在原地链接，而不是复制。'
- en: 'References: [#2716](https://www.sqlalchemy.org/trac/ticket/2716)'
  id: totrans-4151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2716](https://www.sqlalchemy.org/trac/ticket/2716)
- en: '**[sql] [feature]**'
  id: totrans-4152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: The `default` argument of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") now accepts a class or object method as an argument,
    in addition to a standalone function; will properly detect if the “context” argument
    is accepted or not.
  id: totrans-4153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的`default`参数现在接受类或对象方法作为参数，除了独立函数；将正确检测是否接受“上下文”参数。'
- en: '**[sql] [feature]**'
  id: totrans-4154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new method to the [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select"). Given a list of columns and a
    selectable, renders `INSERT INTO (table) (columns) SELECT ..`. While this feature
    is highlighted as part of 0.9 it is also backported to 0.8.3.
  id: totrans-4155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法到[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")。给定列的列表和可选择的，呈现`INSERT INTO (table)
    (columns) SELECT ..`。虽然此功能作为0.9的一部分突出显示，但也已回溯到0.8.3。
- en: See also
  id: totrans-4156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[INSERT from SELECT](migration_09.html#feature-722)'
  id: totrans-4157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从SELECT插入](migration_09.html#feature-722)'
- en: 'References: [#722](https://www.sqlalchemy.org/trac/ticket/722)'
  id: totrans-4158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#722](https://www.sqlalchemy.org/trac/ticket/722)
- en: '**[sql] [feature]**'
  id: totrans-4159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Provided a new attribute for [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") called [`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types"), to make it easier to control
    how comparisons using `==` or `!=` to `None` and boolean types goes about producing
    an `IS` expression, or a plain equality expression with a bound parameter.
  id: totrans-4160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")提供了一个名为[`TypeDecorator.coerce_to_is_types`](../core/custom_types.html#sqlalchemy.types.TypeDecorator.coerce_to_is_types
    "sqlalchemy.types.TypeDecorator.coerce_to_is_types")的新属性，以便更容易控制使用`==`或`!=`与`None`和布尔类型进行比较时如何生成`IS`表达式，或者带有绑定参数的普通相等表达式。
- en: 'References: [#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)'
  id: totrans-4161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2734](https://www.sqlalchemy.org/trac/ticket/2734), [#2744](https://www.sqlalchemy.org/trac/ticket/2744)
- en: '**[sql] [feature]**'
  id: totrans-4162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: A [`label()`](../core/sqlelement.html#sqlalchemy.sql.expression.label "sqlalchemy.sql.expression.label")
    construct will now render as its name alone in an `ORDER BY` clause, if that label
    is also referred to in the columns clause of the select, instead of rewriting
    the full expression. This gives the database a better chance to optimize the evaluation
    of the same expression in two different contexts.
  id: totrans-4163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在`SELECT`的列子句中也引用了[`label()`](../core/sqlelement.html#sqlalchemy.sql.expression.label
    "sqlalchemy.sql.expression.label")构造，那么`label()`构造现在将仅在`ORDER BY`子句中呈现其名称，而不是重写完整表达式。这使得数据库有更好的机会优化在两个不同上下文中评估相同表达式。
- en: See also
  id: totrans-4164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Label constructs can now render as their name alone in an ORDER BY](migration_09.html#migration-1068)'
  id: totrans-4165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标签构造现在可以仅在ORDER BY中呈现其名称](migration_09.html#migration-1068)'
- en: 'References: [#1068](https://www.sqlalchemy.org/trac/ticket/1068)'
  id: totrans-4166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1068](https://www.sqlalchemy.org/trac/ticket/1068)
- en: '**[sql] [bug]**'
  id: totrans-4167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression dating back to 0.7.9 whereby the name of a CTE might not be
    properly quoted if it was referred to in multiple FROM clauses.
  id: totrans-4168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了自0.7.9以来的回归，即如果在多个FROM子句中引用了CTE的名称，则可能无法正确引用。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2801](https://www.sqlalchemy.org/trac/ticket/2801)'
  id: totrans-4170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2801](https://www.sqlalchemy.org/trac/ticket/2801)
- en: '**[sql] [bug] [cte]**'
  id: totrans-4171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [cte]**'
- en: Fixed bug in common table expression system where if the CTE were used only
    as an `alias()` construct, it would not render using the WITH keyword.
  id: totrans-4172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通用表达式系统中的一个错误，如果CTE仅被用作`alias()`构造，则不会使用WITH关键字呈现。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2783](https://www.sqlalchemy.org/trac/ticket/2783)'
  id: totrans-4174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2783](https://www.sqlalchemy.org/trac/ticket/2783)
- en: '**[sql] [bug]**'
  id: totrans-4175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in [`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL where the “quote” flag from a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object would not be propagated.
  id: totrans-4176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CheckConstraint`](../core/constraints.html#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") DDL中的错误，其中来自[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的“quote”标志不会传播。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3, 0.7.11
- en: 'References: [#2784](https://www.sqlalchemy.org/trac/ticket/2784)'
  id: totrans-4178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2784](https://www.sqlalchemy.org/trac/ticket/2784)
- en: '**[sql] [bug]**'
  id: totrans-4179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where [`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce") would not interpret ORM elements with
    a `__clause_element__()` method properly.
  id: totrans-4180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`type_coerce()`](../core/sqlelement.html#sqlalchemy.sql.expression.type_coerce
    "sqlalchemy.sql.expression.type_coerce")无法正确解释具有`__clause_element__()`方法的ORM元素的错误。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：0.8.3
- en: 'References: [#2849](https://www.sqlalchemy.org/trac/ticket/2849)'
  id: totrans-4182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2849](https://www.sqlalchemy.org/trac/ticket/2849)
- en: '**[sql] [bug]**'
  id: totrans-4183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    and [`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    types now bypass any custom (e.g. TypeDecorator) type in use when producing the
    CHECK constraint for the “non native” type. This so that the custom type isn’t
    involved in the expression within the CHECK, since this expression is against
    the “impl” value and not the “decorated” value.
  id: totrans-4184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为“非本地”类型生成CHECK约束时，[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")和[`Boolean`](../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型现在会绕过任何自定义（例如TypeDecorator）类型。这样，自定义类型不会参与CHECK中的表达式，因为此表达式针对“impl”值而不是“decorated”值。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2842](https://www.sqlalchemy.org/trac/ticket/2842)'
  id: totrans-4186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2842](https://www.sqlalchemy.org/trac/ticket/2842)
- en: '**[sql] [bug]**'
  id: totrans-4187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The `.unique` flag on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") could be produced as `None` if it was generated from
    a [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that didn’t specify `unique` (where it defaults to `None`). The flag will now
    always be `True` or `False`.
  id: totrans-4188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果从未指定`unique`（默认为`None`）的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")生成了[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")上的`.unique`标志，那么该标志现在将始终为`True`或`False`。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2825](https://www.sqlalchemy.org/trac/ticket/2825)'
  id: totrans-4190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2825](https://www.sqlalchemy.org/trac/ticket/2825)
- en: '**[sql] [bug]**'
  id: totrans-4191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug in default compiler plus those of postgresql, mysql, and mssql to
    ensure that any literal SQL expression values are rendered directly as literals,
    instead of as bound parameters, within a CREATE INDEX statement. This also changes
    the rendering scheme for other DDL such as constraints.
  id: totrans-4192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了默认编译器以及postgresql、mysql和mssql的bug，以确保在CREATE INDEX语句中任何文本SQL表达式值都直接呈现为文本，而不是作为绑定参数。这也改变了其他DDL（如约束）的呈现方案。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-4194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[sql] [bug]**'
  id: totrans-4195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    that is made to refer to itself in its FROM clause, typically via in-place mutation,
    will raise an informative error message rather than causing a recursion overflow.
  id: totrans-4196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个在其FROM子句中引用自身的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，通常通过就地突变，将引发一个信息性错误消息，而不是导致递归溢出。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2815](https://www.sqlalchemy.org/trac/ticket/2815)'
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2815](https://www.sqlalchemy.org/trac/ticket/2815)
- en: '**[sql] [bug]**'
  id: totrans-4199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug where using the `column_reflect` event to change the `.key` of the
    incoming [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    would prevent primary key constraints, indexes, and foreign key constraints from
    being correctly reflected.
  id: totrans-4200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即使用`column_reflect`事件来更改传入的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的`.key`会阻止主键约束、索引和外键约束被正确反映的问题。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: 'References: [#2811](https://www.sqlalchemy.org/trac/ticket/2811)'
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2811](https://www.sqlalchemy.org/trac/ticket/2811)
- en: '**[sql] [bug]**'
  id: totrans-4203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") operator added in 0.8 now
    properly produces the negation of the expression “IN” returns when used against
    an empty collection.
  id: totrans-4204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.8版本中添加的[`ColumnOperators.notin_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_")运算符现在在针对空集合时正确地产生“IN”表达式的否定。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：0.8.3
- en: '**[sql] [bug] [postgresql]**'
  id: totrans-4206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [postgresql]**'
- en: Fixed bug where the expression system relied upon the `str()` form of a some
    expressions when referring to the `.c` collection on a `select()` construct, but
    the `str()` form isn’t available since the element relies on dialect-specific
    compilation constructs, notably the `__getitem__()` operator as used with a PostgreSQL
    `ARRAY` element. The fix also adds a new exception class [`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError") which is raised in those cases where
    a compiler is asked to compile something it doesn’t know how to.
  id: totrans-4207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了表达式系统在引用`select()`构造中的`.c`集合时依赖于一些表达式的`str()`形式的bug，但是由于元素依赖于方言特定的编译构造，特别是与PostgreSQL的`ARRAY`元素一起使用的`__getitem__()`运算符，因此`str()`形式不可用。修复还添加了一个新的异常类[`UnsupportedCompilationError`](../core/exceptions.html#sqlalchemy.exc.UnsupportedCompilationError
    "sqlalchemy.exc.UnsupportedCompilationError")，在编译器被要求编译它不知道如何处理的内容时引发该异常。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到：0.8.3版本
- en: 'References: [#2780](https://www.sqlalchemy.org/trac/ticket/2780)'
  id: totrans-4209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2780](https://www.sqlalchemy.org/trac/ticket/2780)
- en: '**[sql] [bug]**'
  id: totrans-4210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Multiple fixes to the correlation behavior of [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, first introduced in 0.8.0:'
  id: totrans-4211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造中首次引入的0.8.0版本的关联行为进行了多次修��：
- en: To satisfy the use case where FROM entries should be correlated outwards to
    a SELECT that encloses another, which then encloses this one, correlation now
    works across multiple levels when explicit correlation is established via [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate"), provided that the target select
    is somewhere along the chain contained by a WHERE/ORDER BY/columns clause, not
    just nested FROM clauses. This makes [`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") act more compatibly to that of 0.7
    again while still maintaining the new “smart” correlation.
  id: totrans-4212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了满足FROM条目应该向外关联到包含另一个SELECT的SELECT的用例，然后再包含这个SELECT的情况，当通过[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")建立显式关联时，关联现在可以跨多个级别进行，前提是目标SELECT在由WHERE/ORDER
    BY/columns子句包含的链中的某个位置，而不仅仅是嵌套的FROM子句。这使得[`Select.correlate()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")再次更加兼容0.7版本，同时仍然保持新的“智能”关联。
- en: When explicit correlation is not used, the usual “implicit” correlation limits
    its behavior to just the immediate enclosing SELECT, to maximize compatibility
    with 0.7 applications, and also prevents correlation across nested FROMs in this
    case, maintaining compatibility with 0.8.0/0.8.1.
  id: totrans-4213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当没有使用显式关联时，“隐式”关联将其行为限制在仅仅是直接封闭的SELECT中，以最大程度地兼容0.7版本的应用程序，并且在这种情况下还防止了跨嵌套FROM子句的关联，保持了与0.8.0/0.8.1版本的兼容性。
- en: The [`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") method was not preventing
    the given FROM clauses from correlation in all cases, and also would cause FROM
    clauses to be incorrectly omitted entirely (more like what 0.7 would do), this
    has been fixed.
  id: totrans-4214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.correlate_except()`](../core/selectable.html#sqlalchemy.sql.expression.Select.correlate_except
    "sqlalchemy.sql.expression.Select.correlate_except") 方法在某些情况下未能阻止给定的FROM子句进行关联，并且还会导致FROM子句被错误地完全省略（更像是0.7版本的行为），这个问题已经修复。'
- en: Calling select.correlate_except(None) will enter all FROM clauses into correlation
    as would be expected.
  id: totrans-4215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用select.correlate_except(None)将使所有FROM子句进入关联，就像预期的那样。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到：0.8.2版本
- en: 'References: [#2668](https://www.sqlalchemy.org/trac/ticket/2668), [#2746](https://www.sqlalchemy.org/trac/ticket/2746)'
  id: totrans-4217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#2668](https://www.sqlalchemy.org/trac/ticket/2668)，[#2746](https://www.sqlalchemy.org/trac/ticket/2746)
- en: '**[sql] [bug]**'
  id: totrans-4218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug whereby joining a select() of a table “A” with multiple foreign key
    paths to a table “B”, to that table “B”, would fail to produce the “ambiguous
    join condition” error that would be reported if you join table “A” directly to
    “B”; it would instead produce a join condition with multiple criteria.
  id: totrans-4219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即将一个具有多个外键路径到表“B”的表“A”的select()与表“B”连接时，与直接将表“A”连接到“B”时报告的“模糊连接条件”错误不同，它会产生具有多个条件的连接条件。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**回溯**到：0.8.2版本
- en: 'References: [#2738](https://www.sqlalchemy.org/trac/ticket/2738)'
  id: totrans-4221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2738](https://www.sqlalchemy.org/trac/ticket/2738)
- en: '**[sql] [bug] [reflection]**'
  id: totrans-4222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [reflection]**'
- en: Fixed bug whereby using [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") across a remote schema as well as a local
    schema could produce wrong results in the case where both schemas had a table
    of the same name.
  id: totrans-4223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在跨远程模式和本地模式使用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")可能会产生错误结果的bug，在这种情况下，两个模式都有相同名称的表。 '
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2728](https://www.sqlalchemy.org/trac/ticket/2728)'
  id: totrans-4225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2728](https://www.sqlalchemy.org/trac/ticket/2728)
- en: '**[sql] [bug]**'
  id: totrans-4226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Removed the “not implemented” `__iter__()` call from the base [`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") class, while this was introduced
    in 0.8.0 to prevent an endless, memory-growing loop when one also implements a
    `__getitem__()` method on a custom operator and then calls erroneously `list()`
    on that object, it had the effect of causing column elements to report that they
    were in fact iterable types which then throw an error when you try to iterate.
    There’s no real way to have both sides here so we stick with Python best practices.
    Careful with implementing `__getitem__()` on your custom operators!
  id: totrans-4227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从基本[`ColumnOperators`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")类中删除了“not implemented” `__iter__()`调用，尽管这是在0.8.0中引入的，以防止在自定义运算符上实现`__getitem__()`方法并在该对象上错误调用`list()`时出现无限增长的内存循环，但它导致列元素报告它们实际上是可迭代类型，然后在尝试迭代时抛出错误。在这里没有真正的方法来同时拥有两边，所以我们坚持使用Python最佳实践。在自定义运算符上实现`__getitem__()`时要小心！
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: 'References: [#2726](https://www.sqlalchemy.org/trac/ticket/2726)'
  id: totrans-4229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2726](https://www.sqlalchemy.org/trac/ticket/2726)
- en: '**[sql] [bug]**'
  id: totrans-4230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The “name” attribute is set on [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") before the “attach” events are called, so that attachment
    events can be used to dynamically generate a name for the index based on the parent
    table and/or columns.
  id: totrans-4231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在调用“attach”事件之前，[`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")上设置了“name”属性，以便可以使用附加事件根据父表和/或列动态生成索引名称。
- en: 'References: [#2835](https://www.sqlalchemy.org/trac/ticket/2835)'
  id: totrans-4232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2835](https://www.sqlalchemy.org/trac/ticket/2835)
- en: '**[sql] [bug]**'
  id: totrans-4233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The erroneous kw arg “schema” has been removed from the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object. this was an accidental commit that did
    nothing; a warning is raised in 0.8.3 when this kw arg is used.
  id: totrans-4234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已从[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象中删除了错误的kw参数“schema”。这是一个意外提交，什么也没做；当使用此kw参数时，0.8.3会发出警告。
- en: 'References: [#2831](https://www.sqlalchemy.org/trac/ticket/2831)'
  id: totrans-4235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2831](https://www.sqlalchemy.org/trac/ticket/2831)
- en: '**[sql] [bug]**'
  id: totrans-4236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: A rework to the way that “quoted” identifiers are handled, in that instead of
    relying upon various `quote=True` flags being passed around, these flags are converted
    into rich string objects with quoting information included at the point at which
    they are passed to common schema constructs like [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), etc. This solves the issue of various methods that
    don’t correctly honor the “quote” flag such as `Engine.has_table()` and related
    methods. The [`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") object is a string subclass that can
    also be used explicitly if needed; the object will hold onto the quoting preferences
    passed and will also bypass the “name normalization” performed by dialects that
    standardize on uppercase symbols, such as Oracle, Firebird and DB2. The upshot
    is that the “uppercase” backends can now work with force-quoted names, such as
    lowercase-quoted names and new reserved words.
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“引号”标识符处理方式进行了重新设计，不再依赖于传递各种`quote=True`标志，而是将这些标志转换为包含引号信息的丰富字符串对象，并在传递给像[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")、[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")等常见模式构造时包含引号信息。这解决了各种方法未正确遵守“quote”标志的问题，例如`Engine.has_table()`和相关方法。[`quoted_name`](../core/sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name")对象是一个字符串子类，如果需要，也可以显式使用；该对象将保留传递的引号偏好，并且还将绕过标准化为大写符号的方言执行的“名称规范化”。这样，“大写”后端现在可以使用强制引号名称，例如小写引号名称和新保留字。
- en: See also
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Schema identifiers now carry along their own quoting information](migration_09.html#change-2812)'
  id: totrans-4239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[模式标识符现在携带自己的引号信息](migration_09.html#change-2812)'
- en: 'References: [#2812](https://www.sqlalchemy.org/trac/ticket/2812)'
  id: totrans-4240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2812](https://www.sqlalchemy.org/trac/ticket/2812)
- en: '**[sql] [bug]**'
  id: totrans-4241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The resolution of [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects to their target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") has been reworked to be as immediate as possible,
    based on the moment that the target [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is associated with the same [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") as this [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), rather than waiting for the first time a join
    is constructed, or similar. This along with other improvements allows earlier
    detection of some foreign key configuration issues. Also included here is a rework
    of the type-propagation system, so that it should be reliable now to set the type
    as `None` on any [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    that refers to another via [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") - the type will be copied from the target column
    as soon as that other column is associated, and now works for composite foreign
    keys as well.
  id: totrans-4242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象解析为其目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的过程已经重新设计，尽可能立即进行，基于目标[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")与与此[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")关联的相同[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的时刻，而不是等待构建联接或类似的第一次。这与其他改进一起，允许更早地检测到一些外键配置问题。此外，还对类型传播系统进行了重新设计，因此现在应该可以可靠地在通过[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用另一个[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的任何[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")上将类型设置为`None` - 该类型将在另一个列关联时立即从目标列复制，并且现在也适用于复合外键。'
- en: See also
  id: totrans-4243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Columns can reliably get their type from a column referred to via ForeignKey](migration_09.html#migration-1765)'
  id: totrans-4244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[列可以可靠地从通过ForeignKey引用的列获取其类型](migration_09.html#migration-1765)'
- en: 'References: [#1765](https://www.sqlalchemy.org/trac/ticket/1765)'
  id: totrans-4245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#1765](https://www.sqlalchemy.org/trac/ticket/1765)
- en: postgresql
  id: totrans-4246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-4247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Support for PostgreSQL 9.2 range types has been added. Currently, no type translation
    is provided, so works directly with strings or psycopg2 2.5 range extension types
    at the moment. Patch courtesy Chris Withers.
  id: totrans-4248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 9.2 范围类型的支持。目前，不提供类型转换，因此目前直接使用字符串或 psycopg2 2.5 范围扩展类型。补丁感谢
    Chris Withers。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: '**[postgresql] [feature]**'
  id: totrans-4250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for “AUTOCOMMIT” isolation when using the psycopg2 DBAPI. The
    keyword is available via the `isolation_level` execution option. Patch courtesy
    Roman Podolyaka.
  id: totrans-4251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 psycopg2 DBAPI 时，添加了对“AUTOCOMMIT”隔离的支持。该关键字可通过 `isolation_level` 执行选项使用。补丁感谢
    Roman Podolyaka。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2072](https://www.sqlalchemy.org/trac/ticket/2072)'
  id: totrans-4253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2072](https://www.sqlalchemy.org/trac/ticket/2072)
- en: '**[postgresql] [feature]**'
  id: totrans-4254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added support for rendering `SMALLSERIAL` when a [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") type is used on a primary key autoincrement column,
    based on server version detection of PostgreSQL version 9.2 or greater.
  id: totrans-4255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在主键自增列上使用 [`SmallInteger`](../core/type_basics.html#sqlalchemy.types.SmallInteger
    "sqlalchemy.types.SmallInteger") 类型时，基于 PostgreSQL 版本 9.2 或更高版本的服务器版本检测，添加了对 `SMALLSERIAL`
    的渲染支持。
- en: 'References: [#2840](https://www.sqlalchemy.org/trac/ticket/2840)'
  id: totrans-4256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2840](https://www.sqlalchemy.org/trac/ticket/2840)
- en: '**[postgresql] [bug]**'
  id: totrans-4257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Removed a 128-character truncation from the reflection of the server default
    for a column; this code was original from PG system views which truncated the
    string for readability.
  id: totrans-4258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从列的服务器默认反射中删除了 128 个字符的截断；此代码最初来自于 PG 系统视图，用于可读性截断字符串。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2844](https://www.sqlalchemy.org/trac/ticket/2844)'
  id: totrans-4260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2844](https://www.sqlalchemy.org/trac/ticket/2844)
- en: '**[postgresql] [bug]**'
  id: totrans-4261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Parenthesis will be applied to a compound SQL expression as rendered in the
    column list of a CREATE INDEX statement.
  id: totrans-4262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 CREATE INDEX 语句的列列表中，将对复合 SQL 表达式应用括号。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2742](https://www.sqlalchemy.org/trac/ticket/2742)'
  id: totrans-4264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2742](https://www.sqlalchemy.org/trac/ticket/2742)
- en: '**[postgresql] [bug]**'
  id: totrans-4265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where PostgreSQL version strings that had a prefix preceding the words
    “PostgreSQL” or “EnterpriseDB” would not parse. Courtesy Scott Schaefer.
  id: totrans-4266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，其中在 PostgreSQL 版本字符串中，单词“PostgreSQL”或“EnterpriseDB”之前有前缀时，无法解析。感谢
    Scott Schaefer。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.3
- en: 'References: [#2819](https://www.sqlalchemy.org/trac/ticket/2819)'
  id: totrans-4268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2819](https://www.sqlalchemy.org/trac/ticket/2819)
- en: '**[postgresql] [bug]**'
  id: totrans-4269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The behavior of [`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") has been simplified on the PostgreSQL dialect
    to no longer inject a hardcoded `::timestamp` or similar cast into the given expression,
    as this interfered with types such as timezone-aware datetimes, but also does
    not appear to be at all necessary with modern versions of psycopg2.
  id: totrans-4270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言上，[`extract()`](../core/sqlelement.html#sqlalchemy.sql.expression.extract
    "sqlalchemy.sql.expression.extract") 的行为已经简化，不再向给定表达式中注入硬编码的 `::timestamp` 或类似的转换，因为这会干扰诸如时区感知日期时间之类的类型，但在现代版本的
    psycopg2 中似乎也完全不必要。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2740](https://www.sqlalchemy.org/trac/ticket/2740)'
  id: totrans-4272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2740](https://www.sqlalchemy.org/trac/ticket/2740)
- en: '**[postgresql] [bug]**'
  id: totrans-4273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug in HSTORE type where keys/values that contained backslashed quotes
    would not be escaped correctly when using the “non native” (i.e. non-psycopg2)
    means of translating HSTORE data. Patch courtesy Ryan Kelly.
  id: totrans-4274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 HSTORE 类型中包含反斜杠引号的键/值在使用“非本地”（即非-psycopg2）手段转换 HSTORE 数据时无法正确转义的 bug。补丁感谢
    Ryan Kelly。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2766](https://www.sqlalchemy.org/trac/ticket/2766)'
  id: totrans-4276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2766](https://www.sqlalchemy.org/trac/ticket/2766)
- en: '**[postgresql] [bug]**'
  id: totrans-4277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the order of columns in a multi-column PostgreSQL index would
    be reflected in the wrong order. Courtesy Roman Podolyaka.
  id: totrans-4278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多列 PostgreSQL 索引中列的顺序会反映错误顺序的 bug。感谢 Roman Podolyaka。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：0.8.2
- en: 'References: [#2767](https://www.sqlalchemy.org/trac/ticket/2767)'
  id: totrans-4280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2767](https://www.sqlalchemy.org/trac/ticket/2767)
- en: mysql
  id: totrans-4281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [feature]**'
  id: totrans-4282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [feature]**'
- en: The `mysql_length` parameter used with [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") can now be passed as a dictionary of column names/lengths,
    for use with composite indexes. Big thanks to Roman Podolyaka for the patch.
  id: totrans-4283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    一起使用的 `mysql_length` 参数现在可以作为列名/长度的字典传递，用于复合索引。非常感谢 Roman Podolyaka 提供的补丁。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.2
- en: 'References: [#2704](https://www.sqlalchemy.org/trac/ticket/2704)'
  id: totrans-4285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2704](https://www.sqlalchemy.org/trac/ticket/2704)
- en: '**[mysql] [feature]**'
  id: totrans-4286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [功能]**'
- en: The MySQL [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    type now features the same auto-quoting behavior as that of [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM
    "sqlalchemy.dialects.mysql.ENUM"). Quotes are not required when setting up the
    value, but quotes that are present will be auto-detected along with a warning.
    This also helps with Alembic where the SET type doesn’t render with quotes.
  id: totrans-4287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 的 [`SET`](../dialects/mysql.html#sqlalchemy.dialects.mysql.SET "sqlalchemy.dialects.mysql.SET")
    类型现在具有与 [`ENUM`](../dialects/mysql.html#sqlalchemy.dialects.mysql.ENUM "sqlalchemy.dialects.mysql.ENUM")
    相同的自动引用行为。在设置值时不需要引号，但存在的引号将与警告一起自动检测。这也有助于 Alembic，其中 SET 类型不会呈现带引号。
- en: 'References: [#2817](https://www.sqlalchemy.org/trac/ticket/2817)'
  id: totrans-4288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2817](https://www.sqlalchemy.org/trac/ticket/2817)
- en: '**[mysql] [bug]**'
  id: totrans-4289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Updates to MySQL reserved words for versions 5.5, 5.6, courtesy Hanno Schlichting.
  id: totrans-4290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 MySQL 版本 5.5、5.6 的保留字，感谢 Hanno Schlichting。
- en: 'This change is also **backported** to: 0.8.3, 0.7.11'
  id: totrans-4291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3，0.7.11
- en: 'References: [#2791](https://www.sqlalchemy.org/trac/ticket/2791)'
  id: totrans-4292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2791](https://www.sqlalchemy.org/trac/ticket/2791)
- en: '**[mysql] [bug]**'
  id: totrans-4293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: The change in [#2721](https://www.sqlalchemy.org/trac/ticket/2721), which is
    that the `deferrable` keyword of [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is silently ignored on the MySQL backend,
    will be reverted as of 0.9; this keyword will now render again, raising errors
    on MySQL as it is not understood - the same behavior will also apply to the `initially`
    keyword. In 0.8, the keywords will remain ignored but a warning is emitted. Additionally,
    the `match` keyword now raises a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") on 0.9 and emits a warning on 0.8; this keyword
    is not only silently ignored by MySQL but also breaks the ON UPDATE/ON DELETE
    options.
  id: totrans-4294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [#2721](https://www.sqlalchemy.org/trac/ticket/2721) 中的更改是，[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 的 `deferrable` 关键字在 MySQL 后端被悄悄地忽略，将在
    0.9 版本中还原；此关键字现在将再次呈现，并在 MySQL 上引发错误，因为它不被理解 - 相同的行为也将适用于 `initially` 关键字。在 0.8
    中，关键字将继续被忽略，但会发出警告。此外，`match` 关键字现在在 0.9 上引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")，在 0.8 上发出警告；这个关键字不仅在 MySQL 上被悄悄地忽略，而且还破坏了 ON UPDATE/ON
    DELETE 选项。
- en: To use a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") that does not render or renders differently
    on MySQL, use a custom compilation option. An example of this usage has been added
    to the documentation, see [MySQL / MariaDB Foreign Keys](../dialects/mysql.html#mysql-foreign-keys).
  id: totrans-4295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 若要使用在 MySQL 上不呈现或以不同方式呈现的 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，请使用自定义编译选项。文档中已添加了此用法示例，请参阅[MySQL /
    MariaDB 外键](../dialects/mysql.html#mysql-foreign-keys)。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721), [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-4297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)，[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-4298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: MySQL-connector dialect now allows options in the create_engine query string
    to override those defaults set up in the connect, including “buffered” and “raise_on_warnings”.
  id: totrans-4299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL-connector 方言现在允许在 create_engine 查询字符串中使用选项来覆盖连接中设置的默认值，包括“buffered”和“raise_on_warnings”。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：0.8.3
- en: 'References: [#2515](https://www.sqlalchemy.org/trac/ticket/2515)'
  id: totrans-4301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2515](https://www.sqlalchemy.org/trac/ticket/2515)
- en: '**[mysql] [bug]**'
  id: totrans-4302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]**'
- en: Fixed bug when using multi-table UPDATE where a supplemental table is a SELECT
    with its own bound parameters, where the positioning of the bound parameters would
    be reversed versus the statement itself when using MySQL’s special syntax.
  id: totrans-4303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用多表UPDATE时出现的bug，其中一个补充表是带有自己绑定参数的SELECT，当使用MySQL的特殊语法时，绑定参数的位置与语句本身相反。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.2
- en: 'References: [#2768](https://www.sqlalchemy.org/trac/ticket/2768)'
  id: totrans-4305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2768](https://www.sqlalchemy.org/trac/ticket/2768)
- en: '**[mysql] [bug]**'
  id: totrans-4306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added another conditional to the `mysql+gaerdbms` dialect to detect so-called
    “development” mode, where we should use the `rdbms_mysqldb` DBAPI. Patch courtesy
    Brett Slatkin.
  id: totrans-4307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`mysql+gaerdbms`方言中添加了另一个条件，用于检测所谓的“开发”模式，在这种模式下，我们应该使用`rdbms_mysqldb` DBAPI。修补程序由Brett
    Slatkin提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.2
- en: 'References: [#2715](https://www.sqlalchemy.org/trac/ticket/2715)'
  id: totrans-4309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2715](https://www.sqlalchemy.org/trac/ticket/2715)
- en: '**[mysql] [bug]**'
  id: totrans-4310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: The `deferrable` keyword argument on [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") will not render the `DEFERRABLE` keyword
    on the MySQL dialect. For a long time we left this in place because a non-deferrable
    foreign key would act very differently than a deferrable one, but some environments
    just disable FKs on MySQL, so we’ll be less opinionated here.
  id: totrans-4311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")和[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")上的`deferrable`关键字参数将不会在MySQL方言上呈现`DEFERRABLE`关键字。很长一段时间以来，我们一直保留这个设置，因为一个非延迟的外键与一个延迟的外键会有非常不同的行为，但是一些环境只是在MySQL上禁用FKs，所以我们在这里会少些主观意见。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.2
- en: 'References: [#2721](https://www.sqlalchemy.org/trac/ticket/2721)'
  id: totrans-4313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2721](https://www.sqlalchemy.org/trac/ticket/2721)
- en: '**[mysql] [bug]**'
  id: totrans-4314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fix and test parsing of MySQL foreign key options within reflection; this complements
    the work in [#2183](https://www.sqlalchemy.org/trac/ticket/2183) where we begin
    to support reflection of foreign key options such as ON UPDATE/ON DELETE cascade.
  id: totrans-4315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复并测试了MySQL反射中外键选项的解析；这是对[#2183](https://www.sqlalchemy.org/trac/ticket/2183)中的工作的补充，我们开始支持外键选项的反射，例如ON
    UPDATE/ON DELETE级联。
- en: 'References: [#2839](https://www.sqlalchemy.org/trac/ticket/2839)'
  id: totrans-4316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2839](https://www.sqlalchemy.org/trac/ticket/2839)
- en: '**[mysql] [bug]**'
  id: totrans-4317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Improved support for the cymysql driver, supporting version 0.6.5, courtesy
    Hajime Nakagami.
  id: totrans-4318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对cymysql驱动程序的支持，支持版本0.6.5，由Hajime Nakagami提供。
- en: sqlite
  id: totrans-4319
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-4320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: The newly added SQLite DATETIME arguments storage_format and regexp apparently
    were not fully implemented correctly; while the arguments were accepted, in practice
    they would have no effect; this has been fixed.
  id: totrans-4321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新添加的SQLite DATETIME参数storage_format和regexp显然没有完全正确实现；虽然参数被接受，但实际上它们没有任何效果；这个问题已经修复。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.3
- en: 'References: [#2781](https://www.sqlalchemy.org/trac/ticket/2781)'
  id: totrans-4323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2781](https://www.sqlalchemy.org/trac/ticket/2781)
- en: '**[sqlite] [bug]**'
  id: totrans-4324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Added [`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT") to the list of type names that can be reflected by
    the SQLite dialect; courtesy Russell Stuart.
  id: totrans-4325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`sqlalchemy.types.BIGINT`](../core/type_basics.html#sqlalchemy.types.BIGINT
    "sqlalchemy.types.BIGINT")添加到SQLite方言可以反射的类型名称列表中；由Russell Stuart提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.2
- en: 'References: [#2764](https://www.sqlalchemy.org/trac/ticket/2764)'
  id: totrans-4327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2764](https://www.sqlalchemy.org/trac/ticket/2764)
- en: mssql
  id: totrans-4328
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-4329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: When querying the information schema on SQL Server 2000, removed a CAST call
    that was added in 0.8.1 to help with driver issues, which apparently is not compatible
    on 2000. The CAST remains in place for SQL Server 2005 and greater.
  id: totrans-4330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SQL Server 2000上查询信息模式时，删除了在0.8.1中添加的CAST调用，以帮助处理驱动程序问题，显然这在2000年不兼容。CAST保留在SQL
    Server 2005及更高版本中。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：0.8.2
- en: 'References: [#2747](https://www.sqlalchemy.org/trac/ticket/2747)'
  id: totrans-4332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2747](https://www.sqlalchemy.org/trac/ticket/2747)
- en: '**[mssql] [bug] [pyodbc]**'
  id: totrans-4333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [pyodbc]**'
- en: Fixes to MSSQL with Python 3 + pyodbc, including that statements are passed
    correctly.
  id: totrans-4334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MSSQL与Python 3 + pyodbc的问题，包括正确传递语句。
- en: 'References: [#2355](https://www.sqlalchemy.org/trac/ticket/2355)'
  id: totrans-4335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2355](https://www.sqlalchemy.org/trac/ticket/2355)
- en: oracle
  id: totrans-4336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature] [py3k]**'
  id: totrans-4337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [功能] [py3k]**'
- en: The Oracle unit tests with cx_oracle now pass fully under Python 3.
  id: totrans-4338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 cx_oracle 的 Oracle 单元测试现在在 Python 3 下完全通过。
- en: '**[oracle] [bug]**'
  id: totrans-4339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed bug where Oracle table reflection using synonyms would fail if the synonym
    and the table were in different remote schemas. Patch to fix courtesy Kyle Derr.
  id: totrans-4340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用同义词反射 Oracle 表时的 bug，如果同义词和表位于不同的远程模式中，则会失败。修复补丁由 Kyle Derr 提供。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: 'References: [#2853](https://www.sqlalchemy.org/trac/ticket/2853)'
  id: totrans-4342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2853](https://www.sqlalchemy.org/trac/ticket/2853)
- en: misc
  id: totrans-4343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[feature]**'
  id: totrans-4344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能]**'
- en: Added a new flag `system=True` to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which marks the column as a “system” column which
    is automatically made present by the database (such as PostgreSQL `oid` or `xmin`).
    The column will be omitted from the `CREATE TABLE` statement but will otherwise
    be available for querying. In addition, the [`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") construct can be applied to a custom compilation
    rule which allows skipping of columns, by producing a rule that returns `None`.
  id: totrans-4345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    添加了一个新标志 `system=True`，将列标记为“系统”列，该列由数据库自动添加（例如 PostgreSQL 的 `oid` 或 `xmin`）。该列将在
    `CREATE TABLE` 语句中被省略，但在其他情况下可用于查询。此外，[`CreateColumn`](../core/ddl.html#sqlalchemy.schema.CreateColumn
    "sqlalchemy.schema.CreateColumn") 构造可以应用于自定义编译���则，允许跳过列，通过生成返回 `None` 的规则。
- en: 'This change is also **backported** to: 0.8.3'
  id: totrans-4346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.3
- en: '**[feature] [firebird]**'
  id: totrans-4347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: Added new flag `retaining=True` to the kinterbasdb and fdb dialects. This controls
    the value of the `retaining` flag sent to the `commit()` and `rollback()` methods
    of the DBAPI connection. Due to historical concerns, this flag defaults to `True`
    in 0.8.2, however in 0.9.0b1 this flag defaults to `False`.
  id: totrans-4348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 kinterbasdb 和 fdb 方言添加了新标志 `retaining=True`。这控制发送到 DBAPI 连接的 `commit()` 和
    `rollback()` 方法的 `retaining` 标志的值。由于历史原因，此标志在 0.8.2 中默认为 `True`，但在 0.9.0b1 中此标志默认为
    `False`。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2763](https://www.sqlalchemy.org/trac/ticket/2763)'
  id: totrans-4350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2763](https://www.sqlalchemy.org/trac/ticket/2763)
- en: '**[feature] [core]**'
  id: totrans-4351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [核心]**'
- en: Added a new variant to [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") called `ValuesBase.return_defaults()`;
    this allows arbitrary columns to be added to the RETURNING clause of the statement
    without interfering with the compilers usual “implicit returning” feature, which
    is used to efficiently fetch newly generated primary key values. For supporting
    backends, a dictionary of all fetched values is present at `ResultProxy.returned_defaults`.
  id: totrans-4352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 中添加了一个新的变体，称为 `ValuesBase.return_defaults()`；这允许向语句的
    RETURNING 子句中添加任意列，而不会干扰编译器通常的“隐式返回”功能，该功能用于高效地获取新生成的主键值。对于支持的后端，所有获取的值的字典都存在于
    `ResultProxy.returned_defaults` 中。
- en: 'References: [#2793](https://www.sqlalchemy.org/trac/ticket/2793)'
  id: totrans-4353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2793](https://www.sqlalchemy.org/trac/ticket/2793)
- en: '**[feature] [pool]**'
  id: totrans-4354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [池]**'
- en: Added pool logging for “rollback-on-return” and the less used “commit-on-return”.
    This is enabled with the rest of pool “debug” logging.
  id: totrans-4355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为“rollback-on-return”和较少使用的“commit-on-return”添加了池记录。这与池“debug”记录一起启用。
- en: 'References: [#2752](https://www.sqlalchemy.org/trac/ticket/2752)'
  id: totrans-4356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2752](https://www.sqlalchemy.org/trac/ticket/2752)
- en: '**[feature] [firebird]**'
  id: totrans-4357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [firebird]**'
- en: The `fdb` dialect is now the default dialect when specified without a dialect
    qualifier, i.e. `firebird://`, per the Firebird project publishing `fdb` as their
    official Python driver.
  id: totrans-4358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当未指定方言限定符时，`fdb` 方言现在是默认方言，即 `firebird://`，因为 Firebird 项目将 `fdb` 发布为其官方 Python
    驱动程序。
- en: 'References: [#2504](https://www.sqlalchemy.org/trac/ticket/2504)'
  id: totrans-4359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2504](https://www.sqlalchemy.org/trac/ticket/2504)
- en: '**[bug] [firebird]**'
  id: totrans-4360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [firebird]**'
- en: Type lookup when reflecting the Firebird types LONG and INT64 has been fixed
    so that LONG is treated as INTEGER, INT64 treated as BIGINT, unless the type has
    a “precision” in which case it’s treated as NUMERIC. Patch courtesy Russell Stuart.
  id: totrans-4361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反射 Firebird 类型 LONG 和 INT64 时，类型查找已修复，使得 LONG 被视为 INTEGER，INT64 被视为 BIGINT，除非该类型具有“精度”，在这种情况下，它被视为
    NUMERIC。补丁由 Russell Stuart 提供。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：0.8.2
- en: 'References: [#2757](https://www.sqlalchemy.org/trac/ticket/2757)'
  id: totrans-4363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2757](https://www.sqlalchemy.org/trac/ticket/2757)
- en: '**[bug] [ext]**'
  id: totrans-4364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [扩展]**'
- en: Fixed bug whereby if a composite type were set up with a function instead of
    a class, the mutable extension would trip up when it tried to check that column
    for being a [`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite") (which it isn’t). Courtesy asldevi.
  id: totrans-4365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即如果使用函数而不是类设置复合类型，则当尝试检查该列是否为[`MutableComposite`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableComposite
    "sqlalchemy.ext.mutable.MutableComposite")时，可变扩展会出错（实际上不是）。感谢 asldevi。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
- en: '**[requirements]**'
  id: totrans-4367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[要求]**'
- en: The Python [mock](https://pypi.org/project/mock) library is now required in
    order to run the unit test suite. While part of the standard library as of Python
    3.3, previous Python installations will need to install this in order to run unit
    tests or to use the `sqlalchemy.testing` package for external dialects.
  id: totrans-4368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在运行单元测试套件需要 Python [mock](https://pypi.org/project/mock) 库。虽然作为 Python 3.3
    的一部分，但之前的 Python 安装需要安装此库才能运行单元测试或使用`sqlalchemy.testing`包来处理外部方言。
- en: 'This change is also **backported** to: 0.8.2'
  id: totrans-4369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：0.8.2
