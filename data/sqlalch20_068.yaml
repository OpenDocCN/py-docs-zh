- en: Mypy / Pep-484 Support for ORM Mappings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mypy / Pep-484 对 ORM 映射的支持
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/mypy.html](https://docs.sqlalchemy.org/en/20/orm/extensions/mypy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/mypy.html](https://docs.sqlalchemy.org/en/20/orm/extensions/mypy.html)
- en: Support for [**PEP 484**](https://peps.python.org/pep-0484/) typing annotations
    as well as the [MyPy](https://mypy.readthedocs.io/) type checking tool when using
    SQLAlchemy [declarative](../declarative_config.html) mappings that refer to the
    [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object directly, rather than the [`mapped_column()`](../mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct introduced in SQLAlchemy 2.0.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用直接引用 [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象而不是 SQLAlchemy 2.0 中引入的 [`mapped_column()`](../mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造时，支持 [**PEP 484**](https://peps.python.org/pep-0484/)
    类型注释以及 [MyPy](https://mypy.readthedocs.io/) 类型检查工具。
- en: 'Deprecated since version 2.0: **The SQLAlchemy Mypy Plugin is DEPRECATED, and
    will be removed possibly as early as the SQLAlchemy 2.1 release. We would urge
    users to please migrate away from it ASAP.**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版开始已被弃用：**SQLAlchemy Mypy 插件已弃用，并且可能在 SQLAlchemy 2.1 发布时被移除。我们建议用户尽快迁移。**
- en: This plugin cannot be maintained across constantly changing releases of mypy
    and its stability going forward CANNOT be guaranteed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无法跨不断变化的 mypy 发布维护此插件，未来的稳定性不能保证。
- en: Modern SQLAlchemy now offers [fully pep-484 compliant mapping syntaxes](../../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing);
    see the linked section for migration details.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 SQLAlchemy 现在提供了 [完全符合 pep-484 的映射语法](../../changelog/whatsnew_20.html#whatsnew-20-orm-declarative-typing)；请参阅链接的部分以获取迁移详情。
- en: Installation
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'For **SQLAlchemy 2.0 only**: No stubs should be installed and packages like
    [sqlalchemy-stubs](https://github.com/dropbox/sqlalchemy-stubs) and [sqlalchemy2-stubs](https://github.com/sqlalchemy/sqlalchemy2-stubs)
    should be fully uninstalled.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 仅适用于 **SQLAlchemy 2.0**：不应安装存根，并且应完全卸载诸如 [sqlalchemy-stubs](https://github.com/dropbox/sqlalchemy-stubs)
    和 [sqlalchemy2-stubs](https://github.com/sqlalchemy/sqlalchemy2-stubs) 等软件包。
- en: The [Mypy](https://mypy.readthedocs.io/) package itself is a dependency.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mypy](https://mypy.readthedocs.io/) 包本身是一个依赖项。'
- en: 'Mypy may be installed using the “mypy” extras hook using pip:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 pip 使用“mypy”额外钩子安装 Mypy：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The plugin itself is configured as described in [Configuring mypy to use Plugins](https://mypy.readthedocs.io/en/latest/extending_mypy.html#configuring-mypy-to-use-plugins),
    using the `sqlalchemy.ext.mypy.plugin` module name, such as within `setup.cfg`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 插件本身如 [Configuring mypy to use Plugins](https://mypy.readthedocs.io/en/latest/extending_mypy.html#configuring-mypy-to-use-plugins)
    中描述的那样配置，使用 `sqlalchemy.ext.mypy.plugin` 模块名，例如在 `setup.cfg` 中：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What the Plugin Does
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件功能
- en: The primary purpose of the Mypy plugin is to intercept and alter the static
    definition of SQLAlchemy [declarative mappings](../declarative_config.html) so
    that they match up to how they are structured after they have been [instrumented](../../glossary.html#term-instrumented)
    by their [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. This allows both the class structure itself as well as code that uses
    the class to make sense to the Mypy tool, which otherwise would not be the case
    based on how declarative mappings currently function. The plugin is not unlike
    similar plugins that are required for libraries like [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    which alter classes dynamically at runtime.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 插件的主要目的是拦截并修改 SQLAlchemy [声明性映射](../declarative_config.html) 的静态定义，使其与它们在被其
    [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象 [instrumented](../../glossary.html#term-instrumented) 后的结构相匹配。这允许类结构本身以及使用类的代码对
    Mypy 工具有意义，否则基于当前声明性映射的功能，这是不可能的。该插件类似于需要为类似 [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    这样的库修改类的动态插件。
- en: 'To cover the major areas where this occurs, consider the following ORM mapping,
    using the typical example of the `User` class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了涵盖这种情况经常发生的主要区域，考虑以下 ORM 映射，使用 `User` 类的典型示例：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Above, the steps that the Mypy extension can take include:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，Mypy 扩展可以执行的步骤包括：
- en: Interpretation of the `Base` dynamic class generated by [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base"), so that classes which inherit from it are
    known to be mapped. It also can accommodate the class decorator approach described
    at [Declarative Mapping using a Decorator (no declarative base)](../declarative_styles.html#orm-declarative-decorator).
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释由 [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 生成的 `Base` 动态类，以便从中继承的类被认为是映射的。它还可以适应在[使用装饰器进行声明式映射（无声明式基类）](../declarative_styles.html#orm-declarative-decorator)中描述的类装饰器方法。
- en: Type inference for ORM mapped attributes that are defined in declarative “inline”
    style, in the above example the `id` and `name` attributes of the `User` class.
    This includes that an instance of `User` will use `int` for `id` and `str` for
    `name`. It also includes that when the `User.id` and `User.name` class-level attributes
    are accessed, as they are above in the `select()` statement, they are compatible
    with SQL expression behavior, which is derived from the [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") attribute descriptor class.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对在声明式“内联”样式中定义的 ORM 映射属性进行类型推断，例如上面示例中 `User` 类的 `id` 和 `name` 属性。这包括 `User`
    的实例将使用 `int` 类型的 `id` 和 `str` 类型的 `name`。还包括当访问 `User.id` 和 `User.name` 类级属性时，如上面的
    `select()` 语句中所示，它们与 SQL 表达式行为兼容，这是从 [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 属性描述符类派生的。
- en: Application of an `__init__()` method to mapped classes that do not already
    include an explicit constructor, which accepts keyword arguments of specific types
    for all mapped attributes detected.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `__init__()` 方法应用于尚未包含显式构造函数的映射类，该构造函数接受检测到的所有映射属性的特定类型的关键字参数。
- en: 'When the Mypy plugin processes the above file, the resulting static class definition
    and Python code passed to the Mypy tool is equivalent to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Mypy 插件处理上述文件时，传递给 Mypy 工具的结果静态类定义和 Python 代码等效于以下内容：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The key steps which have been taken above include:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述已经采取的关键步骤包括：
- en: The `Base` class is now defined in terms of the `DeclarativeMeta` class explicitly,
    rather than being a dynamic class.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Base` 类现在明确地是基于 `DeclarativeMeta` 类定义的，而不再是一个动态类。'
- en: The `id` and `name` attributes are defined in terms of the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class, which represents a Python descriptor that exhibits
    different behaviors at the class vs. instance levels. The [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class is now the base class for the [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") class that is used for all ORM mapped
    attributes.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 和 `name` 属性是基于 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    类定义的，该类代表一个在类和实例级别表现出不同行为的 Python 描述符。[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类现在是用于所有 ORM 映射属性的 [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 类的基类。'
- en: '[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    is defined as a generic class against arbitrary Python types, meaning specific
    occurrences of [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    are associated with a specific Python type, such as `Mapped[Optional[int]]` and
    `Mapped[Optional[str]]` above.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    被定义为一个针对任意 Python 类型的通用类，这意味着特定的 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 实例与特定的 Python 类型相关联，例如上面的 `Mapped[Optional[int]]` 和 `Mapped[Optional[str]`。'
- en: The right-hand side of the declarative mapped attribute assignments are **removed**,
    as this resembles the operation that the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class would normally be doing, which is that it would
    be replacing these attributes with specific instances of [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"). The original expression is moved into
    a function call that will allow it to still be type-checked without conflicting
    with the left-hand side of the expression. For Mypy purposes, the left-hand typing
    annotation is sufficient for the attribute’s behavior to be understood.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明性映射属性赋值的右侧被**移除**，因为这类似于[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")类通常要执行的操作，即它将用`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")的特定实例替换这些属性。原始表达式移动到一个函数调用中，这样可以仍然进行类型检查而不与表达式的左侧冲突。对于Mypy来说，左侧的类型注释足以理解属性的行为。
- en: A type stub for the `User.__init__()` method is added which includes the correct
    keywords and datatypes.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`User.__init__()`方法的类型存根，其中包括了正确的关键字和数据类型。
- en: Usage
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: The following subsections will address individual uses cases that have so far
    been considered for pep-484 compliance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各小节将讨论到目前为止已经考虑到的符合PEP-484的各种使用情况。
- en: Introspection of Columns based on TypeEngine
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于TypeEngine的列的内省
- en: 'For mapped columns that include an explicit datatype, when they are mapped
    as inline attributes, the mapped type will be introspected automatically:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含显式数据类型的映射列，当它们被映射为内联属性时，映射类型将被自动内省：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Above, the ultimate class-level datatypes of `id`, `name` and `other_name`
    will be introspected as `Mapped[Optional[int]]`, `Mapped[Optional[str]]` and `Mapped[Optional[str]]`.
    The types are by default **always** considered to be `Optional`, even for the
    primary key and non-nullable column. The reason is because while the database
    columns “id” and “name” can’t be NULL, the Python attributes `id` and `name` most
    certainly can be `None` without an explicit constructor:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述，`id`，`name`和`other_name`的最终类级数据类型将被内省为`Mapped[Optional[int]]`，`Mapped[Optional[str]]`和`Mapped[Optional[str]]`。这些类型默认始终被认为是`Optional`，即使对于主键和非空列也是如此。原因是因为虽然数据库列“id”和“name”不能为NULL，但Python属性`id`和`name`很可能是`None`，而不需要显式的构造函数：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The types of the above columns can be stated **explicitly**, providing the
    two advantages of clearer self-documentation as well as being able to control
    which types are optional:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列的类型可以被**显式地**声明，提供了更清晰的自我文档化以及能够控制哪些类型是可选的两个优点：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Mypy plugin will accept the above `int`, `str` and `Optional[str]` and
    convert them to include the `Mapped[]` type surrounding them. The `Mapped[]` construct
    may also be used explicitly:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy插件将接受上述`int`，`str`和`Optional[str]`并将它们转换为包含在其周围的`Mapped[]`类型。`Mapped[]`构造也可以被显式使用：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the type is non-optional, it simply means that the attribute as accessed
    from an instance of `MyClass` will be considered to be non-None:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当类型是非可选时，这意味着从`MyClass`的实例中访问的属性将被认为是非`None`的：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For optional attributes, Mypy considers that the type must include None or
    otherwise be `Optional`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可选属性，Mypy认为类型必须包含None，否则就是`Optional`：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Whether or not the mapped attribute is typed as `Optional`, the generation of
    the `__init__()` method will **still consider all keywords to be optional**. This
    is again matching what the SQLAlchemy ORM actually does when it creates the constructor,
    and should not be confused with the behavior of a validating system such as Python
    `dataclasses` which will generate a constructor that matches the annotations in
    terms of optional vs. required attributes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 无论映射的属性是否被标记为`Optional`，`__init__()`方法的生成都**仍然认为所有关键字都是可选的**。这再次与SQLAlchemy
    ORM在创建构造函数时实际执行的操作相匹配，不应与诸如Python `dataclasses`之类的验证系统的行为混淆，后者将生成一个根据注释匹配的构造函数，包括可选和必需的属性。
- en: Columns that Don’t have an Explicit Type
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有明确类型的列
- en: 'Columns that include a [`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") modifier do not need to specify a datatype in
    a SQLAlchemy declarative mapping. For this type of attribute, the Mypy plugin
    will inform the user that it needs an explicit type to be sent:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 包含[`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")修饰符的列在SQLAlchemy声明映射中不需要指定数据类型。对于这种类型的属性，Mypy插件将通知用户需要发送明确的类型：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The plugin will deliver the message as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 插件将按以下方式传递消息：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To resolve, apply an explicit type annotation to the `Address.user_id` column:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决问题，请对`Address.user_id`列应用明确的类型注释：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Mapping Columns with Imperative Table
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令式表映射列
- en: 'In [imperative table style](../declarative_tables.html#orm-imperative-table-configuration),
    the [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    definitions are given inside of a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct which is separate from the mapped attributes
    themselves. The Mypy plugin does not consider this [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but instead supports that the attributes can be explicitly
    stated with a complete annotation that **must** use the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class to identify them as mapped attributes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在[命令式表样式](../declarative_tables.html#orm-imperative-table-configuration)中，[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")定义位于与映射属性本身分开的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造内。Mypy插件不考虑这个[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，而是支持可以明确声明属性，并且**必须**使用[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类将其标识为映射属性：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    annotations are considered as mapped columns and will be included in the default
    constructor, as well as provide the correct typing profile for `MyClass` both
    at the class level and the instance level.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")注释被视为映射列，并将包含在默认构造函数中，同时为`MyClass`在类级别和实例级别提供正确的类型配置文件。
- en: Mapping Relationships
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射关系
- en: 'The plugin has limited support for using type inference to detect the types
    for relationships. For all those cases where it can’t detect the type, it will
    emit an informative error message, and in all cases the appropriate type may be
    provided explicitly, either with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class or optionally omitting it for an inline declaration.
    The plugin also needs to determine whether or not the relationship refers to a
    collection or a scalar, and for that it relies upon the explicit value of the
    [`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") and/or [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship") parameters. An explicit type is needed if neither
    of these parameters are present, as well as if the target type of the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is a string or callable, and not a class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件对使用类型推断来检测关系类型有限支持。对于所有无法检测类型的情况，它将发出信息丰富的错误消息，并且在所有情况下，可以明确提供适当的类型，要么使用[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类，要么选择在内联声明中省略它。插件还需要确定关系是指向集合还是标量，并且为此依赖于[`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")和/或[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")参数的显式值。如果这些参数都不存在，则需要明确的类型，以及如果[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标类型是字符串或可调用对象，而不是类：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The above mapping will produce the following error:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述映射将产生以下错误：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The error can be resolved either by using `relationship(User, uselist=False)`
    or by providing the type, in this case the scalar `User` object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`relationship(User, uselist=False)`或提供类型来解决错误，在这种情况下是标量`User`对象：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For collections, a similar pattern applies, where in the absence of `uselist=True`
    or a [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), a collection annotation such as `List` may be
    used. It is also fully appropriate to use the string name of the class in the
    annotation as supported by pep-484, ensuring the class is imported with in the
    [TYPE_CHECKING block](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)
    as appropriate:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集合，类似的模式也适用，即在没有`uselist=True`或[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")的情况下，可以使用诸如`List`之类的集合注释。还可以完全适当地使用类的字符串名称进行注释，如pep-484所支持，确保根据需要在[TYPE_CHECKING块](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)中导入类：
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As is the case with columns, the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class may also be applied explicitly:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与列一样，[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    类也可以显式应用：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '### Using @declared_attr and Declarative Mixins'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 @declared_attr 和声明性混合类'
- en: 'The [`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    class allows Declarative mapped attributes to be declared in class level functions,
    and is particularly useful when using [declarative mixins](../declarative_mixins.html).
    For these functions, the return type of the function should be annotated using
    either the `Mapped[]` construct or by indicating the exact kind of object returned
    by the function. Additionally, “mixin” classes that are not otherwise mapped (i.e.
    don’t extend from a [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") class nor are they mapped with a method such
    as [`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped"))
    should be decorated with the [`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin") decorator, which provides a hint to the Mypy
    plugin that a particular class intends to serve as a declarative mixin:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    类允许在类级别函数中声明声明性映射的属性，并且在使用[声明性混合类](../declarative_mixins.html)时特别有用。对于这些函数，函数的返回类型应使用`Mapped[]`构造或指示函数返回的确切对象类型进行注释。此外，“mixin”类（即不以[`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")类扩展，也不使用诸如[`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")之类的方法映射的类）应该被装饰上 [`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin") 装饰器，这为Mypy插件提供了一个提示，指明特定的类意图充当声明性混合类：'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Note the mismatch between the actual return type of a method like `HasCompany.company`
    vs. what is annotated. The Mypy plugin converts all `@declared_attr` functions
    into simple annotated attributes to avoid this complexity:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意方法`HasCompany.company`的实际返回类型与注释之间的不匹配。Mypy插件将所有`@declared_attr`函数转换为简单的带注释的属性，以避免这种复杂性：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Combining with Dataclasses or Other Type-Sensitive Attribute Systems
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与数据类或其他类型敏感的属性系统相结合
- en: 'The examples of Python dataclasses integration at [Applying ORM Mappings to
    an existing dataclass (legacy dataclass use)](../dataclasses.html#orm-declarative-dataclasses)
    presents a problem; Python dataclasses expect an explicit type that it will use
    to build the class, and the value given in each assignment statement is significant.
    That is, a class as follows has to be stated exactly as it is in order to be accepted
    by dataclasses:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [将ORM映射应用到现有数据类（遗留数据类用法）](../dataclasses.html#orm-declarative-dataclasses)
    中的Python数据类集成示例存在一个问题；Python数据类期望明确的类型，它将用于构建类，并且每个赋值语句中给定的值都是重要的。也就是说，必须确切地声明以下类才能被数据类接受：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can’t apply our `Mapped[]` types to the attributes `id`, `name`, etc. because
    they will be rejected by the `@dataclass` decorator. Additionally, Mypy has another
    plugin for dataclasses explicitly which can also get in the way of what we’re
    doing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能将我们的`Mapped[]`类型应用于属性`id`、`name`等，因为它们会被`@dataclass`装饰器拒绝。此外，Mypy还有另一个专门用于数据类的插件，这也可能妨碍我们的操作。
- en: 'The above class will actually pass Mypy’s type checking without issue; the
    only thing we are missing is the ability for attributes on `User` to be used in
    SQL expressions, such as:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类实际上会顺利通过Mypy的类型检查；我们唯一缺少的是在`User`上的属性可用于SQL表达式，例如：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To provide a workaround for this, the Mypy plugin has an additional feature
    whereby we can specify an extra attribute `_mypy_mapped_attrs`, that is a list
    that encloses the class-level objects or their string names. This attribute can
    be conditional within the `TYPE_CHECKING` variable:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个解决方法，Mypy 插件具有一个额外的功能，我们可以指定一个额外的属性 `_mypy_mapped_attrs`，它是一个包含类级对象或它们的字符串名称的列表。这个属性可以在
    `TYPE_CHECKING` 变量内部是条件性的：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With the above recipe, the attributes listed in `_mypy_mapped_attrs` will be
    applied with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    typing information so that the `User` class will behave as a SQLAlchemy mapped
    class when used in a class-bound context.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述方法，列在 `_mypy_mapped_attrs` 中的属性将应用 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类型信息，以便在类绑定上下文中使用 `User` 类时，它将表现为一个 SQLAlchemy 映射类。
- en: Installation
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'For **SQLAlchemy 2.0 only**: No stubs should be installed and packages like
    [sqlalchemy-stubs](https://github.com/dropbox/sqlalchemy-stubs) and [sqlalchemy2-stubs](https://github.com/sqlalchemy/sqlalchemy2-stubs)
    should be fully uninstalled.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 **仅适用于 SQLAlchemy 2.0**：不应安装存根，而应完全卸载像 [sqlalchemy-stubs](https://github.com/dropbox/sqlalchemy-stubs)
    和 [sqlalchemy2-stubs](https://github.com/sqlalchemy/sqlalchemy2-stubs) 这样的包。
- en: The [Mypy](https://mypy.readthedocs.io/) package itself is a dependency.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mypy](https://mypy.readthedocs.io/) 包本身是一个依赖项。'
- en: 'Mypy may be installed using the “mypy” extras hook using pip:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 pip 使用 “mypy” extras 钩子安装 Mypy：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The plugin itself is configured as described in [Configuring mypy to use Plugins](https://mypy.readthedocs.io/en/latest/extending_mypy.html#configuring-mypy-to-use-plugins),
    using the `sqlalchemy.ext.mypy.plugin` module name, such as within `setup.cfg`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 插件本身配置如 [配置 mypy 使用插件](https://mypy.readthedocs.io/en/latest/extending_mypy.html#configuring-mypy-to-use-plugins)
    中所述，使用 `sqlalchemy.ext.mypy.plugin` 模块名称，例如在 `setup.cfg` 中：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What the Plugin Does
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件的功能
- en: The primary purpose of the Mypy plugin is to intercept and alter the static
    definition of SQLAlchemy [declarative mappings](../declarative_config.html) so
    that they match up to how they are structured after they have been [instrumented](../../glossary.html#term-instrumented)
    by their [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. This allows both the class structure itself as well as code that uses
    the class to make sense to the Mypy tool, which otherwise would not be the case
    based on how declarative mappings currently function. The plugin is not unlike
    similar plugins that are required for libraries like [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    which alter classes dynamically at runtime.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 插件的主要目的是拦截和修改 SQLAlchemy [声明式映射](../declarative_config.html) 的静态定义，以使其与它们在被
    [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象 [仪器化](../../glossary.html#term-instrumented) 后的结构相匹配。这使得类结构本身以及使用类的代码对 Mypy
    工具有意义，否则根据当前声明式映射的功能，这将不是情况。该插件类似于为像 [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    这样的库所需的类似插件，这些插件在运行时动态地修改类。
- en: 'To cover the major areas where this occurs, consider the following ORM mapping,
    using the typical example of the `User` class:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要涵盖此类情况经常发生的主要领域，请考虑以下 ORM 映射，使用 `User` 类的典型示例：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Above, the steps that the Mypy extension can take include:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，Mypy 扩展可以执行的步骤包括：
- en: Interpretation of the `Base` dynamic class generated by [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base"), so that classes which inherit from it are
    known to be mapped. It also can accommodate the class decorator approach described
    at [Declarative Mapping using a Decorator (no declarative base)](../declarative_styles.html#orm-declarative-decorator).
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对由 [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 生成的 `Base` 动态类进行解释，以便继承它的类被知道是已映射的。它还可以适应 [使用装饰器进行声明式映射（无声明式基类）](../declarative_styles.html#orm-declarative-decorator)
    中描述的类装饰器方法。
- en: Type inference for ORM mapped attributes that are defined in declarative “inline”
    style, in the above example the `id` and `name` attributes of the `User` class.
    This includes that an instance of `User` will use `int` for `id` and `str` for
    `name`. It also includes that when the `User.id` and `User.name` class-level attributes
    are accessed, as they are above in the `select()` statement, they are compatible
    with SQL expression behavior, which is derived from the [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") attribute descriptor class.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于在声明式“内联”样式中定义的 ORM 映射属性的类型推断，例如上面示例中 `User` 类的 `id` 和 `name` 属性。这包括 `User`
    实例将使用 `int` 类型的 `id` 和 `str` 类型的 `name`。它还包括当访问 `User.id` 和 `User.name` 类级属性时，正如它们在上面的
    `select()` 语句中那样，它们与 SQL 表达式行为兼容，这是从 [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 属性描述符类派生的。
- en: Application of an `__init__()` method to mapped classes that do not already
    include an explicit constructor, which accepts keyword arguments of specific types
    for all mapped attributes detected.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `__init__()` 方法应用于尚未包含显式构造函数的映射类，该构造函数接受特定类型的关键字参数，用于检测到的所有映射属性。
- en: 'When the Mypy plugin processes the above file, the resulting static class definition
    and Python code passed to the Mypy tool is equivalent to the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Mypy 插件处理上述文件时，结果的静态类定义和传递给 Mypy 工具的 Python 代码等效于以下内容：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The key steps which have been taken above include:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以上已经采取的关键步骤包括：
- en: The `Base` class is now defined in terms of the `DeclarativeMeta` class explicitly,
    rather than being a dynamic class.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Base` 类现在明确地以 `DeclarativeMeta` 类的形式定义，而不是动态类。'
- en: The `id` and `name` attributes are defined in terms of the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class, which represents a Python descriptor that exhibits
    different behaviors at the class vs. instance levels. The [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class is now the base class for the [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") class that is used for all ORM mapped
    attributes.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` 和 `name` 属性是以 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    类的术语定义的，该类表示在类与实例级别上表现出不同行为的 Python 描述符。[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类现在是用于所有 ORM 映射属性的 [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 类的基类。'
- en: '[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    is defined as a generic class against arbitrary Python types, meaning specific
    occurrences of [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    are associated with a specific Python type, such as `Mapped[Optional[int]]` and
    `Mapped[Optional[str]]` above.'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    被定义为针对任意 Python 类型的通用类，这意味着 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的特定出现与特定的 Python 类型相关联，例如上面的 `Mapped[Optional[int]]`
    和 `Mapped[Optional[str]]`。'
- en: The right-hand side of the declarative mapped attribute assignments are **removed**,
    as this resembles the operation that the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") class would normally be doing, which is that it would
    be replacing these attributes with specific instances of [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute"). The original expression is moved into
    a function call that will allow it to still be type-checked without conflicting
    with the left-hand side of the expression. For Mypy purposes, the left-hand typing
    annotation is sufficient for the attribute’s behavior to be understood.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式映射属性分配的右侧 **已移除**，因为这类似于 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 类通常会执行的操作，即它将这些属性替换为 [`InstrumentedAttribute`](../internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 的具体实例。原始表达式移到一个函数调用中，这将允许它仍然被类型检查而不与表达式的左侧发生冲突。对于
    Mypy 来说，左侧的类型注释足以理解属性的行为。
- en: A type stub for the `User.__init__()` method is added which includes the correct
    keywords and datatypes.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `User.__init__()` 方法添加了类型存根，其中包括正确的关键字和数据类型。
- en: Usage
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用方法
- en: The following subsections will address individual uses cases that have so far
    been considered for pep-484 compliance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各小节将讨论迄今为止已考虑到的个别用例的 pep-484 符合性。
- en: Introspection of Columns based on TypeEngine
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于 TypeEngine 的列的自省
- en: 'For mapped columns that include an explicit datatype, when they are mapped
    as inline attributes, the mapped type will be introspected automatically:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含显式数据类型的映射列，当它们作为内联属性映射时，映射类型将被自动解析：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Above, the ultimate class-level datatypes of `id`, `name` and `other_name`
    will be introspected as `Mapped[Optional[int]]`, `Mapped[Optional[str]]` and `Mapped[Optional[str]]`.
    The types are by default **always** considered to be `Optional`, even for the
    primary key and non-nullable column. The reason is because while the database
    columns “id” and “name” can’t be NULL, the Python attributes `id` and `name` most
    certainly can be `None` without an explicit constructor:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`id`、`name` 和 `other_name` 这些最终的类级别数据类型将被解析为 `Mapped[Optional[int]]`、`Mapped[Optional[str]]`
    和 `Mapped[Optional[str]]`。这些类型默认情况下**总是**被认为是 `Optional` 的，即使对于主键和非空列也是如此。原因是因为虽然数据库列“id”和“name”不能为NULL，但Python属性
    `id` 和 `name` 在没有显式构造函数的情况下肯定可以是 `None`：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The types of the above columns can be stated **explicitly**, providing the
    two advantages of clearer self-documentation as well as being able to control
    which types are optional:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列的类型可以被**显式地**声明，提供了更清晰的自我文档说明以及能够控制哪些类型是可选的两个优点：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The Mypy plugin will accept the above `int`, `str` and `Optional[str]` and
    convert them to include the `Mapped[]` type surrounding them. The `Mapped[]` construct
    may also be used explicitly:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 插件将接受上述的 `int`、`str` 和 `Optional[str]`，并将它们转换为包含在 `Mapped[]` 类型周围的类型。`Mapped[]`
    结构也可以被显式使用：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When the type is non-optional, it simply means that the attribute as accessed
    from an instance of `MyClass` will be considered to be non-None:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当类型是非可选时，这意味着从 `MyClass` 实例访问的属性将被视为非 None：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For optional attributes, Mypy considers that the type must include None or
    otherwise be `Optional`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可选属性，Mypy 认为类型必须包括 None，否则为 `Optional`：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Whether or not the mapped attribute is typed as `Optional`, the generation of
    the `__init__()` method will **still consider all keywords to be optional**. This
    is again matching what the SQLAlchemy ORM actually does when it creates the constructor,
    and should not be confused with the behavior of a validating system such as Python
    `dataclasses` which will generate a constructor that matches the annotations in
    terms of optional vs. required attributes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '无论映射属性是否被标记为 `Optional`，生成的 `__init__()` 方法仍然**将所有关键字视为可选的**。这再次与 SQLAlchemy
    ORM 实际创建构造函数时的行为相匹配，不应与诸如 Python `dataclasses` 之类的验证系统的行为混淆，后者将生成一个与注释匹配的构造函数，以确定可选
    vs. 必需属性的注解。 '
- en: Columns that Don’t have an Explicit Type
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有明确类型的列
- en: 'Columns that include a [`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") modifier do not need to specify a datatype in
    a SQLAlchemy declarative mapping. For this type of attribute, the Mypy plugin
    will inform the user that it needs an explicit type to be sent:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 [`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    修改器的列在 SQLAlchemy 声明式映射中不需要指定数据类型。对于这种类型的属性，Mypy 插件将通知用户需要发送一个显式类型：
- en: '[PRE34]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The plugin will deliver the message as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 插件将如下传递消息：
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To resolve, apply an explicit type annotation to the `Address.user_id` column:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此问题，请为 `Address.user_id` 列应用显式类型注释：
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Mapping Columns with Imperative Table
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令式表格映射列
- en: 'In [imperative table style](../declarative_tables.html#orm-imperative-table-configuration),
    the [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    definitions are given inside of a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct which is separate from the mapped attributes
    themselves. The Mypy plugin does not consider this [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but instead supports that the attributes can be explicitly
    stated with a complete annotation that **must** use the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class to identify them as mapped attributes:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在[命令式表格风格](../declarative_tables.html#orm-imperative-table-configuration)中，[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 定义位于一个与映射属性本身分离的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 结构内。Mypy 插件不考虑这个 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，而是支持可以显式声明属性，必须使用 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类来标识它们为映射属性：
- en: '[PRE37]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The above [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    annotations are considered as mapped columns and will be included in the default
    constructor, as well as provide the correct typing profile for `MyClass` both
    at the class level and the instance level.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")注释被视为映射列，并将包含在默认构造函数中，以及在类级别和实例级别为`MyClass`提供正确的类型配置文件。
- en: Mapping Relationships
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射关系
- en: 'The plugin has limited support for using type inference to detect the types
    for relationships. For all those cases where it can’t detect the type, it will
    emit an informative error message, and in all cases the appropriate type may be
    provided explicitly, either with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class or optionally omitting it for an inline declaration.
    The plugin also needs to determine whether or not the relationship refers to a
    collection or a scalar, and for that it relies upon the explicit value of the
    [`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") and/or [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship") parameters. An explicit type is needed if neither
    of these parameters are present, as well as if the target type of the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is a string or callable, and not a class:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件对使用类型推断来检测关系的类型有限支持。对于所有这些无法检测到类型的情况，它都将发出一个信息丰富的错误消息，在所有情况下，可以明确提供适当的类型，要么使用[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类，要么选择在内联声明中省略它。该插件还需要确定关系是指向集合还是标量，并且为此依赖于[`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")和/或[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")参数的显式值。如果这些参数都不存在，则需要明确的类型，以及如果[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标类型是字符串或可调用对象而不是类，则也需要明确的类型：
- en: '[PRE38]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The above mapping will produce the following error:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述映射将产生以下错误：
- en: '[PRE39]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The error can be resolved either by using `relationship(User, uselist=False)`
    or by providing the type, in this case the scalar `User` object:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 错误可以通过使用`relationship(User, uselist=False)`或者提供类型来解决，例如标量`User`对象：
- en: '[PRE40]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'For collections, a similar pattern applies, where in the absence of `uselist=True`
    or a [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), a collection annotation such as `List` may be
    used. It is also fully appropriate to use the string name of the class in the
    annotation as supported by pep-484, ensuring the class is imported with in the
    [TYPE_CHECKING block](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)
    as appropriate:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集合，类似的模式也适用，如果没有`uselist=True`或者[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")，可以使用集合注释，如`List`。在注释中使用类的字符串名称也是完全合适的，这是由pep-484支持的，确保在适当的时候在[TYPE_CHECKING块](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)中导入该类：
- en: '[PRE41]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As is the case with columns, the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class may also be applied explicitly:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 与列相似，[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")类也可以显式地应用：
- en: '[PRE42]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '### Using @declared_attr and Declarative Mixins'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 @declared_attr 和声明性混合'
- en: 'The [`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    class allows Declarative mapped attributes to be declared in class level functions,
    and is particularly useful when using [declarative mixins](../declarative_mixins.html).
    For these functions, the return type of the function should be annotated using
    either the `Mapped[]` construct or by indicating the exact kind of object returned
    by the function. Additionally, “mixin” classes that are not otherwise mapped (i.e.
    don’t extend from a [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") class nor are they mapped with a method such
    as [`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped"))
    should be decorated with the [`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin") decorator, which provides a hint to the Mypy
    plugin that a particular class intends to serve as a declarative mixin:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")类允许在类级函数中声明Declarative映射属性，并且在使用[声明性混入](../declarative_mixins.html)时特别有用。对于这些函数，函数的返回类型应该使用`Mapped[]`构造进行注释，或者指示函数返回的对象的确切类型。此外，未被映射的“混入”类（即不从[`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")类继承，也不使用诸如[`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")之类的方法进行映射）应该用[`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin")装饰器进行修饰，这为Mypy插件提供了一个提示，表明特定类意图作为声明性混入：'
- en: '[PRE43]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Note the mismatch between the actual return type of a method like `HasCompany.company`
    vs. what is annotated. The Mypy plugin converts all `@declared_attr` functions
    into simple annotated attributes to avoid this complexity:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意像`HasCompany.company`这样的方法的实际返回类型与注释的不匹配。Mypy插件将所有`@declared_attr`函数转换为简单的注释属性，以避免这种复杂性：
- en: '[PRE44]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Combining with Dataclasses or Other Type-Sensitive Attribute Systems
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与Dataclasses或其他类型敏感的属性系统结合
- en: 'The examples of Python dataclasses integration at [Applying ORM Mappings to
    an existing dataclass (legacy dataclass use)](../dataclasses.html#orm-declarative-dataclasses)
    presents a problem; Python dataclasses expect an explicit type that it will use
    to build the class, and the value given in each assignment statement is significant.
    That is, a class as follows has to be stated exactly as it is in order to be accepted
    by dataclasses:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Python dataclasses集成的示例在[将ORM映射应用于现有数据类（传统数据类用法）](../dataclasses.html#orm-declarative-dataclasses)中提出了一个问题；Python
    dataclasses期望一个明确的类型，它将用于构建类，并且每个赋值语句中给定的值是重要的。也就是说，一个如下所示的类必须要准确地声明才能被dataclasses接受：
- en: '[PRE45]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We can’t apply our `Mapped[]` types to the attributes `id`, `name`, etc. because
    they will be rejected by the `@dataclass` decorator. Additionally, Mypy has another
    plugin for dataclasses explicitly which can also get in the way of what we’re
    doing.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法将我们的`Mapped[]`类型应用于属性`id`、`name`等，因为它们将被`@dataclass`装饰器拒绝。此外，Mypy还有另一个专门用于dataclasses的插件，这也可能影响我们的操作。
- en: 'The above class will actually pass Mypy’s type checking without issue; the
    only thing we are missing is the ability for attributes on `User` to be used in
    SQL expressions, such as:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类实际上会通过Mypy的类型检查而没有问题；我们唯一缺少的是`User`上的属性能够在SQL表达式中使用，比如：
- en: '[PRE46]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To provide a workaround for this, the Mypy plugin has an additional feature
    whereby we can specify an extra attribute `_mypy_mapped_attrs`, that is a list
    that encloses the class-level objects or their string names. This attribute can
    be conditional within the `TYPE_CHECKING` variable:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，Mypy插件有一个额外的功能，我们可以指定一个额外的属性`_mypy_mapped_attrs`，这是一个包含类级对象或它们的字符串名称的列表。这个属性可以在`TYPE_CHECKING`变量内部进行条件判断：
- en: '[PRE47]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: With the above recipe, the attributes listed in `_mypy_mapped_attrs` will be
    applied with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    typing information so that the `User` class will behave as a SQLAlchemy mapped
    class when used in a class-bound context.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述方法，列在`_mypy_mapped_attrs`中列出的属性将应用于[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型信息，以便在类绑定上下文中使用`User`类时，它将表现为一个SQLAlchemy映射类。
- en: Introspection of Columns based on TypeEngine
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于TypeEngine的列的内省
- en: 'For mapped columns that include an explicit datatype, when they are mapped
    as inline attributes, the mapped type will be introspected automatically:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包含显式数据类型的映射列，当它们被映射为内联属性时，映射类型将自动进行内省：
- en: '[PRE48]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Above, the ultimate class-level datatypes of `id`, `name` and `other_name`
    will be introspected as `Mapped[Optional[int]]`, `Mapped[Optional[str]]` and `Mapped[Optional[str]]`.
    The types are by default **always** considered to be `Optional`, even for the
    primary key and non-nullable column. The reason is because while the database
    columns “id” and “name” can’t be NULL, the Python attributes `id` and `name` most
    certainly can be `None` without an explicit constructor:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`id`、`name`和`other_name`的最终类级数据类型将被内省为`Mapped[Optional[int]]`、`Mapped[Optional[str]]`和`Mapped[Optional[str]]`。类型默认始终被视为**可选**，即使对于主键和非空列也是如此。原因是因为虽然数据库列“id”和“name”不能为
    NULL，但 Python 属性`id`和`name`可以毫无疑问地是`None`，而不需要显式构造函数：
- en: '[PRE49]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The types of the above columns can be stated **explicitly**, providing the
    two advantages of clearer self-documentation as well as being able to control
    which types are optional:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列的类型可以**明确**声明，提供两个优势，即更清晰的自我文档化以及能够控制哪些类型是可选的：
- en: '[PRE50]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The Mypy plugin will accept the above `int`, `str` and `Optional[str]` and
    convert them to include the `Mapped[]` type surrounding them. The `Mapped[]` construct
    may also be used explicitly:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Mypy 插件将接受上述`int`、`str`和`Optional[str]`，并将它们转换为包围它们的`Mapped[]`类型。`Mapped[]`结构也可以明确使用：
- en: '[PRE51]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'When the type is non-optional, it simply means that the attribute as accessed
    from an instance of `MyClass` will be considered to be non-None:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当类型为非可选时，这意味着从`MyClass`实例中访问的属性将被视为非`None`：
- en: '[PRE52]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'For optional attributes, Mypy considers that the type must include None or
    otherwise be `Optional`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可选属性，Mypy 认为类型必须包含 None，否则为`Optional`：
- en: '[PRE53]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Whether or not the mapped attribute is typed as `Optional`, the generation of
    the `__init__()` method will **still consider all keywords to be optional**. This
    is again matching what the SQLAlchemy ORM actually does when it creates the constructor,
    and should not be confused with the behavior of a validating system such as Python
    `dataclasses` which will generate a constructor that matches the annotations in
    terms of optional vs. required attributes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 无论映射属性是否被标记为`Optional`，`__init__()`方法的生成**仍然考虑所有关键字都是可选的**。这再次与 SQLAlchemy ORM
    实际创建构造函数时的行为相匹配，不应与验证系统（如 Python `dataclasses`）的行为混淆，后者将根据注释生成与可选与必需属性相匹配的构造函数。
- en: Columns that Don’t have an Explicit Type
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不具有显式类型的列
- en: 'Columns that include a [`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") modifier do not need to specify a datatype in
    a SQLAlchemy declarative mapping. For this type of attribute, the Mypy plugin
    will inform the user that it needs an explicit type to be sent:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 [`ForeignKey`](../../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    修改器的列在 SQLAlchemy 声明性映射中不需要指定数据类型。对于这种类型的属性，Mypy 插件将通知用户需要发送显式类型：
- en: '[PRE54]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The plugin will deliver the message as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 插件将以以下方式发送消息：
- en: '[PRE55]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'To resolve, apply an explicit type annotation to the `Address.user_id` column:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此问题，请对`Address.user_id`列应用显式类型注释：
- en: '[PRE56]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Mapping Columns with Imperative Table
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令式表映射列
- en: 'In [imperative table style](../declarative_tables.html#orm-imperative-table-configuration),
    the [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    definitions are given inside of a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construct which is separate from the mapped attributes
    themselves. The Mypy plugin does not consider this [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but instead supports that the attributes can be explicitly
    stated with a complete annotation that **must** use the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class to identify them as mapped attributes:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [命令式表风格](../declarative_tables.html#orm-imperative-table-configuration) 中，[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 定义放在一个独立于映射属性本身的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 结构中。Mypy 插件不考虑这个[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，而是支持可以明确声明属性，并且**必须**使用 [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类来标识它们为映射属性：
- en: '[PRE57]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The above [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    annotations are considered as mapped columns and will be included in the default
    constructor, as well as provide the correct typing profile for `MyClass` both
    at the class level and the instance level.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")注释被视为映射列，并将包含在默认构造函数中，同时为`MyClass`提供正确的类型配置文件，无论是在类级别还是实例级别。
- en: Mapping Relationships
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射关系
- en: 'The plugin has limited support for using type inference to detect the types
    for relationships. For all those cases where it can’t detect the type, it will
    emit an informative error message, and in all cases the appropriate type may be
    provided explicitly, either with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class or optionally omitting it for an inline declaration.
    The plugin also needs to determine whether or not the relationship refers to a
    collection or a scalar, and for that it relies upon the explicit value of the
    [`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship") and/or [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship") parameters. An explicit type is needed if neither
    of these parameters are present, as well as if the target type of the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is a string or callable, and not a class:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件对使用类型推断来检测关系类型有限支持。对于所有无法检测类型的情况，它将发出信息丰富的错误消息，并且在所有情况下，可以明确提供适当的类型，可以使用[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类或选择性地省略内联声明。插件还需要确定关系是引用集合还是标量，为此依赖于[`relationship.uselist`](../relationship_api.html#sqlalchemy.orm.relationship.params.uselist
    "sqlalchemy.orm.relationship")和/或[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")参数的显式值。如果这些参数都不存在，则需要明确类型，以及如果[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标类型是字符串或可调用的，而不是类：
- en: '[PRE58]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The above mapping will produce the following error:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 上述映射将产生以下错误：
- en: '[PRE59]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The error can be resolved either by using `relationship(User, uselist=False)`
    or by providing the type, in this case the scalar `User` object:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`relationship(User, uselist=False)`或提供类型来解决错误，在这种情况下是标量`User`对象：
- en: '[PRE60]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'For collections, a similar pattern applies, where in the absence of `uselist=True`
    or a [`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship"), a collection annotation such as `List` may be
    used. It is also fully appropriate to use the string name of the class in the
    annotation as supported by pep-484, ensuring the class is imported with in the
    [TYPE_CHECKING block](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)
    as appropriate:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集合，类似的模式适用，如果没有`uselist=True`或[`relationship.collection_class`](../relationship_api.html#sqlalchemy.orm.relationship.params.collection_class
    "sqlalchemy.orm.relationship")，可以使用`List`等集合注释。在注释中使用类的字符串名称也是完全适当的，支持 pep-484，确保类在[TYPE_CHECKING
    block](https://www.python.org/dev/peps/pep-0484/#runtime-or-type-checking)中适当导入：
- en: '[PRE61]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'As is the case with columns, the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") class may also be applied explicitly:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 与列一样，[`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")类也可以显式应用：
- en: '[PRE62]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '### Using @declared_attr and Declarative Mixins'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用@declared_attr和声明性混合'
- en: 'The [`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    class allows Declarative mapped attributes to be declared in class level functions,
    and is particularly useful when using [declarative mixins](../declarative_mixins.html).
    For these functions, the return type of the function should be annotated using
    either the `Mapped[]` construct or by indicating the exact kind of object returned
    by the function. Additionally, “mixin” classes that are not otherwise mapped (i.e.
    don’t extend from a [`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") class nor are they mapped with a method such
    as [`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped "sqlalchemy.orm.registry.mapped"))
    should be decorated with the [`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin") decorator, which provides a hint to the Mypy
    plugin that a particular class intends to serve as a declarative mixin:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[`declared_attr`](../mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    类允许在类级函数中声明声明性映射属性，并且在使用[声明性混合](../declarative_mixins.html)时特别有用。对于这些函数，函数的返回类型应该使用`Mapped[]`构造进行注释，或者指示函数返回的确切对象类型。另外，未以其他方式映射的“混合”类（即不从[`declarative_base()`](../mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")类扩展，也不使用诸如[`registry.mapped()`](../mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped")之类的方法进行映射）应该用[`declarative_mixin()`](../mapping_api.html#sqlalchemy.orm.declarative_mixin
    "sqlalchemy.orm.declarative_mixin")装饰器进行装饰，这为 Mypy 插件提供了一个提示，表明特定的类打算作为声明性混合使用：'
- en: '[PRE63]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Note the mismatch between the actual return type of a method like `HasCompany.company`
    vs. what is annotated. The Mypy plugin converts all `@declared_attr` functions
    into simple annotated attributes to avoid this complexity:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，像`HasCompany.company`这样的方法的实际返回类型与其注释之间存在不匹配。Mypy 插件将所有`@declared_attr`函数转换为简单的注释属性，以避免这种复杂性：
- en: '[PRE64]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Combining with Dataclasses or Other Type-Sensitive Attribute Systems
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与数据类或其他类型敏感的属性系统结合
- en: 'The examples of Python dataclasses integration at [Applying ORM Mappings to
    an existing dataclass (legacy dataclass use)](../dataclasses.html#orm-declarative-dataclasses)
    presents a problem; Python dataclasses expect an explicit type that it will use
    to build the class, and the value given in each assignment statement is significant.
    That is, a class as follows has to be stated exactly as it is in order to be accepted
    by dataclasses:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python 数据类集成示例中的[将 ORM 映射应用到现有数据类（旧数据类使用）](../dataclasses.html#orm-declarative-dataclasses)存在一个问题；Python
    数据类期望一个明确的类型，它将用于构建类，并且在每个赋值语句中给定的值是重要的。也就是说，必须准确地声明如下的类才能被数据类接受：
- en: '[PRE65]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We can’t apply our `Mapped[]` types to the attributes `id`, `name`, etc. because
    they will be rejected by the `@dataclass` decorator. Additionally, Mypy has another
    plugin for dataclasses explicitly which can also get in the way of what we’re
    doing.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法将我们的`Mapped[]`类型应用于属性`id`、`name`等，因为它们将被`@dataclass`装饰器拒绝。另外，Mypy 还有另一个专门针对数据类的插件，这也可能妨碍我们的操作。
- en: 'The above class will actually pass Mypy’s type checking without issue; the
    only thing we are missing is the ability for attributes on `User` to be used in
    SQL expressions, such as:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类实际上将无障碍地通过 Mypy 的类型检查；我们唯一缺少的是`User`上属性被用于 SQL 表达式的能力，例如：
- en: '[PRE66]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'To provide a workaround for this, the Mypy plugin has an additional feature
    whereby we can specify an extra attribute `_mypy_mapped_attrs`, that is a list
    that encloses the class-level objects or their string names. This attribute can
    be conditional within the `TYPE_CHECKING` variable:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为此提供一种解决方案，Mypy 插件具有一个额外的功能，我们可以指定一个额外的属性`_mypy_mapped_attrs`，它是一个包含类级对象或它们的字符串名称的列表。该属性可以在`TYPE_CHECKING`变量中条件化：
- en: '[PRE67]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: With the above recipe, the attributes listed in `_mypy_mapped_attrs` will be
    applied with the [`Mapped`](../internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    typing information so that the `User` class will behave as a SQLAlchemy mapped
    class when used in a class-bound context.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述方法，将在`_mypy_mapped_attrs`中列出的属性应用[`Mapped`](../internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型信息，以便在类绑定上下文中使用`User`类时，它将表现为 SQLAlchemy 映射类。
