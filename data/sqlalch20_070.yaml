- en: Ordering List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序列表
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html](https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html](https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html)
- en: A custom list that manages index/position information for contained elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个管理包含元素的索引/位置信息的自定义列表。
- en: 'author:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者：
- en: Jason Kirtland
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Jason Kirtland
- en: '`orderinglist` is a helper for mutable ordered relationships. It will intercept
    list operations performed on a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-managed collection and automatically synchronize
    changes in list position onto a target scalar attribute.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`orderinglist`是一个用于可变有序关系的辅助程序。它将拦截对由[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")管理的集合执行的列表操作，并自动将列表位置的更改同步到目标标量属性。'
- en: 'Example: A `slide` table, where each row refers to zero or more entries in
    a related `bullet` table. The bullets within a slide are displayed in order based
    on the value of the `position` column in the `bullet` table. As entries are reordered
    in memory, the value of the `position` attribute should be updated to reflect
    the new sort order:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：一个`slide`表，其中每行引用相关`bullet`表中的零个或多个条目。幻灯片中的子弹根据`bullet`表中`position`列的值按顺序显示。当内存中重新排序条目时，`position`属性的值应更新以反映新的排序顺序：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The standard relationship mapping will produce a list-like attribute on each
    `Slide` containing all related `Bullet` objects, but coping with changes in ordering
    is not handled automatically. When appending a `Bullet` into `Slide.bullets`,
    the `Bullet.position` attribute will remain unset until manually assigned. When
    the `Bullet` is inserted into the middle of the list, the following `Bullet` objects
    will also need to be renumbered.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 标准关系映射将在每个`Slide`上产生一个类似列表的属性，其中包含所有相关的`Bullet`对象，但无法自动处理顺序变化。将`Bullet`附加到`Slide.bullets`时，`Bullet.position`属性将保持未设置状态，直到手动分配。当`Bullet`插入列表中间时，后续的`Bullet`对象也需要重新编号。
- en: 'The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object automates this task, managing the `position` attribute on all `Bullet`
    objects in the collection. It is constructed using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")对象自动化此任务，管理集合中所有`Bullet`对象的`position`属性。它是使用[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list")工厂构建的：'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With the above mapping the `Bullet.position` attribute is managed:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述映射，`Bullet.position`属性被管理：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    construct only works with **changes** to a collection, and not the initial load
    from the database, and requires that the list be sorted when loaded. Therefore,
    be sure to specify `order_by` on the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") against the target ordering attribute, so that
    the ordering is correct when first loaded.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")构造仅适用于对集合的**更改**，而不是从数据库的初始加载，并要求在加载时对列表进行排序。因此，请确保在针对目标排序属性的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上指定`order_by`，以便在首次加载时排序正确。'
- en: Warning
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    only provides limited functionality when a primary key column or unique column
    is the target of the sort. Operations that are unsupported or are problematic
    include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当主键列或唯一列是排序的目标时，[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")在功能上提供的功能有限。不支持或存在问题的操作包括：
- en: two entries must trade values. This is not supported directly in the case of
    a primary key or unique constraint because it means at least one row would need
    to be temporarily removed first, or changed to a third, neutral value while the
    switch occurs.
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个条目必须交换值。在主键或唯一约束的情况下，这不受直接支持，因为这意味着至少需要先暂时删除一行，或者在交换发生时将其更改为第三个中性值。
- en: ''
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: an entry must be deleted in order to make room for a new entry. SQLAlchemy’s
    unit of work performs all INSERTs before DELETEs within a single flush. In the
    case of a primary key, it will trade an INSERT/DELETE of the same primary key
    for an UPDATE statement in order to lessen the impact of this limitation, however
    this does not take place for a UNIQUE column. A future feature will allow the
    “DELETE before INSERT” behavior to be possible, alleviating this limitation, though
    this feature will require explicit configuration at the mapper level for sets
    of columns that are to be handled in this way.
  id: totrans-19
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须删除一个条目以为新条目腾出位置。SQLAlchemy的工作单元在单次刷新中执行所有INSERT操作，然后再执行DELETE操作。在主键的情况下，它将交换相同主键的INSERT/DELETE以减轻此限制的影响，但对于唯一列不会发生这种情况。未来的功能将允许“DELETE
    before INSERT”行为成为可能，从而减轻此限制，但此功能将需要在映射器级别对要以这种方式处理的列集进行显式配置。
- en: '[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list "sqlalchemy.ext.orderinglist.ordering_list")
    takes the name of the related object’s ordering attribute as an argument. By default,
    the zero-based integer index of the object’s position in the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") is synchronized with the ordering
    attribute: index 0 will get position 0, index 1 position 1, etc. To start numbering
    at 1 or some other integer, provide `count_from=1`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list "sqlalchemy.ext.orderinglist.ordering_list")接受相关对象的排序属性名称作为参数。默认情况下，对象在[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list")中的位置与排序属性同步：索引0将获得位置0，索引1位置1，依此类推。要从1或其他整数开始编号，请提供`count_from=1`。'
- en: API Reference
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API参考
- en: '| Object Name | Description |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | Numbering function: consecutive integers starting at 0. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | 编号函数：从0开始的连续整数。 |'
- en: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | Numbering function: consecutive integers starting at 1. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | 编号函数：从1开始的连续整数。 |'
- en: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | Numbering function: consecutive integers starting at arbitrary start. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | 编号函数：从任意起始位置开始的连续整数。 |'
- en: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") factory for use in mapper definitions.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | 为映射器定义准备一个[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList")工厂。 |'
- en: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | A custom list
    that manages position information for its children. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | 一个自定义列表，用于管理其子项的位置信息。
    |'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    factory for use in mapper definitions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")工厂，用于在映射器定义中使用。
- en: 'Returns an object suitable for use as an argument to a Mapper relationship’s
    `collection_class` option. e.g.:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个适用于作为Mapper关系的`collection_class`选项参数的对象。例如：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Parameters:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attr` – Name of the mapped attribute to use for storage and retrieval of ordering
    information'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr` – 用于存储和检索排序信息的映射属性的名称'
- en: '`count_from` – Set up an integer-based ordering, starting at `count_from`.
    For example, `ordering_list(''pos'', count_from=1)` would create a 1-based list
    in SQL, storing the value in the ‘pos’ column. Ignored if `ordering_func` is supplied.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count_from` – 设置从`count_from`开始的基于整数的排序。例如，`ordering_list(''pos'', count_from=1)`将在SQL中创建一个基于1的列表，将值存储在‘pos’列中。如果提供了`ordering_func`，则会被忽略。'
- en: Additional arguments are passed to the [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") constructor.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的参数传递给[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")构造函数。
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Numbering function: consecutive integers starting at 0.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从0开始的连续整数。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Numbering function: consecutive integers starting at 1.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从1开始的连续整数。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Numbering function: consecutive integers starting at arbitrary start.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从任意起始位置开始的连续整数。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A custom list that manages position information for its children.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义列表，用于管理其子项的位置信息。
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object is normally set up using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory function, used in conjunction
    with the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    对象通常使用 [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list "sqlalchemy.ext.orderinglist.ordering_list")
    工厂函数设置，与 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数结合使用。 '
- en: '**Members**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
- en: '**Class signature**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A custom list that manages position information for its children.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义列表，用于管理其子项的位置信息。
- en: '`OrderingList` is a `collection_class` list implementation that syncs position
    in a Python list with a position attribute on the mapped objects.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderingList` 是一个 `collection_class` 列表实现，它将 Python 列表中的位置与映射对象上的位置属性同步。'
- en: This implementation relies on the list starting in the proper order, so be **sure**
    to put an `order_by` on your relationship.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现依赖于列表以正确的顺序开始，因此一定要 **确保** 在关系上放置一个 `order_by`。
- en: 'Parameters:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`ordering_attr` – Name of the attribute that stores the object’s order in the
    relationship.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering_attr` – 存储对象在关系中顺序的属性名称。'
- en: '`ordering_func` –'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering_func` –'
- en: Optional. A function that maps the position in the Python list to a value to
    store in the `ordering_attr`. Values returned are usually (but need not be!) integers.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。将 Python 列表中的位置映射到存储在 `ordering_attr` 中的值的函数。返回的值通常（但不必！）是整数。
- en: 'An `ordering_func` is called with two positional parameters: the index of the
    element in the list, and the list itself.'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ordering_func` 被调用时具有两个位置参数：列表中元素的索引和列表本身。'
- en: 'If omitted, Python list indexes are used for the attribute values. Two basic
    pre-built numbering functions are provided in this module: `count_from_0` and
    `count_from_1`. For more exotic examples like stepped numbering, alphabetical
    and Fibonacci numbering, see the unit tests.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果省略，将使用 Python 列表索引作为属性值。此模块提供了两个基本的预定义编号函数：`count_from_0` 和 `count_from_1`。有关诸如步进编号、字母编号和斐波那契编号等更奇特的示例，请参阅单元测试。
- en: '`reorder_on_append` –'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reorder_on_append` –'
- en: Default False. When appending an object with an existing (non-None) ordering
    value, that value will be left untouched unless `reorder_on_append` is true. This
    is an optimization to avoid a variety of dangerous unexpected database writes.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。当追加一个具有现有（非 None）排序值的对象时，该值将保持不变，除非 `reorder_on_append` 为真。这是一种优化，可以避免各种危险的意外数据库写入。
- en: SQLAlchemy will add instances to the list via append() when your object loads.
    If for some reason the result set from the database skips a step in the ordering
    (say, row ‘1’ is missing but you get ‘2’, ‘3’, and ‘4’), reorder_on_append=True
    would immediately renumber the items to ‘1’, ‘2’, ‘3’. If you have multiple sessions
    making changes, any of whom happen to load this collection even in passing, all
    of the sessions would try to “clean up” the numbering in their commits, possibly
    causing all but one to fail with a concurrent modification error.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 将在对象加载时通过 append() 将实例添加到列表中。如果由于某种原因数据库的结果集跳过了排序步骤（例如，行 '1' 缺失，但你得到了
    '2'、'3' 和 '4'），那么 reorder_on_append=True 将立即重新编号为 '1'、'2'、'3'。如果有多个会话进行更改，其中任何一个会话恰巧加载了这个集合，即使是临时加载，所有会话都会尝试在它们的提交中“清理”编号，可能会导致除一个之外的所有会话都以并发修改错误失败。
- en: Recommend leaving this with the default of False, and just call `reorder()`
    if you’re doing `append()` operations with previously ordered instances or when
    doing some housekeeping after manual sql operations.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议保留默认值为 False，如果你在之前已经排序过的实例上进行`append()`操作，或者在手动执行 SQL 操作后进行一些清理工作时，只需调用`reorder()`即可。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Append object to the end of the list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象追加到列表的末尾。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Insert object before index.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引之前插入对象。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Remove and return item at index (default last).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 移除并返回索引处的项目（默认为最后一个）。
- en: Raises IndexError if list is empty or index is out of range.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表为空或索引超出范围，则引发 IndexError。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remove first occurrence of value.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 移除第一次出现的值。
- en: Raises ValueError if the value is not present.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值不存在则引发 ValueError。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Synchronize ordering for the entire collection.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 同步整个集合的排序。
- en: Sweeps through the list and ensures that each object has accurate ordering information
    set.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描列表并确保每个对象设置了准确的排序信息。
- en: API Reference
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | Numbering function: consecutive integers starting at 0. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | 编号函数：从 0 开始的连续整数。 |'
- en: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | Numbering function: consecutive integers starting at 1. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | 编号函数：从 1 开始的连续整数。 |'
- en: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | Numbering function: consecutive integers starting at arbitrary start. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | 编号函数：从任意起始值开始的连续整数。 |'
- en: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") factory for use in mapper definitions.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | 为映射器定义准备一个[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList")工厂。 |'
- en: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | A custom list
    that manages position information for its children. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | 一个自定义列表，管理其子项的位置信息。
    |'
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    factory for use in mapper definitions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为映射器定义准备一个[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")工厂。
- en: 'Returns an object suitable for use as an argument to a Mapper relationship’s
    `collection_class` option. e.g.:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个适合用作 Mapper 关系的`collection_class`选项参数的对象。例如：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Parameters:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attr` – Name of the mapped attribute to use for storage and retrieval of ordering
    information'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr` – 用于存储和检索排序信息的映射属性的名称'
- en: '`count_from` – Set up an integer-based ordering, starting at `count_from`.
    For example, `ordering_list(''pos'', count_from=1)` would create a 1-based list
    in SQL, storing the value in the ‘pos’ column. Ignored if `ordering_func` is supplied.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count_from` – 设置基于整数的排序，从`count_from`开始。例如，`ordering_list(''pos'', count_from=1)`将在
    SQL 中创建一个以 1 为基础的列表，在‘pos’列中存储值。如果提供了`ordering_func`，则忽略。'
- en: Additional arguments are passed to the [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") constructor.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的参数将传递给[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")构造函数。
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Numbering function: consecutive integers starting at 0.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从 0 开始的连续整数。
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Numbering function: consecutive integers starting at 1.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从 1 开始的连续整数。
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Numbering function: consecutive integers starting at arbitrary start.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 编号函数：从任意起始值开始的连续整数。
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A custom list that manages position information for its children.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义列表，管理其子项的位置信息。
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object is normally set up using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory function, used in conjunction
    with the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")对象通常使用与[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")函数配合使用的[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list")工厂函数设置。'
- en: '**Members**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
- en: '**Class signature**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A custom list that manages position information for its children.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个自定义列表，用于管理其子项的位置信息。
- en: '`OrderingList` is a `collection_class` list implementation that syncs position
    in a Python list with a position attribute on the mapped objects.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`OrderingList` 是一个 `collection_class` 列表实现，将 Python 列表中的位置与映射对象上的位置属性同步。'
- en: This implementation relies on the list starting in the proper order, so be **sure**
    to put an `order_by` on your relationship.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现依赖于列表以正确顺序开始，因此请务必在关系上放置 `order_by`。
- en: 'Parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`ordering_attr` – Name of the attribute that stores the object’s order in the
    relationship.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering_attr` – 存储对象在关系中顺序的属性名称。'
- en: '`ordering_func` –'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ordering_func` –'
- en: Optional. A function that maps the position in the Python list to a value to
    store in the `ordering_attr`. Values returned are usually (but need not be!) integers.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。将 Python 列表��的位置映射到存储在 `ordering_attr` 中的值的函数。通常返回的值是整数（但不一定是！）。
- en: 'An `ordering_func` is called with two positional parameters: the index of the
    element in the list, and the list itself.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ordering_func` 被调用时带有两个位置参数：列表中元素的索引和列表本身。'
- en: 'If omitted, Python list indexes are used for the attribute values. Two basic
    pre-built numbering functions are provided in this module: `count_from_0` and
    `count_from_1`. For more exotic examples like stepped numbering, alphabetical
    and Fibonacci numbering, see the unit tests.'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果省略，则使用 Python 列表索引作为属性值。本模块提供了两个基本的预构建编号函数：`count_from_0` 和 `count_from_1`。有关更奇特的示例，如步进编号、字母和斐波那契编号，请参见单元测试。
- en: '`reorder_on_append` –'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reorder_on_append` –'
- en: Default False. When appending an object with an existing (non-None) ordering
    value, that value will be left untouched unless `reorder_on_append` is true. This
    is an optimization to avoid a variety of dangerous unexpected database writes.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 False。在附加具有现有（非 None）排序值的对象时，该值将保持不变，除非 `reorder_on_append` 为 true。这是一种优化，可避免各种危险的意外数据库写入。
- en: SQLAlchemy will add instances to the list via append() when your object loads.
    If for some reason the result set from the database skips a step in the ordering
    (say, row ‘1’ is missing but you get ‘2’, ‘3’, and ‘4’), reorder_on_append=True
    would immediately renumber the items to ‘1’, ‘2’, ‘3’. If you have multiple sessions
    making changes, any of whom happen to load this collection even in passing, all
    of the sessions would try to “clean up” the numbering in their commits, possibly
    causing all but one to fail with a concurrent modification error.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您的对象加载时，SQLAlchemy 将通过 append() 将实例添加到列表中。如果由于某种原因数据库的结果集跳过了排序步骤（例如，行‘1’丢失，但您得到‘2’、‘3’和‘4’），reorder_on_append=True
    将立即重新编号项目为‘1’、‘2’、‘3’。如果有多个会话进行更改，其中任何一个碰巧加载此集合，即使是临时加载，所有会话都会尝试在其提交中“清理”编号，可能导致除一个之外的所有会话都因并发修改错误而失败。
- en: Recommend leaving this with the default of False, and just call `reorder()`
    if you’re doing `append()` operations with previously ordered instances or when
    doing some housekeeping after manual sql operations.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议保持默认值为 False，并在对先前有序实例进行 `append()` 操作或在手动 sql 操作后进行一些清理时，只调用 `reorder()`。
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Append object to the end of the list.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象追加到列表末尾。
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Insert object before index.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引之前插入对象。
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Remove and return item at index (default last).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 移除并返回索引处的项目（默认为最后一个）。
- en: Raises IndexError if list is empty or index is out of range.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表为空或索引超出范围，则引发 IndexError。
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Remove first occurrence of value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 移除第一次出现的值。
- en: Raises ValueError if the value is not present.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果值不存在，则引发 ValueError。
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Synchronize ordering for the entire collection.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 同步整个集合的排序。
- en: Sweeps through the list and ensures that each object has accurate ordering information
    set.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描列表并确保每个对象具有准确的排序信息设置。
