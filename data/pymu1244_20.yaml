- en: Low-Level Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低级接口
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-low-level-interfaces.html](https://pymupdf.readthedocs.io/en/latest/recipes-low-level-interfaces.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://pymupdf.readthedocs.io/en/latest/recipes-low-level-interfaces.html](https://pymupdf.readthedocs.io/en/latest/recipes-low-level-interfaces.html)
- en: Numerous methods are available to access and manipulate PDF files on a fairly
    low level. Admittedly, a clear distinction between “low level” and “normal” functionality
    is not always possible or subject to personal taste.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以在相对低级别上访问和操作PDF文件。诚然，“低级别”和“常规”功能之间的明确区分并非总是可能的，也是主观品味的问题。
- en: It also may happen, that functionality previously deemed low-level is later
    on assessed as being part of the normal interface. This has happened in v1.14.0
    for the class [Tools](tools.html#tools) - you now find it as an item in the Classes
    chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 也可能发生之前被认为是低级的功能后来被评估为是正常接口的一部分。在v1.14.0版本中，[Tools](tools.html#tools)类已经发生了这种情况
    —— 现在它作为“类”章节中的一个条目找到。
- en: It is a matter of documentation only in which chapter of the documentation you
    find what you are looking for. Everything is available and always via the same
    interface.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 只需查找文档的哪个章节，就能找到所需内容，这仅仅是文档问题。所有内容都可以通过同一界面随时获取。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Iterate through the [`xref`](glossary.html#xref "xref") Table
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何迭代通过[`xref`](glossary.html#xref "xref")表
- en: 'A PDF’s [`xref`](glossary.html#xref "xref") table is a list of all objects
    defined in the file. This table may easily contain many thousands of entries –
    the manual [Adobe PDF References](app3.html#adobemanual) for example has 127,000
    objects. Table entry “0” is reserved and must not be touched. The following script
    loops through the [`xref`](glossary.html#xref "xref") table and prints each object’s
    definition:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PDF的[`xref`](glossary.html#xref "xref")表是文件中定义的所有对象的列表。该表可能包含许多条目 — 例如，Adobe
    PDF参考手册中有127,000个对象。表条目“0”被保留，不得触及。以下脚本循环遍历[`xref`](glossary.html#xref "xref")表，并打印每个对象的定义：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This produces the following output:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将被生成：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A PDF object definition is an ordinary ASCII string.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PDF对象定义是一个普通的ASCII字符串。
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Handle Object Streams
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理对象流
- en: Some object types contain additional data apart from their object definition.
    Examples are images, fonts, embedded files or commands describing the appearance
    of a page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除对象定义外，某些对象类型还包含额外数据。例如，图片、字体、嵌入文件或描述页面外观的命令。
- en: Objects of these types are called “stream objects”. PyMuPDF allows reading an
    object’s stream via method [`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream") with the object’s [`xref`](glossary.html#xref "xref")
    as an argument. It is also possible to write back a modified version of a stream
    using [`Document.update_stream()`](document.html#Document.update_stream "Document.update_stream").
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的对象称为“流对象”。PyMuPDF允许通过方法[`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream")读取对象的流，参数为对象的[`xref`](glossary.html#xref "xref")。还可以使用[`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream")写回流的修改版本。
- en: 'Assume that the following snippet wants to read all streams of a PDF for whatever
    reason:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下代码片段想要读取PDF的所有流，无论出于何种原因：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`Document.xref_stream()`](document.html#Document.xref_stream "Document.xref_stream")
    automatically returns a stream decompressed as a bytes object – and [`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream") automatically compresses it if beneficial.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.xref_stream()`](document.html#Document.xref_stream "Document.xref_stream")自动以字节对象形式返回解压的流
    — 而[`Document.update_stream()`](document.html#Document.update_stream "Document.update_stream")如果有益，也会自动压缩它。'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Handle Page Contents
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理页面内容
- en: A PDF page can have zero or multiple [`contents`](glossary.html#contents "contents")
    objects. These are stream objects describing **what** appears **where** and **how**
    on a page (like text and images). They are written in a special mini-language
    described e.g. in chapter “APPENDIX A - Operator Summary” on page 643 of the [Adobe
    PDF References](app3.html#adobemanual).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PDF页面可以有零个或多个[`contents`](glossary.html#contents "contents")对象。这些是描述页面上出现的内容及其方式（如文本和图像）的流对象。它们以特殊的迷你语言编写，如Adobe
    PDF参考手册中第643页的附录A“操作符概要”中所述。
- en: Every PDF reader application must be able to interpret the contents syntax to
    reproduce the intended appearance of the page.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个PDF阅读应用程序必须能够解释内容语法，以重现页面的预期外观。
- en: If multiple [`contents`](glossary.html#contents "contents") objects are provided,
    they must be interpreted in the specified sequence in exactly the same way as
    if they were provided as a concatenation of the several.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了多个[`contents`](glossary.html#contents "contents")对象，则必须按照指定的顺序解释它们，就像它们是按顺序串联起来的一样。
- en: 'There are good technical arguments for having multiple [`contents`](glossary.html#contents
    "contents") objects:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拥有多个[`contents`](glossary.html#contents "contents")对象存在一些技术上的优点：
- en: It is a lot easier and faster to just add new [`contents`](glossary.html#contents
    "contents") objects than maintaining a single big one (which entails reading,
    decompressing, modifying, recompressing, and rewriting it for each change).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅仅添加新的[`contents`](glossary.html#contents "contents")对象要比维护单个大对象更加简单和快速（后者涉及每次更改都需要读取、解压缩、修改、重新压缩和重写）。
- en: When working with incremental updates, a modified big [`contents`](glossary.html#contents
    "contents") object will bloat the update delta and can thus easily negate the
    efficiency of incremental saves.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用增量更新时，修改过的大型[`contents`](glossary.html#contents "contents")对象会增加更新的增量，因此很容易抵消增量保存的效率。
- en: For example, PyMuPDF adds new, small [`contents`](glossary.html#contents "contents")
    objects in methods [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page") and
    the [Shape](shape.html#shape) methods.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，PyMuPDF在[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")、[`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page")方法以及[Shape](shape.html#shape)方法中添加新的小型[`contents`](glossary.html#contents
    "contents")对象。
- en: 'However, there are also situations when a **single** [`contents`](glossary.html#contents
    "contents") object is beneficial: it is easier to interpret and more compressible
    than multiple smaller ones.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有一些情况下单个[`contents`](glossary.html#contents "contents")对象更有利：它比多个较小的对象更容易解释和更易于压缩。
- en: 'Here are two ways of combining multiple contents of a page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种合并页面多个内容的方法：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The clean function [`Page.clean_contents()`](functions.html#Page.clean_contents
    "Page.clean_contents") does a lot more than just glueing [`contents`](glossary.html#contents
    "contents") objects: it also corrects and optimizes the PDF operator syntax of
    the page and removes any inconsistencies with the page’s object definition.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 清理函数[`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")不仅仅是粘合[`contents`](glossary.html#contents
    "contents")对象：它还会更正和优化页面的PDF操作符语法，并消除与页面对象定义的任何不一致之处。
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Access the PDF Catalog
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问PDF目录
- en: 'This is a central (“root”) object of a PDF. It serves as a starting point to
    reach important other objects and it also contains some global options for the
    PDF:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF的中心（“根”）对象。它作为到达重要其他对象的起点，并包含PDF的一些全局选项：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Indentation, line breaks and comments are inserted here for clarification purposes
    only and will not normally appear. For more information on the PDF catalog see
    section 7.7.2 on page 71 of the [Adobe PDF References](app3.html#adobemanual).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进、换行和注释仅用于澄清目的，通常不会显示。有关PDF目录的更多信息，请参见[Adobe PDF References](app3.html#adobemanual)第71页的第7.7.2节。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Access the PDF File Trailer
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问PDF文件尾页
- en: 'The trailer of a PDF file is a [`dictionary`](glossary.html#dictionary "dictionary")
    located towards the end of the file. It contains special objects, and pointers
    to important other information. See [Adobe PDF References](app3.html#adobemanual)
    p. 42\. Here is an overview:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文件的尾页是位于文件末尾的[`dictionary`](glossary.html#dictionary "dictionary")。它包含特殊对象和指向重要其他信息的指针。参见[Adobe
    PDF References](app3.html#adobemanual)第42页。以下是概述：
- en: '| **Key** | **Type** | **Value** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| **Key** | **Type** | **Value** |'
- en: '| --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Size | int | Number of entries in the cross-reference table + 1. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Size | int | 交叉引用表中条目数 + 1。 |'
- en: '| Prev | int | Offset to previous [`xref`](glossary.html#xref "xref") section
    (indicates incremental updates). |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Prev | int | 指向前一个[`xref`](glossary.html#xref "xref")部分的偏移量（指示增量更新）。 |'
- en: '| Root | dictionary | (indirect) Pointer to the catalog. See previous section.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Root | dictionary | （间接）指向目录的指针。请参阅上一节。 |'
- en: '| Encrypt | dictionary | Pointer to encryption object (encrypted files only).
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Encrypt | dictionary | 指向加密对象的指针（仅加密文件）。 |'
- en: '| Info | dictionary | (indirect) Pointer to information (metadata). |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Info | dictionary | （间接）指向信息（元数据）的指针。 |'
- en: '| ID | array | File identifier consisting of two byte strings. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| ID | array | 由两个字节字符串组成的文件标识符。 |'
- en: '| XRefStm | int | Offset of a cross-reference stream. See [Adobe PDF References](app3.html#adobemanual)
    p. 49. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| XRefStm | int | 交叉引用流的偏移量。参见[Adobe PDF References](app3.html#adobemanual)第49页。
    |'
- en: Access this information via PyMuPDF with [`Document.pdf_trailer()`](document.html#Document.pdf_trailer
    "Document.pdf_trailer") or, equivalently, via [`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object") using -1 instead of a valid [`xref`](glossary.html#xref
    "xref") number.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PyMuPDF的[`Document.pdf_trailer()`](document.html#Document.pdf_trailer "Document.pdf_trailer")或者等效地通过[`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object")使用-1而不是有效的[`xref`](glossary.html#xref "xref")编号来访问这些信息。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '* * *'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Access XML Metadata
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问XML元数据
- en: A PDF may contain XML metadata in addition to the standard metadata format.
    In fact, most PDF viewer or modification software adds this type of information
    when saving the PDF (Adobe, Nitro PDF, PDF-XChange, etc.).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PDF可能包含标准元数据格式之外的XML元数据。事实上，大多数PDF查看器或修改软件在保存PDF时添加此类信息（Adobe、Nitro PDF、PDF-XChange等）。
- en: PyMuPDF has no way to **interpret or change** this information directly, because
    it contains no XML features. XML metadata is however stored as a [`stream`](glossary.html#stream
    "stream") object, so it can be read, modified with appropriate software and written
    back.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF无法直接**解释或更改**此信息，因为它不包含XML功能。但是，XML元数据存储为[`stream`](glossary.html#stream
    "stream")对象，因此可以使用适当的软件进行读取、修改和写回。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using some XML package, the XML data can be interpreted and / or modified and
    then stored back. The following also works, if the PDF previously had no XML metadata:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用某些XML包，可以解释和/或修改XML数据，然后存储回去。如果PDF以前没有XML元数据，则以下方法也适用：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Extend PDF Metadata
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何扩展PDF元数据
- en: 'Attribute [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    is designed so it works for all [supported document types](how-to-open-a-file.html#supported-file-types)
    in the same way: it is a Python dictionary with a **fixed set of key-value pairs**.
    Correspondingly, [`Document.set_metadata()`](document.html#Document.set_metadata
    "Document.set_metadata") only accepts standard keys.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 属性[`Document.metadata`](document.html#Document.metadata "Document.metadata")的设计适用于所有[支持的文档类型](how-to-open-a-file.html#supported-file-types)，工作方式相同：它是一个Python字典，具有**固定的键值对集合**。对应地，[`Document.set_metadata()`](document.html#Document.set_metadata
    "Document.set_metadata")仅接受标准键。
- en: However, PDFs may contain items not accessible like this. Also, there may be
    reasons to store additional information, like copyrights. Here is a way to handle
    **arbitrary metadata items** by using PyMuPDF low-level functions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，PDF可能包含无法像这样访问的项目。此外，可能存在存储额外信息的原因，如版权信息。以下是使用PyMuPDF低级函数处理**任意元数据项**的方法。
- en: 'As an example, look at this standard metadata output of some PDF:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看一看某些PDF的标准元数据输出：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following code to see **all items** stored in the metadata object:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码查看存储在元数据对象中的**所有项**：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Vice versa*, you can also **store private metadata items** in a PDF. It is
    your responsibility to make sure that these items conform to PDF specifications
    - especially they must be (unicode) strings. Consult section 14.3 (p. 548) of
    the [Adobe PDF References](app3.html#adobemanual) for details and caveats:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*反之亦然*，您还可以在PDF中存储**私有元数据项**。您有责任确保这些项符合PDF规范 - 特别是它们必须是（unicode）字符串。请参阅[Adobe
    PDF References](app3.html#adobemanual)第14.3节（第548页）获取详细信息和注意事项：'
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To delete selected keys, use `doc.xref_set_key(xref, "mykey", "null")`. As explained
    in the next section, string “null” is the PDF equivalent to Python’s `None`. A
    key with that value will be treated as not being specified – and physically removed
    in garbage collections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除选定的键，请使用`doc.xref_set_key(xref, "mykey", "null")`。如下一节所述，字符串“null”是Python的`None`的PDF等效项。具有该值的键将被视为未指定
    - 并在垃圾收集中物理删除。
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How to Read and Update PDF Objects
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何读取和更新PDF对象
- en: There also exist granular, elegant ways to access and manipulate selected PDF
    [`dictionary`](glossary.html#dictionary "dictionary") keys.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在一些精细的、优雅的方法来访问和操作选择的PDF[`字典`](glossary.html#dictionary "dictionary")键。
- en: '[`Document.xref_get_keys()`](document.html#Document.xref_get_keys "Document.xref_get_keys")
    returns the PDF keys of the object at [`xref`](glossary.html#xref "xref"):'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Document.xref_get_keys()`](document.html#Document.xref_get_keys "Document.xref_get_keys")返回[`xref`](glossary.html#xref
    "xref")处对象的PDF键：'
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Compare with the full object definition:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与完整对象定义进行比较：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Single keys can also be accessed directly via [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key"). The value **always is a string** together with type
    information, that helps with interpreting it:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个键也可以直接访问，通过 [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key")。该值**总是一个字符串**，并附带类型信息，有助于解释它：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is a full listing of the above page keys:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里是上述页面键的完整列表：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: An undefined key inquiry returns `('null', 'null')` – PDF object type `null`
    corresponds to `None` in Python. Similar for the booleans `true` and `false`.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义的键查询返回 `('null', 'null')` – PDF 对象类型 `null` 对应于 Python 中的 `None`。布尔值 `true`
    和 `false` 类似。
- en: 'Let us add a new key to the page definition that sets its rotation to 90 degrees
    (you are aware that there actually exists [`Page.set_rotation()`](page.html#Page.set_rotation
    "Page.set_rotation") for this?):'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们向页面定义添加一个新键，将其旋转角度设置为 90 度（您知道实际上已经存在 [`Page.set_rotation()`](page.html#Page.set_rotation
    "Page.set_rotation") 吗？）：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This method can also be used to remove a key from the [`xref`](glossary.html#xref
    "xref") dictionary by setting its value to `null`: The following will remove the
    rotation specification from the page: `doc.xref_set_key(page.xref, "Rotate", "null")`.
    Similarly, to remove all links, annotations and fields from a page, use `doc.xref_set_key(page.xref,
    "Annots", "null")`. Because `Annots` by definition is an array, setting en empty
    array with the statement `doc.xref_set_key(page.xref, "Annots", "[]")` would do
    the same job in this case.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将其值设置为 `null`，此方法还可用于从[`xref`](glossary.html#xref "xref") 字典中删除一个键：以下内容将从页面中删除旋转规范：`doc.xref_set_key(page.xref,
    "Rotate", "null")`。同样地，要从页面中删除所有链接、注释和字段，请使用 `doc.xref_set_key(page.xref, "Annots",
    "null")`。因为 `Annots` 的定义是一个数组，因此在这种情况下，通过语句 `doc.xref_set_key(page.xref, "Annots",
    "[]")` 将执行相同的操作。
- en: 'PDF dictionaries can be hierarchically nested. In the following page object
    definition both, [Font](font.html#font) and `XObject` are subdictionaries of `Resources`:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF 字典可以按层次嵌套。在以下页面对象定义中，[Font](font.html#font) 和 `XObject` 都是 `Resources` 的子字典：
- en: '[PRE16]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The above situation **is supported** by methods [`Document.xref_set_key()`](document.html#Document.xref_set_key
    "Document.xref_set_key") and [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key"): use a path-like notation to point at the required key.
    For example, to retrieve the value of key `Im1` above, specify the complete chain
    of dictionaries “above” it in the key argument: `"Resources/XObject/Im1"`:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述情况**得到了支持**，通过方法 [`Document.xref_set_key()`](document.html#Document.xref_set_key
    "Document.xref_set_key") 和 [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key")：使用类似路径的符号指向所需的键。例如，要检索上述键 `Im1` 的值，需在键参数中指定完整的字典链：“Resources/XObject/Im1”：
- en: '[PRE17]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The path notation can also be used to **directly set a value**: use the following
    to let `Im1` point to a different object:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径符号也可以用来**直接设置一个值**：使用以下内容让 `Im1` 指向一个不同的对象：
- en: '[PRE18]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Be aware, that **no semantic checks** whatsoever will take place here: if the
    PDF has no xref 9999, it won’t be detected at this point.'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这里**完全没有语义检查**：如果 PDF 没有 xref 9999，这一点将不会在此时被检测到。
- en: 'If a key does not exist, it will be created by setting its value. Moreover,
    if any intermediate keys do not exist either, they will also be created as necessary.
    The following creates an array `D` several levels below the existing dictionary
    `A`. Intermediate dictionaries `B` and `C` are automatically created:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果键不存在，通过设置其值将创建它。此外，如果任何中间键也不存在，它们也将根据需要被创建。以下示例创建了一个在现有字典 `A` 几个级别下的数组 `D`：
- en: '[PRE19]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When setting key values, basic **PDF syntax checking** will be done by MuPDF.
    For example, new keys can only be created **below a dictionary**. The following
    tries to create some new string item `E` below the previously created array `D`:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置键值时，MuPDF 将执行基本的**PDF 语法检查**。例如，新键只能创建在字典的下面。以下尝试在先前创建的数组 `D` 下创建一些新的字符串项
    `E`：
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It is also **not possible**, to create a key if some higher level key is an
    **“indirect”** object, i.e. an xref. In other words, xrefs can only be modified
    directly and not implicitly via other objects referencing them:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也**不可能**创建一个键，如果某些更高级别的键是一个**“间接”**对象，即一个 xref。换句话说，xrefs 只能直接修改，而不能通过引用它们的其他对象隐式地修改它们：
- en: '[PRE21]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Caution
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These are expert functions! There are no validations as to whether valid PDF
    objects, xrefs, etc. are specified. As with other low-level methods there is the
    risk to render the PDF, or parts of it unusable.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是专家级功能！并没有验证是否指定了有效的 PDF 对象、xrefs 等。与其他低级方法一样，渲染 PDF 或其中的部分无法使用的风险存在。
- en: Do you have any feedback on this page?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对此页面有任何反馈吗？
- en: '* * *'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本软件按原样提供，不附带任何明示或暗示的保证。此软件根据许可分发，未经许可明确授权，不得复制、修改或分发。有关更多信息，请参阅[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)上的许可信息或联系
    Artifex Software Inc.，39 Mesa Street，Suite 108A，San Francisco CA 94129，United
    States。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档涵盖了所有版本直至 1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
- en: How to Iterate through the [`xref`](glossary.html#xref "xref") Table
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何遍历[`xref`](glossary.html#xref "xref")表
- en: 'A PDF’s [`xref`](glossary.html#xref "xref") table is a list of all objects
    defined in the file. This table may easily contain many thousands of entries –
    the manual [Adobe PDF References](app3.html#adobemanual) for example has 127,000
    objects. Table entry “0” is reserved and must not be touched. The following script
    loops through the [`xref`](glossary.html#xref "xref") table and prints each object’s
    definition:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 的[`xref`](glossary.html#xref "xref")表是文件中定义的所有对象的列表。此表可能很容易包含许多条目 - 例如，手册
    [Adobe PDF References](app3.html#adobemanual) 有 127,000 个对象。表条目“0”已保留，不得触摸。以下脚本循环遍历[`xref`](glossary.html#xref
    "xref")表并打印每个对象的定义：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This produces the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A PDF object definition is an ordinary ASCII string.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 对象定义是普通的 ASCII 字符串。
- en: How to Handle Object Streams
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理对象流
- en: Some object types contain additional data apart from their object definition.
    Examples are images, fonts, embedded files or commands describing the appearance
    of a page.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一些对象类型除了其对象定义之外还包含其他数据。例如，图像、字体、嵌入文件或描述页面外观的命令。
- en: Objects of these types are called “stream objects”. PyMuPDF allows reading an
    object’s stream via method [`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream") with the object’s [`xref`](glossary.html#xref "xref")
    as an argument. It is also possible to write back a modified version of a stream
    using [`Document.update_stream()`](document.html#Document.update_stream "Document.update_stream").
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的对象称为“流对象”。PyMuPDF 允许通过方法[`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream")读取对象的流，其中对象的[`xref`](glossary.html#xref "xref")作为参数。还可以使用[`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream")写回修改后的流的版本。
- en: 'Assume that the following snippet wants to read all streams of a PDF for whatever
    reason:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设以下代码片段想要出于任何原因读取 PDF 的所有流：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[`Document.xref_stream()`](document.html#Document.xref_stream "Document.xref_stream")
    automatically returns a stream decompressed as a bytes object – and [`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream") automatically compresses it if beneficial.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Document.xref_stream()`](document.html#Document.xref_stream "Document.xref_stream")自动返回解压缩为字节对象的流
    - 如果有利，[`Document.update_stream()`](document.html#Document.update_stream "Document.update_stream")会自动压缩它。'
- en: How to Handle Page Contents
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何处理页面内容
- en: A PDF page can have zero or multiple [`contents`](glossary.html#contents "contents")
    objects. These are stream objects describing **what** appears **where** and **how**
    on a page (like text and images). They are written in a special mini-language
    described e.g. in chapter “APPENDIX A - Operator Summary” on page 643 of the [Adobe
    PDF References](app3.html#adobemanual).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 页面可以有零个或多个[`contents`](glossary.html#contents "contents")对象。这些是描述页面上出现的内容的流对象（如文本和图像）。它们是用特殊的迷你语言编写的，例如在
    [Adobe PDF References](app3.html#adobemanual) 的第 643 页的第“附录 A - 运算符摘要”中描述。
- en: Every PDF reader application must be able to interpret the contents syntax to
    reproduce the intended appearance of the page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 PDF 阅读器应用程序必须能够解释内容语法，以重现页面的预期外观。
- en: If multiple [`contents`](glossary.html#contents "contents") objects are provided,
    they must be interpreted in the specified sequence in exactly the same way as
    if they were provided as a concatenation of the several.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提供了多个[`contents`](glossary.html#contents "contents")对象，则必须按照指定顺序解释它们，就像它们是几个对象的串联一样。
- en: 'There are good technical arguments for having multiple [`contents`](glossary.html#contents
    "contents") objects:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个[`contents`](glossary.html#contents "contents")对象的技术优势：
- en: It is a lot easier and faster to just add new [`contents`](glossary.html#contents
    "contents") objects than maintaining a single big one (which entails reading,
    decompressing, modifying, recompressing, and rewriting it for each change).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的[`contents`](glossary.html#contents "contents")对象比维护一个单一的大对象要简单得多，速度也更快（因为每次更改都需要读取、解压缩、修改、重新压缩和重写）。
- en: When working with incremental updates, a modified big [`contents`](glossary.html#contents
    "contents") object will bloat the update delta and can thus easily negate the
    efficiency of incremental saves.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理增量更新时，修改过的大[`contents`](glossary.html#contents "contents")对象会使更新增量膨胀，因此很容易抵消增量保存的效率。
- en: For example, PyMuPDF adds new, small [`contents`](glossary.html#contents "contents")
    objects in methods [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image"),
    [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page") and
    the [Shape](shape.html#shape) methods.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，PyMuPDF在[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")，[`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page")方法和[Shape](shape.html#shape)方法中添加了新的小[`contents`](glossary.html#contents
    "contents")对象。
- en: 'However, there are also situations when a **single** [`contents`](glossary.html#contents
    "contents") object is beneficial: it is easier to interpret and more compressible
    than multiple smaller ones.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，单个[`contents`](glossary.html#contents "contents")对象也是有利的：它比多个较小的对象更易于解释，且更易于压缩。
- en: 'Here are two ways of combining multiple contents of a page:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是组合页面多个内容的两种方法：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The clean function [`Page.clean_contents()`](functions.html#Page.clean_contents
    "Page.clean_contents") does a lot more than just glueing [`contents`](glossary.html#contents
    "contents") objects: it also corrects and optimizes the PDF operator syntax of
    the page and removes any inconsistencies with the page’s object definition.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 清理函数[`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")不仅粘合[`contents`](glossary.html#contents
    "contents")对象，还会修正和优化页面的PDF操作符语法，并删除页面对象定义的任何不一致之处。
- en: How to Access the PDF Catalog
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问PDF目录
- en: 'This is a central (“root”) object of a PDF. It serves as a starting point to
    reach important other objects and it also contains some global options for the
    PDF:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PDF的中心（“根”）对象。它作为到达重要其他对象的起点，并且还包含PDF的一些全局选项：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Indentation, line breaks and comments are inserted here for clarification purposes
    only and will not normally appear. For more information on the PDF catalog see
    section 7.7.2 on page 71 of the [Adobe PDF References](app3.html#adobemanual).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进、换行和注释仅为澄清目的而插入，通常不会显示。有关PDF目录的更多信息，请参见[Adobe PDF References](app3.html#adobemanual)第71页的7.7.2节。
- en: How to Access the PDF File Trailer
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问PDF文件尾
- en: 'The trailer of a PDF file is a [`dictionary`](glossary.html#dictionary "dictionary")
    located towards the end of the file. It contains special objects, and pointers
    to important other information. See [Adobe PDF References](app3.html#adobemanual)
    p. 42\. Here is an overview:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: PDF文件的尾部是一个位于文件末尾的[`dictionary`](glossary.html#dictionary "dictionary")。它包含特殊对象和指向重要其他信息的指针。请参见[Adobe
    PDF References](app3.html#adobemanual)第42页。以下是一个概述：
- en: '| **Key** | **Type** | **Value** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **类型** | **值** |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Size | int | Number of entries in the cross-reference table + 1. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 大小 | 整数 | 交叉引用表中的条目数 + 1。 |'
- en: '| Prev | int | Offset to previous [`xref`](glossary.html#xref "xref") section
    (indicates incremental updates). |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 前 | 整数 | 指向前一个[`xref`](glossary.html#xref "xref")部分的偏移量（指示增量更新）。 |'
- en: '| Root | dictionary | (indirect) Pointer to the catalog. See previous section.
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 根 | 字典 | （间接）指向目录的指针。参见前一节。 |'
- en: '| Encrypt | dictionary | Pointer to encryption object (encrypted files only).
    |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 加密 | 字典 | 指向加密对象的指针（仅加密文件）。 |'
- en: '| Info | dictionary | (indirect) Pointer to information (metadata). |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 信息 | 字典 | （间接）指向信息（元数据）的指针。 |'
- en: '| ID | array | File identifier consisting of two byte strings. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| ID | 数组 | 由两个字节字符串组成的文件标识符。 |'
- en: '| XRefStm | int | Offset of a cross-reference stream. See [Adobe PDF References](app3.html#adobemanual)
    p. 49. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| XRefStm | int | 交叉引用流的偏移量。参见[Adobe PDF 参考手册](app3.html#adobemanual) 第49页。
    |'
- en: Access this information via PyMuPDF with [`Document.pdf_trailer()`](document.html#Document.pdf_trailer
    "Document.pdf_trailer") or, equivalently, via [`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object") using -1 instead of a valid [`xref`](glossary.html#xref
    "xref") number.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 PyMuPDF 使用 [`Document.pdf_trailer()`](document.html#Document.pdf_trailer
    "Document.pdf_trailer") 或者等效地使用 [`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object")（使用 -1 而不是有效的 [`xref`](glossary.html#xref "xref") 编号）访问此信息。
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How to Access XML Metadata
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何访问 XML 元数据
- en: A PDF may contain XML metadata in addition to the standard metadata format.
    In fact, most PDF viewer or modification software adds this type of information
    when saving the PDF (Adobe, Nitro PDF, PDF-XChange, etc.).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 可以包含除标准元数据格式外的 XML 元数据。事实上，大多数 PDF 查看器或修改软件在保存 PDF 时添加此类信息（Adobe、Nitro PDF、PDF-XChange
    等）。
- en: PyMuPDF has no way to **interpret or change** this information directly, because
    it contains no XML features. XML metadata is however stored as a [`stream`](glossary.html#stream
    "stream") object, so it can be read, modified with appropriate software and written
    back.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: PyMuPDF 无法直接**解释或更改**此信息，因为它不包含任何 XML 功能。但是，XML 元数据作为[`stream`](glossary.html#stream
    "stream")对象存储，因此可以使用适当的软件进行读取、修改和重新写入。
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using some XML package, the XML data can be interpreted and / or modified and
    then stored back. The following also works, if the PDF previously had no XML metadata:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用某些 XML 软件包，可以解释和 / 或修改 XML 数据，然后存储回来。如果 PDF 之前没有 XML 元数据，以下内容也适用
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to Extend PDF Metadata
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何扩展 PDF 元数据
- en: 'Attribute [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    is designed so it works for all [supported document types](how-to-open-a-file.html#supported-file-types)
    in the same way: it is a Python dictionary with a **fixed set of key-value pairs**.
    Correspondingly, [`Document.set_metadata()`](document.html#Document.set_metadata
    "Document.set_metadata") only accepts standard keys.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 [`Document.metadata`](document.html#Document.metadata "Document.metadata")
    设计成对所有[支持的文档类型](how-to-open-a-file.html#supported-file-types)都起作用：它是一个带有一组**固定键值对**的
    Python 字典。相应地，[`Document.set_metadata()`](document.html#Document.set_metadata
    "Document.set_metadata") 仅接受标准键。
- en: However, PDFs may contain items not accessible like this. Also, there may be
    reasons to store additional information, like copyrights. Here is a way to handle
    **arbitrary metadata items** by using PyMuPDF low-level functions.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，PDF 可能包含无法像这样访问的项目。此外，可能存在存储额外信息的原因，例如版权信息。以下是使用 PyMuPDF 低级函数处理**任意元数据项**的方法。
- en: 'As an example, look at this standard metadata output of some PDF:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，查看某些 PDF 的标准元数据输出：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the following code to see **all items** stored in the metadata object:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码查看存储在元数据对象中的**所有项**：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '*Vice versa*, you can also **store private metadata items** in a PDF. It is
    your responsibility to make sure that these items conform to PDF specifications
    - especially they must be (unicode) strings. Consult section 14.3 (p. 548) of
    the [Adobe PDF References](app3.html#adobemanual) for details and caveats:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*反之亦然*，您还可以在 PDF 中**存储私有元数据项**。您有责任确保这些项符合 PDF 规范 - 特别是它们必须是（unicode）字符串。有关详细信息和注意事项，请参阅[Adobe
    PDF 参考手册](app3.html#adobemanual) 第14.3节（第548页）：'
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To delete selected keys, use `doc.xref_set_key(xref, "mykey", "null")`. As explained
    in the next section, string “null” is the PDF equivalent to Python’s `None`. A
    key with that value will be treated as not being specified – and physically removed
    in garbage collections.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除选定的键，请使用 `doc.xref_set_key(xref, "mykey", "null")`。如下一节所述，字符串“null”是 Python
    的 `None` 的 PDF 等效项。具有该值的键将被视为未指定，并在垃圾回收中物理删除。
- en: How to Read and Update PDF Objects
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何读取和更新 PDF 对象
- en: There also exist granular, elegant ways to access and manipulate selected PDF
    [`dictionary`](glossary.html#dictionary "dictionary") keys.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 还有精细、优雅的方式来访问和操作选定的 PDF [`dictionary`](glossary.html#dictionary "dictionary")
    键。
- en: '[`Document.xref_get_keys()`](document.html#Document.xref_get_keys "Document.xref_get_keys")
    returns the PDF keys of the object at [`xref`](glossary.html#xref "xref"):'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Document.xref_get_keys()`](document.html#Document.xref_get_keys "Document.xref_get_keys")
    返回对象在 [`xref`](glossary.html#xref "xref") 处的 PDF 键：'
- en: '[PRE33]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Compare with the full object definition:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与完整对象定义进行比较：
- en: '[PRE34]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Single keys can also be accessed directly via [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key"). The value **always is a string** together with type
    information, that helps with interpreting it:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个键也可以直接通过[`Document.xref_get_key()`](document.html#Document.xref_get_key "Document.xref_get_key")访问。该值**始终是一个字符串**，包含有助于解释的类型信息：
- en: '[PRE35]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Here is a full listing of the above page keys:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是上述页面键的完整列表：
- en: '[PRE36]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: An undefined key inquiry returns `('null', 'null')` – PDF object type `null`
    corresponds to `None` in Python. Similar for the booleans `true` and `false`.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未定义的键查询返回`('null', 'null')` —— PDF 对象类型`null`对应于 Python 中的`None`。布尔值`true`和`false`也是类似的。
- en: 'Let us add a new key to the page definition that sets its rotation to 90 degrees
    (you are aware that there actually exists [`Page.set_rotation()`](page.html#Page.set_rotation
    "Page.set_rotation") for this?):'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们向页面定义添加一个新的键，将其旋转至 90 度（您知道实际上存在[`Page.set_rotation()`](page.html#Page.set_rotation
    "Page.set_rotation")来完成此操作吗？）：
- en: '[PRE37]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This method can also be used to remove a key from the [`xref`](glossary.html#xref
    "xref") dictionary by setting its value to `null`: The following will remove the
    rotation specification from the page: `doc.xref_set_key(page.xref, "Rotate", "null")`.
    Similarly, to remove all links, annotations and fields from a page, use `doc.xref_set_key(page.xref,
    "Annots", "null")`. Because `Annots` by definition is an array, setting en empty
    array with the statement `doc.xref_set_key(page.xref, "Annots", "[]")` would do
    the same job in this case.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将其值设置为`null`，此方法还可用于从[`xref`](glossary.html#xref "xref")字典中删除一个键：以下示例将从页面中删除旋转规范：`doc.xref_set_key(page.xref,
    "Rotate", "null")`。类似地，要从页面中删除所有链接、注释和字段，使用`doc.xref_set_key(page.xref, "Annots",
    "null")`。因为`Annots`按定义是一个数组，在这种情况下，通过语句`doc.xref_set_key(page.xref, "Annots",
    "[]")`也会达到同样的效果。
- en: 'PDF dictionaries can be hierarchically nested. In the following page object
    definition both, [Font](font.html#font) and `XObject` are subdictionaries of `Resources`:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF 字典可以层次化嵌套。在以下页面对象定义中，[字体](font.html#font)和`XObject`都是`Resources`的子字典：
- en: '[PRE38]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The above situation **is supported** by methods [`Document.xref_set_key()`](document.html#Document.xref_set_key
    "Document.xref_set_key") and [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key"): use a path-like notation to point at the required key.
    For example, to retrieve the value of key `Im1` above, specify the complete chain
    of dictionaries “above” it in the key argument: `"Resources/XObject/Im1"`:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述情况由方法[`Document.xref_set_key()`](document.html#Document.xref_set_key "Document.xref_set_key")和[`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key")支持：使用类似路径的表示法指向所需的键。例如，要检索上述键`Im1`的值，请在键参数中指定完整的字典链“上方”："Resources/XObject/Im1"。
- en: '[PRE39]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The path notation can also be used to **directly set a value**: use the following
    to let `Im1` point to a different object:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径标记还可用于**直接设置数值**：使用以下方式让`Im1`指向不同的对象。
- en: '[PRE40]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Be aware, that **no semantic checks** whatsoever will take place here: if the
    PDF has no xref 9999, it won’t be detected at this point.'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，这里**不会执行任何语义检查**：如果 PDF 中没有 xref 9999，则此处不会检测到。
- en: 'If a key does not exist, it will be created by setting its value. Moreover,
    if any intermediate keys do not exist either, they will also be created as necessary.
    The following creates an array `D` several levels below the existing dictionary
    `A`. Intermediate dictionaries `B` and `C` are automatically created:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果键不存在，将通过设置其值来创建它。此外，如果任何中间键也不存在，则会根据需要创建它们。以下示例在现有字典`A`的几个层次下创建了数组`D`。中间字典`B`和`C`会自动创建：
- en: '[PRE41]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When setting key values, basic **PDF syntax checking** will be done by MuPDF.
    For example, new keys can only be created **below a dictionary**. The following
    tries to create some new string item `E` below the previously created array `D`:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置键值时，MuPDF 将进行基本的**PDF 语法检查**。例如，新键只能在**字典的下方**创建。以下尝试在先前创建的数组`D`下创建一些新的字符串项`E`：
- en: '[PRE42]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'It is also **not possible**, to create a key if some higher level key is an
    **“indirect”** object, i.e. an xref. In other words, xrefs can only be modified
    directly and not implicitly via other objects referencing them:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也**不可能**在某些更高级别键是**“间接”**对象（即 xref）的情况下创建一个键。换句话说，xref 只能直接修改，而不能通过引用它们的其他对象隐式修改：
- en: '[PRE43]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Caution
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: These are expert functions! There are no validations as to whether valid PDF
    objects, xrefs, etc. are specified. As with other low-level methods there is the
    risk to render the PDF, or parts of it unusable.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是专家功能！不验证PDF对象、xrefs等是否有效。与其他低级方法一样，有可能使PDF或其部分无法使用。
- en: Do you have any feedback on this page?
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 您对本页有任何反馈吗？
- en: '* * *'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此软件按原样提供，不提供任何明示或暗示的担保。此软件在许可下分发，未经许可明确授权，不得复制、修改或分发。请参阅许可信息，访问[artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)，或联系美国加利福尼亚州旧金山94129
    Mesa街39号108A套房Artifex Software Inc.获取更多信息。
- en: This documentation covers all versions up to 1.24.4.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此文档涵盖所有版本，直至1.24.4。
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
