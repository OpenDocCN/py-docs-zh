- en: Association Proxy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关联代理
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html](https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html](https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html)
- en: '`associationproxy` is used to create a read/write view of a target attribute
    across a relationship. It essentially conceals the usage of a “middle” attribute
    between two endpoints, and can be used to cherry-pick fields from both a collection
    of related objects or scalar relationship. or to reduce the verbosity of using
    the association object pattern. Applied creatively, the association proxy allows
    the construction of sophisticated collections and dictionary views of virtually
    any geometry, persisted to the database using standard, transparently configured
    relational patterns.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`associationproxy` 用于在关系之间创建目标属性的读/写视图。它实质上隐藏了两个端点之间的“中间”属性的使用，并且可以用于从相关对象的集合或标量关系中挑选字段，或者减少使用关联对象模式时的冗长性。创造性地应用，关联代理允许构建复杂的集合和字典视图，几乎可以对任何几何形状进行持久化，使用标准、透明配置的关系模式保存到数据库中。'
- en: '## Simplifying Scalar Collections'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 简化标量集合'
- en: 'Consider a many-to-many mapping between two classes, `User` and `Keyword`.
    Each `User` can have any number of `Keyword` objects, and vice-versa (the many-to-many
    pattern is described at [Many To Many](../basic_relationships.html#relationships-many-to-many)).
    The example below illustrates this pattern in the same way, with the exception
    of an extra attribute added to the `User` class called `User.keywords`:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个类`User`和`Keyword`之间的多对多映射。每个`User`可以拥有任意数量的`Keyword`对象，反之亦然（多对多模式在[Many
    To Many](../basic_relationships.html#relationships-many-to-many)中有描述）。下面的示例以相同的方式说明了这种模式，唯一的区别是在`User`类中添加了一个额外的属性`User.keywords`：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the above example, [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") is applied to the `User`
    class to produce a “view” of the `kw` relationship, which exposes the string value
    of `.keyword` associated with each `Keyword` object. It also creates new `Keyword`
    objects transparently when strings are added to the collection:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")应用于`User`类，以生成`kw`关系的“视图”，该视图公开与每个`Keyword`对象关联的`.keyword`的字符串值。当向集合添加字符串时，它还会透明地创建新的`Keyword`对象：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To understand the mechanics of this, first review the behavior of `User` and
    `Keyword` without using the `.keywords` association proxy. Normally, reading and
    manipulating the collection of “keyword” strings associated with `User` requires
    traversal from each collection element to the `.keyword` attribute, which can
    be awkward. The example below illustrates the identical series of operations applied
    without using the association proxy:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一点的机制，首先回顾一下在不使用`.keywords`关联代理的情况下，`User`和`Keyword`的行为。通常，阅读和操作与`User`关联的“keyword”字符串集合需要从每个集合元素遍历到`.keyword`属性，这可能很麻烦。下面的示例说明了在不使用关联代理的情况下应用相同系列操作的情况：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object produced by the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") function is an instance of
    a [Python descriptor](https://docs.python.org/howto/descriptor.html), and is not
    considered to be “mapped” by the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in any way. Therefore, it’s always indicated inline within
    the class definition of the mapped class, regardless of whether Declarative or
    Imperative mappings are used.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")函数生成的[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象是[Python描述符](https://docs.python.org/howto/descriptor.html)的一个实例，并且不被[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")以任何方式视为“映射”。因此，无论是使用声明式还是命令式映射，它始终内联显示在映射类的类定义中。
- en: The proxy functions by operating upon the underlying mapped attribute or collection
    in response to operations, and changes made via the proxy are immediately apparent
    in the mapped attribute, as well as vice versa. The underlying attribute remains
    fully accessible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代理通过对操作响应中的底层映射属性或集合进行操作，通过代理进行的更改立即反映在映射属性中，反之亦然。底层属性仍然完全可访问。
- en: When first accessed, the association proxy performs introspection operations
    on the target collection so that its behavior corresponds correctly. Details such
    as if the locally proxied attribute is a collection (as is typical) or a scalar
    reference, as well as if the collection acts like a set, list, or dictionary is
    taken into account, so that the proxy should act just like the underlying collection
    or attribute does.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一次访问时，关联代理对目标集合执行内省操作，以便其行为正确对应。细节，例如本地代理的属性是否是集合（通常情况下是这样）或标量引用，以及集合是否像集合、列表或字典一样行事，都被考虑在内，这样代理应该像底层集合或属性一样行事。
- en: '### Creation of New Values'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '### 创造新价值'
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个列表 `append()` 事件（或集合 `add()`，字典 `__setitem__()`，或标量赋值事件）被关联代理拦截时，它使用它的构造函数实例化一个新的“中间”对象实例，将给定值作为单个参数传递。在我们上面的示例中，一个像这样的操作：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Is translated by the association proxy into the operation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 被关联代理翻译成以下操作：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例有效的原因在于我们已经设计了 `Keyword` 的构造函数以接受一个单一的位置参数 `keyword`。对于那些不可行的单参数构造函数的情况，关联代理的创建行为可以使用
    [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") 参数进行自定义，该参数引用了一个可调用对象（即 Python
    函数），该对象将根据单一参数产生一个新的对象实例。下面我们使用一个典型的 lambda 函数来说明这一点：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `creator` function accepts a single argument in the case of a list- or set-
    based collection, or a scalar attribute. In the case of a dictionary-based collection,
    it accepts two arguments, “key” and “value”. An example of this is below in [Proxying
    to Dictionary Based Collections](#proxying-dictionaries).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个基于列表或集合的集合，或者是一个标量属性的情况下，`creator` 函数接受一个参数。在基于字典的集合的情况下，它接受两个参数，“key” 和
    “value”。下面是一个示例，[代理到基于字典的集合](#proxying-dictionaries)。
- en: Simplifying Association Objects
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化关联对象
- en: The “association object” pattern is an extended form of a many-to-many relationship,
    and is described at [Association Object](../basic_relationships.html#association-pattern).
    Association proxies are useful for keeping “association objects” out of the way
    during regular use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “关联对象”模式是一种扩展形式的多对多关系，并在[关联对象](../basic_relationships.html#association-pattern)中描述。关联代理对于在常规使用过程中使“关联对象”保持不受干扰是很有用的。
- en: 'Suppose our `user_keyword` table above had additional columns which we’d like
    to map explicitly, but in most cases we don’t require direct access to these attributes.
    Below, we illustrate a new mapping which introduces the `UserKeywordAssociation`
    class, which is mapped to the `user_keyword` table illustrated earlier. This class
    adds an additional column `special_key`, a value which we occasionally want to
    access, but not in the usual case. We create an association proxy on the `User`
    class called `keywords`, which will bridge the gap from the `user_keyword_associations`
    collection of `User` to the `.keyword` attribute present on each `UserKeywordAssociation`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们上面的 `user_keyword` 表有额外的列，我们希望显式地映射这些列，但在大多数情况下，我们不需要直接访问这些属性。下面，我们展示了一个新的映射，介绍了
    `UserKeywordAssociation` 类，它映射到上面展示的 `user_keyword` 表。这个类添加了一个额外的列 `special_key`，这个值我们偶尔想要访问，但不是在通常情况下。我们在
    `User` 类上创建了一个名为 `keywords` 的关联代理，它将弥合从 `User` 的 `user_keyword_associations` 集合到每个
    `UserKeywordAssociation` 上的 `.keyword` 属性的差距：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the above configuration, we can operate upon the `.keywords` collection
    of each `User` object, each of which exposes a collection of `Keyword` objects
    that are obtained from the underlying `UserKeywordAssociation` elements:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述配置，我们可以操作每个 `User` 对象的 `.keywords` 集合，其中每个对象都公开了从底层 `UserKeywordAssociation`
    元素获取的 `Keyword` 对象集合：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This example is in contrast to the example illustrated previously at [Simplifying
    Scalar Collections](#associationproxy-scalar-collections), where the association
    proxy exposed a collection of strings, rather than a collection of composed objects.
    In this case, each `.keywords.append()` operation is equivalent to:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例与先前在[Simplifying Scalar Collections](#associationproxy-scalar-collections)中说明的示例形成对比，后者的关联代理公开了一个字符串集合，而不是一个组合对象集合。在这种情况下，每个`.keywords.append()`操作等效于：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `UserKeywordAssociation` object has two attributes that are both populated
    within the scope of the `append()` operation of the association proxy; `.keyword`,
    which refers to the `Keyword` object, and `.user`, which refers to the `User`
    object. The `.keyword` attribute is populated first, as the association proxy
    generates a new `UserKeywordAssociation` object in response to the `.append()`
    operation, assigning the given `Keyword` instance to the `.keyword` attribute.
    Then, as the `UserKeywordAssociation` object is appended to the `User.user_keyword_associations`
    collection, the `UserKeywordAssociation.user` attribute, configured as `back_populates`
    for `User.user_keyword_associations`, is initialized upon the given `UserKeywordAssociation`
    instance to refer to the parent `User` receiving the append operation. The `special_key`
    argument above is left at its default value of `None`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserKeywordAssociation`对象有两个属性，两者都在关联代理的`append()`操作的范围内填充；`.keyword`指的是`Keyword`对象，`.user`指的是`User`对象。`.keyword`属性首先填充，因为关联代理响应于`.append()`操作生成新的`UserKeywordAssociation`对象，将给定的`Keyword`实例分配给`.keyword`属性。然后，随着`UserKeywordAssociation`对象附加到`User.user_keyword_associations`集合，针对`User.user_keyword_associations`的`back_populates`配置的`UserKeywordAssociation.user`属性在给定的`UserKeywordAssociation`实例上进行初始化，以指向接收附加操作的父`User`。上面的`special_key`参数保持其默认值为`None`。'
- en: 'For those cases where we do want `special_key` to have a value, we create the
    `UserKeywordAssociation` object explicitly. Below we assign all three attributes,
    wherein the assignment of `.user` during construction, has the effect of appending
    the new `UserKeywordAssociation` to the `User.user_keyword_associations` collection
    (via the relationship):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些我们确实希望`special_key`具有值的情况，我们明确创建`UserKeywordAssociation`对象。在下面，我们分配了所有三个属性，其中在构造过程中分配`.user`的效果是将新的`UserKeywordAssociation`附加到`User.user_keyword_associations`集合（通过关系）：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The association proxy returns to us a collection of `Keyword` objects represented
    by all these operations:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理将以这些操作代表的`Keyword`对象集合返回给我们：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '## Proxying to Dictionary Based Collections'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '## 代理到基于字典的集合'
- en: The association proxy can proxy to dictionary based collections as well. SQLAlchemy
    mappings usually use the [`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") collection type to create dictionary collections,
    as well as the extended techniques described in [Custom Dictionary-Based Collections](../collection_api.html#id1).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理也可以代理到基于字典的集合。SQLAlchemy映射通常使用[`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")集合类型来创建字典集合，以及[Custom Dictionary-Based Collections](../collection_api.html#id1)中描述的扩展技术。
- en: The association proxy adjusts its behavior when it detects the usage of a dictionary-based
    collection. When new values are added to the dictionary, the association proxy
    instantiates the intermediary object by passing two arguments to the creation
    function instead of one, the key and the value. As always, this creation function
    defaults to the constructor of the intermediary class, and can be customized using
    the `creator` argument.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到基于字典的集合的使用时，关联代理会调整其行为。当新值添加到字典时，关联代理通过将两个参数传递给创建函数来实例化中间对象，而不是一个，即键和值。与往常一样，此创建函数默认为中间类的构造函数，并且可以使用`creator`参数进行定制。
- en: 'Below, we modify our `UserKeywordAssociation` example such that the `User.user_keyword_associations`
    collection will now be mapped using a dictionary, where the `UserKeywordAssociation.special_key`
    argument will be used as the key for the dictionary. We also apply a `creator`
    argument to the `User.keywords` proxy so that these values are assigned appropriately
    when new elements are added to the dictionary:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，我们修改了我们的`UserKeywordAssociation`示例，以便`User.user_keyword_associations`集合现在将使用字典映射，其中`UserKeywordAssociation.special_key`参数将用作字典的键。我们还对`User.keywords`代理应用了一个`creator`参数，以便在将新元素添加到字典时适当地分配这些值：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We illustrate the `.keywords` collection as a dictionary, mapping the `UserKeywordAssociation.special_key`
    value to `Keyword` objects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`.keywords`集合表示为一个字典，将`UserKeywordAssociation.special_key`值映射到`Keyword`对象：
- en: '[PRE12]  ## Composite Association Proxies'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE12]  ## 复合关联代理'
- en: 'Given our previous examples of proxying from relationship to scalar attribute,
    proxying across an association object, and proxying dictionaries, we can combine
    all three techniques together to give `User` a `keywords` dictionary that deals
    strictly with the string value of `special_key` mapped to the string `keyword`.
    Both the `UserKeywordAssociation` and `Keyword` classes are entirely concealed.
    This is achieved by building an association proxy on `User` that refers to an
    association proxy present on `UserKeywordAssociation`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们之前关于从关系到标量属性的代理、跨关联对象的代理以及代理字典的示例，我们可以将所有三种技术结合起来，为`User`提供一个严格处理`special_key`字符串值映射到`keyword`字符串的`keywords`字典。`UserKeywordAssociation`和`Keyword`类完全被隐藏。这是通过在`User`上建立一个关联到`UserKeywordAssociation`上存在的关联代理来实现的：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`User.keywords` is now a dictionary of string to string, where `UserKeywordAssociation`
    and `Keyword` objects are created and removed for us transparently using the association
    proxy. In the example below, we illustrate usage of the assignment operator, also
    appropriately handled by the association proxy, to apply a dictionary value to
    the collection at once:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`User.keywords` 现在是一个字符串到字符串的字典，`UserKeywordAssociation`和`Keyword`对象会透明地为我们创建和删除，使用关联代理。在下面的示例中，我们展示了赋值运算符的使用，也由关联代理适当处理，一次将字典值应用到集合中：'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: One caveat with our example above is that because `Keyword` objects are created
    for each dictionary set operation, the example fails to maintain uniqueness for
    the `Keyword` objects on their string name, which is a typical requirement for
    a tagging scenario such as this one. For this use case the recipe [UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject),
    or a comparable creational strategy, is recommended, which will apply a “lookup
    first, then create” strategy to the constructor of the `Keyword` class, so that
    an already existing `Keyword` is returned if the given name is already present.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面示例的一个注意事项是，由于为每个字典设置操作创建了`Keyword`对象，所以示例未能保持`Keyword`对象在其字符串名称上的唯一性，这是像这种标记场景的典型要求。对于这种用例，建议使用[UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject)这个配方，或类似的创建策略，它将应用“先查找，然后创建”策略到`Keyword`类的构造函数，以便如果给定名称已经存在，则返回已经存在的`Keyword`。
- en: Querying with Association Proxies
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用关联代理进行查询
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    features simple SQL construction capabilities which work at the class level in
    a similar way as other ORM-mapped attributes, and provide rudimentary filtering
    support primarily based on the SQL `EXISTS` keyword.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    具有简单的 SQL 构建能力，类似于其他 ORM 映射属性在类级别上的工作方式，并且基本上基于 SQL `EXISTS` 关键字提供了基本的过滤支持。'
- en: Note
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The primary purpose of the association proxy extension is to allow for improved
    persistence and object-access patterns with mapped object instances that are already
    loaded. The class-bound querying feature is of limited use and will not replace
    the need to refer to the underlying attributes when constructing SQL queries with
    JOINs, eager loading options, etc.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理扩展的主要目的是允许改进已加载的映射对象实例的持久性和对象访问模式。类绑定查询功能的用途有限，并且不会取代在构建具有 JOINs、急加载选项等
    SQL 查询时需要引用底层属性的需求。
- en: 'For this section, assume a class with both an association proxy that refers
    to a column, as well as an association proxy that refers to a related object,
    as in the example mapping below:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，假设一个类既有一个关联到列的关联代理，又有一个关联到相关对象的关联代理，就像下面的映射示例一样：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The SQL generated takes the form of a correlated subquery against the EXISTS
    SQL operator so that it can be used in a WHERE clause without the need for additional
    modifications to the enclosing query. If the immediate target of an association
    proxy is a **mapped column expression**, standard column operators can be used
    which will be embedded in the subquery. For example a straight equality operator:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 SQL 采用了针对 EXISTS SQL 操作符的相关子查询的形式，以便在不需要对封闭查询进行额外修改的情况下在 WHERE 子句中使用。如果关联代理的直接目标是一个**映射的列表达式**，则可以使用标准列操作符，这些操作符将嵌入到子查询中。例如，一个直接的等式操作符：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'a LIKE operator:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 LIKE 操作符：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For association proxies where the immediate target is a **related object or
    collection, or another association proxy or attribute on the related object**,
    relationship-oriented operators can be used instead, such as [`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has") and [`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any"). The `User.keywords` attribute is in fact
    two association proxies linked together, so when using this proxy for generating
    SQL phrases, we get two levels of EXISTS subqueries:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于关联代理，其直接目标是**相关对象或集合，或相关对象上的另一个关联代理或属性**的情况，可以使用关系导向操作符，如 [`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has") 和 [`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any")。`User.keywords` 属性实际上是两个链接在一起的关联代理，因此在使用此代理生成
    SQL 短语时，我们得到两个级别的 EXISTS 子查询：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is not the most efficient form of SQL, so while association proxies can
    be convenient for generating WHERE criteria quickly, SQL results should be inspected
    and “unrolled” into explicit JOIN criteria for best use, especially when chaining
    association proxies together.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是 SQL 的最有效形式，因此，虽然关联代理可以方便快速生成 WHERE 条件，但应该检查 SQL 结果，并将其“展开”为明确的 JOIN 条件以获得最佳效果，特别是在将关联代理链接在一起时。
- en: 'Changed in version 1.3: Association proxy features distinct querying modes
    based on the type of target. See [AssociationProxy now provides standard column
    operators for a column-oriented target](../../changelog/migration_13.html#change-4351).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.3 版更改：根据目标类型，关联代理功能提供了不同的查询模式。请参阅 [关联代理现在为面向列的目标提供标准列操作符](../../changelog/migration_13.html#change-4351)。
- en: '## Cascading Scalar Deletes'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '## 级联标量删除'
- en: New in version 1.3.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 1.3 版中的新功能。
- en: 'Given a mapping as:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个映射如下：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'An assignment to `A.b` will generate an `AB` object:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `A.b` 的赋值将生成一个 `AB` 对象：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `A.b` association is scalar, and includes use of the parameter [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy"). When this parameter is enabled,
    setting `A.b` to `None` will remove `A.ab` as well:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`A.b` 关联是标量的，并包括使用参数 [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy")。当启用此参数时，将 `A.b` 设置为 `None`
    将同时移除 `A.ab`：'
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is not set, the association
    object `a.ab` above would remain in place.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当未设置 [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") 时，上述关联对象 `a.ab` 将保持不变。
- en: Note that this is not the behavior for collection-based association proxies;
    in that case, the intermediary association object is always removed when members
    of the proxied collection are removed. Whether or not the row is deleted depends
    on the relationship cascade setting.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是针对基于集合的关联代理的行为；在这种情况下，当删除代理集合的成员时，中间关联对象总是被移除。是否删除行取决于关系级联设置。
- en: See also
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascades](../cascades.html#unitofwork-cascades)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[级联](../cascades.html#unitofwork-cascades)'
- en: Scalar Relationships
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量关系
- en: 'The example below illustrates the use of the association proxy on the many
    side of of a one-to-many relationship, accessing attributes of a scalar object:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了在一对多关系的多方上使用关联代理，访问标量对象的属性：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A summary of the steps of `my_snack` can be printed using:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方式打印 `my_snack` 的步骤摘要：
- en: '[PRE23]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: API Documentation
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: '| Object Name | Description |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | 返回一个实现对目标属性的视图的Python属性，该属性引用目标对象的成员上的属性。 |'
- en: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | A
    descriptor that presents a read/write view of an object attribute. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | 一个描述符，提供对象属性的读写视图。
    |'
- en: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | An enumeration. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | 一个枚举。 |'
- en: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | A per-class object that serves class- and object-specific results. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | 一个每个类的对象，提供类和对象特定的结果。 |'
- en: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | 一个[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，它具有数据库列作为目标。 |'
- en: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | 一个[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，它具有一个对象作为目标。 |'
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个实现对目标属性的视图的Python属性，该属性引用目标的成员上的属性。
- en: The returned value is an instance of [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值是一个[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")的实例。
- en: Implements a Python property representing a relationship as a collection of
    simpler values, or a scalar value. The proxied property will mimic the collection
    type of the target (list, dict or set), or, in the case of a one to one relationship,
    a simple scalar value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个Python属性，表示关系作为一组更简单的值，或标量值。代理属性将模仿目标的集合类型（list、dict或set），或者在一对一关系的情况下，一个简单的标量值。
- en: 'Parameters:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target_collection` – Name of the attribute that is the immediate target. This
    attribute is typically mapped by [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") to link to a target collection, but can also be
    a many-to-one or non-scalar relationship.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_collection` – 立即目标的属性名称。该属性通常由[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")映射，链接到一个目标集合，但也可以是多对一或非标量关系。'
- en: '`attr` – Attribute on the associated instance or instances that are available
    on instances of the target object.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr` – 目标实例或实例上可用的关联实例上的属性。'
- en: '`creator` –'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` –'
- en: optional.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。
- en: Defines custom behavior when new items are added to the proxied collection.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义添加新项到代理集合时的自定义行为。
- en: By default, adding new items to the collection will trigger a construction of
    an instance of the target object, passing the given item as a positional argument
    to the target constructor. For cases where this isn’t sufficient, [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") can supply a callable that
    will construct the object in the appropriate way, given the item that was passed.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，向集合添加新项将触发构造目标对象的实例，将给定的项作为位置参数传递给目标构造函数。对于这些情况不足的情况，[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")可以提供一个可调用的函数，该函数将以适当的方式构造对象，给定传递的项。
- en: For list- and set- oriented collections, a single argument is passed to the
    callable. For dictionary oriented collections, two arguments are passed, corresponding
    to the key and value.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于列表和集合导向的集合，将一个参数传递给可调用对象。对于字典导向的集合，将传递两个参数，对应键和值。
- en: The [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") callable is also invoked
    for scalar (i.e. many-to-one, one-to-one) relationships. If the current value
    of the target relationship attribute is `None`, the callable is used to construct
    a new object. If an object value already exists, the given attribute value is
    populated onto that object.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")可调用对象也用于标量（即多对一，一对一）关系。如果目标关系属性的当前值为`None`，则使用可调用对象构造一个新对象。如果对象值已存在，则给定的属性值将填充到该对象上。'
- en: See also
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Creation of New Values](#associationproxy-creator)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[创建新值](#associationproxy-creator)'
- en: '`cascade_scalar_deletes` –'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade_scalar_deletes` –'
- en: when True, indicates that setting the proxied value to `None`, or deleting it
    via `del`, should also remove the source object. Only applies to scalar attributes.
    Normally, removing the proxied target will not remove the proxy source, as this
    object may have other state that is still to be kept.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，表示将代理值设置为`None`，或通过`del`删除时，也应删除源对象。仅适用于标量属性。通常，删除代理目标不会删除代理源，因为该对象可能还有其他状态需要保留。
- en: New in version 1.3.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.3中引入。
- en: See also
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascading Scalar Deletes](#cascade-scalar-deletes) - complete usage example'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[级联标量删除](#cascade-scalar-deletes) - 完整的使用示例'
- en: '`create_on_none_assignment` –'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_on_none_assignment` –'
- en: when True, indicates that setting the proxied value to `None` should **create**
    the source object if it does not exist, using the creator. Only applies to scalar
    attributes. This is mutually exclusive vs. the `assocation_proxy.cascade_scalar_deletes`.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，表示将代理值设置为`None`时应**创建**源对象（如果不存在），使用创建者。仅适用于标量属性。这与`assocation_proxy.cascade_scalar_deletes`互斥��
- en: New in version 2.0.18.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.18中引入。
- en: '`init` –'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应作为由数据类过程生成的`__init__()`方法的一部分。
- en: New in version 2.0.0b4.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中引入。
- en: '`repr` –'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repr` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the attribute established by this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") should be part of the `__repr__()`
    method as generated by the dataclass process.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定由此[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")建立的属性是否应作为由数据类过程生成的`__repr__()`方法的一部分。
- en: New in version 2.0.0b4.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中引入。
- en: '`default_factory` –'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_factory` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定一个默认值生成函数，该函数将作为由数据类过程生成的`__init__()`方法的一部分进行。
- en: New in version 2.0.0b4.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中引入。
- en: '`compare` –'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指示在为映射类生成`__eq__()`和`__ne__()`方法时，是否应包含此字段进行比较操作。
- en: New in version 2.0.0b4.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中引入。
- en: '`kw_only` –'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kw_only` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`
    method as generated by the dataclass process.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指示在为映射类生成`__init__()`方法时，是否应将此字段标记为仅关键字参数。
- en: New in version 2.0.0b4.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中引入。
- en: '`info` – optional, will be assigned to [`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") if present.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选，如果存在将分配给[`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info")。'
- en: 'The following additional parameters involve injection of custom behaviors within
    the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object and are for advanced use only:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下附加参数涉及在[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象中注入自定义行为，仅供高级使用：
- en: 'Parameters:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`getset_factory` –'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getset_factory` –'
- en: Optional. Proxied attribute access is automatically handled by routines that
    get and set values based on the attr argument for this proxy.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。代理属性访问由根据此代理的attr参数获取和设置值的例程自动处理。
- en: If you would like to customize this behavior, you may supply a getset_factory
    callable that produces a tuple of getter and setter functions. The factory is
    called with two arguments, the abstract type of the underlying collection and
    this proxy instance.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想要自定义此行为，可以提供一个getset_factory可调用对象，用于生成getter和setter函数的元组。工厂函数接受两个参数，即基础集合的抽象类型和此代理实例。
- en: '`proxy_factory` – Optional. The type of collection to emulate is determined
    by sniffing the target collection. If your collection type can’t be determined
    by duck typing or you’d like to use a different collection implementation, you
    may supply a factory function to produce those collections. Only applicable to
    non-scalar relationships.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy_factory` – 可选。要模拟的集合类型是通过嗅探目标集合确定的。如果您的集合类型无法通过鸭子类型确定，或者您想使用不同的集合实现，可以提供一个工厂函数来生成这些集合。仅适用于非标量关系。'
- en: '`proxy_bulk_set` – Optional, use with proxy_factory.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy_bulk_set` – 可选，与proxy_factory一起使用。'
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A descriptor that presents a read/write view of an object attribute.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个呈现对象属性的读/写视图的描述符。
- en: '**Members**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
- en: '**Class signature**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Construct a new [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object is typically constructed using the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") constructor function. See
    the description of [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") for a description of all
    parameters.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    对象通常使用 [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") 构造函数来构建。查看 [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") 的描述以获取所有参数的描述。'
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为`NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Return the internal state local to a specific mapped class.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定于特定映射类的内部状态。
- en: 'E.g., given a class `User`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，给定一个类`User`:'
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If we access this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") from [`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), and we want to view the target class
    for this proxy as mapped by `User`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")中访问此[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，并且我们希望查看由`User`映射的此代理的目标类：
- en: '[PRE33]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This returns an instance of [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that is specific to
    the `User` class. The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object remains agnostic of
    its parent class.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个特定于`User`类的[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")实例。[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象保持不对其父类进行操作。
- en: 'Parameters:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`class_` – the class that we are returning state for.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 我们正在返回其状态的类。'
- en: '`obj` – optional, an instance of the class that is required if the attribute
    refers to a polymorphic target, e.g. where we have to look at the type of the
    actual destination object to get the complete path.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 可选，如果属性引用多态目标，则需要类的实例，例如，我们必须查看实际目标对象的类型以获取完整路径。'
- en: 'New in version 1.3: - [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") no longer stores any state
    specific to a particular parent class; the state is now stored in per-class [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") objects.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本1.3开始新增: - [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")不再存储特定于特定父类的任何状态; 状态现在存储在每个类的[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")对象中。'
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '*inherited from the* `InspectionAttrInfo.info` *attribute of* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo")'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo") *的* `InspectionAttrInfo.info` *属性*'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象相关联的信息字典，允许将用户定义的数据与此[`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr")相关联。
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时生成。或者，它可以作为[`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")或[`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数的构造函数参数指定。
- en: See also
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
- en: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*inherited from the* `InspectionAttr.is_aliased_class` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_aliased_class` *属性*'
- en: True if this object is an instance of [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 的实例，则为真。
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 Python [描述符](../../glossary.html#term-descriptor)，则为真。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此处可能指的是许多类型之一。通常是一个 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，它代表 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 处理属性事件。但也可以是扩展类型，例如 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 或 [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 将引用一个常量，用于标识特定的子类型。
- en: See also
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")。'
- en: '[PRE38]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '*inherited from the* `InspectionAttr.is_bundle` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_bundle` *属性*。'
- en: True if this object is an instance of [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    的实例，则为真。
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*inherited from the* `InspectionAttr.is_clause_element` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_clause_element` *属性*。'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 的实例，则为真。
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*inherited from the* `InspectionAttr.is_instance` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_instance` *属性*。'
- en: True if this object is an instance of [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    的实例，则为真。
- en: '[PRE41]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*inherited from the* `InspectionAttr.is_mapper` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_mapper` *属性*。'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的实例，则为真。
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '*inherited from the* `InspectionAttr.is_property` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_property` *属性*。'
- en: True if this object is an instance of [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    的实例，则为真。
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '*inherited from the* `InspectionAttr.is_selectable` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_selectable` *属性*。'
- en: Return True if this object is an instance of [`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的实例，则返回True。
- en: '[PRE44]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: A per-class object that serves class- and object-specific results.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个每类对象，用于提供类和对象特定的结果。
- en: This is used by [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") when it is invoked in terms
    of a specific class or instance of a class, i.e. when it is used as a regular
    Python descriptor.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当以特定类或类实例的术语调用[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")时，即当它被用作常规 Python 描述符时，就会使用此功能。
- en: 'When referring to the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as a normal Python descriptor,
    the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") is the object that
    actually serves the information. Under normal circumstances, its presence is transparent:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为普通的 Python 描述符引用[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")时，[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")是实际提供信息的对象。在正常情况下，其存在是透明的：
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the special case that the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object is being accessed directly,
    in order to get an explicit handle to the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"), use the [`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") method:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当直接访问[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象时，为了获取到[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")的显式句柄，请使用[`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class")方法：
- en: '[PRE51]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: New in version 1.3.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.3版中新增。
- en: '**Members**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
- en: '[PRE52]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__eq__`
    *方法。'
- en: Implement the `==` operator.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标是`None`，则生成`a IS NULL`。
- en: '[PRE53]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法。'
- en: Implement the `<=` operator.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE54]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法。'
- en: Implement the `<` operator.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE55]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__ne__`
    *方法。'
- en: Implement the `!=` operator.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标是`None`，则生成`a IS NOT NULL`。
- en: '[PRE56]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法。'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与此方法的**传统**版本，即特定于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，其使用不同的调用风格。
- en: '[PRE57]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成一个代理的‘any’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符进行组合。
- en: '[PRE58]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")文档中的示例。
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要混淆较新的[`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与**旧版**该方法，即特定于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法，后者使用了不同的调用风格。
- en: '[PRE59]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE60]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组`(local_attr, remote_attr)`。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性最初旨在促进使用[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法一次加入两个关系，但这使用了一个已弃用的调用风格。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`select.join()`或[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")与关联代理，请当前方法是分别使用[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")和[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")属性：
- en: '[PRE61]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 未来版本可能会为关联代理属性提供更简洁的连接模式。
- en: See also
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE62]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象执行[`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between")子句，给定下限和上限范围。
- en: '[PRE63]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 进行按位与操作，通常通过`&`运算符实现。
- en: New in version 2.0.2.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE64]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 进行按位左移操作，通常通过`<<`运算符实现。
- en: New in version 2.0.2.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE65]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 进行按位非操作，通常通过`~`运算符实现。
- en: New in version 2.0.2.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE66]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 进行按位或操作，通常通过`|`运算符实现。
- en: New in version 2.0.2.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE67]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 进行按位右移操作，通常通过`>>`运算符实现。
- en: New in version 2.0.2.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中新增。
- en: See also
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE68]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 执行按位异或操作，通常通过`^`运算符，或在PostgreSQL中使用`#`。
- en: New in version 2.0.2.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE69]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")并传递带有True的[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志的简写。 使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)的目的中。
- en: See also
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE70]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")子句，给定排序字符串。
- en: See also
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE71]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或在MySQL上使用`concat()`运算符。
- en: '[PRE73]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法继承而来* *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 实现“包含”操作符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个对字符串值中间进行匹配的LIKE表达式：
- en: '[PRE74]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'E.g.:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE75]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于字面字符串值，可以将[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为`True`，以将这些字符的出现进行转义，使它们匹配为自己而不是通配符字符。或者，[`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains")参数将确定给定字符作为转义字符，这在目标表达式不是字面字符串时很有用。
- en: 'Parameters:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个普通的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")标志设置为True，否则不会转义LIKE通配符字符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE76]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Will render as:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE77]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将其作为转义字符。然后可以将此字符放在`%`和`_`的前面，以使它们像自己一样工作，而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE78]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Will render as:'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE79]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE80]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的示例中，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE81]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法继承* *自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象产生一个[`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE83]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法继承* *自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象产生一个[`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE84]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法继承* *自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个对字符串值末尾进行匹配的LIKE表达式：
- en: '[PRE85]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'E.g.:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE86]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了`LIKE`，存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志可以设置为`True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True，否则不会默认转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`以及转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE87]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Will render as:'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将被渲染为：
- en: '[PRE88]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将会使用`ESCAPE`关键字来确定该字符作为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE89]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Will render as:'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将被渲染为：
- en: '[PRE90]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数还可以与[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE91]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE92]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成一个代理的‘has’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用底层代理属性的`Comparator.any()`和/或`Comparator.has()`运算符的组合产品。
- en: '[PRE95]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个对字符串值中间进行大小写不敏感匹配的LIKE表达式：
- en: '[PRE96]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'E.g.:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE97]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，存在于<other>表达式中的通配符字符 `"%"` 和 `"_"` 也会像通配符一样行为。对于字面字符串值，可以将[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为 `True`，以将这些字符在字符串值中的出现转义，使它们与自身匹配而不是通配符字符。或者，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常这是一个简单的字符串值，但也可以是任意的 SQL 表达式。除非设置了[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志为 True，否则 LIKE 通配符字符 `%`
    和 `_` 不会被转义。'
- en: '`autoescape` –'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，比如：
- en: '[PRE98]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Will render as:'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE99]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值 `:param` 的 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字将该字符建立为转义字符。然后，该字符可以放在 `%` 和 `_` 的前面，以允许它们以自身形式而不是通配符字符的形式进行操作。
- en: 'An expression such as:'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，比如：
- en: '[PRE100]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Will render as:'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE101]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE102]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE103]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如，[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的结尾进行不区分大小写匹配：
- en: '[PRE104]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'E.g.:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE105]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE106]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Will render as:'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE107]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将呈现为`ESCAPE`关键字，以将该字符建立为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE108]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Will render as:'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE109]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE110]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE111]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生一个形式为：
- en: '[PRE112]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持ILIKE运算符的后端上：
- en: '[PRE113]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'E.g.:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE114]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Parameters:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE115]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: See also
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE116]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数`other`可以是：
- en: 'A list of literal values, e.g.:'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE117]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表被转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE118]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的[`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")的元组，则可以提供一个元组列表：
- en: '[PRE119]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'An empty list, e.g.:'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE120]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现出一个“空集”表达式。这些表达式是针对各个后端进行定制的，通常试图将一个空的SELECT语句作为子查询。例如，在SQLite上，表达式是：
- en: '[PRE121]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始：所有情况下空的IN表达式现在使用执行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包含[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，则可以使用绑定参数，例如包含[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志：
- en: '[PRE122]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现出一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE123]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，转换为前面所示的可变数量的绑定参数形式。如果语句执行为：
- en: '[PRE124]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE125]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.2中新增：添加了“expanding”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递一个空列表，则呈现一个特殊的“空列表”表达式，这是特定于正在使用的数据库的。在SQLite上，这将是：
- en: '[PRE126]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3中新增��现在“expanding”绑定参数支持空列表
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，通常是一个相关的标量选择：
- en: '[PRE127]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")呈现如下：
- en: '[PRE128]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Parameters:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个文字列表，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或者一个包含设置为True的[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，其中包括[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志。'
- en: '[PRE129]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS`会自动生成，解析为`NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE131]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上，如SQLite，可能呈现“a IS NOT b”。
- en: '[PRE132]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS NOT`会自动生成，解析为`NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`is_not()`运算符从先前版本的`isnot()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE133]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，如 SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not_distinct_from()` 操作符从先前版本的 `isnot_distinct_from()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE134]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与 `None` 的值进行比较时，会自动生成 `IS NOT`，这将解析为 `NULL`。但是，如果在某些平台上与布尔值进行比较时，可能希望显式使用
    `IS NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()` 操作符从先前版本的 `isnot()` 重命名。��确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE135]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，如 SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()` 操作符从先前版本的 `isnot()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE136]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 操作符，例如，[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的开头进行不区分大小写匹配：
- en: '[PRE137]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'E.g.:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE138]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)参数将建立一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是一个简单的字符串值，但也可以是任意的 SQL 表达式。除非设置[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)标志为True，否则不会默认转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是一个
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE139]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Will render as:'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE140]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来将该字符作为转义字符。然后可以将该字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE141]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Will render as:'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE142]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith)结合使用：
- en: '[PRE143]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)'
- en: '[PRE144]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like)
    *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators)'
- en: Implement the `like` operator.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE145]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'E.g.:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE146]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Parameters:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`escape` –'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染`ESCAPE`关键字，例如：
- en: '[PRE147]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: See also
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE148]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用的‘local’类属性。
- en: See also
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE149]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘match’操作符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match")尝试解析为后端提供的类似MATCH的函数或操作符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染`x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-574
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：现在在PostgreSQL中使用`plainto_tsquery()`代替`to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染`MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染`CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供��殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将操作符发出为“MATCH”。例如，这与SQLite兼容。
- en: '[PRE150]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")进行否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`操作符从先前版本的`notilike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE151]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `other` 是空序列的情况下，编译器会生成一个“空 not in” 表达式。 默认情况下，这会转换为表达式 “1 = 1”，以在所有情况下产生
    true。 可以使用 [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`not_in()` 运算符从先前版本的 `notin_()` 重命名。 以前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.2 中更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下会为空的 IN 序列生成一个“静态”
    表达式。
- en: See also
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE152]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 在���本 1.4 中更改：`not_like()` 运算符从先前版本的 `notlike()` 重命名。 以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE153]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")时进行否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：`not_ilike()`操作符从先前版本的`notilike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE154]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")时进行否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，则编译器会生成一个“空not in”表达式。默认情况下，这将产生“1 = 1”表达式，以在所有情况下产生true。[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：`not_in()`操作符从先前版本的`notin_()`重命名。以前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.2版本开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")操作符现在默认情况下为一个空IN序列生成“静态”表达式。
- en: See also
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE155]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")时进行否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版本开始更改：`not_like()`操作符从先前版本的`notlike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE156]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *中*'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_first()` 操作符从之前的版本 `nullsfirst()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE157]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_last()` 操作符从之前的版本 `nullslast()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE158]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_first()` 操作符从之前的版本 `nullsfirst()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE159]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_last()` 操作符从之前的版本 `nullslast()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE160]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE161]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'produces:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE162]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用于使按位运算符明确。例如：
- en: '[PRE163]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位与。
- en: 'Parameters:'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` - 一个字符串，将作为此元素与传递给生成函数的表达式之间的中缀运算符输出。'
- en: '`precedence` –'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` -'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库在 SQL 表达式中预期应用于运算符的优先级。这个整数值作为 SQL 编译器的提示，用于确定何时应该在特定操作周围添加显式括号。较低的数字将导致表达式在应用于具有较高优先级的其他运算符时被括在括号中。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用 op() 生成自定义运算符，但我的括号没有正确显示](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL 编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` -'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统；如果为 True，则该运算符将被视为“比较”运算符，即评估为布尔真/假值的运算符，如`==`，`>`等。提供此标志是为了使 ORM 关系能够在自定义连接条件中确定该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的运算符会自动设置这个参数，但也提供了正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表达“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` - 一个[`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而那些不指定的将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` -'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 Python 函数，可以以与在数据库服务器上运行时此运算符的工作方式相同的方式评估两个 Python 值。适用于在 Python 中进行 SQL
    表达式评估函数，例如用于 ORM 混合属性的函数，以及在多行更新或删除后用于匹配会话中的对象的 ORM “评估器”。
- en: 'e.g.:'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE164]'
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也适用于非 SQL 左侧和右侧对象：
- en: '[PRE165]'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: New in version 2.0.
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版新功能。
- en: See also
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE166]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Operate on an argument.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重新定义此操作可以使常见行为应用于所有操作。例如，覆盖 [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左侧和右侧：
- en: '[PRE167]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Parameters:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可能由特殊运算符传递，例如 `ColumnOperators.contains()`。'
- en: '[PRE168]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的“regexp 匹配”运算符。
- en: 'E.g.:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE170]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似 REGEXP
    的函数或运算符，但特定的正则表达式语法和可用标志**不是后端不可知的**。'
- en: 'Examples include:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x ~ y` 或 `x !~ y`（在否定时）。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符发出为 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正实现正则表达式支持的数据库有 Oracle、PostgreSQL、MySQL 和 MariaDB。SQLite 可用部分支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。在 PostgreSQL 中使用忽略大小写标志‘i’ 时，将使用忽略大小写的正则表达式匹配运算符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 更改为 2.0.18：请注意，由于实现错误，“flags”参数先前接受 SQL 表达式对象，例如列表达式，而不仅仅是普通的 Python
    字符串。这种实现与缓存不兼容，并已被移除；“flags”参数应仅传递字符串，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE171]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘regexp replace’运算符。
- en: 'E.g.:'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE172]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 试图解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用的标志**并非后端通用**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正实现正则表达式替换支持的数据库有 Oracle、PostgreSQL、MySQL 8 或更高版本以及 MariaDB。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.48更改为：2.0.18 请注意，由于实现错误，先前的“flags”参数接受了SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。此实现与缓存一起使用时无法正常工作，并已删除；应该仅传递字符串作为“flags”参数，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE173]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 被此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用的“远程”类属性。
- en: See also
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[PRE174]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate").
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与[`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate")相同。
- en: '[PRE175]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")代理本地端的标量关系，则返回`True`。
- en: '[PRE176]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值开头的匹配：
- en: '[PRE178]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'E.g.:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE179]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用 `LIKE`，因此存在于 `<other>` 表达式中的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    标志设置为 `True`，以对字符串值内出现的这些字符进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。`LIKE` 通配符字符 `%` 和 `_` 默认情况下不会被转义，除非设置了
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    标志为 True。'
- en: '`autoescape` –'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 `LIKE` 表达式中建立一个转义字符，然后将其应用于比较值内所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE180]'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Will render as:'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE181]'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中值为 `:param`，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字来建立该字符作为转义字符。然后可以将该字符放在 `%` 和 `_` 的出现之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE182]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Will render as:'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE183]'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    结合使用：
- en: '[PRE184]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith)'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains)'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like)'
- en: '[PRE185]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")处理的中间类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的追加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE186]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较日期时间对象。
- en: '[PRE187]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，其目标是一个对象。
- en: '**Members**'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance")（[`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")）
- en: '[PRE188]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法*'
- en: Implement the `<=` operator.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE189]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法*'
- en: Implement the `<` operator.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE190]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法*'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档，请参阅示例。
- en: Note
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要将更新的[`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与此方法的**旧版**混淆，此方法的旧版是针对[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")特定的[`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，其使用不同的调用风格。
- en: '[PRE191]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") *的* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *方法*'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成代理的“any”表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将是使用底层代理属性的`Comparator.any()`和/或`Comparator.has()`运算符的组合产品。
- en: '[PRE192]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法*'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")的文档以获取示例。
- en: Note
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与这个方法的**旧版**，即专用于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法，它使用不同的调用风格。
- en: '[PRE193]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE194]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组`(local_attr, remote_attr)`。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性最初旨在促进使用[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法一次性跨越两个关系的连接，但这使用了一个已弃用的调用风格。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`select.join()`或[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")与关联代理一起使用，当前的方法是分别利用[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")和[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")属性：
- en: '[PRE195]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的版本可能会为关联代理属性提供更简洁的连接模式。
- en: See also
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE196]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成 [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") 子句，给定下限和上限范围。
- en: '[PRE197]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `&` 运算符生成位与操作。
- en: New in version 2.0.2.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE198]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `<<` 运算符生成位左移操作。
- en: New in version 2.0.2.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE199]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `~` 运算符生成位非操作。
- en: New in version 2.0.2.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE200]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `|` 运算符生成位或操作。
- en: New in version 2.0.2.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE201]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `>>` 运算符生成位右移操作。
- en: New in version 2.0.2.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE202]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个按位异或操作，通常通过 `^` 运算符实现，或在 PostgreSQL 上使用 `#`。
- en: New in version 2.0.2.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE203]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是调用 [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的中。
- en: See also
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE204]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 子句，给定排序规则字符串。
- en: See also
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE205]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 实现“concat”运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a || b`，或在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE206]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Produce a proxied ‘contains’ expression using EXISTS.
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EXISTS 生成一个代理的“包含”表达式。
- en: This expression will be a composed product using the `Comparator.any()`, `Comparator.has()`,
    and/or `Comparator.contains()` operators of the underlying proxied attributes.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式将使用底层代理属性的`Comparator.any()`、`Comparator.has()`和/或`Comparator.contains()`操作符组成的产品。
- en: '[PRE207]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE208]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE209]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值的结尾匹配：
- en: '[PRE210]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'E.g.:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE211]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用 `LIKE`，存在于<other>表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith)标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith)参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非设置[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith)标志为
    True，否则 LIKE 通配符字符 `%` 和 `_` 默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值为文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE212]'
  id: totrans-887
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Will render as:'
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE213]'
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来建立该字符作为转义字符。然后可以将此字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE214]'
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Will render as:'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE215]'
  id: totrans-896
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE216]'
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE217]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *方法的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个使用EXISTS的代理‘has’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符的组合产品。
- en: '[PRE218]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如，[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值中间的不区分大小写匹配进行测试：
- en: '[PRE219]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'E.g.:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE220]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此在<other>表达式中存在的`"%"`和`"_"`通配符字符也将像通配符一样起作用。对于文字字符串值，可以将[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将确定一个给定字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通字符串值，但也可以是任意SQL表达式。默认情况下，`LIKE`通配符字符`%`和`_`不会被转义，除非设置了[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志为True。'
- en: '`autoescape` –'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在`LIKE`表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现次数，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE221]'
  id: totrans-921
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'Will render as:'
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE222]'
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`:param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来确定该字符作为转义字符。然后可以将该字符放在`%`和`_`之前，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE223]'
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'Will render as:'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE224]'
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE225]'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE226]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`运算符，例如，对[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的不区分大小写匹配进行测试：
- en: '[PRE227]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'E.g.:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE228]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用了`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于字面字符串值，可以将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，以使它们与自身匹配而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将建立一个给定的字符作为转义字符，这在目标表达式不是字面字符串时可能有用。
- en: 'Parameters:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会转义，除非将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为True。'
- en: '`autoescape` –'
  id: totrans-946
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE229]'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'Will render as:'
  id: totrans-950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE230]'
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来建立该字符作为转义字符。然后，可以将此字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE231]'
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Will render as:'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE232]'
  id: totrans-958
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE233]'
  id: totrans-960
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE234]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生形式为：
- en: '[PRE235]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持ILIKE运算符的后端：
- en: '[PRE236]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'E.g.:'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE237]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Parameters:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE238]'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: See also
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE239]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数`other`可以是：
- en: 'A list of literal values, e.g.:'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE240]'
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表被转换为与给定列表相同长度的一组绑定参数：
- en: '[PRE241]'
  id: totrans-988
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的[`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE242]'
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'An empty list, e.g.:'
  id: totrans-991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE243]'
  id: totrans-992
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图将空的SELECT语句作为子查询。例如在SQLite上，表达式是：
- en: '[PRE244]'
  id: totrans-994
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：在所有情况下，空的IN表达式现在都使用运行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，如果它包含[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志：
- en: '[PRE245]'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE246]'
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-1000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，以转换为前面所示的可变数量的绑定参数形式。如果执行语句如下：
- en: '[PRE247]'
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将传递一个绑定参数给每个值：
- en: '[PRE248]'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-1004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.2开始：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则会呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在SQLite上，这将是：
- en: '[PRE249]'
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.3开始：“扩展”绑定参数现在支持空列表
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，通常是一个相关的标量选择：
- en: '[PRE250]'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 渲染如下：
- en: '[PRE251]'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'Parameters:'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一组字面常量，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或者一个包含 [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志设置为 True 的 [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造。'
- en: '[PRE252]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`值进行比较时，`IS`会自动生成，该值解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE253]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上会渲染“a IS DISTINCT FROM b”；在某些平台上，例如SQLite，可能会渲染“a IS NOT b”。
- en: '[PRE254]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`值进行比较时，`IS NOT`会自动生成，该值解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()`运算符从先前版本的`isnot()`中重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE255]'
  id: totrans-1031
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”; 在某些平台上，如SQLite可能会呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版更改：`is_not_distinct_from()` 运算符从之前的版本`isnot_distinct_from()` 重命名。以前的名称仍可用于向后兼容性。
- en: '[PRE256]'
  id: totrans-1036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，与`None`的值进行比较时会自动生成`IS NOT`，它解析为`NULL`。但是，如果在某些平台上与布尔值进行比较时，明确使用`IS NOT`可能是可取的。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版更改：`is_not()` 运算符从之前的版本`isnot()` 重命名。以前的名称仍可用于向后兼容性。
- en: See also
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE257]'
  id: totrans-1043
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”; 在某些平台上，如SQLite可能会呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版更改：`is_not_distinct_from()` 运算符从之前的版本`isnot_distinct_from()` 重命名。以前的名称仍可用于向后兼容性。
- en: '[PRE258]'
  id: totrans-1048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 运算符，例如[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的起始部分进行不区分大小写的匹配测试：
- en: '[PRE259]'
  id: totrans-1052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'E.g.:'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE260]'
  id: totrans-1054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用 `LIKE`，存在于 <other> 表达式中的通配符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将 [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 `True`，以将这些字符的出现转义为字符串值内部的这些字符，使它们匹配为它们自身而不是通配符。或者，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-1057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志被设置为 True。'
- en: '`autoescape` –'
  id: totrans-1058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有 `"%"`、`"_"` 和转义字符本身的出现，假设比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE261]'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Will render as:'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE262]'
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中，参数的值为 `:param`，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1065
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将以 `ESCAPE` 关键字渲染，以将该字符作为转义字符。然后可以将该字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE263]'
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'Will render as:'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE264]'
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")组合使用：
- en: '[PRE265]'
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE266]'
  id: totrans-1076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法继承*'
- en: Implement the `like` operator.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 操作符。
- en: 'In a column context, produces the expression:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE267]'
  id: totrans-1080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'E.g.:'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE268]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'Parameters:'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`escape` –'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE269]'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: See also
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE270]'
  id: totrans-1090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的 ‘local’ 类属性。
- en: See also
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE271]'
  id: totrans-1096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的 ‘match’ 运算符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的类似 MATCH 的函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-1101
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始更改：现在对于 PostgreSQL 使用 `plainto_tsquery()` 而不是 `to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的 MySQL 特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-1106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-1107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符输出为 “MATCH”。例如，这与 SQLite 兼容。
- en: '[PRE272]'
  id: totrans-1108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用否定与[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`操作符从先前版本的`notilike()`重新命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE273]'
  id: totrans-1115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用否定与[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器会产生一个“空的不包含”表达式。默认情况下，这相当于表达式“1 = 1”，以在所有情况下产生真值。可以使用[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()`操作符从先前版本的`notin_()`重新命名。先前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下会为空IN序列生成“静态”表达式。
- en: See also
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE274]'
  id: totrans-1124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用否定与[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()`操作符从先前版本的`notlike()`重新命名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE275]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用对[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")进行否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`not_ilike()`运算符从之前的版本`notilike()`重命名。以确保向后兼容性，以前的名称仍然可用。
- en: See also
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE276]'
  id: totrans-1138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用对[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")进行否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器会生成一个“空不包含”表达式。这默认为表达式“1 = 1”，以在所有情况下产生 true。[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`not_in()`运算符从之前的版本`notin_()`重命名。以确保向后兼容性，以前的名称仍然可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.2 起更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下为一个“静态”表达式，用于空 IN
    序列。
- en: See also
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE277]'
  id: totrans-1147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`not_like()` 操作符从以前的版本中的 `notlike()` 改名为 `not_like()`。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE278]'
  id: totrans-1154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_first()` 操作符从以前的版本中的 `nullsfirst()` 改名为 `nulls_first()`。以前的名称仍然可用于向后兼容。
- en: '[PRE279]'
  id: totrans-1158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_last()` 操作符从以前的版本中的 `nullslast()` 改名为 `nulls_last()`。以前的名称仍然可用于向后兼容。
- en: '[PRE280]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：`nulls_first()` 操作符从以前的版本中的 `nullsfirst()` 改名为 `nulls_first()`。以前的名称仍然可用于向后兼容。
- en: '[PRE281]'
  id: totrans-1166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_last()`运算符从先前版本的`nullslast()`重命名。以前的名称仍可用于向后兼容。
- en: '[PRE282]'
  id: totrans-1170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE283]'
  id: totrans-1174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: 'produces:'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE284]'
  id: totrans-1176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来明确地表示位运算符。例如：
- en: '[PRE285]'
  id: totrans-1178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位与。
- en: 'Parameters:'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-1181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为中缀运算符输出在此元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-1182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-1183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库在SQL表达式中期望应用于运算符的优先级。这个整数值作为一个提示，告诉SQL编译器何时应该在特定操作周围渲染显式的括号。较低的数字将导致表达式在应用于具有更高优先级的另一个运算符时被括号括起来。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但我的括号没有正确显示](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-1186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy; 如果为True，则该运算符将被视为“比较”运算符，即评估为布尔值的运算符，如`==`，`>`等。提供此标志是为了ORM关系可以在自定义连接条件中建立该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的运算符会自动设置这个参数，但也提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-1189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，它将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的运算符将与左操作数具有相同的类型。'
- en: '`python_impl` –'
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 Python 函数，可以在与在数据库服务器上运行此运算符时相同的方式评估两个 Python 值。用于在 Python 中的 SQL 表达式评估函数，例如用于
    ORM 混合属性的函数，以及用于在多行更新或删除后匹配会话中的对象的 ORM “评估器”。
- en: 'e.g.:'
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE286]'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-1194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的运算符也适用于非 SQL 左右对象：
- en: '[PRE287]'
  id: totrans-1195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: New in version 2.0.
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本 2.0 新增。
- en: See also
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新运算符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE288]'
  id: totrans-1201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *方法继承自* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Operate on an argument.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类中覆盖此方法可以使通用行为应用于所有操作。例如，覆盖[`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左右两侧：
- en: '[PRE289]'
  id: totrans-1206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Parameters:'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 运算符可调用对象。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“other”一侧。对于大多数操作，它将是一个单一标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以由特殊运算符（如`ColumnOperators.contains()`）传递。'
- en: '[PRE290]'
  id: totrans-1211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个特定于数据库的“正则表达式匹配”运算符。
- en: 'E.g.:'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE291]'
  id: totrans-1215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似 REGEXP
    的函数或运算符，但特定的正则表达式语法和可用标志 **不是后端无关的**。'
- en: 'Examples include:'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 当否定时渲染 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-1222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将发出运算符 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式支持当前已为 Oracle、PostgreSQL、MySQL 和 MariaDB 实现。对于 SQLite，部分支持可用。第三方方言之间的支持可能会有所不同。
- en: 'Parameters:'
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为纯 Python 字符串传递。这些标志是后端特定的。某些后端，例如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写正则表达式匹配运算符 `~*`
    或 `!~*`。'
- en: New in version 1.4.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能，版本 1.4。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 更改为：2.0.18 请注意，由于实现错误，先前“flags”参数接受 SQL 表达式对象，例如列表达式，而不仅仅是纯 Python
    字符串。这个实现与缓存一起使用时无法正常工作，并且已被删除；仅应传递字符串作为“flags”参数，因为这些标志在 SQL 表达式中被呈现为文字行内值。
- en: See also
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE292]'
  id: totrans-1231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的 “regexp 替换” 运算符。
- en: 'E.g.:'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE293]'
  id: totrans-1235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会发出函数 `REGEXP_REPLACE()`。但是，特定的正则表达式语法和可用标志 **不是后端无关的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式替换支持当前已为 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 实现。第三方方言之间的支持可能会有所不同。
- en: 'Parameters:'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-1240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通Python字符串传递。这些标志是特定于后端的。某些后端，如PostgreSQL和MariaDB，可能会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.48更改为：2.0.18 请注意，由于实现错误，“flags”参数先前接受了SQL表达式对象，例如列表达式，除了普通的Python字符串。此实现与缓存不正确，已被移除；应仅传递字符串作为“flags”参数，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE294]'
  id: totrans-1246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *属性的*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用的“remote”类属性。
- en: See also
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[PRE295]'
  id: totrans-1252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate").
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与[`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate")相同。
- en: '[PRE296]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *属性��* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")代理本地端的标量关系，则返回`True`。
- en: '[PRE297]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的起始匹配：
- en: '[PRE298]'
  id: totrans-1263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: 'E.g.:'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE299]'
  id: totrans-1265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为`True`，以对字符串值内部这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立给定字符作为逃逸字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-1268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个普通字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志为True。'
- en: '`autoescape` –'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE300]'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: 'Will render as:'
  id: totrans-1273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE301]'
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定的字符与`ESCAPE`关键字一起使用时，将渲染为逃逸字符。然后，可以将该字符放置在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE302]'
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: 'Will render as:'
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE303]'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数还可以与 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 结合使用：
- en: '[PRE304]'
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE305]'
  id: totrans-1289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 处理的中介类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的追加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE306]'
  id: totrans-1292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客，允许在左手边比较日期时间对象。
- en: '[PRE307]'
  id: totrans-1295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target.
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: 一个将数据库列作为目标的 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")。
- en: '**Members**'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance")（[`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")）。
- en: '[PRE308]'
  id: totrans-1301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__le__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Implement the `<=` operator.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 在列的上下文中，产生子句 `a <= b`。
- en: '[PRE309]'
  id: totrans-1305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Implement the `<` operator.
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 在列的上下文中，产生子句 `a < b`。
- en: '[PRE310]'
  id: totrans-1309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Implement the `!=` operator.
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `!=` 运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: 在列的上下文中，产生子句 `a != b`。如果目标是 `None`，则产生 `a IS NOT NULL`。
- en: '[PRE311]'
  id: totrans-1313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") 子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要不要混淆新版本的 [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") 方法与 **遗留** 版本的该方法，即 [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，该方法特定于 [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，使用不同的调用方式。
- en: '[PRE312]'
  id: totrans-1319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *方法的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")。'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EXISTS 生成一个代理的‘any’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用底层代理属性的 `Comparator.any()` 和/或 `Comparator.has()` 运算符进行组合。
- en: '[PRE313]'
  id: totrans-1323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法继承*'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") 子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_ "sqlalchemy.sql.expression.any_")
    的文档以获取示例。
- en: Note
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的 [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与此方法的**传统**版本，即 [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 特定的 [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法，后者使用不同的调用风格。
- en: '[PRE314]'
  id: totrans-1329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法继承*'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") 子句。
- en: '[PRE315]'
  id: totrans-1332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") *的* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *属性继承*'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 `(local_attr, remote_attr)` 元组。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性最初旨在简化使用 [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法一次跨两个关系进行联接，但这样做使用了一个已弃用的调用风格。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `select.join()` 或 [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 与关联代理，当前的方法是分别使用 [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") 和 [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") 属性：
- en: '[PRE316]'
  id: totrans-1337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的版本可能会提供更简洁的关联代理属性连接模式。
- en: See also
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE317]'
  id: totrans-1342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成[`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between")子句，给定下限和上限范围。
- en: '[PRE318]'
  id: totrans-1345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`&`操作符进行位与操作。
- en: New in version 2.0.2.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2版本中新增。
- en: See also
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE319]'
  id: totrans-1351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`<<`操作符进行位左移操作。
- en: New in version 2.0.2.
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2版本中新增。
- en: See also
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE320]'
  id: totrans-1357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`~`操作符进行位取反操作。
- en: New in version 2.0.2.
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2版本中新增。
- en: See also
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE321]'
  id: totrans-1363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`|`操作符进行位或操作。
- en: New in version 2.0.2.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2版本中新增。
- en: See also
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE322]'
  id: totrans-1369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个按位右移操作，通常通过 `>>` 运算符实现。
- en: New in version 2.0.2.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中新增。
- en: See also
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE323]'
  id: totrans-1375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个按位异或操作，通常通过 `^` 运算符实现，或者对于 PostgreSQL 使用 `#`。
- en: New in version 2.0.2.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.2 中新增。
- en: See also
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE324]'
  id: totrans-1381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是调用 [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的中。
- en: See also
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE325]'
  id: totrans-1387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 子句，给定排序规则字符串。
- en: See also
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE326]'
  id: totrans-1392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法* of [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'concat' 运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a || b`，或者在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE327]'
  id: totrans-1396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法* of [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'contains' 运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值中间的匹配：
- en: '[PRE328]'
  id: totrans-1400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'E.g.:'
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE329]'
  id: totrans-1402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用了 `LIKE`，所以在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。 对于字面字符串值，可以将
    [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 `True`，以对字符串值中这些字符的出现应用转义，使它们与自身匹配而不是通配符字符。
    或者，[`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有所帮助。
- en: 'Parameters:'
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。 这通常是一个普通字符串值，但也可以是任意的 SQL 表达式。 除非设置了 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志为 True，否则 LIKE 通配符字符 `%`
    和 `_` 不会被转义。'
- en: '`autoescape` –'
  id: totrans-1406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，比较值假定为字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE330]'
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Will render as:'
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE331]'
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为 `:param` 的情况下，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定字符，当指定时，将使用 `ESCAPE` 关键字来将该字符建立为转义字符。 然后，可以将此字符放置在 `%` 和 `_` 的出现之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE332]'
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Will render as:'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE333]'
  id: totrans-1418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE334]'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况中，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE335]'
  id: totrans-1426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE336]'
  id: totrans-1429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE337]'
  id: totrans-1432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’运算符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，测试字符串值的结尾是否匹配：
- en: '[PRE338]'
  id: totrans-1436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'E.g.:'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE339]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-1441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-1442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE340]'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: 'Will render as:'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE341]'
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符作为转义字符。然后可以将此字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE342]'
  id: totrans-1452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'Will render as:'
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE343]'
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE344]'
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE345]'
  id: totrans-1462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *方法的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成一个代理的‘has’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符组成的产品。
- en: '[PRE346]'
  id: totrans-1466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值中间的不区分大小写匹配进行测试：
- en: '[PRE347]'
  id: totrans-1470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'E.g.:'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE348]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用`LIKE`，因此存在于<other>表达式中的通配符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通字符串值，但也可以是任意SQL表达式。除非将[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为True，否则不会转义LIKE通配符`%`和`_`。'
- en: '`autoescape` –'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如这样的表达式：
- en: '[PRE349]'
  id: totrans-1479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: 'Will render as:'
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE350]'
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将与`ESCAPE`关键字一起呈现，将该字符作为转义字符。然后可以将该字符放置在`%`和`_`的前面，以使它们像自己一样工作，而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如以下表达式：
- en: '[PRE351]'
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: 'Will render as:'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE352]'
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")组合使用：
- en: '[PRE353]'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，给定的文字参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE354]'
  id: totrans-1494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如，[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的末尾进行不区分大小写的匹配：
- en: '[PRE355]'
  id: totrans-1498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'E.g.:'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE356]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，因此存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样工作。对于字面字符串值，可以将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值内的这些字符进行转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将确定给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-1503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志为 True。'
- en: '`autoescape` –'
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-1506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE357]'
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'Will render as:'
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE358]'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE358]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具有值`：param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将呈现为带有`ESCAPE`关键字以将该字符作为转义字符。然后可以将此字符放在`%`和`_`的前面，以允许它们充当它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE359]'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'Will render as:'
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE360]'
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")组合：
- en: '[PRE361]'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE361]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE362]'
  id: totrans-1522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生一个形式为：
- en: '[PRE363]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 或在支持ILIKE运算符的后端上：
- en: '[PRE364]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: 'E.g.:'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE365]'
  id: totrans-1530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'Parameters:'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-1533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE366]'
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE366]'
- en: See also
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE367]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数`other`可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-1543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字面值列表，例如：
- en: '[PRE368]'
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE368]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表被转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE369]'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的[`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE370]'
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE370]'
- en: 'An empty list, e.g.:'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空列表，例如：
- en: '[PRE371]'
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE371]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，该表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图将空的SELECT语句作为子查询。例如，在SQLite上，该表达式是：
- en: '[PRE372]'
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE372]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-1553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.4更改：在所有情况下，空的IN表达式现在使用执行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-1554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用绑定参数，例如[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，如果包含[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志：
- en: '[PRE373]'
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，该表达式呈现一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE374]'
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE374]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-1558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，以转换为前面所示的可变数量的绑定参数形式。如果执行语句如下：
- en: '[PRE375]'
  id: totrans-1559
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE376]'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-1562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.2新增：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递一个空列表，则会呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在SQLite上，这将是：
- en: '[PRE377]'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE377]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自版本1.3新增：现在支持空列表的“扩展”绑定参数
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，通常是一个相关的标量选择：
- en: '[PRE378]'
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")呈现如下：
- en: '[PRE379]'
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'Parameters:'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面量列表，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或者一个包含设置为True的[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，其中包括[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志。'
- en: '[PRE380]'
  id: totrans-1572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS`，这会解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE381]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS DISTINCT FROM` 操作符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为 “a IS DISTINCT FROM b”；在某些平台上（如 SQLite）可能渲染为 “a IS NOT b”。
- en: '[PRE382]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，与 `None` 值比较时会自动生成 `IS NOT`，它解析为 `NULL`。然而，在某些平台上，如果与布尔值比较，显式使用 `IS NOT`
    可能更可取。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1586
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`is_not()` 操作符从先前版本的 `isnot()` 重命名。先前的名称保留以保持向后兼容性。
- en: See also
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE383]'
  id: totrans-1589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为 “a IS NOT DISTINCT FROM b”；在某些平台上（如 SQLite）可能渲染为 “a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`is_not_distinct_from()` 操作符从先前版本的 `isnot_distinct_from()` 重命名。先前的名称保留以保持向后兼容性。
- en: '[PRE384]'
  id: totrans-1594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，与 `None` 值比较时会自动生成 `IS NOT`，它解析为 `NULL`。然而，在某些平台上，如果与布尔值比较，显式使用 `IS NOT`
    可能更可取。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`is_not()` 操作符从先前版本的 `isnot()` 重命名。先前的名称保留以保持向后兼容性。
- en: See also
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE385]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from")*方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台上，如SQLite，可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版中更改：`is_not_distinct_from()`运算符从先前版本的`isnot_distinct_from()`重新命名。先前的名称仍然可用以实现向后兼容性。
- en: '[PRE386]'
  id: totrans-1606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1607
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")*方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`运算符，例如[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值的开头进行不区分大小写的匹配：
- en: '[PRE387]'
  id: totrans-1610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: 'E.g.:'
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE388]'
  id: totrans-1612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用了`LIKE`，因此在<other>表达式内部存在的通配符`"%"`和`"_"`也会像通配符一样起作用。对于文本字符串值，可以将[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以对字符串值内出现的这些字符进行转义，以便它们匹配为其自身而不是通配符。另外，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定字符作为转义字符，当目标表达式不是文本字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-1615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个普通的字符串值，但也可以是一个任意的SQL表达式。除非设置了[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志为True，否则`%`和`_`这两个LIKE通配符默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-1616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式内建立转义字符，然后将其应用于比较值中的所有出现的`"%"`、`"_"`以及转义字符本身，假定比较值是一个文本字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，比如：
- en: '[PRE389]'
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE389]'
- en: 'Will render as:'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE390]'
  id: totrans-1621
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE390]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数值为 `:param` 时为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将与 `ESCAPE` 关键字一起渲染，将该字符作为转义字符。然后可以将此字符放在 `%` 和 `_` 的前面，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，比如：
- en: '[PRE391]'
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'Will render as:'
  id: totrans-1627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE392]'
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与 [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 结合使用：
- en: '[PRE393]'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE393]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的文字参数在传递到数据库之前会被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE394]'
  id: totrans-1634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生如下表达式：
- en: '[PRE395]'
  id: totrans-1638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'E.g.:'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE396]'
  id: totrans-1640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: 'Parameters:'
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-1642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式'
- en: '`escape` –'
  id: totrans-1643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染为 `ESCAPE` 关键字，例如：
- en: '[PRE397]'
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE397]'
- en: See also
  id: totrans-1646
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE398]'
  id: totrans-1648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: 由此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的 ‘local’ 类属性。
- en: See also
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE399]'
  id: totrans-1654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的 ‘match’ 运算符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的 MATCH-like 函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-1658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-1659
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始：对于PostgreSQL，现在使用 `plainto_tsquery()` 而不是 `to_tsquery()`；有关与其他形式的兼容性，请参阅
    [全文搜索](../../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的特定于MySQL的构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-1664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-1665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有特殊实现的后端将将运算符发出为“MATCH”。例如，这与SQLite兼容。
- en: '[PRE400]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 的否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：`not_ilike()` 运算符从先前版本的 `notilike()` 重命名。先前的名称仍可用于向后兼容。
- en: See also
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE401]'
  id: totrans-1673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1675
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，编译器将生成一个“空不在”表达式。默认情况下，这会产生一个“1 = 1”的表达式，在所有情况下都返回 true。可以使用
    [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1678
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始：`not_in()` 运算符从先前版本的 `notin_()` 重命名。先前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认情况下为一个空的IN序列生成“静态”表达式。
- en: See also
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE402]'
  id: totrans-1682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1683
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于对[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")使用否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1686
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()`运算符从先前版本的`notlike()`重命名。 以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE403]'
  id: totrans-1689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于对[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")使用否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`运算符从先前版本的`notilike()`重命名。 以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE404]'
  id: totrans-1696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1697
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于对[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")使用否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，则编译器会生成一个“空的不在”表达式。 默认情况下，这会默认为表达式“1 = 1”，以在所有情况下产生 true。
    可以使用 [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起：`not_in()` 操作符在之前的版本中从 `notin_()` 重命名。 以前的名称仍然可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.2起：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认生成一个空的 IN 序列的“静态”表达式。
- en: See also
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-1704
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE405]'
  id: totrans-1705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1706
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起：`not_like()` 操作符在之前的版本中从 `notlike()` 重命名。 以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE406]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起：`nulls_first()` 操作符在之前的版本中从 `nullsfirst()` 重命名。 以前的名称仍然可用于向后兼容。
- en: '[PRE407]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`nulls_last()` 运算符从之前的版本中的 `nullslast()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE408]'
  id: totrans-1720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法继承*'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1723
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`nulls_first()` 运算符从之前的版本中的 `nullsfirst()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE409]'
  id: totrans-1724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1725
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法继承*'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个针对父对象的 [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`nulls_last()` 运算符从之前的版本中的 `nullslast()` 重新命名。以前的名称仍然可用于向后兼容。
- en: '[PRE410]'
  id: totrans-1728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators") *的* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法继承*'
- en: Produce a generic operator function.
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-1731
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE411]'
  id: totrans-1732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'produces:'
  id: totrans-1733
  prefs: []
  type: TYPE_NORMAL
  zh: '产生： '
- en: '[PRE412]'
  id: totrans-1734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来使按位运算符明确。例如：
- en: '[PRE413]'
  id: totrans-1736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-1737
  prefs: []
  type: TYPE_NORMAL
  zh: 是值在 `somecolumn` 中的按位与。
- en: 'Parameters:'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，它将作为中缀运算符输出，在这个元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-1740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预期应用于 SQL 表达式中的运算符的优先级。这个整数值充当 SQL 编译器的提示，以便知道何时应该在特定操作周围呈现显式的括号。较低的数字会导致表达式在应用于具有更高优先级的另一个运算符时被括起来。默认值
    `0` 低于所有运算符，除了逗号 (`,`) 和 `AS` 运算符。值为 100 将高于或等于所有运算符，而 -100 将低于或等于所有运算符。
- en: See also
  id: totrans-1742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义操作符，但我的括号没有正确显示](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-1744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: legacy；如果为True，则将该操作符视为“比较”操作符，即评估为布尔真/假值的操作符，如`==`，`>`等。提供此标志是为了使ORM关系能够在自定义连接条件中使用操作符时建立该操作符为比较操作符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的操作符会自动设置此参数，同时提供正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此操作符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的操作符将解析为[`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的操作符将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的Python函数，可以在数据库服务器上运行时以与此操作符相同的方式评估两个Python值。对于在Python中进行SQL表达式评估函数非常有用，例如用于ORM混合属性的函数，以及用于在多行更新或删除后匹配会话中的对象的ORM“评估器”。
- en: 'e.g.:'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE414]'
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-1752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也适用于非SQL左右对象：
- en: '[PRE415]'
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE415]'
- en: New in version 2.0.
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-1755
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE416]'
  id: totrans-1759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: Operate on an argument.
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-1761
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下会引发`NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖这个方法可以使常见行为应用于所有操作。例如，覆盖[`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")以将`func.lower()`应用于左右两侧：
- en: '[PRE417]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'Parameters:'
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-1765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-1766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的“其他”一侧。对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以由特殊操作符传递，例如`ColumnOperators.contains()`。'
- en: '[PRE418]'
  id: totrans-1768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-1770
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘regexp match’操作符。
- en: 'E.g.:'
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE419]'
  id: totrans-1772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似REGEXP的函数或操作符，但具体的正则表达式语法和可用标志**不是后端通用的**。'
- en: 'Examples include:'
  id: totrans-1774
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-1775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时呈现`x ~ y`或`x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-1776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 呈现`REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-1777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用了SQLite的`REGEXP`占位符操作符，并调用了Python的`re.match()`内置函数。
- en: other backends may provide special implementations.
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-1779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将发出操作符“REGEXP”或“NOT REGEXP”。例如，这与SQLite和MySQL兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正则表达式支持已实现在Oracle、PostgreSQL、MySQL和MariaDB中。对于SQLite，部分支持可用。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1781
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-1783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通Python字符串传递。这些标志是特定于后端的。一些后端，如PostgreSQL和MariaDB，可能会将标志作为模式的一部分指定。在PostgreSQL中使用忽略大小写标志‘i’时，将使用忽略大小写的正则表达式匹配操作符`~*`或`!~*`。'
- en: New in version 1.4.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.48更改为：2.0.18 请注意，由于实现错误，先前的“flags”参数接受了SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。这种实现与缓存不兼容，并已被移除；“flags”参数应该只传递字符串，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE420]'
  id: totrans-1788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘regexp replace’操作符。
- en: 'E.g.:'
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE421]'
  id: totrans-1792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会生成函数 `REGEXP_REPLACE()`。然而，具体的正则表达式语法和可用标志**与后端无关**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: 目前针对 Oracle、PostgreSQL、MySQL 8 或更高版本以及 MariaDB 实现了正则表达式替换支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-1795
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-1797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-1798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为纯 Python 字符串传递。这些标志是后端特定的。某些后端，如 PostgreSQL 和
    MariaDB，也可以将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版中新增。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-1800
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本 1.4.48 更改,: 2.0.18 请注意，由于实现错误，以前“flags”参数接受 SQL 表达式对象，如列表达式，而不仅仅是纯 Python
    字符串。此实现与缓存不正确，已删除；仅应传递字符串作为“flags”参数，因为这些标志在 SQL 表达式中被呈现为文字内联值。'
- en: See also
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE422]'
  id: totrans-1803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *属性的*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的“remote”类属性。
- en: See also
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-1807
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[PRE423]'
  id: totrans-1809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-1810
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate").
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式与 [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate") *相同*。
- en: '[PRE424]'
  id: totrans-1813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-1814
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 代理一个本地方的标量关系，则返回 `True`。
- en: '[PRE425]'
  id: totrans-1816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1817
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `startswith` 运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值的起始匹配：
- en: '[PRE426]'
  id: totrans-1820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: 'E.g.:'
  id: totrans-1821
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE427]'
  id: totrans-1822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-1823
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，所以存在于 <other> 表达式内部的通配符字符 `"%"` 和 `"_"` 也将像通配符一样工作。对于文字字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 `True`，以将这些字符的出现转义为它们自身，而不是作为通配符字符进行匹配。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-1825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 待比较的表达式。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假设比较值是一个文字字符串而不是一个
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE428]'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Will render as:'
  id: totrans-1830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE429]'
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE429]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-1832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-1833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-1834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个给定的字符，当给出时将使用 `ESCAPE` 关键字来建立该字符作为转义字符。然后可以将此字符放置在 `%` 和 `_` 的前面，以允许它们像自己一样起作用，而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE430]'
  id: totrans-1836
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'Will render as:'
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE431]'
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-1839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE432]'
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-1842
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE433]'
  id: totrans-1846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")处理的中间类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-1848
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的追加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE434]'
  id: totrans-1849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-1850
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性*'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较日期时间对象。
- en: '[PRE435]'
  id: totrans-1852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: An enumeration.
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-1854
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
- en: '**Class signature**'
  id: totrans-1856
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")（[`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType")）
- en: '[PRE436]'
  id: totrans-1858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: Symbol indicating an [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") that’s of type [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个[`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")的符号，其类型为[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: 赋予[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
- en: '## Simplifying Scalar Collections'
  id: totrans-1861
  prefs: []
  type: TYPE_NORMAL
  zh: '## 简化标量集合'
- en: 'Consider a many-to-many mapping between two classes, `User` and `Keyword`.
    Each `User` can have any number of `Keyword` objects, and vice-versa (the many-to-many
    pattern is described at [Many To Many](../basic_relationships.html#relationships-many-to-many)).
    The example below illustrates this pattern in the same way, with the exception
    of an extra attribute added to the `User` class called `User.keywords`:'
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个类`User`和`Keyword`之间的多对多映射。每个`User`可以拥有任意数量的`Keyword`对象，反之亦然（多对多模式在[多对多](../basic_relationships.html#relationships-many-to-many)中有描述）。下面的示例以相同的��式说明了这种模式，只是在`User`类中添加了一个名为`User.keywords`的额外属性：
- en: '[PRE437]'
  id: totrans-1863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: 'In the above example, [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") is applied to the `User`
    class to produce a “view” of the `kw` relationship, which exposes the string value
    of `.keyword` associated with each `Keyword` object. It also creates new `Keyword`
    objects transparently when strings are added to the collection:'
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")应用于`User`类，以生成`kw`关系的“视图”，该视图公开与每个`Keyword`对象关联的`.keyword`的字符串值。当向集合添加字符串时，它还会透明地创建新的`Keyword`对象：
- en: '[PRE438]'
  id: totrans-1865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'To understand the mechanics of this, first review the behavior of `User` and
    `Keyword` without using the `.keywords` association proxy. Normally, reading and
    manipulating the collection of “keyword” strings associated with `User` requires
    traversal from each collection element to the `.keyword` attribute, which can
    be awkward. The example below illustrates the identical series of operations applied
    without using the association proxy:'
  id: totrans-1866
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一机制，首先回顾一下在不使用`.keywords`关联代理的情况下，`User`和`Keyword`的行为。通常，读取和操作与`User`相关联的“关键词”字符串集合需要从每个集合元素遍历到`.keyword`属性，这可能很麻烦。下面的示例说明了在不使用关联代理的情况下应用的相同一系列操作：
- en: '[PRE439]'
  id: totrans-1867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object produced by the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") function is an instance of
    a [Python descriptor](https://docs.python.org/howto/descriptor.html), and is not
    considered to be “mapped” by the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in any way. Therefore, it’s always indicated inline within
    the class definition of the mapped class, regardless of whether Declarative or
    Imperative mappings are used.
  id: totrans-1868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")函数产生的[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象是[Python描述符](https://docs.python.org/howto/descriptor.html)的一个实例，并且不以任何方式被[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")“映射”。因此，无论是使用Declarative还是Imperative映射，它都始终在映射类的类定义中内联指示。'
- en: The proxy functions by operating upon the underlying mapped attribute or collection
    in response to operations, and changes made via the proxy are immediately apparent
    in the mapped attribute, as well as vice versa. The underlying attribute remains
    fully accessible.
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理通过响应操作来操作底层的映射属性或集合，并且通过代理进行的更改立即反映在映射属性中，反之亦然。底层属性仍然可以完全访问。
- en: When first accessed, the association proxy performs introspection operations
    on the target collection so that its behavior corresponds correctly. Details such
    as if the locally proxied attribute is a collection (as is typical) or a scalar
    reference, as well as if the collection acts like a set, list, or dictionary is
    taken into account, so that the proxy should act just like the underlying collection
    or attribute does.
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，关联代理会对目标集合执行内省操作，以便其行为正确对应。诸如本地代理的属性是否为集合（通常情况下）或标量引用，以及集合是否像集合、列表或字典一样操作等细节都会考虑在内，以便代理的行为应该与底层集合或属性的行为一样。
- en: '### Creation of New Values'
  id: totrans-1871
  prefs: []
  type: TYPE_NORMAL
  zh: '### 创造新价值'
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: 当关联代理拦截到列表`append()`事件（或集合`add()`，字典`__setitem__()`或标量赋值事件）时，它会使用其构造函数实例化“中介”对象的新实例，将给定值作为单个参数传递。在我们上面的示例中，像下面这样的操作：
- en: '[PRE440]'
  id: totrans-1873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: 'Is translated by the association proxy into the operation:'
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 被关联代理翻译成操作：
- en: '[PRE441]'
  id: totrans-1875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例在这里起作用，因为我们设计了`Keyword`的构造函数以接受一个单一的位置参数，`keyword`。 对于那些单参数构造函数不可行的情况，可以使用[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")参数自定义关联代理的创建行为，该参数引用一个可调用对象（即
    Python 函数），该对象将根据单个参数生成一个新的对象实例。 下面我们使用通常的 lambda 来说明这一点：
- en: '[PRE442]'
  id: totrans-1877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: 'The `creator` function accepts a single argument in the case of a list- or
    set- based collection, or a scalar attribute. In the case of a dictionary-based
    collection, it accepts two arguments, “key” and “value”. An example of this is
    below in [Proxying to Dictionary Based Collections](#proxying-dictionaries).  ###
    Creation of New Values'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表或集合类型的集合或标量属性的情况下，`creator`函数接受一个参数。 在基于字典的集合的情况下，它接受两个参数，“key”和“value”。
    下面的示例在[代理到基于字典的集合](#proxying-dictionaries)中给出。
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  id: totrans-1879
  prefs: []
  type: TYPE_NORMAL
  zh: 当关联代理拦截到列表`append()`事件（或集合`add()`，字典`__setitem__()`或标量赋值事件）时，它会使用其构造函数实例化一个新的“中间”对象的实例，将给定的值作为单个参数传递。
    在上面的示例中，像这样的操作：
- en: '[PRE443]'
  id: totrans-1880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'Is translated by the association proxy into the operation:'
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 由关联代理转换为操作：
- en: '[PRE444]'
  id: totrans-1882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例在这里起作用，因为我们设计了`Keyword`的构造函数以接受一个单一的位置参数，`keyword`。 对于那些单参数构造函数不可行的情况，可以使用[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")参数自定义关联代理的创建行为，该参数引用一个可调用对象（即
    Python 函数），该对象将根据单个参数生成一个新的对象实例。 下面我们使用通常的 lambda 来说明这一点：
- en: '[PRE445]'
  id: totrans-1884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: The `creator` function accepts a single argument in the case of a list- or set-
    based collection, or a scalar attribute. In the case of a dictionary-based collection,
    it accepts two arguments, “key” and “value”. An example of this is below in [Proxying
    to Dictionary Based Collections](#proxying-dictionaries).
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表或集合类型的集合或标量属性的情况下，`creator`函数接受一个参数。 在基于字典的集合的情况下，它接受两个参数，“key”和“value”。
    下面的示例在[代理到基于字典的集合](#proxying-dictionaries)中给出。
- en: Simplifying Association Objects
  id: totrans-1886
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简化关联对象
- en: The “association object” pattern is an extended form of a many-to-many relationship,
    and is described at [Association Object](../basic_relationships.html#association-pattern).
    Association proxies are useful for keeping “association objects” out of the way
    during regular use.
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: “关联对象”模式是多对多关系的扩展形式，并在[关联对象](../basic_relationships.html#association-pattern)中进行了描述。
    在常规使用过程中，关联代理对于保持“关联对象”不被干扰非常有用。
- en: 'Suppose our `user_keyword` table above had additional columns which we’d like
    to map explicitly, but in most cases we don’t require direct access to these attributes.
    Below, we illustrate a new mapping which introduces the `UserKeywordAssociation`
    class, which is mapped to the `user_keyword` table illustrated earlier. This class
    adds an additional column `special_key`, a value which we occasionally want to
    access, but not in the usual case. We create an association proxy on the `User`
    class called `keywords`, which will bridge the gap from the `user_keyword_associations`
    collection of `User` to the `.keyword` attribute present on each `UserKeywordAssociation`:'
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们上面的`user_keyword`表有额外的列，我们希望显式映射这些列，但在大多数情况下我们不需要直接访问这些属性。下面，我们展示一个新的映射，引入了`UserKeywordAssociation`类，该类映射到前面展示的`user_keyword`表。这个类添加了一个额外的列`special_key`，我们偶尔需要访问这个值，但通常不需要。我们在`User`类上创建了一个名为`keywords`的关联代理，它将连接`User`的`user_keyword_associations`集合与每个`UserKeywordAssociation`上存在的`.keyword`属性之间的差距：
- en: '[PRE446]'
  id: totrans-1889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: 'With the above configuration, we can operate upon the `.keywords` collection
    of each `User` object, each of which exposes a collection of `Keyword` objects
    that are obtained from the underlying `UserKeywordAssociation` elements:'
  id: totrans-1890
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述配置，我们可以操作每个`User`对象的`.keywords`集合，每个对象都公开了从底层`UserKeywordAssociation`元素获取的`Keyword`对象集合：
- en: '[PRE447]'
  id: totrans-1891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: 'This example is in contrast to the example illustrated previously at [Simplifying
    Scalar Collections](#associationproxy-scalar-collections), where the association
    proxy exposed a collection of strings, rather than a collection of composed objects.
    In this case, each `.keywords.append()` operation is equivalent to:'
  id: totrans-1892
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子与之前在[Simplifying Scalar Collections](#associationproxy-scalar-collections)中展示的例子形成对比，在那个例子中，关联代理公开了一个字符串集合，而不是一个组合对象集合。在这种情况下，每个`.keywords.append()`操作等同于：
- en: '[PRE448]'
  id: totrans-1893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: The `UserKeywordAssociation` object has two attributes that are both populated
    within the scope of the `append()` operation of the association proxy; `.keyword`,
    which refers to the `Keyword` object, and `.user`, which refers to the `User`
    object. The `.keyword` attribute is populated first, as the association proxy
    generates a new `UserKeywordAssociation` object in response to the `.append()`
    operation, assigning the given `Keyword` instance to the `.keyword` attribute.
    Then, as the `UserKeywordAssociation` object is appended to the `User.user_keyword_associations`
    collection, the `UserKeywordAssociation.user` attribute, configured as `back_populates`
    for `User.user_keyword_associations`, is initialized upon the given `UserKeywordAssociation`
    instance to refer to the parent `User` receiving the append operation. The `special_key`
    argument above is left at its default value of `None`.
  id: totrans-1894
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserKeywordAssociation`对象有两个属性，这两个属性都在关联代理的`append()`操作范围内填充；`.keyword`指的是`Keyword`对象，`.user`指的是`User`对象。首先填充`.keyword`属性，因为关联代理响应`.append()`操作生成一个新的`UserKeywordAssociation`对象，将给定的`Keyword`实例分配给`.keyword`属性。然后，由于`UserKeywordAssociation`对象被追加到`User.user_keyword_associations`集合中，为`User.user_keyword_associations`配置为`back_populates`的`UserKeywordAssociation.user`属性在给定的`UserKeywordAssociation`实例上初始化，以指向接收追加操作的父`User`。上面的`special_key`参数保持其默认值为`None`。'
- en: 'For those cases where we do want `special_key` to have a value, we create the
    `UserKeywordAssociation` object explicitly. Below we assign all three attributes,
    wherein the assignment of `.user` during construction, has the effect of appending
    the new `UserKeywordAssociation` to the `User.user_keyword_associations` collection
    (via the relationship):'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些我们确实希望`special_key`有一个值的情况，我们显式创建`UserKeywordAssociation`对象。下面我们分配了所有三个属性，其中在构造过程中分配`.user`的效果是将新的`UserKeywordAssociation`追加到`User.user_keyword_associations`集合（通过关系）：
- en: '[PRE449]'
  id: totrans-1896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: 'The association proxy returns to us a collection of `Keyword` objects represented
    by all these operations:'
  id: totrans-1897
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理通过以下所有操作返回给我们一个由`Keyword`对象表示的集合：
- en: '[PRE450]'
  id: totrans-1898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '## Proxying to Dictionary Based Collections'
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: '## 代理到基于字典的集合'
- en: The association proxy can proxy to dictionary based collections as well. SQLAlchemy
    mappings usually use the [`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") collection type to create dictionary collections,
    as well as the extended techniques described in [Custom Dictionary-Based Collections](../collection_api.html#id1).
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理也可以代理基于字典的集合。SQLAlchemy映射通常使用[`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")集合类型来创建字典集合，以及[自定义基于字典的集合](../collection_api.html#id1)中描述的扩展技术。
- en: The association proxy adjusts its behavior when it detects the usage of a dictionary-based
    collection. When new values are added to the dictionary, the association proxy
    instantiates the intermediary object by passing two arguments to the creation
    function instead of one, the key and the value. As always, this creation function
    defaults to the constructor of the intermediary class, and can be customized using
    the `creator` argument.
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到使用基于字典的集合时，关联代理会调整其行为。当新值添加到字典中时，关联代理通过将两个参数传递给创建函数而不是一个参数来实例化中间对象，即键和值。与往常一样，这个创建函数默认为中间类的构造函数，并且可以使用`creator`参数进行定制。
- en: 'Below, we modify our `UserKeywordAssociation` example such that the `User.user_keyword_associations`
    collection will now be mapped using a dictionary, where the `UserKeywordAssociation.special_key`
    argument will be used as the key for the dictionary. We also apply a `creator`
    argument to the `User.keywords` proxy so that these values are assigned appropriately
    when new elements are added to the dictionary:'
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，我们修改了我们的`UserKeywordAssociation`示例，使得`User.user_keyword_associations`集合现在将使用字典映射，其中`UserKeywordAssociation.special_key`参数将用作字典的键。我们还将`User.keywords`代理应用了`creator`参数，以便在向字典添加新元素时适当地分配这些值：
- en: '[PRE451]'
  id: totrans-1903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'We illustrate the `.keywords` collection as a dictionary, mapping the `UserKeywordAssociation.special_key`
    value to `Keyword` objects:'
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`.keywords`集合说明为一个字典，将`UserKeywordAssociation.special_key`值映射到`Keyword`对象：
- en: '[PRE452]'
  id: totrans-1905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '## Composite Association Proxies'
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: '## 组合关联代理'
- en: 'Given our previous examples of proxying from relationship to scalar attribute,
    proxying across an association object, and proxying dictionaries, we can combine
    all three techniques together to give `User` a `keywords` dictionary that deals
    strictly with the string value of `special_key` mapped to the string `keyword`.
    Both the `UserKeywordAssociation` and `Keyword` classes are entirely concealed.
    This is achieved by building an association proxy on `User` that refers to an
    association proxy present on `UserKeywordAssociation`:'
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们之前的从关系到标量属性的代理示例，跨关联对象进行代理，以及代理字典的示例，我们可以将所有三种技术结合起来，为`User`提供一个严格处理`special_key`字符串值映射到字符串`keyword`的`keywords`字典。`UserKeywordAssociation`和`Keyword`类都完全隐藏了。这是通过在`User`上构建一个关联代理来实现的，该代理指向`UserKeywordAssociation`上存在的关联代理：
- en: '[PRE453]'
  id: totrans-1908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '`User.keywords` is now a dictionary of string to string, where `UserKeywordAssociation`
    and `Keyword` objects are created and removed for us transparently using the association
    proxy. In the example below, we illustrate usage of the assignment operator, also
    appropriately handled by the association proxy, to apply a dictionary value to
    the collection at once:'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: '`User.keywords`现在是一个字符串到字符串的字典，其中`UserKeywordAssociation`和`Keyword`对象被透明地创建和删除，使用关联代理。在下面的示例中，我们说明了使用赋值运算符的用法，这也由关联代理适当处理，一次将字典值应用到集合中：'
- en: '[PRE454]'
  id: totrans-1910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: One caveat with our example above is that because `Keyword` objects are created
    for each dictionary set operation, the example fails to maintain uniqueness for
    the `Keyword` objects on their string name, which is a typical requirement for
    a tagging scenario such as this one. For this use case the recipe [UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject),
    or a comparable creational strategy, is recommended, which will apply a “lookup
    first, then create” strategy to the constructor of the `Keyword` class, so that
    an already existing `Keyword` is returned if the given name is already present.
  id: totrans-1911
  prefs: []
  type: TYPE_NORMAL
  zh: 上面示例的一个注意事项是，因为对每个字典设置操作都会创建`Keyword`对象，所以示例无法保持`Keyword`对象在其字符串名称上的唯一性，这是像这样的标记场景的典型要求。对于这种用例，推荐使用[UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject)这样的配方，或者类似的创建策略，它将对`Keyword`类的构造函数应用“先查找，然后创建”的策略，以便如果给定名称已经存在，则返回已存在的`Keyword`。
- en: Querying with Association Proxies
  id: totrans-1912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用关联代理进行查询
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    features simple SQL construction capabilities which work at the class level in
    a similar way as other ORM-mapped attributes, and provide rudimentary filtering
    support primarily based on the SQL `EXISTS` keyword.
  id: totrans-1913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    具有简单的 SQL 构建能力，其工作方式类似于其他 ORM 映射的属性，并提供基于 SQL `EXISTS` 关键字的基本过滤支持。'
- en: Note
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The primary purpose of the association proxy extension is to allow for improved
    persistence and object-access patterns with mapped object instances that are already
    loaded. The class-bound querying feature is of limited use and will not replace
    the need to refer to the underlying attributes when constructing SQL queries with
    JOINs, eager loading options, etc.
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: 关联代理扩展的主要目的是允许改进对已加载的映射对象实例的持久性和对象访问模式。类绑定查询功能的用途有限，并不会取代在构建具有 JOIN、急加载选项等 SQL
    查询时引用底层属性的需要。
- en: 'For this section, assume a class with both an association proxy that refers
    to a column, as well as an association proxy that refers to a related object,
    as in the example mapping below:'
  id: totrans-1916
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，请假设一个既有关联代理指向列，又有关联代理指向相关对象的类，就像下面的示例映射一样：
- en: '[PRE455]'
  id: totrans-1917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: 'The SQL generated takes the form of a correlated subquery against the EXISTS
    SQL operator so that it can be used in a WHERE clause without the need for additional
    modifications to the enclosing query. If the immediate target of an association
    proxy is a **mapped column expression**, standard column operators can be used
    which will be embedded in the subquery. For example a straight equality operator:'
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 SQL 采用针对 EXISTS SQL 操作符的相关子查询形式，以便可以在不需要对封闭查询进行其他修改的情况下在 WHERE 子句中使用。如果关联代理的直接目标是**映射的列表达式**，则可以使用标准列操作符，这些操作符将嵌入在子查询中。例如，一个直接的等式操作符：
- en: '[PRE456]'
  id: totrans-1919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'a LIKE operator:'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 LIKE 操作符：
- en: '[PRE457]'
  id: totrans-1921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: 'For association proxies where the immediate target is a **related object or
    collection, or another association proxy or attribute on the related object**,
    relationship-oriented operators can be used instead, such as [`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has") and [`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any"). The `User.keywords` attribute is in fact
    two association proxies linked together, so when using this proxy for generating
    SQL phrases, we get two levels of EXISTS subqueries:'
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: 对于关联代理，其直接目标是**相关对象或集合，或相关对象上的另一个关联代理或属性**的情况，可以使用与关系相关的操作符，例如[`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has")和[`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any")。`User.keywords`属性实际上是两个关联代理链接在一起，因此在使用该代理生成
    SQL 短语时，我们得到两个级别的 EXISTS 子查询：
- en: '[PRE458]'
  id: totrans-1923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: This is not the most efficient form of SQL, so while association proxies can
    be convenient for generating WHERE criteria quickly, SQL results should be inspected
    and “unrolled” into explicit JOIN criteria for best use, especially when chaining
    association proxies together.
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是最有效的 SQL 形式，因此虽然关联代理可以方便快速生成 WHERE 条件，但应该检查 SQL 结果并将其“展开”为显式 JOIN 条件以获得最佳使用，特别是当将关联代理链接在一起时。
- en: 'Changed in version 1.3: Association proxy features distinct querying modes
    based on the type of target. See [AssociationProxy now provides standard column
    operators for a column-oriented target](../../changelog/migration_13.html#change-4351).'
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的更改：根据目标类型，关联代理现在提供不同的查询模式。请参阅[AssociationProxy 现在为面向列的目标提供标准列操作符](../../changelog/migration_13.html#change-4351)。
- en: '## Cascading Scalar Deletes'
  id: totrans-1926
  prefs: []
  type: TYPE_NORMAL
  zh: '## 级联标量删除'
- en: New in version 1.3.
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新增功能。
- en: 'Given a mapping as:'
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个映射如下：
- en: '[PRE459]'
  id: totrans-1929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: 'An assignment to `A.b` will generate an `AB` object:'
  id: totrans-1930
  prefs: []
  type: TYPE_NORMAL
  zh: 对 `A.b` 的赋值将生成一个 `AB` 对象：
- en: '[PRE460]'
  id: totrans-1931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: 'The `A.b` association is scalar, and includes use of the parameter [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy"). When this parameter is enabled,
    setting `A.b` to `None` will remove `A.ab` as well:'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: '`A.b` 关联是标量的，并包括使用参数 [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy")。当启用此参数时，将`A.b`设置为 `None` 将同时删除
    `A.ab`：'
- en: '[PRE461]'
  id: totrans-1933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: When [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is not set, the association
    object `a.ab` above would remain in place.
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") 未设置时，上述关联对象 `a.ab` 会保持不变。
- en: Note that this is not the behavior for collection-based association proxies;
    in that case, the intermediary association object is always removed when members
    of the proxied collection are removed. Whether or not the row is deleted depends
    on the relationship cascade setting.
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是基于集合的关联代理的行为；在这种情况下，当代理集合的成员被移除时，中介关联对象始终会被移除。行是否被删除取决于关联级联设置。
- en: See also
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Cascades](../cascades.html#unitofwork-cascades)'
  id: totrans-1937
  prefs: []
  type: TYPE_NORMAL
  zh: '[级联](../cascades.html#unitofwork-cascades)'
- en: Scalar Relationships
  id: totrans-1938
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量关系
- en: 'The example below illustrates the use of the association proxy on the many
    side of of a one-to-many relationship, accessing attributes of a scalar object:'
  id: totrans-1939
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了在一对多关系的多方上使用关联代理，以访问标量对象的属性：
- en: '[PRE462]'
  id: totrans-1940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: 'A summary of the steps of `my_snack` can be printed using:'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令可打印 `my_snack` 的摘要步骤：
- en: '[PRE463]'
  id: totrans-1942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: API Documentation
  id: totrans-1943
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: '| Object Name | Description |'
  id: totrans-1944
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1945
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target. |'
  id: totrans-1946
  prefs: []
  type: TYPE_TB
  zh: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | 返回一个实现视图的 Python 属性，该视图引用目标的成员上的属性。 |'
- en: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | A
    descriptor that presents a read/write view of an object attribute. |'
  id: totrans-1947
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | 一个描述符，提供对象属性的读/写视图。
    |'
- en: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | An enumeration. |'
  id: totrans-1948
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | 一个枚举类型。 |'
- en: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | A per-class object that serves class- and object-specific results. |'
  id: totrans-1949
  prefs: []
  type: TYPE_TB
  zh: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | 一个每个类的对象，用于提供类和对象特定的结果。 |'
- en: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target. |'
  id: totrans-1950
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | 一个 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，其目标为数据库列。 |'
- en: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target. |'
  id: totrans-1951
  prefs: []
  type: TYPE_TB
  zh: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | 一个 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，其目标为对象。 |'
- en: '[PRE464]'
  id: totrans-1952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target.
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个实现视图的 Python 属性，该视图引用目标的成员上的属性。
- en: The returned value is an instance of [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值是 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 的一个实例。
- en: Implements a Python property representing a relationship as a collection of
    simpler values, or a scalar value. The proxied property will mimic the collection
    type of the target (list, dict or set), or, in the case of a one to one relationship,
    a simple scalar value.
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个代表关系的 Python 属性，作为一组更简单值的集合，或一个标量值。代理属性将模仿目标的集合类型（list、dict 或 set），或者在一对一关系的情况下，一个简单的标量值。
- en: 'Parameters:'
  id: totrans-1956
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`target_collection` – Name of the attribute that is the immediate target. This
    attribute is typically mapped by [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") to link to a target collection, but can also be
    a many-to-one or non-scalar relationship.'
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_collection` – 目标属性的名称。该属性通常由[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")映射，以链接到目标集合，但也可以是一对多或非标量关系。'
- en: '`attr` – Attribute on the associated instance or instances that are available
    on instances of the target object.'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr` – 关联实例上可用于目标对象实例的属性。'
- en: '`creator` –'
  id: totrans-1959
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` –'
- en: optional.
  id: totrans-1960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选。
- en: Defines custom behavior when new items are added to the proxied collection.
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义了向代理集合添加新项时的自定义行为。
- en: By default, adding new items to the collection will trigger a construction of
    an instance of the target object, passing the given item as a positional argument
    to the target constructor. For cases where this isn’t sufficient, [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") can supply a callable that
    will construct the object in the appropriate way, given the item that was passed.
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，向集合添加新项将触发构造目标对象的实例，将给定项作为位置参数传递给目标构造函数。对于这种情况不足的情况，[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")可以提供一个可调用对象，该对象将以适当的方式构造对象，给定传递的项。
- en: For list- and set- oriented collections, a single argument is passed to the
    callable. For dictionary oriented collections, two arguments are passed, corresponding
    to the key and value.
  id: totrans-1963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于列表和集合导向的集合，将一个参数传递给可调用对象。对于字典导向的集合，将传递两个参数，对应于键和值。
- en: The [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") callable is also invoked
    for scalar (i.e. many-to-one, one-to-one) relationships. If the current value
    of the target relationship attribute is `None`, the callable is used to construct
    a new object. If an object value already exists, the given attribute value is
    populated onto that object.
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy")可调用对象也会为标量（即一对多，一对一）关系调用。如果目标关系属性的当前值为`None`，则使用可调用对象构造一个新对象。如果对象值已经存在，则给定的属性值将填充到该对象上。'
- en: See also
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Creation of New Values](#associationproxy-creator)'
  id: totrans-1966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[创建新值](#associationproxy-creator)'
- en: '`cascade_scalar_deletes` –'
  id: totrans-1967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cascade_scalar_deletes` –'
- en: when True, indicates that setting the proxied value to `None`, or deleting it
    via `del`, should also remove the source object. Only applies to scalar attributes.
    Normally, removing the proxied target will not remove the proxy source, as this
    object may have other state that is still to be kept.
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，表示将代理值设置为`None`，或通过`del`删除时，也应该删除源对象。仅适用于标量属性。通常，删除代理目标不会删除代理源，因为该对象可能还有其他状态需要保留。
- en: New in version 1.3.
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本1.3中新增。
- en: See also
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Cascading Scalar Deletes](#cascade-scalar-deletes) - complete usage example'
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[级联标量删除](#cascade-scalar-deletes) - 完整的使用示例'
- en: '`create_on_none_assignment` –'
  id: totrans-1972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_on_none_assignment` –'
- en: when True, indicates that setting the proxied value to `None` should **create**
    the source object if it does not exist, using the creator. Only applies to scalar
    attributes. This is mutually exclusive vs. the `assocation_proxy.cascade_scalar_deletes`.
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，表示将代理值设置为`None`应该**创建**源对象（如果不存在），使用创建者。仅适用于标量属性。这与`assocation_proxy.cascade_scalar_deletes`是互斥的。
- en: New in version 2.0.18.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.18中新增。
- en: '`init` –'
  id: totrans-1975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.
  id: totrans-1976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于[声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定映射属性是否应该是由数据类过程生成的`__init__()`方法的一部分。
- en: New in version 2.0.0b4.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.0b4中新增。
- en: '`repr` –'
  id: totrans-1978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repr` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the attribute established by this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") should be part of the `__repr__()`
    method as generated by the dataclass process.
  id: totrans-1979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于 [声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定由此
    [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    建立的属性是否应作为数据类过程生成的 `__repr__()` 方法的一部分。
- en: New in version 2.0.0b4.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本为 2.0.0b4。
- en: '`default_factory` –'
  id: totrans-1981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_factory` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于 [声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指定作为数据类过程的一部分进行的默认值生成函数。
- en: New in version 2.0.0b4.
  id: totrans-1983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本为 2.0.0b4。
- en: '`compare` –'
  id: totrans-1984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compare` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于 [声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指示在为映射类生成
    `__eq__()` 和 `__ne__()` 方法时，是否应将此字段包括在比较操作中。
- en: New in version 2.0.0b4.
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本为 2.0.0b4。
- en: '`kw_only` –'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kw_only` –'
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`
    method as generated by the dataclass process.
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 特定于 [声明性数据类映射](../dataclasses.html#orm-declarative-native-dataclasses)，指示在为数据类过程生成的
    `__init__()` 方法中，是否应将此字段标记为仅关键字。
- en: New in version 2.0.0b4.
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本为 2.0.0b4。
- en: '`info` – optional, will be assigned to [`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") if present.'
  id: totrans-1990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选项，如果存在，将分配给 [`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info")。'
- en: 'The following additional parameters involve injection of custom behaviors within
    the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object and are for advanced use only:'
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 下列附加参数涉及在 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 对象中注入自定义行为，仅供高级使用：
- en: 'Parameters:'
  id: totrans-1992
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`getset_factory` –'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getset_factory` –'
- en: Optional. Proxied attribute access is automatically handled by routines that
    get and set values based on the attr argument for this proxy.
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选项。代理属性访问由基于该代理的 attr 参数的 get 和 set 值的例程自动处理。
- en: If you would like to customize this behavior, you may supply a getset_factory
    callable that produces a tuple of getter and setter functions. The factory is
    called with two arguments, the abstract type of the underlying collection and
    this proxy instance.
  id: totrans-1995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想自定义此行为，可以提供一个 getset_factory 可调用对象，该对象会生成一个 getter 和 setter 函数的元组。工厂使用两个参数调用，即底层集合的抽象类型和此代理实例。
- en: '`proxy_factory` – Optional. The type of collection to emulate is determined
    by sniffing the target collection. If your collection type can’t be determined
    by duck typing or you’d like to use a different collection implementation, you
    may supply a factory function to produce those collections. Only applicable to
    non-scalar relationships.'
  id: totrans-1996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy_factory` – 可选项。要模拟的集合类型由嗅探目标集合确定。如果无法通过鸭子类型确定您的集合类型，或者您想使用不同的集合实现，可以提供一个工厂函数来生成这些集合。仅适用于非标量关系。'
- en: '`proxy_bulk_set` – Optional, use with proxy_factory.'
  id: totrans-1997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy_bulk_set` – 可选项，与 proxy_factory 一起使用。'
- en: '[PRE465]'
  id: totrans-1998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: A descriptor that presents a read/write view of an object attribute.
  id: totrans-1999
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符，用于呈现对象属性的读/写视图。
- en: '**Members**'
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
  id: totrans-2001
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
- en: '**Class signature**'
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
- en: '[PRE466]'
  id: totrans-2004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: Construct a new [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-2005
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object is typically constructed using the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") constructor function. See
    the description of [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") for a description of all
    parameters.
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")对象通常使用[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")构造函数构造。有关所有参数的描述，请参阅[`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")的描述。'
- en: '[PRE467]'
  id: totrans-2007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-2008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-2009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-2010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展类型，如果有的话。默认为`NotExtension.NOT_EXTENSION`
- en: See also
  id: totrans-2012
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
- en: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
- en: '[PRE471]'
  id: totrans-2015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: Return the internal state local to a specific mapped class.
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: 返回特定映射类的内部状态。
- en: 'E.g., given a class `User`:'
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定一个类 `User`：
- en: '[PRE472]'
  id: totrans-2018
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: 'If we access this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") from [`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), and we want to view the target class
    for this proxy as mapped by `User`:'
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从 [`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors") 访问此 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")，并且我们想要查看由 `User` 映射的此代理的目标类：
- en: '[PRE473]'
  id: totrans-2020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: This returns an instance of [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that is specific to
    the `User` class. The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object remains agnostic of
    its parent class.
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个特定于 `User` 类的 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 实例。 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 对象保持对其父类的不可知性。
- en: 'Parameters:'
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`class_` – the class that we are returning state for.'
  id: totrans-2023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 我们要返回状态的类。'
- en: '`obj` – optional, an instance of the class that is required if the attribute
    refers to a polymorphic target, e.g. where we have to look at the type of the
    actual destination object to get the complete path.'
  id: totrans-2024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 可选，如果属性引用多态目标，则需要该类的实例，例如，在我们必须查看实际目标对象的类型以获取完整路径的情况下。'
- en: 'New in version 1.3: - [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") no longer stores any state
    specific to a particular parent class; the state is now stored in per-class [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") objects.'
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能：- [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 不再存储任何特定于特定父类的状态；状态现在存储在每个类的
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 对象中。
- en: '[PRE474]'
  id: totrans-2026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-2027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '*inherited from the* `InspectionAttrInfo.info` *attribute of* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo")'
  id: totrans-2028
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo") *的* `InspectionAttrInfo.info` *属性继承*'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: 与该 [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")
    关联的信息字典，允许将用户定义的数据与此对象关联。
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时生成。或者，它可以作为 [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 或 [`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") 函数的构造函数参数指定。
- en: See also
  id: totrans-2031
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
- en: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
- en: '[PRE476]'
  id: totrans-2034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '*inherited from the* `InspectionAttr.is_aliased_class` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_aliased_class` *属性继承*'
- en: True if this object is an instance of [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 的实例，则为 True。
- en: '[PRE477]'
  id: totrans-2037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  id: totrans-2038
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 Python 的 [descriptor](../../glossary.html#term-descriptor) 则为 True。
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以指代多种类型。通常是一个 [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")，它代表一个 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 处理属性事件。但也可以是一个扩展类型，如 [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") 或 [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")。[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") 将指代一个特定子类型的常量。
- en: See also
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
- en: '[PRE478]'
  id: totrans-2042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '*inherited from the* `InspectionAttr.is_bundle` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_bundle` *属性。'
- en: True if this object is an instance of [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    的实例，则为 True。
- en: '[PRE479]'
  id: totrans-2045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '*inherited from the* `InspectionAttr.is_clause_element` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_clause_element` *属性。'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 的实例，则为 True。
- en: '[PRE480]'
  id: totrans-2048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '*inherited from the* `InspectionAttr.is_instance` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_instance` *属性。'
- en: True if this object is an instance of [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    的实例，则为 True。
- en: '[PRE481]'
  id: totrans-2051
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '*inherited from the* `InspectionAttr.is_mapper` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2052
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_mapper` *属性。'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的实例，则为 True。
- en: '[PRE482]'
  id: totrans-2054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '*inherited from the* `InspectionAttr.is_property` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_property` *属性。'
- en: True if this object is an instance of [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty")
    的实例，则为 True。
- en: '[PRE483]'
  id: totrans-2057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '*inherited from the* `InspectionAttr.is_selectable` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.base.InspectionAttr")
    *的* `InspectionAttr.is_selectable` *属性。'
- en: Return True if this object is an instance of [`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable")的实例，则返回True。
- en: '[PRE484]'
  id: totrans-2060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-2061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-2062
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-2063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-2064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-2065
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: A per-class object that serves class- and object-specific results.
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: 一个为类和对象提供特定结果的对象。
- en: This is used by [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") when it is invoked in terms
    of a specific class or instance of a class, i.e. when it is used as a regular
    Python descriptor.
  id: totrans-2067
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")在特定类或类实例的术语中被调用时，即当它被用作常规的Python描述符时，会使用这个对象。
- en: 'When referring to the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as a normal Python descriptor,
    the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") is the object that
    actually serves the information. Under normal circumstances, its presence is transparent:'
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 当将[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")作为普通的Python描述符引用时，[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")是实际提供信息的对象。在正常情况下，它的存在是透明的：
- en: '[PRE490]'
  id: totrans-2069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: 'In the special case that the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object is being accessed directly,
    in order to get an explicit handle to the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"), use the [`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") method:'
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: 在特殊情况下，直接访问[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")对象时，为了获得对[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")的明确处理，使用[`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class")方法：
- en: '[PRE491]'
  id: totrans-2071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: New in version 1.3.
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: '**Members**'
  id: totrans-2073
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
- en: '[PRE492]'
  id: totrans-2077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `==` operator.
  id: totrans-2079
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`==`运算符。
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a = b`。如果目标是`None`，则生成`a IS NULL`。
- en: '[PRE493]'
  id: totrans-2081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__le__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `<=` operator.
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<=`运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a <= b`。
- en: '[PRE494]'
  id: totrans-2085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `<` operator.
  id: totrans-2087
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`<`运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a < b`。
- en: '[PRE495]'
  id: totrans-2089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `!=` operator.
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`!=`运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-2092
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a != b`。如果目标是`None`，则生成`a IS NOT NULL`。
- en: '[PRE496]'
  id: totrans-2093
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2094
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-2097
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 一定不要混淆新的[`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与此方法的**旧版**，特定于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，它使用不同的调用风格。
- en: '[PRE497]'
  id: totrans-2099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-2100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成一个代理的“any”表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用底层代理属性的`Comparator.any()`和/或`Comparator.has()`运算符进行组合乘积。
- en: '[PRE498]'
  id: totrans-2102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-2104
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") 子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: 有关示例，请参阅 [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") 的文档。
- en: Note
  id: totrans-2106
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要混淆较新的 [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") 方法与这个方法的**旧版**，即 [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") 的特定于 [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") 方法，后者使用了不同的调用风格。
- en: '[PRE499]'
  id: totrans-2108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") 子句。
- en: '[PRE500]'
  id: totrans-2111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组 `(local_attr, remote_attr)`。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-2113
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性最初旨在促进使用 [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法一次加入两个关系，但这使用了已弃用的调用风格。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `select.join()` 或 [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 来处理关联代理，当前的方法是分别使用 [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") 和 [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") 属性：
- en: '[PRE501]'
  id: totrans-2115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的版本可能会提供更简洁的关联代理属性加入模式。
- en: See also
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-2119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE502]'
  id: totrans-2120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2121
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成 [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") 子句，给定下限和上限范围。
- en: '[PRE503]'
  id: totrans-2123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位与操作，通常使用 `&` 运算符。
- en: New in version 2.0.2.
  id: totrans-2126
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE504]'
  id: totrans-2129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位左移操作，通常使用 `<<` 运算符。
- en: New in version 2.0.2.
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE505]'
  id: totrans-2135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-2137
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位非操作，通常使用 `~` 运算符。
- en: New in version 2.0.2.
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2140
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE506]'
  id: totrans-2141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2142
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位或操作，通常使用 `|` 运算符。
- en: New in version 2.0.2.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2145
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE507]'
  id: totrans-2147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2148
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法，来自于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位右移操作，通常使用 `>>` 运算符。
- en: New in version 2.0.2.
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2152
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE508]'
  id: totrans-2153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-2155
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个位异或操作，通常通过 `^` 运算符，或 PostgreSQL 上的 `#` 运算符。
- en: New in version 2.0.2.
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.2 中新增。
- en: See also
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE509]'
  id: totrans-2159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-2162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法是调用 [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的简写。 使用 [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在
    [**PEP 484**](https://peps.python.org/pep-0484/) 目的上。
- en: See also
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE510]'
  id: totrans-2165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2166
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象产生一个 [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 子句，给定排序规则字符串。
- en: See also
  id: totrans-2168
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE511]'
  id: totrans-2170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-2171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-2174
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a || b`，或在 MySQL 上使用 `concat()` 运算符。
- en: '[PRE513]'
  id: totrans-2175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法，属于* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-2177
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘包含’运算符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值的中间匹配：
- en: '[PRE514]'
  id: totrans-2179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: 'E.g.:'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE515]'
  id: totrans-2181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用 `LIKE`，因此存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 `True`，以对字符串值中这些字符的出现应用转义，以使它们作为自身而不是通配符字符匹配。另外，[`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 参数将确立一个给定字符作为转义字符，这在目标表达式不是字面字符串时很有用。
- en: 'Parameters:'
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-2184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个纯字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认情况下不会转义，除非
    [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志设置为 True。'
- en: '`autoescape` –'
  id: totrans-2185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值内的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE516]'
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'Will render as:'
  id: totrans-2189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染结果为：
- en: '[PRE517]'
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE517]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值 `:param` 作为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定一个字符时，该字符将使用 `ESCAPE` 关键字渲染，以将该字符作为转义字符。然后，该字符可以放在 `%` 和 `_` 的前面，以允许它们充当它们自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE518]'
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'Will render as:'
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染结果为：
- en: '[PRE519]'
  id: totrans-2197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE519]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE520]'
  id: totrans-2199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE520]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面的情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-2201
  prefs: []
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-2203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE521]'
  id: totrans-2205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-2206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-2208
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") 子句。
- en: '[PRE523]'
  id: totrans-2209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-2211
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") 子句。
- en: '[PRE524]'
  id: totrans-2212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2213
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: Implement the ‘endswith’ operator.
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 'endswith' 运算符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个 LIKE 表达式，用于测试字符串值的结尾匹配：
- en: '[PRE525]'
  id: totrans-2216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: 'E.g.:'
  id: totrans-2217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE526]'
  id: totrans-2218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2219
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用了 `LIKE`，所以在 <other> 表达式中存在的通配符字符 `"%"` 和 `"_"` 也会像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 标志设置为 `True`，以将这些字符在字符串值内的出现进行转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能会有所帮助。
- en: 'Parameters:'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常是一个普通字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非设置了[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-2222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个文字字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE527]'
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE527]'
- en: 'Will render as:'
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE528]'
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE528]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值为`:param`的`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来将该字符作为转义字符。然后可以将此字符放在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE529]'
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE529]'
- en: 'Will render as:'
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE530]'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE530]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-2235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE531]'
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE531]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2239
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE532]'
  id: totrans-2242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-2243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-2244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个使用EXISTS的代理‘has’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符进行组合。
- en: '[PRE535]'
  id: totrans-2247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-2250
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值中间的不区分大小写匹配进行测试：
- en: '[PRE536]'
  id: totrans-2251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: 'E.g.:'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE537]'
  id: totrans-2253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，因此在 <other> 表达式中出现的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于文本字符串值，可以将
    [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，以使它们与自身匹配而不是作为通配符字符。另外，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 参数将建立一个给定的字符作为转义字符，当目标表达式不是文本字符串时，这可能会有所帮助。
- en: 'Parameters:'
  id: totrans-2255
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非设置了 [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志为 True，否则 LIKE 通配符 `%`
    和 `_` 默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-2257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有的 `"%"`、`"_"` 和转义字符本身的出现，假定比较值是一个文本字符串而不是一个
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE538]'
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE538]'
- en: 'Will render as:'
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE539]'
  id: totrans-2262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE539]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将呈现为 `ESCAPE` 关键字以将该字符设为转义字符。然后可以将此字符放置在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE540]'
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE540]'
- en: 'Will render as:'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE541]'
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE541]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE542]'
  id: totrans-2271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE542]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文本参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE543]'
  id: totrans-2275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`iendswith`操作符，例如[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个LIKE表达式，用于对字符串值的末尾进行不区分大小写匹配：
- en: '[PRE544]'
  id: totrans-2279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: 'E.g.:'
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE545]'
  id: totrans-2281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样行为。对于字面字符串值，可以将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为`True`，以对字符串值内部这些字符的出现进行转义，使它们作为自己而不是通配符字符匹配。或者，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")参数将建立一个给定字符作为转义字符，这在目标表达式不是字面字符串时可能有用。
- en: 'Parameters:'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-2284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` - 要进行比较的表达式。通常这是一个简单的字符串值，但也可以是任意SQL表达式。除非将[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")标志设置为True，否则LIKE通配符字符`%`和`_`不会被转义。'
- en: '`autoescape` –'
  id: totrans-2285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` -'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符自身的出现，该比较值假定为字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE546]'
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE546]'
- en: 'Will render as:'
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE547]'
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE547]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` -'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定字符，当使用`ESCAPE`关键字时，将该字符设定为转义字符。这个字符可以放在`%`和`_`之前，以允许它们作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE548]'
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE548]'
- en: 'Will render as:'
  id: totrans-2296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE549]'
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE549]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与[`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")结合使用：
- en: '[PRE550]'
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE550]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE551]'
  id: totrans-2303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2304
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，不区分大小写的LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-2306
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成一个形式为的表达式：
- en: '[PRE552]'
  id: totrans-2307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-2308
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持ILIKE运算符的后端上：
- en: '[PRE553]'
  id: totrans-2309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: 'E.g.:'
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE554]'
  id: totrans-2311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: 'Parameters:'
  id: totrans-2312
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE555]'
  id: totrans-2316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE555]'
- en: See also
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE556]'
  id: totrans-2319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-2321
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的参数`other`可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-2324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE557]'
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE557]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，项目列表被转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE558]'
  id: totrans-2327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE558]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-2328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较对象是包含多个表达式的[`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")元组列表可以提供：
- en: '[PRE559]'
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE559]'
- en: 'An empty list, e.g.:'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE560]'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE560]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图获得一个空的SELECT语句作为子查询。例如，在SQLite上，表达式是：
- en: '[PRE561]'
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE561]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-2334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.4中的更改：现在在所有情况下，空的IN表达式都使用执行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-2335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用一个绑定参数，例如[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，如果它包含[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志：
- en: '[PRE562]'
  id: totrans-2336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE562]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式呈现一个特殊的非SQL占位符表达式，看起来像：
- en: '[PRE563]'
  id: totrans-2338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE563]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时被拦截，转换为前面所示的可变数量的绑定参数形式。如果语句执行为：
- en: '[PRE564]'
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE564]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE565]'
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE565]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-2343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能：添加了“expanding”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则会呈现一个特殊的“空列表”表达式，这是特定于正在使用的数据库的。在SQLite上，这将是：
- en: '[PRE566]'
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE566]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能：现在支持空列表的“expanding”绑定参数
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-2347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")构造，通常是一个相关的标量选择：
- en: '[PRE567]'
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE567]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-2349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")呈现如下：
- en: '[PRE568]'
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE568]'
- en: 'Parameters:'
  id: totrans-2351
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个文字列表，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，或者一个包含设置为True的[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志的[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造。'
- en: '[PRE569]'
  id: totrans-2353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-2354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS`会自动生成，解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS`。
- en: See also
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE571]'
  id: totrans-2360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-2362
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上如SQLite可能呈现“a IS NOT b”。
- en: '[PRE572]'
  id: totrans-2364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2365
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2367
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，`IS NOT`会自动生成，解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()`运算符从先前版本的`isnot()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE573]'
  id: totrans-2371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2373
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上会渲染“a IS NOT DISTINCT FROM b”；但在一些平台上如 SQLite 可能会渲染“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not_distinct_from()`操作符从之前的版本中的`isnot_distinct_from()`重命名为`is_not_distinct_from()`。以前的名称仍然可用于向后兼容。
- en: '[PRE574]'
  id: totrans-2376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2377
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `IS NOT` operator.
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，它将解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能希望明确使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2380
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not()`操作符从之前的版本中的`isnot()`重命名为`is_not()`。以前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE575]'
  id: totrans-2383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2384
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT DISTINCT FROM`操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数平台上会渲染“a IS NOT DISTINCT FROM b”；但在一些平台上如 SQLite 可能会渲染“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2387
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：`is_not_distinct_from()`操作符从之前的版本中的`isnot_distinct_from()`重命名为`is_not_distinct_from()`。以前的名称仍然可用于向后兼容。
- en: '[PRE576]'
  id: totrans-2388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`istartswith`操作符，例如[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")的大小写不敏感版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-2391
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的开头进行大小写不敏感匹配测试：
- en: '[PRE577]'
  id: totrans-2392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'E.g.:'
  id: totrans-2393
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE578]'
  id: totrans-2394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用 `LIKE`，所以存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于文字字符串值，可以将
    [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 `True`，以对字符串值内这些字符的出现应用转义，使它们与自身匹配而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能有用。
- en: 'Parameters:'
  id: totrans-2396
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-2397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符 `%` 和 `_` 默认情况下不会转义，除非设置了
    [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志为 True。'
- en: '`autoescape` –'
  id: totrans-2398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式内建立一个转义字符，然后将其应用于比较值内所有的 `"%"`、`"_"` 和转义字符本身的出现，假定比较值为文字字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE579]'
  id: totrans-2401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE579]'
- en: 'Will render as:'
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE580]'
  id: totrans-2403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE580]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中 `:param` 的值为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将以 `ESCAPE` 关键字呈现，以将该字符建立为转义字符。然后，可以将此字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE581]'
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE581]'
- en: 'Will render as:'
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE582]'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE582]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数也可以与 [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 结合使用：
- en: '[PRE583]'
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE583]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE584]'
  id: totrans-2416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-2418
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 操作符。
- en: 'In a column context, produces the expression:'
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生表达式：
- en: '[PRE585]'
  id: totrans-2420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: 'E.g.:'
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE586]'
  id: totrans-2422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: 'Parameters:'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-2425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-2426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现 `ESCAPE` 关键字，例如：
- en: '[PRE587]'
  id: totrans-2427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE587]'
- en: See also
  id: totrans-2428
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE588]'
  id: totrans-2430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-2431
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的 ‘local’ 类属性。
- en: See also
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-2433
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE589]'
  id: totrans-2435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2436
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的 ‘match’ 操作符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的 MATCH 类似函数或操作符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-2439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 呈现 `x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-2440
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '从版本 2.0 开始更改：现在为 PostgreSQL 使用 `plainto_tsquery()` 而不是 `to_tsquery()`；为了与其他形式兼容，请参阅
    [全文搜索](../../dialects/postgresql.html#postgresql-match)。 '
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-2441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 呈现 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有附加功能的特定于 MySQL 的构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-2444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 呈现 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-2446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将操作符输出为“MATCH”。例如，这与 SQLite 兼容。
- en: '[PRE590]'
  id: totrans-2447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2449
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT ILIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在 [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 中使用否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2451
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改：`not_ilike()` 操作符从先前版本的 `notilike()` 重命名。之前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE591]'
  id: totrans-2454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2455
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-2457
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")中使用否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`是空序列的情况下，编译器会生成一个“空not in”表达式。默认情况下，这会产生一个“1 = 1”的表达式，以在所有情况下产生true。可以使用[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2459
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()`运算符从先前版本的`notin_()`重命名。以确保向后兼容性，先前的名称仍可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")运算符现在默认情况下为一个空IN序列生成一个“静态”表达式。
- en: See also
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2462
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE592]'
  id: totrans-2463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")中使用否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()`运算符从先前版本的`notlike()`重命名。以确保向后兼容性，先前的名称仍可用。
- en: See also
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE593]'
  id: totrans-2470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-2473
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用 [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 进行否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()` 操作符从先前版本的 `notilike()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2476
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE594]'
  id: totrans-2477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2478
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT IN` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用 [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 进行否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-2481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，则编译器会生成一个“空的不在”表达式。默认情况下，这等同于表达式“1 = 1”，在所有情况下都返回 true。可以使用
    [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 来更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()` 操作符从先前版本的 `notin_()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下为一个空的 IN 序列生成一个“静态”表达式。
- en: See also
  id: totrans-2484
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE595]'
  id: totrans-2486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-2488
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 进行否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()` 操作符从先前版本的 `notlike()` 重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-2491
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE596]'
  id: totrans-2493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-2495
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`nulls_first()`运算符在先前版本中从`nullsfirst()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE597]'
  id: totrans-2497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2498
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`nulls_last()`运算符在先前版本中从`nullslast()`重命��。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE598]'
  id: totrans-2501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2502
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2504
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`nulls_first()`运算符在先前版本中从`nullsfirst()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE599]'
  id: totrans-2505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-2507
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本更改：`nulls_last()`运算符在先前版本中从`nullslast()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE600]'
  id: totrans-2509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2510
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE601]'
  id: totrans-2513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: 'produces:'
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE602]'
  id: totrans-2515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来使位运算符明确。例如：
- en: '[PRE603]'
  id: totrans-2517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中值的按位与。
- en: 'Parameters:'
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-2520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 一个字符串，将作为中缀运算符输出在此元素和传递给生成函数的表达式之间。'
- en: '`precedence` –'
  id: totrans-2521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期数据库在SQL表达式中应用于运算符的优先级。这个整数值作为SQL编译器的提示，用于确定何时应该在特定操作周围渲染显式括号。较低的数字将导致在应用于具有更高优先级的另一个运算符时对表达式进行括号化。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，-100将低于或等于所有运算符。
- en: See also
  id: totrans-2523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用`op()`生成自定义运算符，但我的括号没有正确显示](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-2525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-2526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统; 如果为True，则将运算符视为“比较”运算符，即评估为布尔真/假值的运算符，如`==`，`>`等。提供此标志是为了ORM关系可以在自定义连接条件中使用运算符时建立该运算符是比较运算符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-2527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")方法取代；这个更简洁的运算符会自动设置此参数，但也提供了正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即`BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")类或对象，将强制此运算符生成的表达式的返回类型为该类型。默认情况下，指定[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")的运算符将解析为[`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而未指定的运算符将与左操作数的类型相同。'
- en: '`python_impl` –'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的Python函数，可以像数据库服务器上运行此操作符时的工作方式一样评估两个Python值。适用于在Python中的SQL表达式评估函数，例如用于ORM混合属性的，以及在多行更新或删除后用于匹配会话中的对象的ORM“评估器”。
- en: 'e.g.:'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE604]'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE604]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也将适用于非SQL左侧和右侧对象：
- en: '[PRE605]'
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE605]'
- en: New in version 2.0.
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从2.0版开始。
- en: See also
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-2537
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的操作符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-2539
  prefs: []
  type: TYPE_NORMAL
  zh: '[在联接条件中使用自定义操作符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE606]'
  id: totrans-2540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Operate on an argument.
  id: totrans-2542
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认会引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上覆盖此操作可以允许将常见行为应用于所有操作。例如，覆盖 [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以将 `func.lower()` 应用于左右两侧：
- en: '[PRE607]'
  id: totrans-2545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: 'Parameters:'
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-2547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘其他’一侧。 对于大多数操作，将是单个标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-2549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊操作符传递，如 `ColumnOperators.contains()`。'
- en: '[PRE608]'
  id: totrans-2550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-2551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2552
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了一个特定于数据库的‘正则匹配’操作符。
- en: 'E.g.:'
  id: totrans-2554
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE610]'
  id: totrans-2555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为由后端提供的类似REGEXP的函数或操作符，但是具体的正则表达式语法和可用标志**与后端无关**。'
- en: 'Examples include:'
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-2558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时渲染 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-2560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用SQLite的 `REGEXP` 占位符操作符并调用Python的 `re.match()` 内建函数。
- en: other backends may provide special implementations.
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-2562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将操作符发出为“REGEXP”或“NOT REGEXP”。 例如，这与SQLite和MySQL兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
  zh: 目前Oracle、PostgreSQL、MySQL和MariaDB均已实现了正则表达式支持。SQLite部分支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-2565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-2566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通Python字符串传递。这些标志是特定于后端的。某些后端，如PostgreSQL和MariaDB，可能会将标志作为模式的一部分来指定。在PostgreSQL中使用忽略大小写标志‘i’时，将使用忽略大小写的正则表达式匹配运算符`~*`或`!~*`。'
- en: New in version 1.4.
  id: totrans-2567
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.48更改：2.0.18 请注意，由于实现错误，“flags”参数先前接受了SQL表达式对象，例如列表达式，除了普通的Python字符串。此实现与缓存不兼容，并已删除；应仅传递字符串作为“flags”参数，因为这些标志将作为SQL表达式中的文字内联值呈现。
- en: See also
  id: totrans-2569
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE611]'
  id: totrans-2571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2572
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的“regexp replace”运算符。
- en: 'E.g.:'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE612]'
  id: totrans-2575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators") 试图解析为后端提供的类似REGEXP_REPLACE的函数，通常会生成函数`REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用的标志**不是后端通用的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: 目前Oracle、PostgreSQL、MySQL 8或更高版本和MariaDB均已实现了正则表达式替换支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-2580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通Python字符串传递。这些标志是特定于后端的。某些后端，如PostgreSQL和MariaDB，可能会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-2583
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.48更改为：2.0.18 请注意，由于实现错误，之前的“flags”参数接受了SQL表达式对象，例如列表达式，而不仅仅是普通的Python字符串。该实现与缓存一起不正确地工作，并已删除；仅应传递字符串作为“flags”参数，因为这些标志被渲染为SQL表达式中的文字内联值。
- en: See also
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE613]'
  id: totrans-2586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用的“remote”类属性。
- en: See also
  id: totrans-2588
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[PRE614]'
  id: totrans-2591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数上执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate").
  id: totrans-2594
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与[`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate")相同。
- en: '[PRE615]'
  id: totrans-2595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")代理了本地一侧的标量关系，则返回`True`。
- en: '[PRE616]'
  id: totrans-2597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-2598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-2601
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的开头匹配：
- en: '[PRE618]'
  id: totrans-2602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: 'E.g.:'
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE619]'
  id: totrans-2604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2605
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作员使用 `LIKE`，所以在 <other> 表达式内存在的通配符字符 `"%"` 和 `"_"` 也将像通配符一样运行。对于文字字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们作为自身而不是通配符字符匹配。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 参数将建立一个给定的字符作为转义字符，这在目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的 SQL 表达式。默认情况下，LIKE 通配符字符 `%` 和 `_`
    不被转义，除非 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 标志被设置为 True。'
- en: '`autoescape` –'
  id: totrans-2608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中的所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个文字字符串而不是一个
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE620]'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE620]'
- en: 'Will render as:'
  id: totrans-2612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE621]'
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE621]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值为 `:param` 的 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字将该字符设定为转义字符。然后可以将此字符放置在 `%` 和 `_` 出现之前，以使它们可以作为自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE622]'
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE622]'
- en: 'Will render as:'
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE623]'
  id: totrans-2620
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE623]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-2621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 结合使用：
- en: '[PRE624]'
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE624]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数在传递到数据库之前将被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2627
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE625]'
  id: totrans-2628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")处理的中间类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的追加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE626]'
  id: totrans-2631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-2633
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较日期时间对象。
- en: '[PRE627]'
  id: totrans-2634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target.
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")，其目标是一个对象。
- en: '**Members**'
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
  zh: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  id: totrans-2639
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance")（[`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")）
- en: '[PRE628]'
  id: totrans-2640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2641
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法*'
- en: Implement the `<=` operator.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 操作符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a <= b`。
- en: '[PRE629]'
  id: totrans-2644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2645
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法*'
- en: Implement the `<` operator.
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 操作符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-2647
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a < b`。
- en: '[PRE630]'
  id: totrans-2648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2649
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法*'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") 子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")的文档以获取示例。
- en: Note
  id: totrans-2652
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆较新的[`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_")方法与**旧版本**该方法，即特定于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的[`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all")方法，后者使用不同的调用风格。
- en: '[PRE631]'
  id: totrans-2654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") *的* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *方法*'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EXISTS 生成代理的‘any’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-2657
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用底层代理属性的`Comparator.any()`和/或`Comparator.has()`操作符进行组合。
- en: '[PRE632]'
  id: totrans-2658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2659
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法*'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-2661
  prefs: []
  type: TYPE_NORMAL
  zh: 有关示例，请参阅[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")的文档。
- en: Note
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-2663
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必不要混淆较新的[`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与此方法的**旧版**，即[`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法，后者特定于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，其使用了不同的调用样式。
- en: '[PRE633]'
  id: totrans-2664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE634]'
  id: totrans-2667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-2668
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组`(local_attr, remote_attr)`。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-2670
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性最初旨在方便使用[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法同时跨两个关系进行连接，但这使用了已弃用的调用样式。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`select.join()`或[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")与关联代理，当前方法是分别利用[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")和[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")属性：
- en: '[PRE635]'
  id: totrans-2672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的一个版本可能会提供更简洁的关联代理属性连接模式。
- en: See also
  id: totrans-2674
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-2676
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE636]'
  id: totrans-2677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2678
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象执行[`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") 子句，给定下限和上限范围。
- en: '[PRE637]'
  id: totrans-2680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2681
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位与操作，通常使用`&`运算符。
- en: New in version 2.0.2.
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.2 新增。
- en: See also
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE638]'
  id: totrans-2686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位左移操作，通常使用`<<`运算符。
- en: New in version 2.0.2.
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.2 新增。
- en: See also
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE639]'
  id: totrans-2692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位非操作，通常使用`~`运算符。
- en: New in version 2.0.2.
  id: totrans-2695
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.2 新增。
- en: See also
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2697
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE640]'
  id: totrans-2698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-2700
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位或操作，通常使用`|`运算符。
- en: New in version 2.0.2.
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.2 新增。
- en: See also
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2703
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE641]'
  id: totrans-2704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位右移操作，通常使用`>>`运算符。
- en: New in version 2.0.2.
  id: totrans-2707
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.2 新增。
- en: See also
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2709
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE642]'
  id: totrans-2710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位异或运算，通常通过`^`运算符，或者对于 PostgreSQL 使用`#`。
- en: New in version 2.0.2.
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.2 中的新功能。
- en: See also
  id: totrans-2714
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE643]'
  id: totrans-2716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-2717
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用 [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 并传递 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 标志为 True 的快捷方式。使用 [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 的一个关键优势是，当使用列构造时，返回表达式的“布尔”性质将存在于[**PEP
    484**](https://peps.python.org/pep-0484/)目的中。
- en: See also
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-2721
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE644]'
  id: totrans-2722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2723
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的排序字符串生成针对父对象的 [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") 子句。
- en: See also
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-2726
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE645]'
  id: totrans-2727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-2729
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘concat’运算符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-2730
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句`a || b`，或在MySQL上使用`concat()`运算符。
- en: '[PRE646]'
  id: totrans-2731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: Produce a proxied ‘contains’ expression using EXISTS.
  id: totrans-2732
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EXISTS 生成代理的“包含”表达式。
- en: This expression will be a composed product using the `Comparator.any()`, `Comparator.has()`,
    and/or `Comparator.contains()` operators of the underlying proxied attributes.
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`、`Comparator.has()`和/或`Comparator.contains()`操作符进行组合。
- en: '[PRE647]'
  id: totrans-2734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-2736
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc")子句。
- en: '[PRE648]'
  id: totrans-2737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct")子句。
- en: '[PRE649]'
  id: totrans-2740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-2742
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’操作符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，测试字符串值的结尾是否匹配：
- en: '[PRE650]'
  id: totrans-2744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: 'E.g.:'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE651]'
  id: totrans-2746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，存在于<other>表达式中的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志可以设置为`True`，以对字符串值中这些字符的出现进行转义，使它们匹配为它们自身而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-2748
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-2749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。除非将[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志设置为True，否则LIKE通配符字符`%`和`_`不会被转义。'
- en: '`autoescape` –'
  id: totrans-2750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式内建立转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现次数，假定比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE652]'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE652]'
- en: 'Will render as:'
  id: totrans-2754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE653]'
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE653]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值为`:param`，值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字来建立该字符作为转义字符。然后可以将此字符放置在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式，例如：
- en: '[PRE654]'
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE654]'
- en: 'Will render as:'
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE655]'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE655]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与 [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 结合使用：
- en: '[PRE656]'
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE656]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2766
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2769
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE657]'
  id: totrans-2770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-2771
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *方法的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EXISTS生成一个代理的“has”表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用底层代理属性的`Comparator.any()`和/或`Comparator.has()`操作符的组合产品。
- en: '[PRE658]'
  id: totrans-2774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-2776
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`icontains`运算符，例如 [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于对字符串值中间进行不区分大小写的匹配测试：
- en: '[PRE659]'
  id: totrans-2778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: 'E.g.:'
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE660]'
  id: totrans-2780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
  zh: 由于运算符使用`LIKE`，存在于<other>表达式内部的通配符字符`"%"`和`"_"`也将像通配符一样行事。对于字面字符串值，可以将[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志设置为`True`，以对字符串值内这些字符的出现进行转义，使其与自身而不是通配符字符匹配。或者，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-2782
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-2783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常这是一个简单的字符串值，但也可以是任意的SQL表达式。LIKE通配符`%`和`_`默认情况下不会转义，除非设置了[`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains")标志为True。'
- en: '`autoescape` –'
  id: totrans-2784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值内所有的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE661]'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE661]'
- en: 'Will render as:'
  id: totrans-2788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE662]'
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE662]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将其渲染为转义字符。然后，可以将此字符放置在`%`和`_`之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE663]'
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE663]'
- en: 'Will render as:'
  id: totrans-2795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE664]'
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE664]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains")结合使用：
- en: '[PRE665]'
  id: totrans-2798
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE665]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2800
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-2801
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[PRE666]'
  id: totrans-2802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2803
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `iendswith` 操作符，例如 [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-2805
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 `LIKE` 表达式，对字符串值的末尾进行不区分大小写匹配：
- en: '[PRE667]'
  id: totrans-2806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: 'E.g.:'
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE668]'
  id: totrans-2808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，存在于 `<other>` 表达式内部的通配符 `"%"` 和 `"_"` 也将像通配符一样运行。对于文字字符串值，可以将
    [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们匹配为自身而不是通配符。另外，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 参数将建立一个给定的字符作为转义字符，当目标表达式不是文字字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 需要进行比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。`LIKE` 通配符 `%` 和 `_` 默认情况下不会被转义，除非
    [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 标志被设置为 `True`。'
- en: '`autoescape` –'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 `True` 时，在 `LIKE` 表达式中建立一个转义字符，然后将其应用于比较值内的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值为文字字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下表达式：
- en: '[PRE669]'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE669]'
- en: 'Will render as:'
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE670]'
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE670]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将值为 `:param` 的值设为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个字符，当给定时将使用 `ESCAPE` 关键字将其设置为转义字符。然后可以将此字符放在 `%` 和 `_` 的出现之前，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下表达式：
- en: '[PRE671]'
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE671]'
- en: 'Will render as:'
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE672]'
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE672]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 结合使用：
- en: '[PRE673]'
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE673]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-2829
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE674]'
  id: totrans-2830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2831
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`ilike`运算符，例如，不区分大小写的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生形式之一的表达式：
- en: '[PRE675]'
  id: totrans-2834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: 或在支持 ILIKE 运算符的后端上：
- en: '[PRE676]'
  id: totrans-2836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'E.g.:'
  id: totrans-2837
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE677]'
  id: totrans-2838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: 'Parameters:'
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` - 要比较的表达式'
- en: '`escape` –'
  id: totrans-2841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` -'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE678]'
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE678]'
- en: See also
  id: totrans-2844
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE679]'
  id: totrans-2846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *方法*'
- en: Implement the `in` operator.
  id: totrans-2848
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`in`运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-2850
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-2851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字面值列表，例如：
- en: '[PRE680]'
  id: totrans-2852
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE680]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，项目列表被转换为与给定列表长度相同的一组绑定参数：
- en: '[PRE681]'
  id: totrans-2854
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE681]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-2855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较是针对包含多个表达式的 [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，可以提供元组的列表：
- en: '[PRE682]'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE682]'
- en: 'An empty list, e.g.:'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个空列表，例如：
- en: '[PRE683]'
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE683]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现一个“空集”表达式。这些表达式针对各个后端进行了定制，并且通常试图获得一个空的 SELECT 语句作为子查询。例如，在 SQLite
    上，表达式为：
- en: '[PRE684]'
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE684]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-2861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版本中的更改：在所有情况下，空的 IN 表达式现在都使用执行时生成的 SELECT 子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-2862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包含 [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam.params.expanding") 标志，可以使用绑定参数，例如 [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")：
- en: '[PRE685]'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE685]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-2864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，表达式呈现一个特殊的非 SQL 占位符表达式，如下所示：
- en: '[PRE686]'
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时拦截，以转换为前面所示的可变数量的绑定参数形式。如果语句执行为：
- en: '[PRE687]'
  id: totrans-2867
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE687]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库将为每个值传递一个绑定参数：
- en: '[PRE688]'
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE688]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2 版本中的新功能：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-2871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，将呈现一个特殊的“空列表”表达式，该表达式特定于正在使用的数据库。在 SQLite 上，这将是：
- en: '[PRE689]'
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE689]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.3 版本中的新功能：现在“扩展”绑定参数支持空列表
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-2874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是相关的标量选择：'
- en: '[PRE690]'
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE690]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 如下所示：
- en: '[PRE691]'
  id: totrans-2877
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE691]'
- en: 'Parameters:'
  id: totrans-2878
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一组文字，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或者一个包括`[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")构造，该构造包含设置为`True`的[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")标志。'
- en: '[PRE692]'
  id: totrans-2880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS` operator.
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS`运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-2883
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS`，该值会解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能需要显式使用`IS`。
- en: See also
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-2885
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE693]'
  id: totrans-2886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS DISTINCT FROM`运算符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-2889
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台上，例如SQLite，可能呈现“a IS NOT b”。
- en: '[PRE694]'
  id: totrans-2890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2891
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`IS NOT`运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2893
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成`IS NOT`，该值会解析为`NULL`。然而，在某些平台上，如果要与布尔值进行比较，则可能需要显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`is_not()`运算符从先前的版本中的`isnot()`重命名。以前的名称保留以确保向后兼容性。
- en: See also
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2896
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE695]'
  id: totrans-2897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台上（如 SQLite），可能渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中进行了更改：`is_not_distinct_from()` 运算符从先前版本的 `isnot_distinct_from()` 更名。先前的名称仍然可用于向后兼容。
- en: '[PRE696]'
  id: totrans-2902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 运算符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值比较时，将自动生成`IS NOT`，其解析为`NULL`。然而，在某些平台上，如果与布尔值进行比较，则可能需要显式使用`IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中进行了更改：`is_not()` 运算符从先前版本的 `isnot()` 更名。先前的名称仍然可用于向后兼容。
- en: See also
  id: totrans-2907
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE697]'
  id: totrans-2909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2910
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-2912
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上渲染为“a IS NOT DISTINCT FROM b”；在某些平台上（如 SQLite），可能渲染为“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中进行了更改：`is_not_distinct_from()` 运算符从先前版本的 `isnot_distinct_from()` 更名。先前的名称仍然可用于向后兼容。
- en: '[PRE698]'
  id: totrans-2914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2915
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 运算符，例如 [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的起始部分进行不区分大小写的匹配：
- en: '[PRE699]'
  id: totrans-2918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: 'E.g.:'
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE700]'
  id: totrans-2920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，因此存在于<other>表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为`True`，以对字符串值内这些字符的出现进行转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-2922
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-2923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非将[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")标志设置为 True，否则不会默认转义 LIKE
    通配符字符 `%` 和 `_`。'
- en: '`autoescape` –'
  id: totrans-2924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-2925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE701]'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE701]'
- en: 'Will render as:'
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE702]'
  id: totrans-2929
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE702]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为 `:param` 的 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-2931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个给定的字符，当给定时将使用 `ESCAPE` 关键字来建立该字符作为转义字符。然后可以将此字符放在 `%` 和 `_` 的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-2933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE703]'
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE703]'
- en: 'Will render as:'
  id: totrans-2935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE704]'
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE704]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-2937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE705]'
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE705]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-2941
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE706]'
  id: totrans-2942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-2944
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `like` 运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE707]'
  id: totrans-2946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: 'E.g.:'
  id: totrans-2947
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE708]'
  id: totrans-2948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: 'Parameters:'
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-2950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-2951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，渲染`ESCAPE`关键字，例如：
- en: '[PRE709]'
  id: totrans-2953
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE709]'
- en: See also
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2955
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE710]'
  id: totrans-2956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-2957
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
  zh: 此处引用的‘local’类属性由[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用。
- en: See also
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-2961
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE711]'
  id: totrans-2962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2963
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
  zh: 实现特定于数据库的‘match’运算符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-2965
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的类似MATCH的函数或运算符。例如：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-2966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染`x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-2967
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在2.0版本中更改：现在针对PostgreSQL使用`plainto_tsquery()`而不是`to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-2968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染`MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - 具有额外功能的MySQL特定构造。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-2971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染`CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-2973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符输出为“MATCH”。例如，这与SQLite兼容。
- en: '[PRE712]'
  id: totrans-2974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2976
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用对 [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") 的否定，即 `~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2978
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_ilike()`运算符从之前的版本中的`notilike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE713]'
  id: totrans-2981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-2984
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用对 [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 的否定，即 `~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`是空序列的情况下，编译器产生一个“空的不在”表达式。这默认为表达式“1 = 1”，以在所有情况下产生真值。 [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_in()`运算符从之前的版本中的`notin_()`重命名。以前的名称仍可用于向后兼容。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.2版本中更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 运算符现在默认为一个空的IN序列生成一个“静态”表达式。
- en: See also
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-2989
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE714]'
  id: totrans-2990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2991
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用对 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：`not_like()`运算符从之前的版本中的`notlike()`重命名。以前的名称仍可用于向后兼容。
- en: See also
  id: totrans-2995
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-2996
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")。'
- en: '[PRE715]'
  id: totrans-2997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: implement the `NOT ILIKE` operator.
  id: totrans-2999
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")中使用否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`操作符从之前的版本中的`notilike()`重命名。以前的名称仍然可用以保持向后兼容性。
- en: See also
  id: totrans-3002
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅。
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")。'
- en: '[PRE716]'
  id: totrans-3004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *的方法* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")。'
- en: implement the `NOT IN` operator.
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`操作符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")中使用否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`other`是一个空序列，编译器将产生一个“空不在”表达式。默认情况下，这会变成表达式“1 = 1”，以在所有情况下产生true。[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")可以用来改变这种行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_in()`操作符从之前的版本中的`notin_()`重命名。以前的名称仍然可用以保持向后兼容性。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")操作符现在默认情况下为一个空的IN序列产生一个“静态”表达式。
- en: See also
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅。
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")。'
- en: '[PRE717]'
  id: totrans-3013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-3016
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")的否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()`运算符从先前版本的`notlike()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: See also
  id: totrans-3018
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE718]'
  id: totrans-3020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3021
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_first()`运算符从先前版本的`nullsfirst()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE719]'
  id: totrans-3024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_last()`运算符从先前版本的`nullslast()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE720]'
  id: totrans-3028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3031
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_first()`运算符从先前版本的`nullsfirst()`重命名。以确保向后兼容性，先前的名称仍然可用。
- en: '[PRE721]'
  id: totrans-3032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3035
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版更改：在以前的版本中，`nulls_last()`操作符从`nullslast()`重命名。以前的名称仍可用于向后兼容。
- en: '[PRE722]'
  id: totrans-3036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-3038
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用的运算符函数。
- en: 'e.g.:'
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE723]'
  id: totrans-3040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: 'produces:'
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE724]'
  id: totrans-3042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数还可用于明确表示按位运算符。例如：
- en: '[PRE725]'
  id: totrans-3044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: 是`somecolumn`中的值的按位与。
- en: 'Parameters:'
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-3047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为此元素与传递给生成函数的表达式之间的中缀运算符输出的字符串。'
- en: '`precedence` –'
  id: totrans-3048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预计将在SQL表达式中应用到运算符的优先级。这个整数值作为SQL编译器的提示，用于知道何时应该在特定操作周围渲染显式括号。较低的数字将导致在应用到具有较高优先级的另一个运算符时表达式被括起来。默认值为`0`，低于所有运算符，除了逗号（`,`）和`AS`运算符。值为100将高于或等于所有运算符，而-100将低于或等于所有运算符。
- en: See also
  id: totrans-3050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用op()生成自定义运算符，但我的括号显示不正确](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL编译器如何渲染括号的详细描述'
- en: '`is_comparison` –'
  id: totrans-3052
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-3053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遗留；如果为True，则运算符将被视为“比较”运算符，即评估为布尔值的运算符，如`==`，`>`等。提供此标志是为了ORM关系能够在自定义连接条件中使用运算符时建立该运算符是比较运算符的关系。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`is_comparison`参数已被使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法取代；这更简洁的操作符会自动设置此参数，但也提供了正确的[**PEP
    484**](https://peps.python.org/pep-0484/) 类型支持，因为返回的对象将表示“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-3055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或对象，将强制此操作符产生的表达式的返回类型为该类型。默认情况下，指定了 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 的操作符将解析为 [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而那些没有的操作符将与左操作数相同类型。'
- en: '`python_impl` –'
  id: totrans-3056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-3057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个可选的 Python 函数，可以以与数据库服务器上运行此操作符时相同的方式评估两个 Python 值。对于在 Python 中的 SQL 表达式评估函数（例如用于
    ORM 混合属性的函数）以及用于在多行更新或删除后匹配会话中的对象的 ORM “评估器”非常有用。
- en: 'e.g.:'
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE726]'
  id: totrans-3059
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE726]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-3060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也适用于非 SQL 左右对象：
- en: '[PRE727]'
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE727]'
- en: New in version 2.0.
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0 中。
- en: See also
  id: totrans-3063
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新操作符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义操作符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE728]'
  id: totrans-3067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3068
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Operate on an argument.
  id: totrans-3069
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，默认情况下引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-3071
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写此方法可以使通用行为应用于所有操作。例如，重写 [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 以对左侧和右侧应用 `func.lower()`：
- en: '[PRE729]'
  id: totrans-3072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: 'Parameters:'
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-3074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用对象。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-3075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’方。对于大多数操作来说，将是一个单一的标量。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-3076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以通过特殊操作符传递，比如 `ColumnOperators.contains()`。'
- en: '[PRE730]'
  id: totrans-3077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-3079
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的‘正则匹配’操作符。
- en: 'E.g.:'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE731]'
  id: totrans-3081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-3082
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似 REGEXP
    的函数或操作符，但是特定的正则表达式语法和可用标志**不是与后端无关的**。'
- en: 'Examples include:'
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-3084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时呈现 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-3085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 呈现 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符操作符，并调用 Python 的 `re.match()` 内建函数。
- en: other backends may provide special implementations.
  id: totrans-3087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-3088
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将发出操作符为 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-3089
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正则表达式支持已经在 Oracle、PostgreSQL、MySQL 和 MariaDB 中实现。SQLite 可用部分支持。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-3092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 任何要应用的正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配操作符
    `~*` 或 `!~*`。'
- en: New in version 1.4.
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3094
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 改变为：2.0.18 请注意，由于实现错误，以前的“flags”参数除了纯 Python 字符串外，还接受 SQL 表达式对象（例如列表达式）。该实现在缓存方面不能正常工作，已被移除；应该只传递字符串作为“flags”参数，因为这些标志会被渲染为
    SQL 表达式中的文字内联值。
- en: See also
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-3096
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
- en: '[PRE732]'
  id: totrans-3097
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了数据库特定的“正则表达式替换”操作符。
- en: 'E.g.:'
  id: totrans-3100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE733]'
  id: totrans-3101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-3102
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 尝试解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会发出函数 `REGEXP_REPLACE()`。但是，特定的正则表达式语法和可用标志**不是与后端无关的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，正则表达式替换支持已经在 Oracle、PostgreSQL、MySQL 8 或更高版本和 MariaDB 中实现。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-3106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-3107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是后端特定的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。'
- en: New in version 1.4.
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
  zh: '从版本 1.4.48 开始更改，: 2.0.18 请注意，由于实现错误，“flags”参数先前接受了 SQL 表达式对象，如列表达式，除了普通的 Python
    字符串。此实现与缓存不正确，已删除；仅应传递字符串以用于“flags”参数，因为这些标志将作为 SQL 表达式中的文字内联值呈现。'
- en: See also
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")。'
- en: '[PRE734]'
  id: totrans-3112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *属性的*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")。'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的“remote”类属性。
- en: See also
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")。'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")。'
- en: '[PRE735]'
  id: totrans-3118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")。'
- en: Reverse operate on an argument.
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate").
  id: totrans-3121
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate") 相同。
- en: '[PRE736]'
  id: totrans-3122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3123
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")。'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 代理本地端的标量关系，则返回`True`。
- en: '[PRE737]'
  id: totrans-3125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3126
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `startswith` 运算符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值的开头匹配：
- en: '[PRE738]'
  id: totrans-3129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: 'E.g.:'
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE739]'
  id: totrans-3131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，因此存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    参数将建立一个给定的字符作为转义字符，当目标表达式不是字面字符串时，这可能会有用。
- en: 'Parameters:'
  id: totrans-3133
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-3134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。除非将 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    标志设置为 True，否则 LIKE 通配符 `%` 和 `_` 默认不会被转义。'
- en: '`autoescape` –'
  id: totrans-3135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE740]'
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE740]'
- en: 'Will render as:'
  id: totrans-3139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE741]'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE741]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为 `:param`，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用 `ESCAPE` 关键字来建立该字符作为转义字符。然后可以将该字符放在 `%` 和 `_` 的前面，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如以下表达式：
- en: '[PRE742]'
  id: totrans-3145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE742]'
- en: 'Will render as:'
  id: totrans-3146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE743]'
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE743]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与 [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith)
    结合使用：
- en: '[PRE744]'
  id: totrans-3149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE744]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE745]'
  id: totrans-3155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-3156
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 处理的中间类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截的追加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE746]'
  id: totrans-3158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性。'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: 允许将 datetime 对象放在左侧进行比较的 Hack。
- en: '[PRE747]'
  id: totrans-3161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target.
  id: totrans-3162
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以数据库列为目标的 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")。
- en: '**Members**'
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
  zh: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
- en: '**Class signature**'
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  id: totrans-3166
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
- en: '[PRE748]'
  id: totrans-3167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3168
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__le__`
    *方法。'
- en: Implement the `<=` operator.
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<=` 运算符。
- en: In a column context, produces the clause `a <= b`.
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a <= b`。
- en: '[PRE749]'
  id: totrans-3171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3172
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__lt__`
    *方法。'
- en: Implement the `<` operator.
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `<` 运算符。
- en: In a column context, produces the clause `a < b`.
  id: totrans-3174
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a < b`。
- en: '[PRE750]'
  id: totrans-3175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3176
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* `sqlalchemy.sql.expression.ColumnOperators.__ne__`
    *方法。'
- en: Implement the `!=` operator.
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `!=` 运算符。
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `a != b`。如果目标是 `None`，则生成 `a IS NOT NULL`。
- en: '[PRE751]'
  id: totrans-3179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3180
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法。'
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")子句。
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  id: totrans-3182
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_ "sqlalchemy.sql.expression.all_")
    的文档以获取示例。
- en: Note
  id: totrans-3183
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3184
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的 [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") *的* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *方法与**传统**版本的此方法，即 [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") 方法，该方法专门针对 [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")，使用不同的调用风格。
- en: '[PRE752]'
  id: totrans-3185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") *的* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *方法。'
- en: Produce a proxied ‘any’ expression using EXISTS.
  id: totrans-3187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 EXISTS 生成一个代理的 'any' 表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
  zh: 此表达式将使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符组合成一个产品。
- en: '[PRE753]'
  id: totrans-3189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  id: totrans-3191
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")子句。
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  id: totrans-3192
  prefs: []
  type: TYPE_NORMAL
  zh: 有关示例，请参阅[`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_")的文档。
- en: Note
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保不要混淆较新的[`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_")方法与此方法的**传统**版本，即专用于[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")的[`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any")方法，其使用不同的调用风格。
- en: '[PRE754]'
  id: totrans-3195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc "sqlalchemy.sql.expression.asc")子句。
- en: '[PRE755]'
  id: totrans-3198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return a tuple of `(local_attr, remote_attr)`.
  id: totrans-3200
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个元组`(local_attr, remote_attr)`。
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性最初旨在简化使用[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法一次性跨越两个关系，但这使用了一个已弃用的调用风格。
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`select.join()`或[`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")与关联代理，当前方法是分别使用[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")和[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")属性：
- en: '[PRE756]'
  id: totrans-3203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  id: totrans-3204
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的版本可能会为关联代理属性提供更简洁的连接模式。
- en: See also
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-3206
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE757]'
  id: totrans-3208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的 [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") 子句，给定下限和上限范围。
- en: '[PRE758]'
  id: totrans-3211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise AND operation, typically via the `&` operator.
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位 AND 操作，通常通过 `&` 运算符。
- en: New in version 2.0.2.
  id: totrans-3214
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版本中的新功能。
- en: See also
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE759]'
  id: totrans-3217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  id: totrans-3219
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位 LSHIFT 操作，通常通过 `<<` 运算符。
- en: New in version 2.0.2.
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版本中的新功能。
- en: See also
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3222
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE760]'
  id: totrans-3223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  id: totrans-3225
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位 NOT 操作，通常通过 `~` 运算符。
- en: New in version 2.0.2.
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版本中的新功能。
- en: See also
  id: totrans-3227
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE761]'
  id: totrans-3229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3230
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise OR operation, typically via the `|` operator.
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: 生成按位 OR 操作，通常通过 `|` 运算符。
- en: New in version 2.0.2.
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.2 版本中的新功能。
- en: See also
  id: totrans-3233
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
  zh: '[按位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE762]'
  id: totrans-3235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  id: totrans-3237
  prefs: []
  type: TYPE_NORMAL
  zh: 生成位右移操作，通常通过`>>`运算符。
- en: New in version 2.0.2.
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.2中的新功能。
- en: See also
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3240
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE763]'
  id: totrans-3241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3242
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  id: totrans-3243
  prefs: []
  type: TYPE_NORMAL
  zh: 生成位异或操作，通常通过`^`运算符，或者对于PostgreSQL使用`#`。
- en: New in version 2.0.2.
  id: totrans-3244
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0.2中的新功能。
- en: See also
  id: totrans-3245
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  id: totrans-3246
  prefs: []
  type: TYPE_NORMAL
  zh: '[位运算符](../../core/operators.html#operators-bitwise)'
- en: '[PRE764]'
  id: totrans-3247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Return a custom boolean operator.
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义布尔运算符。
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是调用[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")并传递[`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op")标志为True的简写。 使用[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")的一个关键优势是，在使用列构造时，返回表达式的“布尔”性质将出现在[**PEP
    484**](https://peps.python.org/pep-0484/)中。
- en: See also
  id: totrans-3251
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  id: totrans-3252
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
- en: '[PRE765]'
  id: totrans-3253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  id: totrans-3255
  prefs: []
  type: TYPE_NORMAL
  zh: 生成针对父对象的[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")子句，给定排序字符串。
- en: See also
  id: totrans-3256
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
- en: '[PRE766]'
  id: totrans-3258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE766]'
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3259
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘concat’ operator.
  id: totrans-3260
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘连接’操作符。
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  id: totrans-3261
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，产生 `a || b` 子句，或在 MySQL 上使用 `concat()` 操作符。
- en: '[PRE767]'
  id: totrans-3262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3263
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘contains’ operator.
  id: totrans-3264
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘包含’操作符。
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  id: totrans-3265
  prefs: []
  type: TYPE_NORMAL
  zh: 产生一个用于测试字符串值中间匹配的 LIKE 表达式：
- en: '[PRE768]'
  id: totrans-3266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: 'E.g.:'
  id: totrans-3267
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE769]'
  id: totrans-3268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用了 `LIKE`，所以在 <other> 表达式内出现的通配符字符 `"%"` 和 `"_"` 也会像通配符一样运行。对于字面字符串值，可以设置
    [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志为 `True` 来对字符串值内出现的这些字符进行转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 参数将建立一个给定的字符作为转义字符，这在目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3270
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  id: totrans-3271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。这通常是一个普通的字符串值，但也可以是任意的 SQL 表达式。除非设置了 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 标志为 True，否则 LIKE 通配符字符 `%`
    和 `_` 不会被默认转义。'
- en: '`autoescape` –'
  id: totrans-3272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假定比较值为字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如这样的表达式：
- en: '[PRE770]'
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE770]'
- en: 'Will render as:'
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE771]'
  id: totrans-3277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE771]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`：param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定时，将使用 `ESCAPE` 关键字来确定该字符作为转义字符。然后，该字符可以放在 `%` 和 `_` 的前面以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如这样的表达式：
- en: '[PRE772]'
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE772]'
- en: 'Will render as:'
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE773]'
  id: totrans-3284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE773]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数还可以与 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") 结合使用：
- en: '[PRE774]'
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE774]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数在传递到数据库之前将被转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3288
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE775]'
  id: totrans-3292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE775]'
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3293
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") 子句。
- en: '[PRE776]'
  id: totrans-3295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3296
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个针对父对象的 [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") 子句。
- en: '[PRE777]'
  id: totrans-3298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the ‘endswith’ operator.
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: 实现‘endswith’运算符。
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  id: totrans-3301
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于测试字符串值的结尾是否匹配：
- en: '[PRE778]'
  id: totrans-3302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: 'E.g.:'
  id: totrans-3303
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE779]'
  id: totrans-3304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3305
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志可以设置为`True`，以对字符串值中这些字符的出现应用转义，使它们匹配为自身而不是通配符字符。或者，[`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  id: totrans-3307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个简单的字符串值，但也可以是任意的SQL表达式。默认情况下，LIKE通配符字符`%`和`_`不会被转义，除非设置了[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-3308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有的`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE780]'
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE780]'
- en: 'Will render as:'
  id: totrans-3312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE781]'
  id: totrans-3313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE781]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用值`:param`为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将使用`ESCAPE`关键字将该字符建立为转义字符。然后可以将该字符放在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个表达式如下：
- en: '[PRE782]'
  id: totrans-3318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE782]'
- en: 'Will render as:'
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE783]'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE783]'
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  id: totrans-3321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith")结合使用：
- en: '[PRE784]'
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE784]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3326
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE785]'
  id: totrans-3328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE785]'
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *方法的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Produce a proxied ‘has’ expression using EXISTS.
  id: totrans-3330
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个使用EXISTS的代理‘has’表达式。
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式将是使用基础代理属性的`Comparator.any()`和/或`Comparator.has()`运算符组成的复合产品。
- en: '[PRE786]'
  id: totrans-3332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE786]'
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3333
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `icontains` 运算符，例如 [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  id: totrans-3335
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，测试一个字符串值中间的不区分大小写匹配：
- en: '[PRE787]'
  id: totrans-3336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: 'E.g.:'
  id: totrans-3337
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE788]'
  id: totrans-3338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用了`LIKE`，因此存在于<other>表达式内部的通配符字符`"%"`和`"_"`也会像通配符一样起作用。对于字面字符串值，可以将 [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志设置为`True`，以对字符串值内这些字符的出现进行转义，使它们与自身匹配而不是作为通配符字符。或者，[`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3340
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  id: totrans-3341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。这通常是一个普通字符串值，但也可以是一个任意的SQL表达式。默认情况下，不会转义LIKE通配符字符`%`和`_`，除非设置了
    [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") 标志为True。'
- en: '`autoescape` –'
  id: totrans-3342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为True时，在LIKE表达式中建立一个转义字符，然后将其应用于比较值中所有出现的`"%"`、`"_"`和转义字符本身，假设比较值是一个字面字符串而不是一个SQL表达式。
- en: 'An expression such as:'
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE789]'
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE789]'
- en: 'Will render as:'
  id: totrans-3346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 渲染为：
- en: '[PRE790]'
  id: totrans-3347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE790]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为 `:param`，如 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当给定一个字符时，将使用 `ESCAPE` 关键字将其设置为转义字符。然后可以在 `%` 和 `_` 的前面放置该字符，以允许它们被视为其自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE791]'
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE791]'
- en: 'Will render as:'
  id: totrans-3353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE792]'
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE792]'
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数还可以与 [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains)
    结合使用：
- en: '[PRE793]'
  id: totrans-3356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE793]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前被转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅：
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains)'
- en: '[PRE794]'
  id: totrans-3360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE794]'
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith)
    *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators)'
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  id: totrans-3362
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `iendswith` 操作符，例如对 [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith)
    的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个 LIKE 表达式，用于对字符串值的结尾进行不区分大小写匹配：
- en: '[PRE795]'
  id: totrans-3364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE795]'
- en: 'E.g.:'
  id: totrans-3365
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE796]'
  id: totrans-3366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE796]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该操作符使用 `LIKE`，因此存在于 <other> 表达式内部的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith)
    标志设置为 `True`，以对字符串值内部这些字符的出现进行转义，使它们匹配为其自身而不是通配符字符。或者，[`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith)
    参数将建立一个给定的字符作为转义字符，这在目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3368
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  id: totrans-3369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 表示要比较的表达式。通常是一个普通字符串值，但也可以是任意的 SQL 表达式。LIKE 通配符字符 `%` 和 `_` 默认不被转义，除非
    [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith)
    标志被设置为 True。'
- en: '`autoescape` –'
  id: totrans-3370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立转义字符，然后将其应用于比较值内的所有 `"%"`、`"_"` 和转义字符本身的出现，假定比较值为字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如此类的表达式：
- en: '[PRE797]'
  id: totrans-3373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE797]'
- en: 'Will render as:'
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE798]'
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE798]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为 `:param`，为 `"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给定一个字符，它将与 `ESCAPE` 关键字一起渲染，以将该字符确定为转义字符。然后，可以将该字符放在 `%` 和 `_` 的前面，以使它们充当自己而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如此类的表达式：
- en: '[PRE799]'
  id: totrans-3380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE799]'
- en: 'Will render as:'
  id: totrans-3381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将渲染为：
- en: '[PRE800]'
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE800]'
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与 [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 结合使用：
- en: '[PRE801]'
  id: totrans-3384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE801]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的字面参数将在传递到数据库之前转换为 `"foo^%bar^^bat"`。
- en: See also
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3387
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[PRE802]'
  id: totrans-3388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE802]'
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3389
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  id: totrans-3390
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `ilike` 运算符，例如，不区分大小写的 LIKE。
- en: 'In a column context, produces an expression either of the form:'
  id: totrans-3391
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成以下形式的表达式：
- en: '[PRE803]'
  id: totrans-3392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE803]'
- en: 'Or on backends that support the ILIKE operator:'
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在支持 ILIKE 运算符的后端上：
- en: '[PRE804]'
  id: totrans-3394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE804]'
- en: 'E.g.:'
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE805]'
  id: totrans-3396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE805]'
- en: 'Parameters:'
  id: totrans-3397
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-3398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-3399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-3400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选转义字符，渲染 `ESCAPE` 关键字，例如：
- en: '[PRE806]'
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE806]'
- en: See also
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3403
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE807]'
  id: totrans-3404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3405
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `in` operator.
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `in` 运算符。
- en: In a column context, produces the clause `column IN <other>`.
  id: totrans-3407
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成子句 `column IN <other>`。
- en: 'The given parameter `other` may be:'
  id: totrans-3408
  prefs: []
  type: TYPE_NORMAL
  zh: 给定参数 `other` 可能是：
- en: 'A list of literal values, e.g.:'
  id: totrans-3409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面值列表，例如：
- en: '[PRE808]'
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE808]'
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  id: totrans-3411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此调用形式中，将项目列表转换为与给定列表相同长度的绑定参数集：
- en: '[PRE809]'
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE809]'
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  id: totrans-3413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果比较针对包含多个表达式的 [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_")，则可以提供元组列表：
- en: '[PRE810]'
  id: totrans-3414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE810]'
- en: 'An empty list, e.g.:'
  id: totrans-3415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空列表，例如：
- en: '[PRE811]'
  id: totrans-3416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE811]'
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式渲染一个“空集”表达式。这些表达式是针对各个后端定制的，通常试图获得一个空的SELECT语句作为子查询。例如，在SQLite上，表达式是：
- en: '[PRE812]'
  id: totrans-3418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE812]'
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  id: totrans-3419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4开始：所有情况下，空的IN表达式现在都使用执行时生成的SELECT子查询。
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  id: totrans-3420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果包含 [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志，则可以使用绑定参数，例如[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")：
- en: '[PRE813]'
  id: totrans-3421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE813]'
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  id: totrans-3422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，表达式渲染一个特殊的非SQL占位符表达式，看起来像这样：
- en: '[PRE814]'
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE814]'
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此占位符表达式在语句执行时拦截，以转换为之前所示的变量数量的绑定参数形式。如果执行了语句：
- en: '[PRE815]'
  id: totrans-3425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE815]'
- en: 'The database would be passed a bound parameter for each value:'
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个值，数据库将传递一个绑定参数：
- en: '[PRE816]'
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE816]'
- en: 'New in version 1.2: added “expanding” bound parameters'
  id: totrans-3428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.2开始：添加了“扩展”绑定参数
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果传递了一个空列表，则渲染一个特殊的“空列表”表达式，该表达式特定于所使用的数据库。在SQLite上，这将是：
- en: '[PRE817]'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE817]'
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  id: totrans-3431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.3开始：现在支持空列表的“扩展”绑定参数
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  id: totrans-3432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，通常是一个相关的标量选择：
- en: '[PRE818]'
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE818]'
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  id: totrans-3434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种调用形式中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 渲染如下：
- en: '[PRE819]'
  id: totrans-3435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE819]'
- en: 'Parameters:'
  id: totrans-3436
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: '**other** – 一个字面常量列表，一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，或一个包含[`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构造的列表，该构造设置了 [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 标志为True。'
- en: '[PRE820]'
  id: totrans-3438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE820]'
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *方法继承*'
- en: Implement the `IS` operator.
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS` 运算符。
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当与`None`的值进行比较时，会自动生成 `IS`，它解析为`NULL`。但是，在某些平台上，如果要与布尔值进行比较，则可能希望明确使用 `IS`。
- en: See also
  id: totrans-3442
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  id: totrans-3443
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
- en: '[PRE821]'
  id: totrans-3444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE821]'
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3445
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS DISTINCT FROM` operator.
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS DISTINCT FROM` 操作符。
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS DISTINCT FROM b”；在某些平台（如 SQLite）上可能呈现“a IS NOT b”。
- en: '[PRE822]'
  id: totrans-3448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE822]'
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3449
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 的值比较时会自动生成 `IS NOT`，该值解析为 `NULL`。但是，如果在某些平台上比较布尔值，则可能希望明确使用 `IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3452
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not()` 操作符从以前的版本中的 `isnot()` 重命名为 `is_not()`。以前的名称仍可供向后兼容使用。
- en: See also
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE823]'
  id: totrans-3455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE823]'
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3456
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 操作符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-3458
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在某些平台（如 SQLite）上可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not_distinct_from()` 操作符从以前的版本中的 `isnot_distinct_from()` 重命名为
    `is_not_distinct_from()`。以前的名称仍可供向后兼容使用。
- en: '[PRE824]'
  id: totrans-3460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE824]'
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3461
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT` operator.
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT` 操作符。
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，与 `None` 的值比较时会自动生成 `IS NOT`，该值解析为 `NULL`。但是，如果在某些平台上比较布尔值，则可能希望明确使用 `IS
    NOT`。
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3464
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not()` 操作符从以前的版本中的 `isnot()` 重命名为 `is_not()`。以前的名称仍可供向后兼容使用。
- en: See also
  id: totrans-3465
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  id: totrans-3466
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
- en: '[PRE825]'
  id: totrans-3467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE825]'
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `IS NOT DISTINCT FROM` operator.
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `IS NOT DISTINCT FROM` 运算符。
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数平台上呈现“a IS NOT DISTINCT FROM b”；在一些平台上如 SQLite 可能呈现“a IS b”。
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  id: totrans-3471
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中更改：`is_not_distinct_from()` 运算符从之前版本的 `isnot_distinct_from()` 重命名。以确保向后兼容性，之前的名称仍然可用。
- en: '[PRE826]'
  id: totrans-3472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE826]'
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  id: totrans-3474
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `istartswith` 运算符，例如 [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 的不区分大小写版本。
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  id: totrans-3475
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个对字符串值开头的不区分大小写匹配的 LIKE 表达式：
- en: '[PRE827]'
  id: totrans-3476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE827]'
- en: 'E.g.:'
  id: totrans-3477
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE828]'
  id: totrans-3478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE828]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该运算符使用 `LIKE`，因此存在于 <other> 表达式中的通配符字符 `"%"` 和 `"_"` 也将像通配符一样起作用。对于字面字符串值，可以将
    [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 `True`，以对字符串值中这些字符的出现进行转义，使其作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 参数将建立一个给定字符作为转义字符，当目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  id: totrans-3481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式。通常是一个普通字符串值，但也可以是任意 SQL 表达式。除非将 [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") 标志设置为 True，否则 LIKE 通配符字符
    `%` 和 `_` 不会被转义。'
- en: '`autoescape` –'
  id: totrans-3482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值；当为 True 时，在 LIKE 表达式中建立一个转义字符，然后将其应用于比较值中所有出现的 `"%"`、`"_"` 和转义字符本身，假定比较值是一个字面字符串而不是
    SQL 表达式。
- en: 'An expression such as:'
  id: totrans-3484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE829]'
  id: totrans-3485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE829]'
- en: 'Will render as:'
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE830]'
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE830]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`param`的值为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时，将呈现为带有`ESCAPE`关键字的转义字符。然后，可以将此字符放在`%`和`_`之前，以使它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如表达式：
- en: '[PRE831]'
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE831]'
- en: 'Will render as:'
  id: totrans-3493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE832]'
  id: totrans-3494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE832]'
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  id: totrans-3495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参数也可以与[`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")结合使用：
- en: '[PRE833]'
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE833]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3498
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
- en: '[PRE834]'
  id: totrans-3500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE834]'
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3501
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `like` operator.
  id: totrans-3502
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`like`运算符。
- en: 'In a column context, produces the expression:'
  id: totrans-3503
  prefs: []
  type: TYPE_NORMAL
  zh: 在列上下文中，生成表达式：
- en: '[PRE835]'
  id: totrans-3504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE835]'
- en: 'E.g.:'
  id: totrans-3505
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE836]'
  id: totrans-3506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE836]'
- en: 'Parameters:'
  id: totrans-3507
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要比较的表达式'
- en: '`escape` –'
  id: totrans-3509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的转义字符，呈现`ESCAPE`关键字，例如：
- en: '[PRE837]'
  id: totrans-3511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE837]'
- en: See also
  id: totrans-3512
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3513
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE838]'
  id: totrans-3514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE838]'
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3515
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-3516
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")引用的“local”类属性。
- en: See also
  id: totrans-3517
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-3518
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  id: totrans-3519
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
- en: '[PRE839]'
  id: totrans-3520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE839]'
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3521
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘match’ operator.
  id: totrans-3522
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的“match”运算符。
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  id: totrans-3523
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") 尝试解析为后端提供的 MATCH 类似的函数或运算符。示例包括：'
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  id: totrans-3524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 渲染`x @@ plainto_tsquery(y)`
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  id: totrans-3525
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从 2.0 版更改：现在对于 PostgreSQL，使用`plainto_tsquery()`而不是`to_tsquery()`；为了与其他形式兼容，请参阅[全文搜索](../../dialects/postgresql.html#postgresql-match)。
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  id: totrans-3526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL - 渲染 `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
- en: See also
  id: totrans-3527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL 特定的构造，具有额外的功能。'
- en: Oracle - renders `CONTAINS(x, y)`
  id: totrans-3529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染 `CONTAINS(x, y)`
- en: other backends may provide special implementations.
  id: totrans-3530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊的实现。
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  id: totrans-3531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将以“MATCH”运算符发出。例如，这与 SQLite 兼容。
- en: '[PRE840]'
  id: totrans-3532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE840]'
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3533
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-3534
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-3535
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")进行否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3536
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版更改：`not_ilike()`运算符在先前版本中从`notilike()`重命名。以确保向后兼容性，之前的名称仍可用。
- en: See also
  id: totrans-3537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE841]'
  id: totrans-3539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE841]'
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3540
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-3541
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-3542
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")进行否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
  zh: 在`other`为空序列的情况下，编译器会生成一个“空的 not in”表达式。默认情况下，这会产生表达式“1 = 1”，以在所有情况下生成 true。可以使用[`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine")来修改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版更改：`not_in()`运算符在先前版本中从`notin_()`重命名。以确保向后兼容性，之前的名称仍可用。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-3545
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.2开始更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")运算符现在默认生成空IN序列的“静态”表达式。
- en: See also
  id: totrans-3546
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE842]'
  id: totrans-3548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE842]'
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3549
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *方法继承的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT LIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-3551
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")的否定，即`~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3552
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_like()`运算符从之前的发布中的`notlike()`重新命名。以前的名称保留用于向后兼容。
- en: See also
  id: totrans-3553
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3554
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE843]'
  id: totrans-3555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE843]'
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3556
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *方法继承的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT ILIKE` operator.
  id: totrans-3557
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT ILIKE`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  id: totrans-3558
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")的否定，即`~x.ilike(y)`。
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3559
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`not_ilike()`运算符从之前的发布中的`notilike()`重新命名。以前的名称保留用于向后兼容。
- en: See also
  id: totrans-3560
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  id: totrans-3561
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
- en: '[PRE844]'
  id: totrans-3562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE844]'
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *方法继承的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT IN` operator.
  id: totrans-3564
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`NOT IN`运算符。
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")的否定，即`~x.in_(y)`。
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `other` 是一个空序列，编译器将生成一个“空不在”表达式。这默认为表达式 “1 = 1”，以在所有情况下生成 true。 [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") 可用于更改此行为。
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3567
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`not_in()` 操作符从以前的版本中的 `notin_()` 重命名。以前的名称仍可用于向后兼容性。
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.2 起更改：[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 操作符现在默认情况下为一个空的 IN 序列生成一个
    “静态” 表达式。
- en: See also
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-3570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: '[PRE845]'
  id: totrans-3571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE845]'
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: implement the `NOT LIKE` operator.
  id: totrans-3573
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 `NOT LIKE` 操作符。
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  id: totrans-3574
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于使用 [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") 的否定，即 `~x.like(y)`。
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3575
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`not_like()` 操作符从以前的版本中的 `notlike()` 重命名。以前的名称仍可用于向后兼容性。
- en: See also
  id: totrans-3576
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3577
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE846]'
  id: totrans-3578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE846]'
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3579
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-3580
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个 [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3581
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`nulls_first()` 操作符从以前的版本中的 `nullsfirst()` 重命名。以前的名称仍可用于向后兼容性。
- en: '[PRE847]'
  id: totrans-3582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE847]'
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3583
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-3584
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3585
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_last()` 操作符从之前的发布中的 `nullslast()` 改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE848]'
  id: totrans-3586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE848]'
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3587
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  id: totrans-3588
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")子句。
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3589
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_first()` 操作符从之前的发布中的 `nullsfirst()` 改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE849]'
  id: totrans-3590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE849]'
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3591
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  id: totrans-3592
  prefs: []
  type: TYPE_NORMAL
  zh: 对父对象生成一个[`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")子句。
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  id: totrans-3593
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：`nulls_last()` 操作符从之前的发布中的 `nullslast()` 改名。 以前的名称仍然可用于向后兼容。
- en: '[PRE850]'
  id: totrans-3594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE850]'
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3595
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Produce a generic operator function.
  id: totrans-3596
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个通用操作函数。
- en: 'e.g.:'
  id: totrans-3597
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE851]'
  id: totrans-3598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE851]'
- en: 'produces:'
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE852]'
  id: totrans-3600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE852]'
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  id: totrans-3601
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数也可以用来使位运算符明确。 例如：
- en: '[PRE853]'
  id: totrans-3602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE853]'
- en: is a bitwise AND of the value in `somecolumn`.
  id: totrans-3603
  prefs: []
  type: TYPE_NORMAL
  zh: 是 `somecolumn` 中的值的按位 AND。
- en: 'Parameters:'
  id: totrans-3604
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  id: totrans-3605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opstring` – 将作为这个元素与传递给生成函数的表达式之间的中缀运算符输出的字符串。'
- en: '`precedence` –'
  id: totrans-3606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precedence` –'
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  id: totrans-3607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据库预计在 SQL 表达式中应用到运算符的优先级。 这个整数值作为 SQL 编译器的提示，用于了解何时应在特定操作周围呈现显式括号。 较低的数字将导致将表达式与具有较高优先级的另一个运算符应用时加括号。
    默认值为 `0`，低于所有运算符，除了逗号（`,`）和 `AS` 运算符。 值为 `100` 将高于或等于所有运算符，而 `-100` 将低于或等于所有运算符。
- en: See also
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  id: totrans-3609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[我正在使用 op() 生成自定义操作符，但我的括号没有正确输出](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - SQLAlchemy SQL 编译器如何渲染括号的详细说明'
- en: '`is_comparison` –'
  id: totrans-3610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_comparison` –'
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  id: totrans-3611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 旧式的；如果为 True，则将该操作符视为“比较”操作符，即评估为布尔真/假值，如 `==`、`>` 等。提供此标志是为了使 ORM 关系能够在自定义连接条件中使用操作符时确定操作符是比较操作符。
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `is_comparison` 参数已被使用 [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 方法取代；这个更简洁的操作符会自动设置该参数，但同时还提供了正确的[**PEP
    484**](https://peps.python.org/pep-0484/)类型支持，因为返回的对象将表示“布尔”数据类型，即 `BinaryExpression[bool]`。
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  id: totrans-3613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_type` – 一个[`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 类或对象，它将强制此操作符生成的表达式的返回类型为该类型。缺省情况下，指定 [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") 的操作符将解析为 [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")，而不指定的操作符将与左操作数具有相同的类型。'
- en: '`python_impl` –'
  id: totrans-3614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_impl` –'
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  id: totrans-3615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 Python 函数，可以在数据库服务器上运行时以相同的方式评估两个 Python 值的操作符。对于在 Python 中进行 SQL 表达式评估函数（例如用于
    ORM 混合属性的函数）以及在多行更新或删除后用于匹配会话中的对象的 ORM “评估器”非常有用。
- en: 'e.g.:'
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE854]'
  id: totrans-3617
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE854]'
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  id: totrans-3618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述表达式的操作符也将适用于非 SQL 的左右对象：
- en: '[PRE855]'
  id: totrans-3619
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE855]'
- en: New in version 2.0.
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: See also
  id: totrans-3621
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  id: totrans-3622
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新定义和创建新的运算符](../../core/custom_types.html#types-operators)'
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
  zh: '[在连接条件中使用自定义运算符](../join_conditions.html#relationship-custom-operator)'
- en: '[PRE856]'
  id: totrans-3625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE856]'
- en: Operate on an argument.
  id: totrans-3626
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数进行操作。
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  id: totrans-3627
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作的最低级别，缺省情况下会引发 `NotImplementedError`。
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: 在子类上重写此功能可以使常见行为应用于所有操作。例如，重写 [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 来应用 `func.lower()` 到左右两侧：
- en: '[PRE857]'
  id: totrans-3629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE857]'
- en: 'Parameters:'
  id: totrans-3630
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`op` – Operator callable.'
  id: totrans-3631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`op` – 操作符可调用。'
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  id: totrans-3632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*other` – 操作的‘另一’方。对于大多数操作，它将是一个标量值。'
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  id: totrans-3633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` – 修饰符。这些可以由特殊运算符如 `ColumnOperators.contains()` 传递。'
- en: '[PRE858]'
  id: totrans-3634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE858]'
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp match’ operator.
  id: totrans-3636
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘regexp match’运算符。
- en: 'E.g.:'
  id: totrans-3637
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE859]'
  id: totrans-3638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE859]'
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  id: totrans-3639
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 尝试解析为后端提供的类似 REGEXP
    的函数或运算符，但特定的正则表达式语法和可用的标志 **不是后端无关的**。'
- en: 'Examples include:'
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: 示例包括：
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  id: totrans-3641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL - 在否定时渲染为 `x ~ y` 或 `x !~ y`。
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  id: totrans-3642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle - 渲染为 `REGEXP_LIKE(x, y)`
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  id: totrans-3643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite - 使用 SQLite 的 `REGEXP` 占位符运算符，并调用 Python 的 `re.match()` 内置函数。
- en: other backends may provide special implementations.
  id: totrans-3644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他后端可能提供特殊实现。
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  id: totrans-3645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何特殊实现的后端将将运算符输出为 “REGEXP” 或 “NOT REGEXP”。例如，这与 SQLite 和 MySQL 兼容。
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式支持目前已在 Oracle、PostgreSQL、MySQL 和 MariaDB 中实现。对于 SQLite，部分支持可用。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3647
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  id: totrans-3649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分来指定。在 PostgreSQL 中使用忽略大小写标志 ‘i’ 时，将使用忽略大小写的正则表达式匹配运算符
    `~*` 或 `!~*`。'
- en: New in version 1.4.
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3651
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.48 中更改为：2.0.18 请注意，由于实现错误，“flags” 参数先前接受�� SQL 表达式对象，例如列表达式，除了普通的 Python
    字符串。这种实现与缓存不兼容，并已移除；“flags” 参数应仅传递字符串，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: '[PRE860]'
  id: totrans-3654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE860]'
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3655
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implements a database-specific ‘regexp replace’ operator.
  id: totrans-3656
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了特定于数据库的‘regexp replace’运算符。
- en: 'E.g.:'
  id: totrans-3657
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE861]'
  id: totrans-3658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE861]'
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 试图解析为后端提供的类似 REGEXP_REPLACE
    的函数，通常会发出函数 `REGEXP_REPLACE()`。然而，特定的正则表达式语法和可用的标志 **不是后端通用的**。'
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  id: totrans-3660
  prefs: []
  type: TYPE_NORMAL
  zh: 目前正则表达式替换支持的后端包括 Oracle、PostgreSQL、MySQL 8 或更高版本以及 MariaDB。第三方方言中的支持可能有所不同。
- en: 'Parameters:'
  id: totrans-3661
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`pattern` – The regular expression pattern string or column clause.'
  id: totrans-3662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 正则表达式模式字符串或列子句。'
- en: '`pattern` – The replacement string or column clause.'
  id: totrans-3663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pattern` – 替换字符串或列子句。'
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  id: totrans-3664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flags` – 要应用的任何正则表达式字符串标志，仅作为普通 Python 字符串传递。这些标志是特定于后端的。某些后端，如 PostgreSQL
    和 MariaDB，可能会将标志作为模式的一部分指定。'
- en: New in version 1.4.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  id: totrans-3666
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.48 更改为：2.0.18 请注意，由于实现错误，以前的“flags”参数接受了 SQL 表达式对象，例如列表达式，而不仅仅是普通的 Python
    字符串。这种实现与缓存不兼容，并已删除；应该仅传递字符串作为“flags”参数，因为这些标志将作为 SQL 表达式中的文字内联值呈现。
- en: See also
  id: totrans-3667
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
- en: '[PRE862]'
  id: totrans-3669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE862]'
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3670
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *属性的*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-3671
  prefs: []
  type: TYPE_NORMAL
  zh: 被此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 引用的“remote”类属性。
- en: See also
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  id: totrans-3673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  id: totrans-3674
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
- en: '[PRE863]'
  id: totrans-3675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE863]'
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  id: totrans-3676
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *方法的* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
- en: Reverse operate on an argument.
  id: totrans-3677
  prefs: []
  type: TYPE_NORMAL
  zh: 对参数执行反向操作。
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate").
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate") 相同。
- en: '[PRE864]'
  id: totrans-3679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE864]'
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  id: totrans-3680
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *属性的* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") 代理了本地端的标量关系，则返回`True`。
- en: '[PRE865]'
  id: totrans-3682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE865]'
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3683
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *方法的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
- en: Implement the `startswith` operator.
  id: totrans-3684
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`startswith`操作符。
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  id: totrans-3685
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个LIKE表达式，用于测试字符串值的开头匹配：
- en: '[PRE866]'
  id: totrans-3686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE866]'
- en: 'E.g.:'
  id: totrans-3687
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE867]'
  id: totrans-3688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE867]'
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  id: totrans-3689
  prefs: []
  type: TYPE_NORMAL
  zh: 由于操作符使用`LIKE`，在<other>表达式中存在的通配符字符`"%"`和`"_"`也将像通配符一样起作用。对于字面字符串值，可以将[`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志设置为`True`，以将这些字符在字符串值中的出现转义，使它们作为自身而不是通配符字符进行匹配。或者，[`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")参数将建立给定字符作为转义字符，这在目标表达式不是字面字符串时可能会有用。
- en: 'Parameters:'
  id: totrans-3690
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  id: totrans-3691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`other` – 要进行比较的表达式。通常这是一个纯字符串值，但也可以是任意的SQL表达式。LIKE通配符字符`%`和`_`默认情况下不会被转义，除非设置了[`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")标志为True。'
- en: '`autoescape` –'
  id: totrans-3692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoescape` –'
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  id: totrans-3693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: boolean；当为True时，在LIKE表达式中建立转义字符，然后将其应用于比较值中的所有`"%"`、`"_"`和转义字符本身的出现，假定比较值是一个字面字符串而不是SQL表达式。
- en: 'An expression such as:'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE868]'
  id: totrans-3695
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE868]'
- en: 'Will render as:'
  id: totrans-3696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE869]'
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE869]'
- en: With the value of `:param` as `"foo/%bar"`.
  id: totrans-3698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其值为`:param`，为`"foo/%bar"`。
- en: '`escape` –'
  id: totrans-3699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`escape` –'
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  id: totrans-3700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字符，当给定时将使用`ESCAPE`关键字来将该字符设定为转义字符。然后可以将此字符放置在`%`和`_`的前面，以允许它们作为自身而不是通配符字符。
- en: 'An expression such as:'
  id: totrans-3701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 诸如：
- en: '[PRE870]'
  id: totrans-3702
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE870]'
- en: 'Will render as:'
  id: totrans-3703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将呈现为：
- en: '[PRE871]'
  id: totrans-3704
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE871]'
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  id: totrans-3705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该参数也可以与[`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith")结合使用：
- en: '[PRE872]'
  id: totrans-3706
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE872]'
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述情况下，给定的文字参数将在传递到数据库之前转换为`"foo^%bar^^bat"`。
- en: See also
  id: totrans-3708
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  id: totrans-3710
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
- en: '[PRE873]'
  id: totrans-3712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE873]'
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  id: totrans-3713
  prefs: []
  type: TYPE_NORMAL
  zh: 由此[`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")处理的中间类。
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  id: totrans-3714
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截附加/设置/赋值事件将导致生成此类的新实例。
- en: '[PRE874]'
  id: totrans-3715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE874]'
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  id: totrans-3716
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *属性的* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") 类'
- en: Hack, allows datetime objects to be compared on the LHS.
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: Hack，允许在左侧比较日期时间对象。
- en: '[PRE875]'
  id: totrans-3718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE875]'
- en: An enumeration.
  id: totrans-3719
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '**Members**'
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
- en: '**Class signature**'
  id: totrans-3722
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
- en: '[PRE876]'
  id: totrans-3724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE876]'
- en: Symbol indicating an [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") that’s of type [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个[`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr "sqlalchemy.orm.InspectionAttr")的符号，其类型为[`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: 被分配给[`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type")属性。
